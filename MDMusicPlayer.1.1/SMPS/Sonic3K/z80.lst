00000000                            ; +-------------------------------------------------------------------------+
00000000                            ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
00000000                            ; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
00000000                            ; |			 License info: B3-432E-F558-21			    |
00000000                            ; |				Ilfak Guilfanov				    |
00000000                            ; +-------------------------------------------------------------------------+
00000000                            ;
00000000                            ; Input	MD5   :	6AA009FE030B87A2227543EA36855B11
00000000                            ; Input	CRC32 :	A64B864D
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Format      :	Binary file
00000000                            ; Base Address:	0000h Range: 0000h - 1C00h Loaded length: 1C00h
00000000                            
00000000                            ; Processor	  : z80	[]
00000000                            ; Target assembler: Zilog Macro	Assembler
00000000                            
00000000                            ; ===========================================================================
00000000                            ; thanks to ValleyBell and LazloPsylus for helping to set up this correctly
00000000                            ; for both S&K and S3 drivers
00000000                            ; Segment type:	Pure code
00000000                            	include "..\..\code/LANG Z80.ASM"
00000000                            ; MADE BY NATSUMI 2017
00000000                            
00000000                            ; DEFINE HELPERS
00000000 =00000000                  z80prg =	0		; 0 IN 68K MODE, 1 IN Z80 MODE
00000000 =00000000                  ztemp =		0		; TEMPORARY REGISTER
00000000 =00000001                  zundoc =	1		; SET TO 0 TO USE UNDOCUMENTED OPCODES
00000000 =00000001                  zchkoffs =	1		; SET TO 0 TO NOT CHECK IX/IY AND JR OFFSETS
00000000                            z80regstr	EQUS "a b c d e h l bc de hl sp af ix iy i r ixh ixl iyh iyl (bc) (de) (hl) (sp) af' (ix) (iy)"
00000000                            
00000000                            ; EASILY MAKE SECTIONS
00000000                            z80prog	macro obj
00000000                            	if narg=0
00000000                            		OBJEND
00000000                            
00000000                            	; magic function that fixes all the jr and djnz opcodes, along with offsets.
00000000                            	; Used for detecting illegal forward jumps
00000000                            		local lastpos
00000000                            lastpos =	*
00000000                            			local off, byte
00000000                            		rept zfuturec
00000000                            			popp off
00000000                            			popp byte
00000000                            			org zfuturepos-zfutureobj+off
00000000                            			dc.b byte
00000000                            		endr
00000000                            
00000000                            		org lastpos
00000000                            
00000000                            		POPO		; restore options
00000000                            z80prg =	0
00000000                            		MEXIT		; exit macro here
00000000                            	endif
00000000                            
00000000                            	PUSHO			; push options
00000000                            	OPT AE-			; automatic evens off
00000000                            	OPT AN+			; allow use of 100H instead of $100
00000000                            	OPT M-			; do not print better macro info. Comment out for large text dump.
00000000                            	OPT D-			; make sure EQU/SET do not descope local lables
00000000                            
00000000                            zfutureobj =	\obj
00000000                            zfuturepos =	*
00000000                            zfuturec =	0
00000000                            
00000000                            	if narg=1
00000000                            		OBJ \obj
00000000                            z80prg =	1
00000000                            	else
00000000                            		inform 0,"Invalid num of args!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; CREATE A LITTLE-ENDIAN Z80 ABSOLUTE ADDRESS
00000000                            z80word	macro word
00000000                            	dc.b ((\word)&$FF), ((\word)>>8&$FF)
00000000                                endm
00000000                            
00000000                            ; SAVES THE RÃˆGISTER ID TO ZTEMP
00000000                            zgetreg	macro reg, err
00000000                            	if strlen("\reg")=0
00000000                            		inform \err,"The register must not be empty!"
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            ztemp = instr("\z80regstr", "\reg")
00000000                            
00000000                            	if (ztemp<>0)&(ztemp<55)
00000000                            ztemp =		(z\reg)
00000000                            
00000000                            	elseif ztemp=56
00000000                            ztemp =		zbcr
00000000                            
00000000                            	elseif ztemp=61
00000000                            ztemp =		zder
00000000                            
00000000                            	elseif ztemp=66
00000000                            ztemp =		zhlr
00000000                            
00000000                            	elseif ztemp=71
00000000                            ztemp =		zspr
00000000                            
00000000                            	elseif ztemp=76
00000000                            ztemp =		zaf2
00000000                            
00000000                            	elseif ztemp=79
00000000                            ztemp =		zixr
00000000                            
00000000                            	elseif ztemp=85
00000000                            ztemp =		ziyr
00000000                            
00000000                            	else
00000000                            
00000000                            		if instr("\reg", "(ix+")<>0|instr("\reg", "(ix-")<>0
00000000                            ztemp =		zixp
00000000                            
00000000                            		elseif instr("\reg", "(iy+")<>0|instr("\reg", "(iy-")<>0
00000000                            ztemp =		ziyp
00000000                            
00000000                            		else
00000000                            ztemp =			-1
00000000                            
00000000                            			local a, cc, p
00000000                            a =			0
00000000                            p =			1
00000000                            d =			0
00000000                            			while a=0
00000000                            				if p>strlen("\reg")
00000000                            ztemp =					-2
00000000                            a =					1
00000000                            
00000000                            				else
00000000                            cc					substr p,p,"\reg"
00000000                            					if '\cc'='('
00000000                            d =						d+1
00000000                            
00000000                            					elseif '\cc'=')'
00000000                            d =						d-1
00000000                            
00000000                            					elseif ('\cc'<>' ')&('\cc'<>'	')
00000000                            						if d<1
00000000                            a =							1
00000000                            						endif
00000000                            					endif
00000000                            				endif
00000000                            p =				p+1
00000000                            			endw
00000000                            		endif
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; PLACES THE SIGNED OFFSET INTO ROM, AND QUEUES A CHECK
00000000                            zindoff	macro reg, byte
00000000                            	local off
00000000                            off	substr 4, strlen("\reg")-1, "\reg"
00000000                            
00000000                            	if zchkoffs
00000000                            		dc.b -(off)-1, off
00000000                            		zfuture \byte
00000000                            
00000000                            	else
00000000                            		dc.b \byte, off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zjrfuture macro off, byte
00000000                            	if zchkoffs
00000000                            		dc.b -(off)-1, off
00000000                            		zfuture \byte
00000000                            
00000000                            	else
00000000                            		dc.b \byte, off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; QUEUES SIGNED VALUES TO BE FIXED
00000000                            zfuture	macro byte
00000000                            zfuturec =	zfuturec+1
00000000                            		local p,v
00000000                            p =		*-2
00000000                            v =		\byte
00000000                            		pushp "\#v"
00000000                            		pushp "\#p"
00000000                                endm
00000000                            
00000000                            ; Define equates for registers
00000000 =00000000                  zb = 	0
00000000 =00000001                  zc =	1
00000000 =00000002                  zd =	2
00000000 =00000003                  ze =	3
00000000 =00000004                  zh =	4
00000000 =00000005                  zl =	5
00000000 =00000007                  za =	7
00000000 =00000008                  zbc =	8
00000000 =00000009                  zde =	9
00000000 =0000000A                  zhl =	$A
00000000 =0000000B                  zsp =	$B
00000000 =00000018                  zbcr =	$18
00000000 =00000019                  zder =	$19
00000000 =0000001A                  zhlr =	$1A
00000000 =0000001B                  zspr =	$1B
00000000 =00000020                  zix =	$20
00000000 =00000021                  ziy =	$21
00000000 =00000022                  zixr =	$22
00000000 =00000023                  ziyr =	$23
00000000 =00000024                  zixp =	$24
00000000 =00000025                  ziyp =	$25
00000000 =00000028                  zixh =	$28
00000000 =00000029                  zixl =	$29
00000000 =0000002A                  ziyh =	$2A
00000000 =0000002B                  ziyl =	$2B
00000000 =00000030                  zaf =	$30
00000000 =00000031                  zaf2 =	$31
00000000 =00000038                  zi =	$38
00000000 =00000039                  zr =	$39
00000000                            
00000000                            
00000000                            ; Define instructions
00000000                            
00000000                            db	macro val
00000000                            	dc.b \_
00000000                                endm
00000000                            
00000000                            dsb	macro num, val
00000000                            	dcb.b \_
00000000                                endm
00000000                            
00000000                            dw	macro val
00000000                            	rept narg
00000000                            		dc.b ((\val)&$FF), ((\val)>>8&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            bw	macro val
00000000                            	rept narg
00000000                            		dc.b ((\val)>>8&$FF), ((\val)&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            dsw	macro num, val
00000000                            	rept \num
00000000                            		dc.b ((\val)&$FF), ((\val)>>8&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            bsw	macro num, val
00000000                            	rept \num
00000000                            		dc.b ((\val)>>8&$FF), ((\val)&$FF)
00000000                            		shift
00000000                            	endr
00000000                                endm
00000000                            
00000000                            rlc	macro reg, reg2
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $00+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $00+ztemp		; rlc a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $06			; rlc (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rlc (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $06
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rlc (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $06
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rrc	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $08+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $08+ztemp		; rrc a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $0E			; rrc (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rrc (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $0E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rrc (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $0E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rl	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $10+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $10+ztemp		; rl a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $16			; rl (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rl (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $16
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rl (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $16
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rr	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $18+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $18+ztemp		; rr a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $1E			; rr (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; rr (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $1E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; rr (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $1E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sla	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $20+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $20+ztemp		; sla a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $26			; sla (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sla (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $26
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sla (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $26
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sra	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $28+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $28+ztemp		; sra a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $2E			; sra (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sra (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $2E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sra (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $2E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sll	macro reg
00000000                            	if zundoc
00000000                            		inform 2,"Undocumented opcodes are not enabled."
00000000                            	endif
00000000                            
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $30+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $30+ztemp		; sll a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $36			; sll (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sll (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $36
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sll (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $36
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            srl	macro reg
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if narg=2
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if (ztemp=zixp)
00000000                            			dc.b $DD
00000000                            
00000000                            		elseif (ztemp=ziyp)
00000000                            			dc.b $FD
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            		zindoff \reg, $CD
00000000                            		zgetreg \reg2, 0
00000000                            
00000000                            		if (ztemp>=0)&(ztemp<=za)
00000000                            			dc.b $38+ztemp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg' and '\reg2'!"
00000000                            		endif
00000000                            		mexit
00000000                            	endif
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $38+ztemp		; sra a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $3E			; sra (hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sra (ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $3E
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sra (iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $3E
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            bit	macro bit, reg
00000000                            	if narg<>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\bit<0)|(\bit>7)
00000000                            		inform 2,"Invalid bit '\bit'!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $40+ztemp+(\bit*$08)	; bit 0-7,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $46+(\bit*$08)	; bit 0-7,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; bit 0-7,(ix+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $46+(\bit*$08)
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; bit 0-7,(iy+*)
00000000                            		zindoff \reg, $CB
00000000                            		dc.b $46+(\bit*$08)
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            res	macro bit, reg, reg2
00000000                            	if narg>3
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\bit<0)|(\bit>7)
00000000                            		inform 2,"Invalid bit '\bit'!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $80+ztemp+(\bit*$08)	; res 0-7,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $86+(\bit*$08)	; res 0-7,(hl)
00000000                            
00000000                            	elseif (ztemp=zixp)|(ztemp=ziyp)
00000000                            		dc.b $DD+((ztemp-zixp)*$20)	; res 0-7,(ix/iy+*),  , a, b, c, d, e, h, l
00000000                            		zindoff \reg, $CB
00000000                            
00000000                            		if narg=3
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			zgetreg \reg2, 0
00000000                            			if (ztemp<0)|(ztemp>za)
00000000                            				inform 2,"Invalid or unsupported register '\reg2'!"
00000000                            			endif
00000000                            		else
00000000                            ztemp =			6
00000000                            		endif
00000000                            
00000000                            		dc.b $80+(\bit*$08)+ztemp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zset	macro bit, reg
00000000                            	if narg>3
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if (\bit<0)|(\bit>7)
00000000                            		inform 2,"Invalid bit '\bit'!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if (ztemp>=0)&(ztemp<=za)
00000000                            		dc.b $CB, $C0+ztemp+(\bit*$08)	; set 0-7,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $CB, $C6+(\bit*$08)	; set 0-7,(hl)
00000000                            
00000000                            	elseif (ztemp=zixp)|(ztemp=ziyp)
00000000                            		dc.b $DD+((ztemp-zixp)*$20)	; set 0-7,(ix/iy+*),  , a, b, c, d, e, h, l
00000000                            		zindoff \reg, $CB
00000000                            
00000000                            		if narg=3
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			zgetreg \reg2, 0
00000000                            			if (ztemp<0)|(ztemp>za)
00000000                            				inform 2,"Invalid or unsupported register '\reg2'!"
00000000                            			endif
00000000                            		else
00000000                            ztemp =			6
00000000                            		endif
00000000                            
00000000                            		dc.b $C0+(\bit*$08)+ztemp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            im	macro im
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if "\im"="0/1"
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $ED, $4E		; im 0/1
00000000                            
00000000                            	elseif (\im<0)|(\im>2)
00000000                            		inform 2,"Interrupt mode must only be 0, 1 or 2!"
00000000                            
00000000                            	elseif \im=2
00000000                            		dc.b $ED, $5E		; im 2
00000000                            	else
00000000                            		dc.b $ED, $46+(\im*$10); im 0 or 1
00000000                            	endif
00000000                                endm
00000000                            
00000000                            rst	macro addr
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	if type(\addr)&1
00000000                            		if (\addr&7)=0
00000000                            			if \addr>$48|\addr<0
00000000                            				inform 2,"Invalid address! Must be at least 0 and at most $38!"
00000000                            			endif
00000000                            		else
00000000                            			inform 2,"Address must be aligned by $8!"
00000000                            		endif
00000000                            	endif
00000000                            		dc.b $C7+\addr	; RST *
00000000                                endm
00000000                            
00000000                            inc	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if ztemp<=za
00000000                            		dc.b $04+(ztemp*$08)		; inc a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $34			; inc (hl)
00000000                            
00000000                            	elseif (ztemp>=zbc)&(ztemp<=zsp)
00000000                            		dc.b $03+((ztemp-zbc)*$10)	; inc bc, de, hl or sp
00000000                            
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $23			; inc ix
00000000                            
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $23			; inc iy
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; inc ix+
00000000                            		zindoff \reg, $34
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; inc iy+
00000000                            		zindoff \reg, $34
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $24+((ztemp&$01)*$08); inc ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            dec	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if ztemp<=za
00000000                            		dc.b $05+(ztemp*$08)		; dec a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $35			; dec (hl)
00000000                            
00000000                            	elseif (ztemp>=zbc)&(ztemp<=zsp)
00000000                            		dc.b $0B+((ztemp-zbc)*$10)	; dec bc, de, hl or sp
00000000                            
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $2B			; dec ix
00000000                            
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $2B			; dec iy
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; dec ix+
00000000                            		zindoff \reg, $35
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; dec iy+
00000000                            		zindoff \reg, $35
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $FD+((ztemp&$02)*$10), $24+((ztemp&$01)*$08); dec ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zsub	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $D6			; sub a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $90+ztemp			; sub a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $96			; sub a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; sub a,(ix+*)
00000000                            		zindoff \reg, $96
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; sub a,(iy+*)
00000000                            		zindoff \reg, $96
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $94+(ztemp&$01); sub a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zand	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $E6			; and a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $A0+ztemp			; and a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $A6			; and a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; and a,(ix+*)
00000000                            		zindoff \reg, $A6
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; and a,(iy+*)
00000000                            		zindoff \reg, $A6
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $A4+(ztemp&$01); and a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zor	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $F6			; or a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $B0+ztemp			; or a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $B6			; or a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; or a,(ix+*)
00000000                            		zindoff \reg, $B6
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; or a,(iy+*)
00000000                            		zindoff \reg, $B6
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $B4+(ztemp&$01); or a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            xor	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $EE			; xor a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $A8+ztemp			; xor a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $B6			; xor a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; xor a,(ix+*)
00000000                            		zindoff \reg, $AE
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; xor a,(iy+*)
00000000                            		zindoff \reg, $AE
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $AC+(ztemp&$01); xor a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            cp	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if ztemp=-1
00000000                            		dc.b $FE			; cp a,*
00000000                            		dc.b \reg
00000000                            
00000000                            	elseif ztemp<=za
00000000                            		dc.b $B8+ztemp			; cp a,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif ztemp=zhlr
00000000                            		dc.b $BE			; cp a,(hl)
00000000                            
00000000                            	elseif ztemp=zixp
00000000                            		dc.b $DD			; cp a,(ix+*)
00000000                            		zindoff \reg, $BE
00000000                            
00000000                            	elseif ztemp=ziyp
00000000                            		dc.b $FD			; cp a,(iy+*)
00000000                            		zindoff \reg, $BE
00000000                            
00000000                            	elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((ztemp&$02)*$10), $BC+(ztemp&$01); cp a,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            zadd	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            ztemp1 =	ztemp
00000000                            
00000000                            	if narg>1
00000000                            		zgetreg \reg2, 0
00000000                            	endif
00000000                            
00000000                            	if ((narg=1)&((ztemp<=za)|(ztemp=zhlr)|(ztemp=zixp)|(ztemp=ziyp)))|(ztemp1=za)|(ztemp1=zixp)|(ztemp1=ziyp); this complex piece of shit just checks if we omitted the a param
00000000                            		if (ztemp1=zixp)|(ztemp=zixp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DD		; add a,(ix+*)
00000000                            			zindoff \reg1, $86
00000000                            
00000000                            		elseif (ztemp1=ziyp)|(ztemp=ziyp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $FD		; add a,(iy+*)
00000000                            			zindoff \reg1, $86
00000000                            
00000000                            		elseif ztemp=zhlr
00000000                            			dc.b $86		; add a,(hl)
00000000                            
00000000                            		elseif ztemp=-1
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $C6		; add a,*
00000000                            			dc.b \reg1
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $80+ztemp		; add a,a, b, c, d, e, h or l
00000000                            
00000000                            		elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((ztemp&$02)*$10), $84+(ztemp&$01); add a,ixh, ixl, iyh, iyl
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: a, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ((narg=1)&(ztemp>=zbc)&(ztemp<=zsp))|(ztemp1=zhl)	; this piece of shit just checks if we omitted the hl param
00000000                            		dc.b $09+((ztemp-zbc)*$10)	; add hl,bc, de, hl or sp
00000000                            
00000000                            	elseif ztemp1=zix
00000000                            		dc.b $DD
00000000                            
00000000                            		if ztemp=zbc
00000000                            			dc.b $09		; add ix,bc
00000000                            
00000000                            		elseif ztemp=zde
00000000                            			dc.b $19		; add ix,de
00000000                            
00000000                            		elseif ztemp=zix
00000000                            			dc.b $29		; add ix,ix
00000000                            
00000000                            		elseif ztemp=zsp
00000000                            			dc.b $39		; add ix,sp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: ix, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ztemp1=ziy
00000000                            		dc.b $FD
00000000                            
00000000                            		if ztemp=zbc
00000000                            			dc.b $09		; add iy,bc
00000000                            
00000000                            		elseif ztemp=zde
00000000                            			dc.b $19		; add iy,de
00000000                            
00000000                            		elseif ztemp=ziy
00000000                            			dc.b $29		; add iy,iy
00000000                            
00000000                            		elseif ztemp=zsp
00000000                            			dc.b $39		; add iy,sp
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: iy, \reg2!"
00000000                            		endif
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg1'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            adc	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            ztemp1 =	ztemp
00000000                            
00000000                            	if narg>1
00000000                            		zgetreg \reg2, 0
00000000                            	endif
00000000                            
00000000                            	if ((narg=1)&((ztemp<=za)|(ztemp=zhlr)|(ztemp=zixp)|(ztemp=ziyp)))|(ztemp1=za)|(ztemp1=zixp)|(ztemp1=ziyp); this complex piece of shit just checks if we omitted the a param
00000000                            		if (ztemp1=zixp)|(ztemp=zixp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DD		; adc a,(ix+*)
00000000                            			zindoff \reg1, $8E
00000000                            
00000000                            		elseif (ztemp1=ziyp)|(ztemp=ziyp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $FD		; adc a,(iy+*)
00000000                            			zindoff \reg1, $8E
00000000                            
00000000                            		elseif ztemp=zhlr
00000000                            			dc.b $8E		; adc a,(hl)
00000000                            
00000000                            		elseif ztemp=-1
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $CE		; adc a,*
00000000                            			dc.b \reg1
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $88+ztemp		; adc a,a, b, c, d, e, h or l
00000000                            
00000000                            		elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((ztemp&$02)*$10), $8C+(ztemp&$01); adc a,ixh, ixl, iyh, iyl
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: a, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ((narg=1)&(ztemp>=zbc)&(ztemp<=zsp))|(ztemp1=zhl)	; this piece of shit just checks if we omitted the hl param
00000000                            		dc.b $ED, $4A+((ztemp-zbc)*$10)	; adc hl,bc, de, hl or sp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg1'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            sbc	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            ztemp1 =	ztemp
00000000                            
00000000                            	if narg>1
00000000                            		zgetreg \reg2, 0
00000000                            	endif
00000000                            
00000000                            	if ((narg=1)&((ztemp<=za)|(ztemp=zhlr)|(ztemp=zixp)|(ztemp=ziyp)))|(ztemp1=za)|(ztemp1=zixp)|(ztemp1=ziyp); this complex piece of shit just checks if we omitted the a param
00000000                            		if (ztemp1=zixp)|(ztemp=zixp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DD		; sbc a,(ix+*)
00000000                            			zindoff \reg1, $9E
00000000                            
00000000                            		elseif (ztemp1=ziyp)|(ztemp=ziyp)
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $FD		; sbc a,(iy+*)
00000000                            			zindoff \reg1, $9E
00000000                            
00000000                            		elseif ztemp=zhlr
00000000                            			dc.b $9E		; sbc a,(hl)
00000000                            
00000000                            		elseif ztemp=-1
00000000                            			if ztemp1=za
00000000                            				shift
00000000                            			endif
00000000                            
00000000                            			dc.b $DE		; sbc a,*
00000000                            			dc.b \reg1
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $98+ztemp		; sbc a,a, b, c, d, e, h or l
00000000                            
00000000                            		elseif (ztemp>=zixh)&(ztemp<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((ztemp&$02)*$10), $9C+(ztemp&$01); sbc a,ixh, ixl, iyh, iyl
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination: a, \reg2!"
00000000                            		endif
00000000                            
00000000                            	elseif ((narg=1)&(ztemp>=zbc)&(ztemp<=zsp))|(ztemp1=zhl)	; this piece of shit just checks if we omitted the hl param
00000000                            		dc.b $ED, $42+((ztemp-zbc)*$10)	; sbc hl,bc, de, hl or sp
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg1'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            pop	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if (ztemp>=zbc)&(ztemp<=zhl)
00000000                            		dc.b $C1+((ztemp-zbc)*$10); pop bc, de or hl
00000000                            
00000000                            	elseif ztemp=zaf
00000000                            		dc.b $F1		; pop af
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $E1		; pop ix
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $E1		; pop iy
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            push	macro reg
00000000                            	if narg<>1
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 2
00000000                            
00000000                            	if (ztemp>=zbc)&(ztemp<=zhl)
00000000                            		dc.b $C5+((ztemp-zbc)*$10); pop bc, de or hl
00000000                            
00000000                            	elseif ztemp=zaf
00000000                            		dc.b $F5		; pop af
00000000                            	elseif ztemp=zix
00000000                            		dc.b $DD, $E5		; pop ix
00000000                            	elseif ztemp=ziy
00000000                            		dc.b $FD, $E5		; pop iy
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register '\reg'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ex	macro reg1, reg2
00000000                            	if narg<>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            zreg1 =	ztemp
00000000                            	zgetreg \reg2, 0
00000000                            
00000000                            	if ((zreg1=zaf)|(zreg1=zaf2))&((ztemp=zaf)|(ztemp=zaf2))
00000000                            		dc.b $08			; ex af,af' & ex af',af & ex af,af
00000000                            
00000000                            	elseif ((zreg1=zde)|(zreg1=zhl))&((ztemp=zde)|(ztemp=zhl))
00000000                            		dc.b $EB			; ex de,hl & ex hl,de
00000000                            
00000000                            	elseif ((zreg1=zspr)|(zreg1=zhl))&((ztemp=zspr)|(ztemp=zhl))
00000000                            		dc.b $E3			; ex (sp),hl & ex hl,(sp)
00000000                            
00000000                            	elseif ((zreg1=zix)|(zreg1=zspr))&((ztemp=zix)|(ztemp=zspr))
00000000                            		dc.b $DD,$E3			; ex (sp),ix & ex ix,(sp)
00000000                            
00000000                            	elseif ((zreg1=ziy)|(zreg1=zspr))&((ztemp=ziy)|(ztemp=zspr))
00000000                            		dc.b $FD,$E3			; ex (sp),iy & ex iy,(sp)
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            out	macro port, reg
00000000                            	if narg<>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if instr("\port", "(c)")<>0
00000000                            		if (ztemp=-1)&(instr("\port", "0")<>0)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $ED, $71		; out (c),0
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $ED, $41+(ztemp*$08)		; out (c),a, b, c, d, e, h or l
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register '\reg'!"
00000000                            		endif
00000000                            
00000000                            	elseif ztemp=za
00000000                            		dc.b $D3, \port		; out (*),a
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported port '\port'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            in	macro reg, port
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg, 0
00000000                            
00000000                            	if instr("\port", "(c)")<>0
00000000                            		if narg=1
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $ED, $70		; in (c)
00000000                            
00000000                            		elseif ztemp<=za
00000000                            			dc.b $ED, $40+(ztemp*$08)		; in a, b, c, d, e, h or l,(c)
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register '\reg'!"
00000000                            		endif
00000000                            
00000000                            	elseif ztemp=za
00000000                            		dc.b $D3, \port		; in a,(*)
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported port '\port'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ld	macro reg1, reg2
00000000                            	if narg>2
00000000                            		inform 2,"Incorrect number of arguments!"
00000000                            	endif
00000000                            
00000000                            	zgetreg \reg1, 0
00000000                            zreg1 =	ztemp
00000000                            	zgetreg \reg2, 0
00000000                            zreg2 =	ztemp
00000000                            
00000000                            	if zreg1=-2
00000000                            		if zreg2=za
00000000                            			dc.b $32			; ld (**),a
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif zreg2=zhl
00000000                            			dc.b $22			; ld (**),hl
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif (zreg2>=zbc)&(zreg2<=zsp)
00000000                            			dc.b $ED, $43+((zreg2-zbc)*$10)	; ld (**),bc, de, sp
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif zreg2=zix
00000000                            			dc.b $DD, $22			; ld (**),ix
00000000                            			z80word \reg1
00000000                            
00000000                            		elseif zreg2=ziy
00000000                            			dc.b $FD, $22			; ld (**),iy
00000000                            			z80word \reg1
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            	elseif zreg2=-1
00000000                            		if (zreg1<=za)
00000000                            			dc.b $06+(zreg1*$08), \reg2	; ld a, b, c, d, e, h or l,*
00000000                            
00000000                            		elseif zreg1=zhlr
00000000                            			dc.b $36, \reg2			; ld (hl),*
00000000                            
00000000                            		elseif (zreg1>=zbc)&(zreg1<=zsp)
00000000                            			dc.b $01+((zreg1-zbc)*$10)	; ld bc, de, hl, sp,**
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zix
00000000                            			dc.b $DD, $21			; ld ix,**
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=ziy
00000000                            			dc.b $FD, $21			; ld iy,**
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zixp
00000000                            			dc.b $DD			; ld (ix+*),*
00000000                            			zindoff \reg1, $36
00000000                            			dc.b \reg2
00000000                            
00000000                            		elseif zreg1=ziyp
00000000                            			dc.b $FD			; ld (iy+*),*
00000000                            			zindoff \reg1, $36
00000000                            			dc.b \reg2
00000000                            
00000000                            		elseif (zreg1>=zixh)&(zreg1<=ziyl)
00000000                            			if zundoc
00000000                            				inform 2,"Undocumented opcodes are not enabled."
00000000                            			endif
00000000                            
00000000                            			dc.b $DD+((zreg1&$02)*$10), $26+((zreg1&$01)*$08), \reg2; ld ixh, ixl, iyh, iyl,*
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            	elseif zreg2=-2
00000000                            		if (zreg1=za)
00000000                            			dc.b $3A			; ld a,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zhl
00000000                            			dc.b $2A			; ld hl,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif (zreg1>=zbc)&(zreg1<=zsp)
00000000                            			dc.b $ED, $4B+((zreg1-zbc)*$10)	; ld bc, de, hl, sp,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=zix
00000000                            			dc.b $DD, $2A			; ld ix,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		elseif zreg1=ziy
00000000                            			dc.b $FD, $2A			; ld iy,(**)
00000000                            			z80word \reg2
00000000                            
00000000                            		else
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            		endif
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2<=za)
00000000                            		dc.b $40+(zreg1*$08)+zreg2		; ld a, b, c, d, e, h or l,a, b, c, d, e, h or l
00000000                            
00000000                            	elseif (zreg1=za)&(zreg2=zbcr)
00000000                            		dc.b $0A				; ld a,(bc)
00000000                            
00000000                            	elseif (zreg1=za)&(zreg2=zder)
00000000                            		dc.b $1A				; ld a,(de)
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2=zhlr)
00000000                            		dc.b $46+(zreg1*$08)			; ld a, b, c, d, e, h or l,(hl)
00000000                            
00000000                            	elseif (zreg1=zhlr)&(zreg2<=za)
00000000                            		dc.b $70+zreg2				; ld (hl),a, b, c, d, e, h or l
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2=zixp)
00000000                            		dc.b $DD				; ld a, b, c, d, e, h or l,(ix+*)
00000000                            		zindoff \reg2, $46+(zreg1*$08)
00000000                            
00000000                            	elseif (zreg1<=za)&(zreg2=ziyp)
00000000                            		dc.b $FD				; ld a, b, c, d, e, h or l,(iy+*)
00000000                            		zindoff \reg2, $46+(zreg1*$08)
00000000                            
00000000                            	elseif (zreg2<=za)&(zreg1=zixp)
00000000                            		dc.b $DD				; ld (ix+*),a, b, c, d, e, h or l
00000000                            		zindoff \reg1, $70+zreg2
00000000                            
00000000                            	elseif (zreg2<=za)&(zreg1=ziyp)
00000000                            		dc.b $FD				; ld (iy+*),a, b, c, d, e, h or l
00000000                            		zindoff \reg1, $70+zreg2
00000000                            
00000000                            	elseif (zreg1=zbcr)&(zreg2=za)
00000000                            		dc.b $02				; ld (bc),a
00000000                            
00000000                            	elseif (zreg1=zder)&(zreg2=za)
00000000                            		dc.b $12				; ld (de),a
00000000                            
00000000                            	elseif (zreg1=zsp)&(zreg2=zhl)
00000000                            		dc.b $F9				; ld sp,hl
00000000                            
00000000                            	elseif (zreg1=zi)&(zreg2=za)
00000000                            		dc.b $ED, $47				; ld i,a
00000000                            
00000000                            	elseif (zreg2=zi)&(zreg1=za)
00000000                            		dc.b $ED, $57				; ld a,i
00000000                            
00000000                            	elseif (zreg1=zr)&(zreg2=za)
00000000                            		dc.b $ED, $4F				; ld r,a
00000000                            
00000000                            	elseif (zreg2=zr)&(zreg1=za)
00000000                            		dc.b $ED, $5F				; ld a,r
00000000                            
00000000                            	elseif (zreg1=zsp)&(zreg2=zix)
00000000                            		dc.b $DD, $F9				; ld sp, ix
00000000                            
00000000                            	elseif (zreg1=zsp)&(zreg2=ziy)
00000000                            		dc.b $FD, $F9				; ld sp, iy
00000000                            
00000000                            	elseif (zreg1>=zixh)&(zreg1<=ziyl)&((zreg2<=za)&(zreg2<>zh)&(zreg2<>zl))
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((zreg1&$02)*$10), $60+((zreg1&$01)*$08)+zreg2; ld ixh, ixl, iyh, iyl,a, b, c, d, e
00000000                            
00000000                            	elseif (zreg2>=zixh)&(zreg2>=ziyl)&((zreg1<=za)&(zreg1<>zh)&(zreg1<>zl))
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((zreg2&$02)*$10), $44+(zreg2&$01)+(zreg1*$08); ld a, b, c, d, e,ixh, ixl, iyh, iyl
00000000                            
00000000                            	elseif (zreg1>=zixh)&(zreg1<=ziyl)&(zreg2>=zixh)&(zreg2>=ziyl)
00000000                            		if zundoc
00000000                            			inform 2,"Undocumented opcodes are not enabled."
00000000                            		endif
00000000                            
00000000                            		if ((zreg1&$02)<>(zreg2&$02))
00000000                            			inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            			mexit
00000000                            		endif
00000000                            
00000000                            		dc.b $DD+((zreg1&$02)*$10), $60+((zreg1&$01)*$08)+(zreg2&$01); ld ixh, ixl, iyh, iyl,ixh, ixl, iyh, iyl
00000000                            
00000000                            	else
00000000                            		inform 2,"Invalid or unsupported register combination '\reg1' and '\reg2'!"
00000000                            	endif
00000000                                endm
00000000                            
00000000                            djnz	macro addr
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \addr-*-2, $10
00000000                                endm
00000000                            
00000000                            jr	macro cond, off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	if narg=1
00000000                            		zjrfuture \cond-*-2, $18
00000000                            	else
00000000                            		jr\cond \off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            jrnz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $20
00000000                                endm
00000000                            
00000000                            jrnc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $30
00000000                                endm
00000000                            
00000000                            jrz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $28
00000000                                endm
00000000                            
00000000                            jrc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	zjrfuture \off-*-2, $38
00000000                                endm
00000000                            
00000000                            jp	macro cond, off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	if narg=1
00000000                            		zgetreg \cond, 0
00000000                            
00000000                            		if ztemp=zhlr
00000000                            			dc.b $E9		; jp (hl)
00000000                            
00000000                            		elseif ztemp=zixr
00000000                            			dc.b $DD, $E9		; jp (ix)
00000000                            
00000000                            		elseif ztemp=ziyr
00000000                            			dc.b $FD, $E9		; jp (iy)
00000000                            
00000000                            		else
00000000                            			dc.b $C3		; jp **
00000000                            			z80word \cond
00000000                            		endif
00000000                            	else
00000000                            		jp\cond \off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            jpnz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $C2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpnc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $D2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $CA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpc	macro off
00000000                            	dc.b $DA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jppo	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $E2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpp	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $F2
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jppe	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $EA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            jpm	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $FA
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            call	macro cond, off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	if narg=1
00000000                            		dc.b $CD
00000000                            		z80word \cond
00000000                            	else
00000000                            		call\cond \off
00000000                            	endif
00000000                                endm
00000000                            
00000000                            callnz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $C4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callz	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $CC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callnc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $D4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callc	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $DC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callpo	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $E4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callpe	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $EC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callp	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $F4
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            callm	macro off
00000000                            	if narg=0
00000000                            		inform 2,"No jump address supplied!"
00000000                            	endif
00000000                            
00000000                            	dc.b $FC
00000000                            	z80word \off
00000000                                endm
00000000                            
00000000                            ret	macro cond
00000000                            	if narg=0
00000000                            		dc.b $C9
00000000                            	else
00000000                            		ret\cond
00000000                            	endif
00000000                                endm
00000000                            
00000000                            retnz	macro
00000000                            	dc.b $C0
00000000                                endm
00000000                            
00000000                            retz	macro
00000000                            	dc.b $C8
00000000                                endm
00000000                            
00000000                            retnc	macro
00000000                            	dc.b $D0
00000000                                endm
00000000                            
00000000                            retc	macro
00000000                            	dc.b $D8
00000000                                endm
00000000                            
00000000                            retpo	macro
00000000                            	dc.b $E0
00000000                                endm
00000000                            
00000000                            retpe	macro
00000000                            	dc.b $E8
00000000                                endm
00000000                            
00000000                            retp	macro
00000000                            	dc.b $F0
00000000                                endm
00000000                            
00000000                            retm	macro
00000000                            	dc.b $F8
00000000                                endm
00000000                            
00000000                            di	macro
00000000                            	if z80prg=0
00000000                            		move	#$2700,sr	; THIS IS HERE, IF YOU WANNA USE DI IN 68K CODE ;)
00000000                            	else
00000000                            		dc.b $F3
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ei	macro
00000000                            	if z80prg=0
00000000                            		move	#$2300,sr	; THIS IS HERE, IF YOU WANNA USE EI IN 68K CODE ;)
00000000                            	else
00000000                            		dc.b $FB
00000000                            	endif
00000000                                endm
00000000                            
00000000                            halt	macro
00000000                            	if z80prg=0
00000000                            		stop	#$2700		; THIS IS HERE, IF YOU WANNA USE HALT IN 68K CODE ;)
00000000                            	else
00000000                            		dc.b $76
00000000                            	endif
00000000                                endm
00000000                            
00000000                            znop	macro
00000000                            	dc.b $00
00000000                                endm
00000000                            
00000000                            rlca	macro
00000000                            	dc.b $07
00000000                                endm
00000000                            
00000000                            rla	macro
00000000                            	dc.b $17
00000000                                endm
00000000                            
00000000                            daa	macro
00000000                            	dc.b $27
00000000                                endm
00000000                            
00000000                            scf	macro
00000000                            	dc.b $37
00000000                                endm
00000000                            
00000000                            rrca	macro
00000000                            	dc.b $0F
00000000                                endm
00000000                            
00000000                            rra	macro
00000000                            	dc.b $1F
00000000                                endm
00000000                            
00000000                            cpl	macro
00000000                            	dc.b $2F
00000000                                endm
00000000                            
00000000                            ccf	macro
00000000                            	dc.b $3F
00000000                                endm
00000000                            
00000000                            exx	macro
00000000                            	dc.b $D9
00000000                                endm
00000000                            
00000000                            zneg	macro
00000000                            	dc.b $ED, $44
00000000                                endm
00000000                            
00000000                            retn	macro
00000000                            	dc.b $ED, $45
00000000                                endm
00000000                            
00000000                            reti	macro
00000000                            	dc.b $ED, $4D
00000000                                endm
00000000                            
00000000                            rrd	macro
00000000                            	dc.b $ED, $67
00000000                                endm
00000000                            
00000000                            rld	macro
00000000                            	dc.b $ED, $6F
00000000                                endm
00000000                            
00000000                            ldi	macro
00000000                            	dc.b $ED, $A0
00000000                                endm
00000000                            
00000000                            cpi	macro
00000000                            	dc.b $ED, $A1
00000000                                endm
00000000                            
00000000                            ini	macro
00000000                            	dc.b $ED, $A2
00000000                                endm
00000000                            
00000000                            outi	macro
00000000                            	dc.b $ED, $A3
00000000                                endm
00000000                            
00000000                            ldd	macro
00000000                            	dc.b $ED, $A8
00000000                                endm
00000000                            
00000000                            cpd	macro
00000000                            	dc.b $ED, $A9
00000000                                endm
00000000                            
00000000                            ind	macro
00000000                            	dc.b $ED, $AA
00000000                                endm
00000000                            
00000000                            outd	macro
00000000                            	dc.b $ED, $AB
00000000                                endm
00000000                            
00000000                            ldir	macro
00000000                            	dc.b $ED, $B0
00000000                                endm
00000000                            
00000000                            cpir	macro
00000000                            	dc.b $ED, $B1
00000000                                endm
00000000                            
00000000                            inir	macro
00000000                            	dc.b $ED, $B2
00000000                                endm
00000000                            
00000000                            otir	macro
00000000                            	dc.b $ED, $B3
00000000                                endm
00000000                            
00000000                            lddr	macro
00000000                            	dc.b $ED, $B8
00000000                                endm
00000000                            
00000000                            cpdr	macro
00000000                            	dc.b $ED, $B9
00000000                                endm
00000000                            
00000000                            indr	macro
00000000                            	dc.b $ED, $BA
00000000                                endm
00000000                            
00000000                            otdr	macro
00000000                            	dc.b $ED, $BB
00000000                                endm
00000000                                endm
00000000                            
00000000                            	org 0
00000000 =00000001                  DefaultMusicBank = 1h
00000000 =00000001                  SoundBank = 1h
00000000 =00000002                  SegaPCMBank = 2h
00000000 =00000000                  SegaPCMPtr = 0h
00000000                            
00000000                            EntryPoint:
00000007                            ; ---------------------------------------------------------------------------
00000007 F2                         		db 0F2h
00000008                            
00000008                            ; =============== S U B	R O U T	I N E =======================================
00000008                            
00000008                            
00000008                            sub_8:					; CODE XREF: sub_36D+9p sub_3C9+55p ...
00000015                            ; End of function sub_8
00000015                            
00000015                            ; ---------------------------------------------------------------------------
00000015 0000                       off_15:		dw off_1300		; DATA XREF: sub_8r
00000017 00                         		db 0
00000018                            
00000018                            ; =============== S U B	R O U T	I N E =======================================
00000018                            
00000018                            
00000018                            sub_18:					; CODE XREF: sub_277+36p sub_277+52p ...
0000001D 00                         		znop
0000001E                            
0000001E                            loc_1E:
0000001E 00                         		znop
0000001F 00                         		znop
00000020                            
00000020                            loc_20:					; CODE XREF: sub_4FB+11Cp sub_4FB+214p ...
00000024                            
00000024                            locret_24:				; DATA XREF: sub_39E+15o
00000025                            ; End of function sub_18
00000025                            
00000025                            ; ---------------------------------------------------------------------------
00000025 0000 0000 0000 0000 0000+  byte_25:	dsb 13h, 0
00000038                            ; ---------------------------------------------------------------------------
00000038                            
00000038                            VInt:
0000003C D9                         		exx
0000003D                            
0000003D                            loc_3D:					; CODE XREF: ROM:0056j
00000059                            ; ---------------------------------------------------------------------------
00000059                            
00000059                            loc_59:					; CODE XREF: ROM:004Fj
0000005D                            
0000005D                            loc_5D:					; CODE XREF: ROM:0049j
0000006E 0F                         		rrca
00000070 0F                         		rrca
00000072 0F                         		rrca
00000074 0F                         		rrca
00000076 0F                         		rrca
00000078 0F                         		rrca
0000007A 0F                         		rrca
0000007E D9                         		exx
00000085                            ; ---------------------------------------------------------------------------
00000085                            
00000085                            loc_85:					; CODE XREF: ROM:0004j
0000008A                            
0000008A                            loc_8A:					; CODE XREF: ROM:008Fj
0000008C                            
0000008C                            loc_8C:					; CODE XREF: ROM:loc_8Cj
000000A3                            
000000A3                            loc_A3:
000000AF                            
000000AF                            ; =============== S U B	R O U T	I N E =======================================
000000AF                            
000000AF                            
000000AF                            sub_AF:					; CODE XREF: sub_22B+Fp sub_22B+15p ...
000000AF                            
000000AF                            ; FUNCTION CHUNK AT 00CB SIZE 00000002 BYTES
000000AF                            
000000C2                            ; End of function sub_AF
000000C2                            
000000C2                            
000000C2                            ; =============== S U B	R O U T	I N E =======================================
000000C2                            
000000C2                            
000000C2                            sub_C2:					; CODE XREF: sub_22B+38p sub_22B+3Fp ...
000000C5 00                         		znop
000000CB                            ; End of function sub_C2
000000CB                            
000000CB                            ; ---------------------------------------------------------------------------
000000CB                            ; START	OF FUNCTION CHUNK FOR sub_AF
000000CB                            
000000CB                            loc_CB:					; CODE XREF: sub_AF+11j
000000CD                            ; END OF FUNCTION CHUNK	FOR sub_AF
000000CD                            
000000CD                            ; =============== S U B	R O U T	I N E =======================================
000000CD                            
000000CD                            
000000CD                            sub_CD:					; CODE XREF: sub_7FF+1A6p
000000D0 00                         		znop
000000D6                            ; End of function sub_CD
000000D6                            
000000D6                            ; ---------------------------------------------------------------------------
000000D6 0202 0202 0202 0202 0202+  DACbanks:	dsb 1Ch, 2h		; S&K samples	; Natsumi: Changed to bank on SRAM
000000F2 0303 0303 0303 0303 0303+  		dsb 0Fh, 3h		; S3 samples
00000101 0404 0404 0404 04          		dsb 07h, 4h		; S3 samples
00000108 0202                       		db 2h, 2h		; S&K samples
0000010A 0404 0404 0404 0404 0404+  		dsb 11h, 4h		; S3 samples
0000011B                            ; =============== S U B	R O U T	I N E =======================================
0000011B                            
0000011B                            
0000011B                            sub_11B:				; CODE XREF: ROM:0042p
00000121                            
00000121                            loc_121:				; CODE XREF: sub_19E+43j
0000013C                            
0000013C                            loc_13C:				; CODE XREF: sub_11B+1Bj
00000140                            
00000140                            loc_140:				; CODE XREF: sub_11B+1Fj
00000149                            ; ---------------------------------------------------------------------------
00000149                            
00000149                            loc_149:				; CODE XREF: sub_11B+14j
00000168                            
00000168                            loc_168:				; CODE XREF: sub_11B+2Cj sub_11B+33j ...
0000016F 1F                         		rra
00000171 1F                         		rra
00000173 1F                         		rra
00000175 1F                         		rra
00000177 1F                         		rra
00000179 1F                         		rra
0000017B 1F                         		rra
0000019E                            ; End of function sub_11B
0000019E                            
0000019E                            
0000019E                            ; =============== S U B	R O U T	I N E =======================================
0000019E                            
0000019E                            
0000019E                            sub_19E:				; CODE XREF: sub_11B+3p
000001A9 1F                         		rra
000001AB 1F                         		rra
000001AD 1F                         		rra
000001AF 1F                         		rra
000001B1 1F                         		rra
000001B3 1F                         		rra
000001B5 1F                         		rra
000001BF                            
000001BF                            loc_1BF:				; CODE XREF: sub_11B+81j sub_19E+2Fj
000001E4                            ; ---------------------------------------------------------------------------
000001E4                            
000001E4                            loc_1E4:				; CODE XREF: sub_19E+3Aj
000001E9                            ; End of function sub_19E
000001E9                            
000001E9                            
000001E9                            ; =============== S U B	R O U T	I N E =======================================
000001E9                            
000001E9                            
000001E9                            sub_1E9:				; CODE XREF: sub_19E+26p
000001E9                            
000001E9                            ; FUNCTION CHUNK AT 0342 SIZE 00000019 BYTES
000001E9                            ; FUNCTION CHUNK AT 0FC4 SIZE 00000073 BYTES
000001E9                            
0000020C                            ; ---------------------------------------------------------------------------
0000020C                            
0000020C                            loc_20C:				; CODE XREF: sub_1E9+Aj
00000220                            
00000220                            loc_220:				; CODE XREF: sub_1E9+2Fj
0000022B                            ; End of function sub_1E9
0000022B                            
0000022B                            
0000022B                            ; =============== S U B	R O U T	I N E =======================================
0000022B                            
0000022B                            
0000022B                            sub_22B:				; CODE XREF: sub_1E9+1Dp
00000237                            
00000237                            loc_237:				; CODE XREF: sub_22B+1Ej
00000244                            ; ---------------------------------------------------------------------------
00000244                            
00000244                            loc_244:				; CODE XREF: sub_22B+9j
00000250                            
00000250                            loc_250:				; CODE XREF: sub_22B+44j
00000272                            ; End of function sub_22B
00000272                            
00000272                            ; ---------------------------------------------------------------------------
00000272 ADAE ACA6                  byte_272:	db 0ADh, 0AEh, 0ACh, 0A6h ; DATA XREF: sub_22B+22o
00000276                            
00000276                            ; ---------------------------------------------------------------------------
00000276                            nullsub_1:                              ; CODE XREF: ROM:0EF4p
00000277                            
00000277                            ; =============== S U B	R O U T	I N E =======================================
00000277                            
00000277                            
00000277                            sub_277:				; CODE XREF: sub_1E9+Cp sub_1E9+DE0p
00000285                            
00000285                            loc_285:				; CODE XREF: ROM:0BFAj
000002A6                            ; ---------------------------------------------------------------------------
000002A6                            
000002A6                            loc_2A6:				; CODE XREF: sub_277+27j
000002BC                            
000002BC                            loc_2BC:				; CODE XREF: sub_277+4Bj
000002C4                            ; ---------------------------------------------------------------------------
000002C5                            
000002C5                            loc_2C5:				; CODE XREF: sub_277+47j
000002CE                            
000002CE                            loc_2CE:				; CODE XREF: sub_277+3Cj
000002D4                            
000002D4                            loc_2D4:				; CODE XREF: sub_277+2Dj
000002E1                            ; ---------------------------------------------------------------------------
000002E8                            ; ---------------------------------------------------------------------------
000002E8                            
000002E8                            loc_2E8:				; CODE XREF: sub_277+1Ej
000002F9                            
000002F9                            loc_2F9:				; CODE XREF: sub_277+7Ej
000002FB                            
000002FB                            loc_2FB:				; CODE XREF: sub_277+76j
00000306                            
00000306                            loc_306:				; CODE XREF: sub_277+6Fj
00000307                            
00000307                            loc_307:				; CODE XREF: sub_277+5Fj
00000308                            
00000308                            loc_308:				; CODE XREF: sub_277+22j sub_B98+3Ej
0000030E                            
0000030E                            loc_30E:				; CODE XREF: sub_277+68j sub_B98+48j
00000330                            ; End of function sub_277
00000330                            
00000330                            
00000330                            ; =============== S U B	R O U T	I N E =======================================
00000330                            
00000330                            
00000330                            sub_330:				; CODE XREF: sub_277:loc_308p
00000330                            					; ROM:loc_CE1p
00000336                            
00000336                            loc_336:				; CODE XREF: sub_330+7j
0000033A                            ; End of function sub_330
0000033A                            
0000033A                            
0000033A                            ; =============== S U B	R O U T	I N E =======================================
0000033A                            
0000033A                            
0000033A                            sub_33A:				; CODE XREF: sub_1E9+7p sub_B98p ...
00000342                            ; End of function sub_33A
00000342                            
00000342                            ; ---------------------------------------------------------------------------
00000342                            ; START	OF FUNCTION CHUNK FOR sub_1E9
00000342                            
00000342                            loc_342:				; CODE XREF: sub_1E9+20j
0000035B                            ; END OF FUNCTION CHUNK	FOR sub_1E9
0000035B                            
0000035B                            ; =============== S U B	R O U T	I N E =======================================
0000035B                            
0000035B                            
0000035B                            sub_35B:				; CODE XREF: sub_1E9+34j sub_277+16p ...
00000361                            
00000361                            loc_361:				; CODE XREF: ROM:0F58p
00000367                            ; End of function sub_35B
00000367                            
00000367                            ; START	OF FUNCTION CHUNK FOR sub_9F6
00000367                            
00000367                            loc_367:				; CODE XREF: sub_9F6+Dj
0000036D                            ; END OF FUNCTION CHUNK	FOR sub_9F6
0000036D                            
0000036D                            ; =============== S U B	R O U T	I N E =======================================
0000036D                            
0000036D                            
0000036D                            sub_36D:				; CODE XREF: sub_1E9+28p
00000389                            
00000389                            loc_389:				; CODE XREF: sub_36D+2Ej
00000397                            
00000397                            loc_397:				; CODE XREF: sub_36D+20j
0000039E                            ; End of function sub_36D
0000039E                            
0000039E                            
0000039E                            ; =============== S U B	R O U T	I N E =======================================
0000039E                            
0000039E                            
0000039E                            sub_39E:				; CODE XREF: sub_1E9+14p sub_1E9+DE8p
000003B7 EDA0                       		ldi
000003B9 EDA0                       		ldi
000003BB EDA0                       		ldi
000003C9                            ; End of function sub_39E
000003C9                            
000003C9                            
000003C9                            ; =============== S U B	R O U T	I N E =======================================
000003C9                            
000003C9                            
000003C9                            sub_3C9:				; CODE XREF: sub_1E9+1Ap sub_1E9+3Fp ...
000003FA 07                         		rlca
000003FB ED44                       		zneg
00000405                            
00000405                            loc_405:				; CODE XREF: sub_3C9+23j
00000414 ED44                       		zneg
0000041A                            ; ---------------------------------------------------------------------------
0000041A                            
0000041A                            loc_41A:				; CODE XREF: sub_3C9+7j
00000422                            ; ---------------------------------------------------------------------------
00000422                            
00000422                            loc_422:				; CODE XREF: sub_3C9+82j sub_3C9+85j
00000425                            
00000425                            loc_425:				; CODE XREF: sub_3C9+57j sub_3C9+95j
00000449                            ; ---------------------------------------------------------------------------
00000449                            
00000449                            loc_449:				; CODE XREF: sub_3C9+6Cj
0000044D                            ; ---------------------------------------------------------------------------
0000044D                            
0000044D                            loc_44D:				; CODE XREF: sub_3C9+70j
00000450                            ; ---------------------------------------------------------------------------
00000450                            
00000450                            loc_450:				; CODE XREF: sub_3C9+74j
00000460                            ; ---------------------------------------------------------------------------
00000460                            
00000460                            loc_460:				; CODE XREF: sub_3C9+67j
00000462                            
00000462                            loc_462:				; CODE XREF: sub_3C9+78j
00000468                            
00000468                            loc_468:				; CODE XREF: sub_3C9+A0j
0000046F                            ; End of function sub_3C9
0000046F                            
0000046F                            
0000046F                            ; =============== S U B	R O U T	I N E =======================================
0000046F                            
0000046F                            
0000046F                            sub_46F:				; CODE XREF: sub_1E9+17p
0000046F                            					; sub_1E9:loc_220p ...
00000480                            
00000480                            loc_480:				; CODE XREF: sub_46F+Cj
00000483                            ; End of function sub_46F
00000483                            
00000483                            
00000483                            ; =============== S U B	R O U T	I N E =======================================
00000483                            
00000483                            
00000483                            sub_483:				; CODE XREF: sub_A20+69p sub_D44+18p
00000492                            
00000492                            loc_492:				; CODE XREF: sub_483+7j sub_D44+11p ...
00000498                            
00000498                            loc_498:				; CODE XREF: sub_483+16j
0000049C                            ; End of function sub_483
0000049C                            
0000049C                            ; ---------------------------------------------------------------------------
0000049C B030 3834 3C50 5854 5C60+  byte_49C:	db 0B0h, 30h, 38h, 34h,	3Ch, 50h, 58h, 54h, 5Ch, 60h, 68h
000004A7                            					; DATA XREF: sub_4B9o
000004A7 646C 7078 747C 8088 848C   		db 64h,	6Ch, 70h, 78h, 74h, 7Ch, 80h, 88h, 84h,	8Ch
000004B1 4048 444C                  byte_4B1:	db 40h,	48h, 44h, 4Ch	; DATA XREF: sub_36D+14o sub_CBA+1o
000004B5 9098 949C                  byte_4B5:	db 90h,	98h, 94h, 9Ch	; DATA XREF: sub_FA4o
000004B9                            
000004B9                            ; =============== S U B	R O U T	I N E =======================================
000004B9                            
000004B9                            
000004B9                            sub_4B9:				; CODE XREF: sub_A20+6Cp
000004B9                            					; sub_D44:loc_D5Fp ...
000004CC                            
000004CC                            loc_4CC:				; CODE XREF: sub_4B9+16j
000004DA                            ; End of function sub_4B9
000004DA                            
000004DA                            
000004DA                            ; =============== S U B	R O U T	I N E =======================================
000004DA                            
000004DA                            
000004DA                            sub_4DA:				; CODE XREF: sub_4B9+Bp
000004DA                            					; sub_4B9:loc_4CCp
000004E2                            ; End of function sub_4DA
000004E2                            
000004E2                            ; ---------------------------------------------------------------------------
000004E2                            
000004E2                            loc_4E2:				; CODE XREF: sub_11B+44p sub_11B+47p ...
000004FB                            
000004FB                            ; =============== S U B	R O U T	I N E =======================================
000004FB                            
000004FB                            
000004FB                            sub_4FB:				; CODE XREF: ROM:0F3Cp
000004FB                            
000004FB                            ; FUNCTION CHUNK AT 0552 SIZE 0000013E BYTES
000004FB                            ; FUNCTION CHUNK AT 06A9 SIZE 000000E6 BYTES
000004FB                            ; FUNCTION CHUNK AT 0A16 SIZE 0000000A BYTES
000004FB                            
00000524                            ; End of function sub_4FB
00000524                            
00000524                            ; ---------------------------------------------------------------------------
00000524 0000 0000 0000 0000 0000   off_524:	dw loc_85C, sub_944, sub_9BC, loc_52E, loc_85C ; DATA XREF: sub_4FB+20o
0000052E                            ; ---------------------------------------------------------------------------
0000052E                            
0000052E                            loc_52E:				; DATA XREF: ROM:off_524o
00000539                            
00000539                            loc_539:				; CODE XREF: ROM:0547j
0000054D                            
0000054D                            ; =============== S U B	R O U T	I N E =======================================
0000054D                            
0000054D                            
0000054D                            sub_54D:				; CODE XREF: ROM:053Ep
0000054D                            
0000054D                            ; FUNCTION CHUNK AT 0C7F SIZE 00000006 BYTES
0000054D                            ; FUNCTION CHUNK AT 0D87 SIZE 000000B2 BYTES
0000054D                            
00000552                            ; End of function sub_54D
00000552                            
00000552                            ; ---------------------------------------------------------------------------
00000552                            ; START	OF FUNCTION CHUNK FOR sub_4FB
00000552                            
00000552                            loc_552:				; CODE XREF: sub_4FB+2j
00000558                            ; ---------------------------------------------------------------------------
00000558                            
00000558                            loc_558:				; CODE XREF: sub_4FB+Cj
00000575                            
00000575                            loc_575:
00000580                            ; ---------------------------------------------------------------------------
00000580                            
00000580                            loc_580:				; CODE XREF: sub_4FB+6Aj
000005B4 EDB0                       		ldir
000005BE                            
000005BE                            loc_5BE:				; CODE XREF: sub_4FB+CAj
000005DB                            ; ---------------------------------------------------------------------------
000005DB                            
000005DB                            loc_5DB:				; CODE XREF: sub_4FB+5Aj sub_4FB+63j
000005DE                            
000005DE                            loc_5DE:				; CODE XREF: sub_4FB+8Aj sub_4FB+DDj
000005EB                            
000005EB                            loc_5EB:				; DATA XREF: sub_4FB+EDw
000005F5 1F                         		rra
000005F7 1F                         		rra
000005F9 1F                         		rra
000005FB 1F                         		rra
000005FD 1F                         		rra
000005FF 1F                         		rra
00000601 1F                         		rra
0000060A 00                         		znop
0000063D                            
0000063D                            loc_63D:				; CODE XREF: sub_4FB+161j
00000641 EDA0                       		ldi
00000643 EDA0                       		ldi
0000064D EDA0                       		ldi
0000064F EDA0                       		ldi
00000651 EDA0                       		ldi
00000653 EDA0                       		ldi
00000672                            
00000672                            loc_672:				; CODE XREF: sub_4FB+193j
00000676 EDA0                       		ldi
00000678 EDA0                       		ldi
00000685 EDB0                       		ldir
00000690                            ; END OF FUNCTION CHUNK	FOR sub_4FB
00000690                            
00000690                            ; =============== S U B	R O U T	I N E =======================================
00000690                            
00000690                            
00000690                            sub_690:				; CODE XREF: ROM:0549p	sub_4FB+167j ...
00000695                            ; End of function sub_690
00000695                            
00000695                            ; ---------------------------------------------------------------------------
00000695 8006                       byte_695:	db 80h,	6		; DATA XREF: sub_944+11o
00000697 8000                       		db 80h,	0
00000699 8001                       		db 80h,	1
0000069B 8002                       		db 80h,	2
0000069D 8004                       		db 80h,	4
0000069F 8005                       		db 80h,	5
000006A1 8006                       		db 80h,	6
000006A3 8080                       byte_6A3:	db 80h,	80h		; DATA XREF: sub_4FB+16Bo
000006A5 80A0                       		db 80h,	0A0h
000006A7 80C0                       		db 80h,	0C0h
000006A9                            ; ---------------------------------------------------------------------------
000006A9                            ; START	OF FUNCTION CHUNK FOR sub_4FB
000006A9                            
000006A9                            loc_6A9:				; CODE XREF: sub_4FB+11j
000006B7                            
000006B7                            loc_6B7:				; CODE XREF: sub_4FB+1B1j
000006BE 1F                         		rra
000006C0 1F                         		rra
000006C2 1F                         		rra
000006C4 1F                         		rra
000006C6 1F                         		rra
000006C8 1F                         		rra
000006CA 1F                         		rra
000006FB                            ; ---------------------------------------------------------------------------
000006FB                            
000006FB                            loc_6FB:				; CODE XREF: sub_4FB+1EAj
00000706                            ; ---------------------------------------------------------------------------
00000706                            
00000706                            loc_706:				; CODE XREF: sub_4FB+1E1j
0000070C                            
0000070C                            loc_70C:				; CODE XREF: sub_4FB+1DCj sub_4FB+208j
0000072C                            
0000072C                            loc_72C:				; CODE XREF: sub_4FB+28Fj
00000740                            
00000740                            loc_740:				; CODE XREF: sub_4FB+240j
00000742 EDA0                       		ldi
0000074A EDA0                       		ldi
00000751 EDA0                       		ldi
00000753 EDA0                       		ldi
00000755 EDA0                       		ldi
00000757 EDA0                       		ldi
0000076E                            
0000076E                            loc_76E:				; CODE XREF: sub_4FB+265j sub_4FB+26Dj
0000077C                            
0000077C                            loc_77C:				; CODE XREF: sub_4FB+27Bj
0000078F                            ; END OF FUNCTION CHUNK	FOR sub_4FB
0000078F                            
0000078F                            ; =============== S U B	R O U T	I N E =======================================
0000078F                            
0000078F                            
0000078F                            sub_78F:				; CODE XREF: sub_4FB+235p sub_54D+84Bp
0000079B                            ; ---------------------------------------------------------------------------
0000079B                            
0000079B                            loc_79B:				; CODE XREF: sub_78F+2j
000007B2                            
000007B2                            loc_7B2:				; CODE XREF: sub_78F+7j sub_78F+Aj
000007C5                            ; End of function sub_78F
000007C5                            
000007C5                            
000007C5                            ; =============== S U B	R O U T	I N E =======================================
000007C5                            
000007C5                            
000007C5                            sub_7C5:				; CODE XREF: sub_4FB+15Dp sub_4FB+25Ep
000007CC                            
000007CC                            loc_7CC:				; CODE XREF: sub_4FB+18Fp
000007D7                            
000007D7                            loc_7D7:				; CODE XREF: sub_7C5+15j
000007DF                            ; End of function sub_7C5
000007DF                            
000007DF                            ; ---------------------------------------------------------------------------
000007DF F01D 201E 501E 801E B01E+  word_7DF:	dw 1DF0h, 1E20h, 1E50h,	1E80h, 1EB0h, 1EE0h, 1F10h, 1F10h
000007EF                            					; DATA XREF: sub_78F+29o
000007EF D01C 001D 301D 401C 601D+  word_7EF:	dw 1CD0h, 1D00h, 1D30h,	1C40h, 1D60h, 1D90h, 1DC0h, 1DC0h
000007FF                            					; DATA XREF: sub_78F+31o
000007FF                            
000007FF                            ; =============== S U B	R O U T	I N E =======================================
000007FF                            
000007FF                            
000007FF                            sub_7FF:				; CODE XREF: sub_11Bp
000007FF                            
000007FF                            ; FUNCTION CHUNK AT 098D SIZE 0000002F BYTES
000007FF                            
00000810                            ; ---------------------------------------------------------------------------
00000810                            
00000810                            loc_810:				; CODE XREF: sub_7FF+6j
0000081F                            
0000081F                            loc_81F:				; CODE XREF: sub_7FF+39j
0000082B                            
0000082B                            loc_82B:				; CODE XREF: sub_7FF+24j
00000833                            
00000833                            loc_833:				; CODE XREF: sub_7FF+2Aj
00000840                            
00000840                            loc_840:				; CODE XREF: sub_7FF+5Aj
00000854                            
00000854                            loc_854:				; CODE XREF: sub_7FF+45j sub_7FF+4Bj
0000085C                            ; End of function sub_7FF
0000085C                            
0000085C                            ; ---------------------------------------------------------------------------
0000085C                            
0000085C                            loc_85C:				; DATA XREF: ROM:off_524o
00000869                            
00000869                            ; =============== S U B	R O U T	I N E =======================================
00000869                            
00000869                            
00000869                            sub_869:				; CODE XREF: sub_879+6p
00000879                            ; End of function sub_869
00000879                            
00000879                            
00000879                            ; =============== S U B	R O U T	I N E =======================================
00000879                            
00000879                            
00000879                            sub_879:				; CODE XREF: sub_11B+9p
0000088E                            ; ---------------------------------------------------------------------------
0000088E                            
0000088E                            loc_88E:				; CODE XREF: sub_879+Fj
000008A5 1F                         		rra
000008A7 1F                         		rra
000008A9 1F                         		rra
000008AB 1F                         		rra
000008AD 1F                         		rra
000008AF 1F                         		rra
000008B1 1F                         		rra
000008BB                            
000008BB                            loc_8BB:				; CODE XREF: sub_879+63j
000008C6                            ; ---------------------------------------------------------------------------
000008C6                            
000008C6                            loc_8C6:				; CODE XREF: sub_879+45j
000008D7                            
000008D7                            loc_8D7:				; CODE XREF: sub_879+4Bj sub_879+51j ...
000008DF                            ; End of function sub_879
000008DF                            
000008DF                            
000008DF                            ; =============== S U B	R O U T	I N E =======================================
000008DF                            
000008DF                            
000008DF                            sub_8DF:				; CODE XREF: sub_11B+Cp
000008EB 1F                         		rra
000008ED 1F                         		rra
000008EF 1F                         		rra
000008F1 1F                         		rra
000008F3 1F                         		rra
000008F5 1F                         		rra
000008F7 1F                         		rra
00000912                            
00000912                            loc_912:				; CODE XREF: sub_8DF+41j
00000933                            
00000933                            loc_933:				; CODE XREF: sub_8DF+5Aj
00000944                            ; End of function sub_8DF
00000944                            
00000944                            
00000944                            ; =============== S U B	R O U T	I N E =======================================
00000944                            
00000944                            
00000944                            sub_944:				; CODE XREF: ROM:0091p	sub_4FB+16j ...
0000094F EDB0                       		ldir
0000095B                            
0000095B                            loc_95B:				; CODE XREF: sub_944+23j
00000979                            
00000979                            loc_979:				; CODE XREF: sub_4FB+24Cp sub_B98+28p
00000986                            ; End of function sub_944
00000986                            
00000986                            
00000986                            ; =============== S U B	R O U T	I N E =======================================
00000986                            
00000986                            
00000986                            sub_986:				; CODE XREF: sub_4FB+28Ap sub_944+1Bp
0000098D                            ; End of function sub_986
0000098D                            
0000098D                            ; ---------------------------------------------------------------------------
0000098D                            ; START	OF FUNCTION CHUNK FOR sub_7FF
0000098D                            
0000098D                            loc_98D:				; CODE XREF: sub_7FF+Ej
00000998                            
00000998                            loc_998:				; CODE XREF: sub_7FF+19Fj
000009A4                            
000009A4                            loc_9A4:				; CODE XREF: sub_7FF+1ABj
000009B2                            
000009B2                            loc_9B2:				; CODE XREF: sub_7FF+1B9j
000009BC                            ; END OF FUNCTION CHUNK	FOR sub_7FF
000009BC                            
000009BC                            ; =============== S U B	R O U T	I N E =======================================
000009BC                            
000009BC                            
000009BC                            sub_9BC:				; CODE XREF: sub_869+Dj sub_944+2Bp ...
000009C1                            
000009C1                            loc_9C1:				; CODE XREF: sub_9BC+Aj
000009CC                            ; End of function sub_9BC
000009CC                            
000009CC                            
000009CC                            ; =============== S U B	R O U T	I N E =======================================
000009CC                            
000009CC                            
000009CC                            sub_9CC:				; CODE XREF: sub_11B:loc_121p
000009DD                            
000009DD                            loc_9DD:				; CODE XREF: sub_9CC+13j
000009E2                            ; End of function sub_9CC
000009E2                            
000009E2                            
000009E2                            ; =============== S U B	R O U T	I N E =======================================
000009E2                            
000009E2                            
000009E2                            sub_9E2:				; CODE XREF: sub_11B+41p
000009E8 EDA0                       		ldi
000009EA EDA0                       		ldi
000009EC EDA0                       		ldi
000009F6                            ; End of function sub_9E2
000009F6                            
000009F6                            
000009F6                            ; =============== S U B	R O U T	I N E =======================================
000009F6                            
000009F6                            
000009F6                            sub_9F6:				; CODE XREF: sub_944+18p
000009F6                            					; sub_54D:loc_C7Fp
000009F6                            
000009F6                            ; FUNCTION CHUNK AT 0367 SIZE 00000006 BYTES
000009F6                            
00000A06                            ; End of function sub_9F6
00000A06                            
00000A06                            
00000A06                            ; =============== S U B	R O U T	I N E =======================================
00000A06                            
00000A06                            
00000A06                            sub_A06:				; CODE XREF: sub_9F6p ROM:0D34p
00000A0A                            ; End of function sub_A06
00000A0A                            
00000A0A                            
00000A0A                            ; =============== S U B	R O U T	I N E =======================================
00000A0A                            
00000A0A                            
00000A0A                            sub_A0A:				; CODE XREF: sub_986+4j sub_9F6+7p
00000A0C                            
00000A0C                            loc_A0C:				; CODE XREF: sub_A0A+9j
00000A16                            ; End of function sub_A0A
00000A16                            
00000A16                            ; ---------------------------------------------------------------------------
00000A16                            ; START	OF FUNCTION CHUNK FOR sub_4FB
00000A16                            
00000A16                            loc_A16:				; CODE XREF: sub_4FB+7j
00000A20                            ; END OF FUNCTION CHUNK	FOR sub_4FB
00000A20                            
00000A20                            ; =============== S U B	R O U T	I N E =======================================
00000A20                            
00000A20                            
00000A20                            sub_A20:				; CODE XREF: sub_11B+6Dp
00000A40 1F                         		rra
00000A42 1F                         		rra
00000A44 1F                         		rra
00000A46 1F                         		rra
00000A48 1F                         		rra
00000A4A 1F                         		rra
00000A4C 1F                         		rra
00000A59 EDB0                       		ldir
00000A69                            
00000A69                            loc_A69:				; CODE XREF: sub_A20+75j
00000A75                            
00000A75                            loc_A75:
00000A90                            
00000A90                            loc_A90:				; CODE XREF: sub_A20:loc_A75j
00000AA5                            ; End of function sub_A20
00000AA5                            
00000AA5                            ; ---------------------------------------------------------------------------
00000AA5 FF03 FF03 FF03 FF03 FF03+  word_AA5:	dw 3FFh, 3FFh, 3FFh, 3FFh, 3FFh, 3FFh, 3FFh, 3FFh, 3FFh
00000AB7 F703 BE03 8803 5603 2603+  		dw 3F7h, 3BEh, 388h, 356h, 326h, 2F9h, 2CEh, 2A5h, 280h
00000AC9 5C02 3A02 1A02 FB01 DF01+  		dw 25Ch, 23Ah, 21Ah, 1FBh, 1DFh, 1C4h, 1ABh, 193h, 17Dh
00000ADB 6701 5301 4001 2E01 1D01+  		dw 167h, 153h, 140h, 12Eh, 11Dh, 10Dh, 0FEh, 0EFh, 0E2h
00000AED D600 C900 BE00 B400 A900+  		dw 0D6h, 0C9h, 0BEh, 0B4h, 0A9h, 0A0h, 97h, 8Fh, 87h, 7Fh
00000B01 7800 7100 6B00 6500 5F00+  		dw 78h,	71h, 6Bh, 65h, 5Fh, 5Ah, 55h, 50h, 4Bh,	47h, 43h
00000B17 4000 3C00 3900 3600 3300+  		dw 40h,	3Ch, 39h, 36h, 33h, 30h, 2Dh, 2Bh, 28h,	26h, 24h
00000B2D 2200 2000 1F00 1D00 1B00+  		dw 22h,	20h, 1Fh, 1Dh, 1Bh, 1Ah, 18h, 17h, 16h,	15h, 13h
00000B43 1200 1100 1000 0000 0000   		dw 12h,	11h, 10h, 0, 0
00000B4D 8402 AB02 D302 FE02 2D03+  word_B4D:	dw 284h, 2ABh, 2D3h, 2FEh, 32Dh, 35Ch, 38Fh, 3C5h, 3FFh
00000B5F 3C04 7C04 C004             		dw 43Ch, 47Ch, 4C0h
00000B65                            
00000B65 0000 0000 0000 0000 0000+  MusicBanks:	dsb 33h, 0h	; Natsumi: Changed to bank to ROM bank 1
00000B98                            
00000B98                            ; =============== S U B	R O U T	I N E =======================================
00000B98                            
00000B98                            
00000B98                            sub_B98:				; CODE XREF: sub_11B+78p
00000BA2                            
00000BA2                            loc_BA2:				; CODE XREF: sub_B98+52j
00000BB1                            
00000BB1                            loc_BB1:				; CODE XREF: sub_B98+12j
00000BD2                            
00000BD2                            loc_BD2:				; CODE XREF: sub_B98+34j
00000BD3                            
00000BD3                            loc_BD3:				; CODE XREF: sub_B98+1Ej
00000BE3                            ; ---------------------------------------------------------------------------
00000BE3                            
00000BE3                            loc_BE3:				; CODE XREF: sub_B98+Ej
00000BE9                            ; ---------------------------------------------------------------------------
00000BE9                            
00000BE9                            loc_BE9:				; DATA XREF: sub_B98:loc_BE3o
00000BED                            ; ---------------------------------------------------------------------------
00000BED                            
00000BED                            loc_BED:				; CODE XREF: sub_277+12j
00000BF0                            
00000BF0                            loc_BF0:				; CODE XREF: sub_B98+4Ej
00000BF9                            ; End of function sub_B98
00000BF9                            
00000BF9                            ; ---------------------------------------------------------------------------
00000BF9                            loc_BF9:
00000BFD                            ; ---------------------------------------------------------------------------
00000BFD 0000 0000 0000 0000 0000+  off_BFD:	dw loc_C51, loc_C77, loc_C7B, loc_C7F, loc_C85,	loc_CA1
00000C09                            					; DATA XREF: sub_B98+5Bo
00000C09 0000 0000 0000 0000 0000+  		dw loc_CA3, loc_CDB, loc_CE1, loc_C65, loc_C4D,	loc_CEB
00000C15 0000 0000 0000 0000 0000+  		dw loc_D01, loc_D1B, loc_D21, loc_D2E, loc_D6D,	loc_D7B
00000C21 0000 0000 0000 0000 0000+  		dw loc_D87, loc_E39, loc_D83, loc_E58, loc_E61,	loc_E67
00000C2D 0000 0000 0000 0000 0000+  		dw loc_E7E, loc_E98, loc_EAB, loc_EB1, loc_EB8,	loc_EDA
00000C39 0000 0000                  		dw loc_EE8, loc_F2F
00000C3D 0000 0000 0000 0000 0000+  off_C3D:	dw loc_F36, loc_F3A, loc_F42, loc_F7D, loc_F8B,	loc_F9A
00000C49                            					; DATA XREF: ROM:loc_F2Fo
00000C49 0000 0000                  		dw loc_FB5, loc_FBE
00000C4D                            ; ---------------------------------------------------------------------------
00000C4D                            
00000C4D                            loc_C4D:				; DATA XREF: ROM:off_BFDo
00000C51                            ; ---------------------------------------------------------------------------
00000C51                            
00000C51                            loc_C51:				; DATA XREF: ROM:off_BFDo
00000C65                            ; ---------------------------------------------------------------------------
00000C65                            
00000C65                            loc_C65:				; DATA XREF: ROM:off_BFDo
00000C75                            
00000C75                            loc_C75:				; CODE XREF: ROM:0C71j
00000C77                            ; ---------------------------------------------------------------------------
00000C77                            
00000C77                            loc_C77:				; DATA XREF: ROM:off_BFDo
00000C7B                            ; ---------------------------------------------------------------------------
00000C7B                            
00000C7B                            loc_C7B:				; DATA XREF: ROM:off_BFDo
00000C7F                            ; ---------------------------------------------------------------------------
00000C7F                            ; START	OF FUNCTION CHUNK FOR sub_54D
00000C7F                            
00000C7F                            loc_C7F:				; CODE XREF: sub_54D+2j
00000C7F                            					; DATA XREF: ROM:off_BFDo
00000C85                            ; END OF FUNCTION CHUNK	FOR sub_54D
00000C85                            ; ---------------------------------------------------------------------------
00000C85                            
00000C85                            loc_C85:				; DATA XREF: ROM:off_BFDo
00000C98                            ; ---------------------------------------------------------------------------
00000C98                            
00000C98                            loc_C98:				; CODE XREF: ROM:0C89j
00000CA1                            ; ---------------------------------------------------------------------------
00000CA1                            
00000CA1                            loc_CA1:				; DATA XREF: ROM:off_BFDo
00000CA3                            
00000CA3                            loc_CA3:				; DATA XREF: ROM:off_BFDo
00000CB5                            ; ---------------------------------------------------------------------------
00000CB5                            
00000CB5                            loc_CB5:				; CODE XREF: ROM:0CAEj
00000CB7                            
00000CB7                            loc_CB7:				; CODE XREF: ROM:0CABj	ROM:0CB2j
00000CBA                            
00000CBA                            ; =============== S U B	R O U T	I N E =======================================
00000CBA                            
00000CBA                            
00000CBA                            sub_CBA:				; CODE XREF: sub_4B9+1Ej sub_879+5Ap ...
00000CC6                            
00000CC6                            loc_CC6:				; CODE XREF: sub_CBA+1Dj
00000CCE                            
00000CCE                            loc_CCE:				; CODE XREF: sub_CBA+Ej
00000CDB                            ; End of function sub_CBA
00000CDB                            
00000CDB                            ; ---------------------------------------------------------------------------
00000CDB                            
00000CDB                            loc_CDB:				; DATA XREF: ROM:off_BFDo
00000CE1                            ; ---------------------------------------------------------------------------
00000CE1                            
00000CE1                            loc_CE1:				; DATA XREF: ROM:off_BFDo
00000CEB                            ; ---------------------------------------------------------------------------
00000CEB                            
00000CEB                            loc_CEB:				; DATA XREF: ROM:off_BFDo
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            loc_CFC:				; CODE XREF: ROM:0CF7j
00000D01                            ; ---------------------------------------------------------------------------
00000D01                            
00000D01                            loc_D01:				; DATA XREF: ROM:off_BFDo
00000D17                            
00000D17                            loc_D17:				; CODE XREF: ROM:0C95j	ROM:0D12j
00000D1B                            ; ---------------------------------------------------------------------------
00000D1B                            
00000D1B                            loc_D1B:				; DATA XREF: ROM:off_BFDo
00000D21                            ; ---------------------------------------------------------------------------
00000D21                            
00000D21                            loc_D21:				; DATA XREF: ROM:off_BFDo
00000D28                            
00000D28                            ; =============== S U B	R O U T	I N E =======================================
00000D28                            
00000D28                            
00000D28                            sub_D28:				; CODE XREF: ROM:loc_D21p
00000D2E                            ; End of function sub_D28
00000D2E                            
00000D2E                            ; ---------------------------------------------------------------------------
00000D2E                            
00000D2E                            loc_D2E:				; DATA XREF: ROM:off_BFDo
00000D44                            
00000D44                            ; =============== S U B	R O U T	I N E =======================================
00000D44                            
00000D44                            
00000D44                            sub_D44:				; CODE XREF: sub_54D+88Ap
00000D5A                            ; ---------------------------------------------------------------------------
00000D5A                            
00000D5A                            loc_D5A:				; CODE XREF: ROM:0D3Cj
00000D5F                            
00000D5F                            loc_D5F:				; CODE XREF: sub_D44+14j
00000D64                            ; End of function sub_D44
00000D64                            
00000D64                            ; ---------------------------------------------------------------------------
00000D64                            
00000D64                            loc_D64:				; CODE XREF: ROM:0D32j
00000D6C                            ; ---------------------------------------------------------------------------
00000D6D                            ; ---------------------------------------------------------------------------
00000D6D                            
00000D6D                            loc_D6D:				; DATA XREF: ROM:off_BFDo
00000D7B                            ; ---------------------------------------------------------------------------
00000D7B                            
00000D7B                            loc_D7B:				; DATA XREF: ROM:off_BFDo
00000D83                            
00000D83                            loc_D83:				; CODE XREF: ROM:0D80j
00000D83                            					; DATA XREF: ROM:off_BFDo
00000D87                            ; ---------------------------------------------------------------------------
00000D87                            ; START	OF FUNCTION CHUNK FOR sub_54D
00000D87                            
00000D87                            loc_D87:				; CODE XREF: sub_54D+735j
00000D87                            					; DATA XREF: ROM:off_BFDo
00000DCD                            
00000DCD                            loc_DCD:				; CODE XREF: sub_54D+87Cj
00000DD0                            
00000DD0                            loc_DD0:				; CODE XREF: sub_54D+874j
00000DDC                            ; ---------------------------------------------------------------------------
00000DDC                            
00000DDC                            loc_DDC:				; CODE XREF: sub_54D+887j
00000DE5 1F                         		rra
00000DE7 1F                         		rra
00000DE9 1F                         		rra
00000DEB 1F                         		rra
00000DED 1F                         		rra
00000DEF 1F                         		rra
00000DF1 1F                         		rra
00000E02 1F                         		rra
00000E04 1F                         		rra
00000E06 1F                         		rra
00000E08 1F                         		rra
00000E0A 1F                         		rra
00000E0C 1F                         		rra
00000E0E 1F                         		rra
00000E1F                            
00000E1F                            loc_E1F:				; CODE XREF: sub_54D+88Dj
00000E22                            
00000E22                            loc_E22:				; CODE XREF: sub_54D+852j sub_54D+86Dj ...
00000E27                            ; ---------------------------------------------------------------------------
00000E27                            
00000E27                            loc_E27:				; CODE XREF: sub_54D+867j
00000E37                            
00000E37                            loc_E37:				; CODE XREF: sub_54D+8E4j
00000E39                            ; END OF FUNCTION CHUNK	FOR sub_54D
00000E39                            ; ---------------------------------------------------------------------------
00000E39                            
00000E39                            loc_E39:				; DATA XREF: ROM:off_BFDo
00000E54                            
00000E54                            loc_E54:				; CODE XREF: ROM:0E4Cj
00000E58                            ; ---------------------------------------------------------------------------
00000E58                            
00000E58                            loc_E58:				; DATA XREF: ROM:off_BFDo
00000E5D                            
00000E5D                            loc_E5D:				; CODE XREF: ROM:0D65j	ROM:0D69j
00000E61                            ; ---------------------------------------------------------------------------
00000E61                            
00000E61                            loc_E61:				; CODE XREF: ROM:0CFEj	ROM:0E79j ...
00000E67                            ; ---------------------------------------------------------------------------
00000E67                            
00000E67                            loc_E67:				; DATA XREF: ROM:off_BFDo
00000E77                            
00000E77                            loc_E77:				; CODE XREF: ROM:0E73j
00000E7E                            ; ---------------------------------------------------------------------------
00000E7E                            
00000E7E                            loc_E7E:				; DATA XREF: ROM:off_BFDo
00000E98                            ; ---------------------------------------------------------------------------
00000E98                            
00000E98                            loc_E98:				; DATA XREF: ROM:off_BFDo
00000EAB                            ; ---------------------------------------------------------------------------
00000EAB                            
00000EAB                            loc_EAB:				; DATA XREF: ROM:off_BFDo
00000EB1                            ; ---------------------------------------------------------------------------
00000EB1                            
00000EB1                            loc_EB1:				; DATA XREF: ROM:off_BFDo
00000EB8                            ; ---------------------------------------------------------------------------
00000EB8                            
00000EB8                            loc_EB8:				; DATA XREF: ROM:off_BFDo
00000EC9                            ; ---------------------------------------------------------------------------
00000EC9                            
00000EC9                            loc_EC9:				; CODE XREF: ROM:0EBDj
00000EDA                            ; ---------------------------------------------------------------------------
00000EDA                            
00000EDA                            loc_EDA:				; DATA XREF: ROM:off_BFDo
00000EE3                            ; ---------------------------------------------------------------------------
00000EE3                            
00000EE3                            loc_EE3:				; CODE XREF: ROM:0EDCj
00000EE8                            ; ---------------------------------------------------------------------------
00000EE8                            
00000EE8                            loc_EE8:				; DATA XREF: ROM:off_BFDo
00000EF9                            
00000EF9                            loc_EF9:				; CODE XREF: ROM:0F0Bj
00000F05 EDA0                       		ldi
00000F07 EDA0                       		ldi
00000F11                            
00000F11                            ; =============== S U B	R O U T	I N E =======================================
00000F11                            
00000F11                            
00000F11                            sub_F11:				; CODE XREF: sub_54D:loc_DCDp
00000F1B                            ; End of function sub_F11
00000F1B                            
00000F1B                            ; ---------------------------------------------------------------------------
00000F1B                            
00000F1B                            loc_F1B:				; CODE XREF: ROM:0EEDj
00000F1F                            ; ---------------------------------------------------------------------------
00000F1F 0000 3201 8E01 E401 3402+  word_F1F:	dw 0, 132h, 18Eh, 1E4h,	234h, 27Eh, 2C2h, 2F0h ; DATA XREF: ROM:0EFDo
00000F2F                            ; ---------------------------------------------------------------------------
00000F2F                            
00000F2F                            loc_F2F:				; DATA XREF: ROM:off_BFDo
00000F36                            ; ---------------------------------------------------------------------------
00000F36                            
00000F36                            loc_F36:				; DATA XREF: ROM:off_C3Do
00000F3A                            ; ---------------------------------------------------------------------------
00000F3A                            
00000F3A                            loc_F3A:				; DATA XREF: ROM:off_C3Do
00000F42                            ; ---------------------------------------------------------------------------
00000F42                            
00000F42                            loc_F42:				; DATA XREF: ROM:off_C3Do
00000F54                            
00000F54                            loc_F54:				; CODE XREF: ROM:0F5Dj
00000F65                            ; ---------------------------------------------------------------------------
00000F65                            
00000F65                            loc_F65:				; CODE XREF: ROM:0F46j
00000F71                            
00000F71                            loc_F71:				; CODE XREF: ROM:0F77j
00000F7D                            ; ---------------------------------------------------------------------------
00000F7D                            
00000F7D                            loc_F7D:				; DATA XREF: ROM:off_C3Do
00000F87 EDB0                       		ldir
00000F8B                            ; ---------------------------------------------------------------------------
00000F8B                            
00000F8B                            loc_F8B:				; DATA XREF: ROM:off_C3Do
00000F90                            
00000F90                            loc_F90:				; CODE XREF: ROM:0F97j
00000F9A                            ; ---------------------------------------------------------------------------
00000F9A                            
00000F9A                            loc_F9A:				; DATA XREF: ROM:off_C3Do
00000FA4                            
00000FA4                            ; =============== S U B	R O U T	I N E =======================================
00000FA4                            
00000FA4                            
00000FA4                            sub_FA4:				; CODE XREF: sub_54D:loc_E1Fp
00000FA9                            
00000FA9                            loc_FA9:				; CODE XREF: sub_FA4+Dj
00000FB5                            ; End of function sub_FA4
00000FB5                            
00000FB5                            ; ---------------------------------------------------------------------------
00000FB5                            
00000FB5                            loc_FB5:				; DATA XREF: ROM:off_C3Do
00000FBE                            ; ---------------------------------------------------------------------------
00000FBE                            
00000FBE                            loc_FBE:				; DATA XREF: ROM:off_C3Do
00000FC4                            ; ---------------------------------------------------------------------------
00000FC4                            ; START	OF FUNCTION CHUNK FOR sub_1E9
00000FC4                            
00000FC4                            loc_FC4:				; CODE XREF: sub_1E9+4j
00000FD6                            ; ---------------------------------------------------------------------------
00000FD6                            
00000FD6                            loc_FD6:				; CODE XREF: sub_1E9+DDEj
00000FE2                            
00000FE2                            loc_FE2:				; CODE XREF: sub_1E9+DEBj sub_1E9+DF1j
00000FFB 0F                         		rrca
00000FFC 0F                         		rrca
00000FFD 0F                         		rrca
00000FFE 0F                         		rrca
00001013                            
00001013                            loc_1013:				; CODE XREF: sub_1E9+E1Fj
00001022                            
00001022                            loc_1022:				; CODE XREF: sub_1E9+E35j
00001031                            ; ---------------------------------------------------------------------------
00001031                            
00001031                            loc_1031:				; CODE XREF: sub_1E9+E42j
00001037                            ; END OF FUNCTION CHUNK	FOR sub_1E9
00001037                            ; ---------------------------------------------------------------------------
00001037                            ; START	OF FUNCTION CHUNK FOR sub_103A
00001037                            
00001037                            loc_1037:				; CODE XREF: sub_103A+1Bj sub_103A+26j
0000103A                            ; END OF FUNCTION CHUNK	FOR sub_103A
0000103A                            
0000103A                            ; =============== S U B	R O U T	I N E =======================================
0000103A                            
0000103A                            
0000103A                            sub_103A:				; CODE XREF: sub_36D+Bp sub_1E9+E26p
0000103A                            
0000103A                            ; FUNCTION CHUNK AT 1037 SIZE 00000003 BYTES
0000103A                            
00001057                            ; ---------------------------------------------------------------------------
00001057                            
00001057                            loc_1057:				; CODE XREF: sub_103A+Fj
0000105F                            ; ---------------------------------------------------------------------------
0000105F                            
0000105F                            loc_105F:				; CODE XREF: sub_103A+17j
00001062                            ; ---------------------------------------------------------------------------
00001062                            
00001062                            loc_1062:				; CODE XREF: sub_103A+13j
00001068                            ; ---------------------------------------------------------------------------
00001068                            
00001068                            loc_1068:				; CODE XREF: sub_103A+Bj
0000106C                            ; End of function sub_103A
0000106C                            
0000106C                            
0000106C                            ; =============== S U B	R O U T	I N E =======================================
0000106C                            
0000106C                            
0000106C                            sub_106C:				; CODE XREF: sub_277+2Ap sub_1E9+DF6j	...
00001075                            ; End of function sub_106C
00001075                            
00001075                            
00001075                            ; =============== S U B	R O U T	I N E =======================================
00001075                            
00001075                            
00001075                            sub_1075:				; CODE XREF: sub_78F+Ep
0000108A                            ; End of function sub_1075
0000108A                            
0000108A                            ; ---------------------------------------------------------------------------
0000108A                            
0000108A                            loc_108A:				; CODE XREF: ROM:00ACj	ROM:1113j ...
00001092                            
00001092                            loc_1092:				; CODE XREF: ROM:109Ej	ROM:1105j
000010CA                            
000010CA                            loc_10CA:				; CODE XREF: ROM:110Cj
000010CA                            					; DATA XREF: ROM:10BBw
000010CD                            
000010CD                            loc_10CD:				; CODE XREF: ROM:loc_10CDj
000010D6 07                         		rlca
000010D7 07                         		rlca
000010D8 07                         		rlca
000010D9 07                         		rlca
000010E0                            
000010E0                            loc_10E0:				; DATA XREF: ROM:10DCw
000010E7                            
000010E7                            loc_10E7:				; DATA XREF: ROM:10BEw
000010EA                            
000010EA                            loc_10EA:				; CODE XREF: ROM:loc_10EAj
000010F9                            
000010F9                            loc_10F9:				; DATA XREF: ROM:10F5w
00001116                            ; ---------------------------------------------------------------------------
00001116 0001 0204 0810 2040        byte_1116:	db 0, 1, 2, 4, 8, 10h, 20h, 40h	; DATA XREF: ROM:10A9o
0000111E 80FF FEFC F8F0 E0C0        		db 80h,	0FFh, 0FEh, 0FCh, 0F8h,	0F0h, 0E0h, 0C0h
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            loc_1126:				; CODE XREF: ROM:1097j
00001130 00                         		znop
0000113A                            
0000113A                            loc_113A:				; CODE XREF: ROM:113Ej
0000113D 0F                         		rrca
0000114F 00                         		znop
00001150                            
00001150                            loc_1150:				; CODE XREF: ROM:1165j
0000115B 00                         		znop
0000115C 00                         		znop
0000115F                            
0000115F                            loc_115F:				; CODE XREF: ROM:loc_115Fj
00001167                            
00001167                            loc_1167:				; CODE XREF: ROM:1159j
0000116A                            ; ---------------------------------------------------------------------------
0000116A 00                         		db 0
0000116B                            		dsb 195h, 0AAh
00001300                            
00001300 0000 0000 0000 0000 0000+  off_1300:	dw MusicPointers, UniversalVoices, MusicPointers, SFXPointers, ModEnvPointers, VolEnvPointers
0000130C 3300                       		dw 33h
0000130E                            
0000130E                            ; ---------------------------------------------------------------------------
0000130E                            		include "Envs.Z80"
0000130E 0000 0000 0000 0000        ModEnvPointers:	dw ModEnv_01, ModEnv_02, ModEnv_03, ModEnv_04
00001316 0000 0000 0000 0000        		dw ModEnv_05, ModEnv_06, ModEnv_07, ModEnv_08
0000131E                            
0000131E                            ModEnv_02:	incbin "ModEnv/02.bin"
0000131F                            ModEnv_01:	incbin "ModEnv/01.bin"
0000132B                            ModEnv_03:	incbin "ModEnv/03.bin"
00001338                            ModEnv_04:	incbin "ModEnv/04.bin"
00001346                            ModEnv_05:	incbin "ModEnv/05.bin"
00001352                            ModEnv_06:	incbin "ModEnv/06.bin"
00001364                            ModEnv_07:	incbin "ModEnv/07.bin"
00001375                            ModEnv_08:	incbin "ModEnv/08.bin"
00001387                            
00001387                            ; ---------------------------------------------------------------------------
00001387 0000 0000 0000 0000 0000   VolEnvPointers:	dw            VolEnv_01, VolEnv_02, VolEnv_03, VolEnv_04, VolEnv_05
00001391 0000 0000 0000 0000 0000+  		dw VolEnv_06, VolEnv_07, VolEnv_08, VolEnv_09, VolEnv_0A, VolEnv_0B
0000139D 0000 0000 0000 0000 0000+  		dw VolEnv_0C, VolEnv_0D, VolEnv_0E, VolEnv_0F, VolEnv_10, VolEnv_11
000013A9 0000 0000 0000 0000 0000+  		dw VolEnv_12, VolEnv_13, VolEnv_14, VolEnv_15, VolEnv_16, VolEnv_17
000013B5 0000 0000 0000 0000 0000+  		dw VolEnv_18, VolEnv_19, VolEnv_1A, VolEnv_1B, VolEnv_1C, VolEnv_1D
000013C1 0000 0000 0000 0000 0000+  		dw VolEnv_1E, VolEnv_1F, VolEnv_20, VolEnv_21, VolEnv_22, VolEnv_23
000013CD 0000 0000 0000 0000        		dw VolEnv_24, VolEnv_25, VolEnv_26, VolEnv_27
000013D5                            
000013D5                            VolEnv_01:	incbin "VolEnv/01.bin"
000013D7                            VolEnv_02:	incbin "VolEnv/02.bin"
000013DE                            VolEnv_03:	incbin "VolEnv/03.bin"
000013F7                            VolEnv_04:	incbin "VolEnv/04.bin"
00001403                            VolEnv_05:	incbin "VolEnv/05.bin"
0000140E                            VolEnv_06:	incbin "VolEnv/06.bin"
0000141D                            VolEnv_07:	incbin "VolEnv/07.bin"
00001426                            VolEnv_08:	incbin "VolEnv/08.bin"
00001437                            VolEnv_09:	incbin "VolEnv/09.bin"
00001442                            VolEnv_0A:	incbin "VolEnv/0A.bin"
00001457                            VolEnv_0B:	incbin "VolEnv/0B.bin"
00001461                            VolEnv_0C:	incbin "VolEnv/0C.bin"
0000146A                            VolEnv_0D:	incbin "VolEnv/0D.bin"
0000146C                            VolEnv_0E:	incbin "VolEnv/0E.bin"
0000146E                            VolEnv_0F:	incbin "VolEnv/0F.bin"
00001475                            VolEnv_10:	incbin "VolEnv/10.bin"
00001494                            VolEnv_11:	incbin "VolEnv/11.bin"
0000149B                            VolEnv_12:	incbin "VolEnv/12.bin"
000014A6                            VolEnv_13:	incbin "VolEnv/13.bin"
000014B5                            VolEnv_14:	incbin "VolEnv/14.bin"
000014BB                            VolEnv_15:	incbin "VolEnv/15.bin"
000014CC                            VolEnv_16:	incbin "VolEnv/16.bin"
000014D7                            VolEnv_17:	incbin "VolEnv/17.bin"
000014EC                            VolEnv_18:	incbin "VolEnv/18.bin"
00001505                            VolEnv_19:	incbin "VolEnv/19.bin"
0000150E                            VolEnv_1A:	incbin "VolEnv/1A.bin"
00001515                            VolEnv_1B:	incbin "VolEnv/1B.bin"
0000151E                            VolEnv_1C:	incbin "VolEnv/1C.bin"
0000152F                            VolEnv_1D:	incbin "VolEnv/1D.bin"
0000155C                            VolEnv_1E:	incbin "VolEnv/1E.bin"
0000155F                            VolEnv_1F:	incbin "VolEnv/1F.bin"
00001563                            VolEnv_20:	incbin "VolEnv/20.bin"
00001570                            VolEnv_21:	incbin "VolEnv/21.bin"
00001582                            VolEnv_22:	incbin "VolEnv/22.bin"
00001589                            VolEnv_23:	incbin "VolEnv/23.bin"
00001592                            VolEnv_24:	incbin "VolEnv/24.bin"
00001596                            VolEnv_25:	incbin "VolEnv/25.bin"
000015A8                            VolEnv_26:	incbin "VolEnv/26.SK.bin"
0000160B                            VolEnv_27:	incbin "VolEnv/27.bin"
0000160B                            VolEnv_27:	incbin "VolEnv/27.bin"
00001618                            ; ---------------------------------------------------------------------------
00001618                            ; 1618 167E 17D8
00001618                            	org 1618h
00001618 =00000033                  MusicAmount = 		51	; S&K had 51 music slots
00001618 =000000AD                  SFXAmount = 		173	; S&K and S3 had 173 music slots
00001618                            MusicPointers:
00001618                            SFXPointers:
00001618 0000                       			dw 0
0000161A                            		org 17D8h
000017D8                            UniversalVoices:
000017D8                            	incbin "Universal Voices/Synth Bass 2.bin"
000017F1                            	incbin "Universal Voices/Trumpet 1.bin"
0000180A                            	incbin "Universal Voices/Slap Bass 2.bin"
00001823                            	incbin "Universal Voices/Synth Bass 1.bin"
0000183C                            	incbin "Universal Voices/Bell Synth 1.bin"
00001855                            	incbin "Universal Voices/Bell Synth 2.bin"
0000186E                            	incbin "Universal Voices/Synth Brass 1.bin"
00001887                            	incbin "Universal Voices/Synth Bassoon.bin"
000018A0                            	incbin "Universal Voices/Bell Horn.bin"
000018B9                            	incbin "Universal Voices/Synth Bass 3.bin"
000018D2                            	incbin "Universal Voices/Synth Trumpet.bin"
000018EB                            	incbin "Universal Voices/Wood Block.bin"
00001904                            	incbin "Universal Voices/Tubular Bell.bin"
0000191D                            	incbin "Universal Voices/Strike Bass.bin"
00001936                            	incbin "Universal Voices/Elec Piano.bin"
0000194F                            	incbin "Universal Voices/Bright Piano.bin"
00001968                            	incbin "Universal Voices/Church Bell.bin"
00001981                            	incbin "Universal Voices/Synth Brass 2.bin"
0000199A                            	incbin "Universal Voices/Bell Piano.bin"
000019B3                            	incbin "Universal Voices/Wet Wood Bass.bin"
000019CC                            	incbin "Universal Voices/Silent Bass.bin"
000019E5                            	incbin "Universal Voices/Picked Bass.bin"
000019FE                            	incbin "Universal Voices/Xylophone.bin"
00001A17                            	incbin "Universal Voices/Sine Flute.bin"
00001A30                            	incbin "Universal Voices/Pipe Organ.bin"
00001A49                            	incbin "Universal Voices/Synth Brass 3.bin"
00001A62                            	incbin "Universal Voices/Harpsichord.bin"
00001A7B                            	incbin "Universal Voices/Metallic Bass 1.bin"
00001A94                            	incbin "Universal Voices/Metallic Bass 2.bin"
00001AAD                            	incbin "Universal Voices/Backdropped Metallic Bass.bin"
00001AC6                            	incbin "Universal Voices/Sine Bell.bin"
00001ADF                            	incbin "Universal Voices/Synth Metallic Small Bell.bin"
00001AF8                            	incbin "Universal Voices/Synth lead.bin"
00001B11                            	incbin "Universal Voices/Rock Organ.bin"
00001B2A                            	incbin "Universal Voices/Strike Slap Bass.bin"
00001B43                            
00001B43                            	org 1C00h
00001C00 0000 0000 0000 0000 0000+  	dsb 10h, 0h
