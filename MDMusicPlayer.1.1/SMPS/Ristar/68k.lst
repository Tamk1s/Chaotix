00000000                            ; RISTAR SOUD DRIVER DISASSEMBLY. LAZILY BOTCHED TOGETHER BY NATSUMI
00000000                            	include "..\..\code\macro.asm"
00000000                            	opt ae+		; automatic even's
00000000                            	opt l+		; . is local lable symbol
00000000                            	opt w-		; don't print warnings
00000000                            	opt op+		; optimize PC relative addressing
00000000                            	opt os+		; optimize short branches
00000000                            	opt ow+		; optimize absolute long addressing
00000000                            	opt oz+		; optimize zero displacements
00000000                            	opt oaq+	; optimize addq
00000000                            	opt osq+	; optimize subq
00000000                            	opt omq+	; optimize moveq
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	if narg>=2
00000000                            		cnop \2,\1
00000000                            	else
00000000                            		cnop 0,\1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ===========================================================================
00000000                            vdpComm		macro ins,addr,type,rwd,end,end2
00000000                            	if narg=5
00000000                            		\ins #(((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14), \end
00000000                            
00000000                            	elseif narg=6
00000000                            		\ins #(((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
00000000                            
00000000                            	else
00000000                            		\ins (((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)
00000000                            	endif
00000000                                endm
00000000                            
00000000                            vdpCoord	macro base,x,y,rwd
00000000                            .addr =		(\base+\x+\x+(\y*$40))
00000000                            	dc.l (((VRAM&\rwd)&3)<<30)|((.addr&$3FFF)<<16)|(((VRAM&\rwd)&$FC)<<2)|((.addr&$C000)>>14)
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; values for the type argument
00000000 =00000021                  VRAM =  %100001
00000000 =0000002B                  CRAM =  %101011
00000000 =00000025                  VSRAM = %100101
00000000                            
00000000                            ; values for the rwd argument
00000000 =0000000C                  READ =  %001100
00000000 =00000007                  WRITE = %000111
00000000 =00000027                  DMA =   %100111
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the VDP to copy a region of 68k memory to VRAM or CRAM or VSRAM
00000000                            dma68kToVDP macro source,dest,length,type
00000000                            		lea	VDP_control_port,a5
00000000                            		move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(a5)
00000000                            		move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(a5)
00000000                            		move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            	vdpComm	move.l,\dest,\type,DMA,(a5)
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the VDP to fill a region of VRAM with a certain byte
00000000                            dmaFillVRAM macro byte,addr,length,wait
00000000                            	lea	VDP_control_port,a5
00000000                            	move.w	#$8F01,(a5) ; VRAM pointer increment: $0001
00000000                            	move.l	#(($9400|((((length)-1)&$FF00)>>8))<<16)|($9300|(((length)-1)&$FF)),(a5) ; DMA length ...
00000000                            	move.w	#$9780,(a5) ; VRAM fill
00000000                            	move.l	#$40000080|(((addr)&$3FFF)<<16)|(((addr)&$C000)>>14),(a5) ; Start at ...
00000000                            	move.w	#(byte)<<8,(VDP_data_port).l ; Fill with byte
00000000                            
00000000                            	if narg<4
00000000                            .loop\@		move.w	(a5),d1
00000000                            		btst	#1,d1
00000000                            		bne.s	.loop\@	; busy loop until the VDP is finished filling...
00000000                            		move.w	#$8F02,(a5) ; VRAM pointer increment: $0002
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; allows you to declare string to be converted to character map or mappings
00000000                            asc2	macro	or, str
00000000                            	dc.W strlen(\str)-1
00000000                            	asc	\or, \str
00000000                                endm
00000000                            
00000000                            asc	macro	or, str
00000000                            .lc = 0
00000000                            	rept strlen(\str)
00000000                            .cc		substr .lc+1,.lc+1,\str
00000000                            
00000000                            		if '\.cc'=' '
00000000                            			dc.\0 0|or			; whitespace
00000000                            
00000000                            		elseif ('\.cc'>='0')&('\.cc'<='9')
00000000                            			dc.\0 ('\.cc'-'0'+1)|or		; 0-9
00000000                            
00000000                            		elseif ('\.cc'>='a')&('\.cc'<='z')
00000000                            			dc.\0 ('\.cc'-'a'+$2B)|or	; a-z
00000000                            
00000000                            		elseif ('\.cc'>='A')&('\.cc'<='Z')
00000000                            			dc.\0 ('\.cc'-'A'+$B)|or	; A-Z
00000000                            
00000000                            		elseif '\.cc'='!'
00000000                            			dc.\0 $25|or	; !
00000000                            
00000000                            		elseif '\.cc'='?'
00000000                            			dc.\0 $26|or	; ?
00000000                            
00000000                            		elseif '\.cc'='.'
00000000                            			dc.\0 $27|or	; .
00000000                            
00000000                            		elseif '\.cc'=','
00000000                            			dc.\0 $28|or	; ,
00000000                            
00000000                            		elseif '\.cc'=':'
00000000                            			dc.\0 $29|or	; :
00000000                            
00000000                            		elseif '\.cc'=';'
00000000                            			dc.\0 $2A|or	; ;
00000000                            
00000000                            		elseif '\.cc'='^'
00000000                            			dc.\0 $45|or	; ^
00000000                            
00000000                            		elseif '\.cc'='/'
00000000                            			dc.\0 $46|or	; /
00000000                            
00000000                            		elseif '\.cc'='\\'
00000000                            			dc.\0 $47|or	; \
00000000                            
00000000                            		elseif '\.cc'='*'
00000000                            			dc.\0 $48|or	; *
00000000                            
00000000                            		elseif '\.cc'='-'
00000000                            			dc.\0 $49|or	; -
00000000                            
00000000                            		elseif '\.cc'='|'
00000000                            			dc.\0 $4A|or	; _ (wider)
00000000                            
00000000                            		elseif '\.cc'='$'
00000000                            			dc.\0 $4B|or	; $
00000000                            
00000000                            		elseif '\.cc'='%'
00000000                            			dc.\0 $4C|or	; %
00000000                            
00000000                            		elseif '\.cc'='#'
00000000                            			dc.\0 $4D|or	; #
00000000                            
00000000                            		elseif '\.cc'='+'
00000000                            			dc.\0 $4E|or	; +
00000000                            
00000000                            		elseif '\.cc'='}'
00000000                            			dc.\0 $4F|or	; ->
00000000                            
00000000                            		elseif '\.cc'='{'
00000000                            			dc.\0 $50|or	; <-
00000000                            
00000000                            		elseif '\.cc'='@'
00000000                            			dc.\0 $51|or	; @
00000000                            
00000000                            		elseif '\.cc'='_'
00000000                            			dc.\0 $52|or	; _
00000000                            
00000000                            		elseif '\.cc'='('
00000000                            			dc.\0 $53|or	; (
00000000                            
00000000                            		elseif '\.cc'=')'
00000000                            			dc.\0 $54|or	; )
00000000                            
00000000                            		elseif '\.cc'='['
00000000                            			dc.\0 $55|or	; [
00000000                            
00000000                            		elseif '\.cc'=']'
00000000                            			dc.\0 $56|or	; ]
00000000                            
00000000                            		elseif '\.cc'='>'
00000000                            			dc.\0 $57|or	; >
00000000                            
00000000                            		elseif '\.cc'='<'
00000000                            			dc.\0 $58|or	; <
00000000                            
00000000                            		elseif '\.cc'='&'
00000000                            			dc.\0 $59|or	; &
00000000                            
00000000                            		elseif '\.cc'='~'
00000000                            			dc.\0 $5A|or	; ~
00000000                            
00000000                            		elseif '\.cc'="'"
00000000                            			dc.\0 $5B|or	; '
00000000                            
00000000                            		elseif '\.cc'='"'
00000000                            			dc.\0 $5C|or	; "
00000000                            
00000000                            		elseif '\.cc'='='
00000000                            			dc.\0 $5D|or	; =
00000000                            
00000000                            		elseif '\.cc'='`'
00000000                            			dc.\0 $5E|or	; `
00000000                            
00000000                            		else
00000000                            			inform 2,"ASCII value failure: \.cc %d", .cc
00000000                            		endif
00000000                            
00000000                            .lc =		.lc+1
00000000                            	endr
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the Z80 to stop, and waits for it to finish stopping (acquire bus)
00000000                            stopZ80 macro
00000000                            		move.w	#$100,Z80_bus_request	; stop the Z80
00000000                            .loop\@		btst	#0,Z80_bus_request
00000000                            		bne.s	.loop\@			; loop until it says it's stopped
00000000                                endm
00000000                            
00000000                            ; tells the Z80 to start again
00000000                            startZ80 macro
00000000                            		move.w	#0,Z80_bus_request	; start the Z80
00000000                                endm
00000000                            
00000000                            ; waits for YM
00000000                            waitYM        macro	reg
00000000                            .wait\@:	move.b	(\reg),d2
00000000                            		btst	#7,d2
00000000                            		bne.s	.wait\@
00000000                                    endm
00000000                            
00000000                            ; ===========================================================================
00000000                            	rsreset		; set __rs to 0
00000000 =00000000                  cmp_none	rs.l 1	; no data
00000000 =00000004                  cmp_unc		rs.l 1	; uncompressed driver image
00000000 =00000008                  cmp_kos		rs.l 1	; kosinski compressed driver image
00000000 =0000000C                  cmp_comp	rs.l 1	; comper compressed driver image
00000000 =00000010                  cmp_nem		rs.l 1	; nemesis compressed driver image
00000000 =00000014                  cmp_eni		rs.l 1	; enigma compressed driver image
00000000                            
00000000                            ; ===========================================================================
00000000                            incdrv	macro	type, folder, comp
00000000                            \folder	=	drvnum		; equate driver name with it's ID
00000000                            Driver_Folder_\#drvnum	equs "\folder"; get the folder the driver is installed on
00000000                            
00000000                            	dc.l \folder\_dmaon
00000000                            	dc.l \folder\_dmaoff
00000000                            	dc.l \folder\_load
00000000                            	dc.l \folder\_play
00000000                            	dc.l \folder\_update
00000000                            
00000000                            Driver68k_\#drvnum:
00000000                            	dc.w \comp		; set compression mode
00000000                            
00000000                            	if \comp<>cmp_none	; if compression is none, dont include any files
00000000                            	if \comp=cmp_unc	; set size of the driver if uncompressed
00000000                            		dc.w ((DriverZ80_\#drvnum-DriverZ80_End_\#drvnum-4)/4)-1
00000000                            	else			; if not uncompressed, set a pointer to z80 driver
00000000                            		dc.l DriverZ80_\#drvnum
00000000                            	endif
00000000                            	incbin	"\type\/\folder\/drv.68k"; include the actual driver code
00000000                            Driver68k_End_\#drvnum:		; set ending point for the driver (uncompressed only)
00000000                            
00000000                            DriverZ80_\#drvnum:
00000000                            	if \comp=cmp_unc	; set size of the driver if uncompressed
00000000                            		dc.w ((DriverZ80_\#drvnum-DriverZ80_End_\#drvnum-4)/4)-1
00000000                            	endif
00000000                            	incbin	"\type\/\folder\/drv.z80"; include the actual driver code
00000000                            DriverZ80_End_\#drvnum:		; set ending point for the driver (uncompressed only)
00000000                            	endif
00000000                            
00000000                            	include	"\type\/\folder\/code.asm"; finally include play, load and update code
00000000                            
00000000                            drvnum	=	drvnum+4	; next driver ID
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; following macros are all about including specific array's to driver images
00000000                            ; and specific data.
00000000                            drvimg	macro
00000000                            rvar	= 0			; reset driver ID
00000000                            	rept	drvnum/4	; do for all installed drivers
00000000                            		dc.l Driver68k_\#rvar; set pointer to driver data
00000000                            
00000000                            rvar	= rvar+4		; next driver
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; Driver type definition
00000000                            		rsset 0
00000000 =00000000                  TYPE_NULL	rs.w 1
00000000 =00000002                  TYPE_SMPS	rs.w 1
00000000 =00000004                  TYPE_GEMS	rs.w 1
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_end =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A11100                  Z80_bus_request =		$A11100
00000000 =00A11200                  Z80_reset =			$A11200
00000000                            
00000000 =00A130F1                  SRAM_access =			$A130F1
00000000 =00A14000                  Security_addr =			$A14000
00000000                            ; ===========================================================================
00000000                            ; I/O Area
00000000 =00A10001                  HW_Version =			$A10001
00000000 =00A10003                  HW_Port_1_Data =		$A10003
00000000 =00A10005                  HW_Port_2_Data =		$A10005
00000000 =00A10007                  HW_Expansion_Data =		$A10007
00000000 =00A10009                  HW_Port_1_Control =		$A10009
00000000 =00A1000B                  HW_Port_2_Control =		$A1000B
00000000 =00A1000D                  HW_Expansion_Control =		$A1000D
00000000 =00A1000F                  HW_Port_1_TxData =		$A1000F
00000000 =00A10011                  HW_Port_1_RxData =		$A10011
00000000 =00A10013                  HW_Port_1_SCtrl =		$A10013
00000000 =00A10015                  HW_Port_2_TxData =		$A10015
00000000 =00A10017                  HW_Port_2_RxData =		$A10017
00000000 =00A10019                  HW_Port_2_SCtrl =		$A10019
00000000 =00A1001B                  HW_Expansion_TxData =		$A1001B
00000000 =00A1001D                  HW_Expansion_RxData =		$A1001D
00000000 =00A1001F                  HW_Expansion_SCtrl =		$A1001F
00000000                            
00000000                            ; ===========================================================================
00000000                            ; VDP addresses
00000000 =00C00000                  VDP_data_port =			$C00000
00000000 =00C00004                  VDP_control_port =		$C00004
00000000 =00C00011                  PSG_input =			$C00011
00000000                            ; ===========================================================================
00000000                            	rsset	$FFFF0000
00000000 =FFFF0002                  Z80music	equ __rs+2	; if z80 driver, this is the address of the music file.
00000000 =FFFF0000                  Driver68K	rs.b $8000	; 68k driver ROM. if Z80 driver, this is rte
00000000 =FFFF8000                  Drv68Kmem	rs.b 0		; memory for the 68k driver.
00000000 =FFFF8000                  NemDecBuffer	rs.b $1C00	; used when decompressing Nemesis format sound drivers
00000000 =FFFF9C00                  HBlankRAM	rs.b $400	; code to run in HBlank. Can also be used as extra RAM for sound driver
00000000                            		rs.l 3		; stack overflow area
00000000 =FFFFA00C                  StackUflowRAM	rs.l 1		; stack overflow area
00000000 =FFFFA010                  StackStart	rs.b $100	; 68k stack
00000000 =FFFFA110                  Stack		rs.b 0		; 68k stack pointer
00000000 =FFFFA110                  StackOflowRAM	rs.l 4		; stack underflow area
00000000 =FFFFA120                  MainPalette	rs.b $80	; current palette of the program
00000000 =FFFFA1A0                  VScrollRAM	rs.b 80		; Vertical scrolling RAM
00000000 =FFFFA1F0                  ActiveChnLast	rs.w 1		; active sound channels for last frame
00000000 =FFFFA1F2                  ActiveChn	rs.w 1		; currently active sound channels. Bits 0-5 = FM1-FM6, Bits 6-9 = PSG1-PSG3, Bit 10 = DAC
00000000 =FFFFA1F4                  MusSelection	rs.w 1		; current song selection
00000000 =FFFFA1F6                  MusPlaying	rs.w 1		; current song playing
00000000 =FFFFA1F8                  DMAlen		rs.w 1		; current fake DMA mode
00000000 =FFFFA1FA                  LoadedDriver	rs.b 1		; currently loaded sound driver
00000000 =FFFFA1FB                  DriverType	rs.b 1		; the type of the sound driver loaded
00000000 =FFFFA1FC                  HWVersion	rs.b 1		; determines the region of the machine
00000000 =FFFFA1FE                  VintTime	rs.w 1		; V-int timer in frames
00000000 =FFFFA200                  Ctrl1Held	rs.b 1		; controller 1 held buttons
00000000 =FFFFA201                  Ctrl1Press	rs.b 1		; controller 1 pressed buttons
00000000 =FFFFA202                  Ctrl2Held	rs.b 1		; controller 2 held buttons
00000000 =FFFFA203                  Ctrl2Press	rs.b 1		; controller 2 pressed buttons
00000000 =FFFFA204                  Ctrl0Held	rs.b 1		; controller 0 held buttons
00000000 =FFFFA205                  Ctrl0Press	rs.b 1		; controller 0 pressed buttons
00000000 =FFFFA206                  ChanDat		rs.b 8+(16*6)	; total amount of space for channel data
00000000                            
00000000                            ; SMPS Channel data
00000000                            	rsset ChanDat
00000000 =FFFFA206                  sTempo		rs.b 1		; tempo of the driver
00000000 =FFFFA207                  sTickMul	rs.b 1		; tick multiplier of the driver
00000000 =FFFFA208                  sDAC2number	rs.b 1		; the DAC2 ID we are playing currently
00000000 =FFFFA209                  sDAC2time	rs.b 1		; timer for the currently playing DAC2
00000000 =FFFFA20A                  sDACnumber	rs.b 1		; the DAC ID we are playing currently
00000000 =FFFFA20B                  sDACtime	rs.b 1		; timer for the currently playing DAC
00000000                            		rs.w 0		; make sure these addresses are even
00000000                            
00000000 =FFFFA20C                  sPSG3tmul	rs.b 1		; PSG3 tick multiplier
00000000 =FFFFA20D                  sPSG3inst	rs.b 1		; PSG3 instrument
00000000 =FFFFA20E                  sPSG3vol	rs.b 1		; PSG3 volume
00000000 =FFFFA20F                  sPSG3note	rs.b 1		; PSG3 note
00000000 =FFFFA210                  sPSG3time	rs.b 1		; PSG3 timer
00000000 =FFFFA211                  sPSG2		rs.b 5
00000000 =FFFFA216                  sPSG1		rs.b 5
00000000 =FFFFA21B                  sFM6		rs.b 5
00000000 =FFFFA220                  sFM5		rs.b 5
00000000 =FFFFA225                  sFM4		rs.b 5
00000000 =FFFFA22A                  sFM3		rs.b 5
00000000 =FFFFA22F                  sFM2		rs.b 5
00000000 =FFFFA234                  sFM1		rs.b 5
00000000                            
00000000                            ; GEMS Channel data
00000000                            	rsset ChanDat
00000000 =FFFFA206                  gTempo		rs.w 1		; current bpm
00000000 =FFFFA208                  gVolume		rs.b 1		; master volume
00000000 =FFFFA209                  gCurSeq		rs.b 1		; sequence number (used in GEMS manipulate mode!)
00000000 =FFFFA20A                  gSeq		rs.b 1		; current sequence(!)
00000000 =FFFFA20B                  gFlags		rs.b 1		; channel flags
00000000 =FFFFA20C                  gPrio		rs.b 1		; current priority
00000000 =FFFFA20D                  gPatch		rs.b 1		; current patch id
00000000 =FFFFA20E                  gVol		rs.b 1		; how loud the channel is
00000000 =FFFFA210                  gTime		rs.w 1		; timer for next event
00000000 =FFFFA212                  gNote		rs.b 1		; doesnt seem to be possible ;(
00000000                            		rs.b 8*16	; do the same for the rest of the channels
00000000                            
00000000 =FFFFA294                  gMutedChs	rs.w 1		; muted channels list
00000000 =FFFFA296                  gSustain	rs.w 1		; sustained channels list
00000000 =FFFFA298                  gCursor		rs.b 1		; current cursor position for manipulate menu
00000000                            ; ===========================================================================
00000000 =00000000                  pal60mod =	0	; Set to 1 if you want to enable 60hz PAL mode for all sound drivers (note; some may not correctly play music)
00000000                            			; NOTE: Drivers are modified in order to support this feature.
00000000 =00000000                  extremeDMA =	0	; set to 1 to unlock extreme ($4000 bytes!!!) DMA mode.
00000000                            			; You must acknowledge however, that most drivers can not cope with this and it will cause all kinds of crazy glitches.
00000000                            			; this is nonstandard and no driver is designed to be able to deal with this.
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            
00000000                            Play_sample_data_macro macro index, plf, f2, f3
00000000                            	dc.b \index, \plf, \f2, \f3
00000000                                endm
00000000                            
00000000                            	org Driver68K		; pretend we are in RAM
FFFF0000 4EFA 0000                  	jmp	loc_C867E(pc)	; start driver
FFFF0004                            
FFFF0004 0000 0000                  MusicPointers:	dc.l 0		; Fill out dynamically
FFFF0008 0000 0000                  PCMSimpleDriver:dc.l 0
FFFF000C 0000 0000                  PCMDualDriver:	dc.l 0
FFFF0010 0000 0000                  PCMSamples:	dc.l 0
FFFF0014 0000 0000                  DACTable1:	dc.l 0
FFFF0018 0000                       DACTable2:	dc.w 0
FFFF001A                            
FFFF001A                            SFXList:
FFFF001A                            SpecialList_Broken:
FFFF001A 0000                       	dc.w 0
FFFF001C                            
FFFF001C                            j_LoadPCMDriver:
FFFF001C 6000 0000                  		bra.w	LoadDualDriver
FFFF0020                            
FFFF0020                            j_LoadSimplePCMDriver:
FFFF0020 6000 0000                  		bra.w	LoadSimpleDriver
FFFF0024                            
FFFF0024 0000 0000                  NoiseIndex:	dc.l byte_C8070		; DATA XREF: ROM:000C8030o
FFFF0028                            					; SMPS_FMPSGNoiseEffects+Co
FFFF0028 0000 0000                  		dc.l byte_C8086
FFFF002C 0000 0000                  		dc.l byte_C809C
FFFF0030 0000 0000                  		dc.l byte_C80A6
FFFF0034 0000 0000                  		dc.l byte_C80C0
FFFF0038 0000 0000                  		dc.l byte_C80B0
FFFF003C 0000 0000                  		dc.l byte_C80EA
FFFF0040 0000 0000                  		dc.l byte_C80EC
FFFF0044 0001 0203 0405 0607 0809+  byte_C8070:	dc.b	0,   1,	  2,   3,   4,	 5,   6,   7,	8,   9,	 $A,  $B,  $C,	$D,  $E,  $F
FFFF0054                            					; DATA XREF: ROM:NoiseIndexo
FFFF0054 1011 1213 1483             		dc.b  $10, $11,	$12, $13, $14, $83
FFFF005A 0001 0203 0405 0607 0809+  byte_C8086:	dc.b	0,   1,	  2,   3,   4,	 5,   6,   7,	8,   9,	 $A,  $B,  $C,	$D,  $E,  $F
FFFF006A                            					; DATA XREF: ROM:000C8054o
FFFF006A 1011 1213 1480             		dc.b  $10, $11,	$12, $13, $14, $80
FFFF0070 D8E2 ECF6 000A 141E 2883   byte_C809C:	dc.b  $D8, $E2,	$EC, $F6,   0,	$A, $14, $1E, $28, $83
FFFF007A                            					; DATA XREF: ROM:000C8058o
FFFF007A D8E2 ECF6 000A 141E 2880   byte_C80A6:	dc.b  $D8, $E2,	$EC, $F6,   0,	$A, $14, $1E, $28, $80
FFFF0084                            					; DATA XREF: ROM:000C805Co
FFFF0084 0404 0404 0303 0303 0202+  byte_C80B0:	dc.b	4,   4,	  4,   4,   3,	 3,   3,   3,	2,   2,	  2,   2,   1,	 1,   1,   1
FFFF0094                            					; DATA XREF: ROM:000C8064o
FFFF0094 0000 0000 0000 0000 0000+  byte_C80C0:	dc.b	0,   0,	  0,   0,   0,	 0,   0,   0,	0,   0,	  1,   1,   1,	 1,   1,   1
FFFF00A4                            					; DATA XREF: ROM:000C8060o
FFFF00A4 0101 0101 0101 0101 0202+  		dc.b	1,   1,	  1,   1,   1,	 1,   1,   1,	2,   2,	  2,   2,   2,	 2,   2,   2
FFFF00B4 0303 0303 0303 0303 0483   		dc.b	3,   3,	  3,   3,   3,	 3,   3,   3,	4, $83
FFFF00BE 0283                       byte_C80EA:	dc.b	2, $83		; DATA XREF: ROM:000C8068o
FFFF00C0 0000 0000 0001 0101 0101+  byte_C80EC:	dc.b	0,   0,	  0,   0,   0,	 1,   1,   1,	1,   1,	  2,   2,   2,	 2,   2,   2
FFFF00D0                            					; DATA XREF: ROM:000C806Co
FFFF00D0 0303 0303 0304 0404 0404+  		dc.b	3,   3,	  3,   3,   3,	 4,   4,   4,	4,   4,	  5,   5,   5,	 5,   5,   6
FFFF00E0 0606 0606 0707 0783        		dc.b	6,   6,	  6,   6,   7,	 7,   7, $83
FFFF00E8 0000 0000                  FlutterIndex:	dc.l byte_C818C		; DATA XREF: ROM:000C8034o
FFFF00EC                            					; SMPS_PSGUpdateVolFX+14o
FFFF00EC 0000 0000                  		dc.l byte_C81B2
FFFF00F0 0000 0000                  		dc.l byte_C81B9
FFFF00F4 0000 0000                  		dc.l byte_C81C2	; 4
FFFF00F8 0000 0000                  		dc.l byte_C81DE
FFFF00FC 0000 0000                  		dc.l byte_C81CD
FFFF0100 0000 0000                  		dc.l byte_C8208
FFFF0104 0000 0000                  		dc.l byte_C8211	; 8
FFFF0108 0000 0000                  		dc.l byte_C8239
FFFF010C 0000 0000                  		dc.l byte_C823B
FFFF0110 0000 0000                  		dc.l byte_C8242
FFFF0114 0000 0000                  		dc.l byte_C825B	; C
FFFF0118 0000 0000                  		dc.l byte_C826F
FFFF011C 0000 0000                  		dc.l byte_C827A
FFFF0120 0000 0000                  		dc.l byte_C8289
FFFF0124 0000 0000                  		dc.l byte_C8292	; 10
FFFF0128 0000 0000                  		dc.l byte_C82A3
FFFF012C 0000 0000                  		dc.l byte_C82AF
FFFF0130 0000 0000                  		dc.l byte_C82C4
FFFF0134 0000 0000                  		dc.l byte_C82CE	; 14
FFFF0138 0000 0000                  		dc.l byte_C82E5
FFFF013C 0000 0000                  		dc.l byte_C82FE
FFFF0140 0000 0000                  		dc.l byte_C8301
FFFF0144 0000 0000                  		dc.l byte_C8362	; 18
FFFF0148 0000 0000                  		dc.l byte_C8367
FFFF014C 0000 0000                  		dc.l byte_C8380
FFFF0150 0000 0000                  		dc.l byte_C8397
FFFF0154 0000 0000                  		dc.l byte_C83AA	; 1C
FFFF0158 0000 0000                  		dc.l byte_C83BF
FFFF015C 0000 0000                  		dc.l byte_C83D7
FFFF0160 0C0C 0C0B 0B0B 0A0A 0A09+  byte_C818C:	dc.b   $C,  $C,	 $C,  $B,  $B,	$B,  $A,  $A,  $A,   9,	  9,   9,   8,	 8,   8,   7
FFFF0170                            					; DATA XREF: ROM:FlutterIndexo
FFFF0170 0707 0606 0605 0505 0404+  		dc.b	7,   7,	  6,   6,   6,	 5,   5,   5,	4,   4,	  4,   3,   3,	 3,   2,   2
FFFF0180 0201 0101 0281             		dc.b	2,   1,	  1,   1,   2, $81
FFFF0186 0002 0406 0810 83          byte_C81B2:	dc.b	0,   2,	  4,   6,   8, $10, $83	; DATA XREF: ROM:000C8118o
FFFF018D 0000 0101 0303 0405 83     byte_C81B9:	dc.b	0,   0,	  1,   1,   3,	 3,   4,   5, $83 ; DATA XREF: ROM:000C811Co
FFFF0196 0000 0203 0404 0505 0506+  byte_C81C2:	dc.b	0,   0,	  2,   3,   4,	 4,   5,   5,	5,   6,	$83
FFFF01A1                            					; DATA XREF: ROM:000C8120o
FFFF01A1 0404 0404 0303 0303 0202+  byte_C81CD:	dc.b	4,   4,	  4,   4,   3,	 3,   3,   3,	2,   2,	  2,   2,   1,	 1,   1,   1
FFFF01B1                            					; DATA XREF: ROM:000C8128o
FFFF01B1 83                         		dc.b  $83
FFFF01B2 0000 0000 0000 0000 0000+  byte_C81DE:	dc.b	0,   0,	  0,   0,   0,	 0,   0,   0,	0,   0,	  1,   1,   1,	 1,   1,   1
FFFF01C2                            					; DATA XREF: ROM:000C8124o
FFFF01C2 0101 0101 0101 0101 0202+  		dc.b	1,   1,	  1,   1,   1,	 1,   1,   1,	2,   2,	  2,   2,   2,	 2,   2,   2
FFFF01D2 0303 0303 0303 0303 0483   		dc.b	3,   3,	  3,   3,   3,	 3,   3,   3,	4, $83
FFFF01DC 0302 0100 0001 0102 81     byte_C8208:	dc.b	3,   2,	  1,   0,   0,	 1,   1,   2, $81 ; DATA XREF: ROM:000C812Co
FFFF01E5 0000 0000 0001 0101 0101+  byte_C8211:	dc.b	0,   0,	  0,   0,   0,	 1,   1,   1,	1,   1,	  2,   2,   2,	 2,   2,   2
FFFF01F5                            					; DATA XREF: ROM:000C8130o
FFFF01F5 0303 0303 0304 0404 0404+  		dc.b	3,   3,	  3,   3,   3,	 4,   4,   4,	4,   4,	  5,   5,   5,	 5,   5,   6
FFFF0205 0606 0606 0707 0783        		dc.b	6,   6,	  6,   6,   7,	 7,   7, $83
FFFF020D 0283                       byte_C8239:	dc.b	2, $83		; DATA XREF: ROM:000C8134o
FFFF020F 0002 0406 0810 83          byte_C823B:	dc.b	0,   2,	  4,   6,   8, $10, $83	; DATA XREF: ROM:000C8138o
FFFF0216 0201 0000 0102 0202 0202+  byte_C8242:	dc.b	2,   1,	  0,   0,   1,	 2,   2,   2,	2,   2,	  2,   2,   2,	 2,   2,   2
FFFF0226                            					; DATA XREF: ROM:000C813Co
FFFF0226 0203 0303 0404 0405 81     		dc.b	2,   3,	  3,   3,   4,	 4,   4,   5, $81
FFFF022F 0001 0203 0404 0405 0505+  byte_C825B:	dc.b	0,   1,	  2,   3,   4,	 4,   4,   5,	5,   5,	  6,   7,   6,	 5,   4,   3
FFFF023F                            					; DATA XREF: ROM:000C8140o
FFFF023F 0201 0081                  		dc.b	2,   1,	  0, $81
FFFF0243 0300 0101 0102 0304 0405+  byte_C826F:	dc.b	3,   0,	  1,   1,   1,	 2,   3,   4,	4,   5,	$81
FFFF024E                            					; DATA XREF: ROM:000C8144o
FFFF024E 0000 0101 0203 0405 0506+  byte_C827A:	dc.b	0,   0,	  1,   1,   2,	 3,   4,   5,	5,   6,	  8,   7,   7,	 6, $81
FFFF025D                            					; DATA XREF: ROM:000C8148o
FFFF025D 010C 030F 0207 030F 80     byte_C8289:	dc.b	1,  $C,	  3,  $F,   2,	 7,   3,  $F, $80 ; DATA XREF: ROM:000C814Co
FFFF0266 0000 0002 0303 0405 0607+  byte_C8292:	dc.b	0,   0,	  0,   2,   3,	 3,   4,   5,	6,   7,	  8,   9,  $A,	$B,  $E,  $F
FFFF0276                            					; DATA XREF: ROM:000C8150o
FFFF0276 83                         		dc.b  $83
FFFF0277 0000 0101 0303 0405 0505+  byte_C82A3:	dc.b	0,   0,	  1,   1,   3,	 3,   4,   5,	5,   5,	$82,   4
FFFF0283                            					; DATA XREF: ROM:000C8154o
FFFF0283 0100 0000 0001 0101 0202+  byte_C82AF:	dc.b	1,   0,	  0,   0,   0,	 1,   1,   1,	2,   2,	  2,   3,   3,	 3,   3,   4
FFFF0293                            					; DATA XREF: ROM:000C8158o
FFFF0293 0404 0505 81               		dc.b	4,   4,	  5,   5, $81
FFFF0298 1020 3040 3020 1000 F080   byte_C82C4:	dc.b  $10, $20,	$30, $40, $30, $20, $10,   0, $F0, $80
FFFF02A2                            					; DATA XREF: ROM:000C815Co
FFFF02A2 0605 0403 0101 0000 0000+  byte_C82CE:	dc.b	6,   5,	  4,   3,   1,	 1,   0,   0,	0,   0,	  0,   0,   0,	 0,   1,   1
FFFF02B2                            					; DATA XREF: ROM:000C8160o
FFFF02B2 0202 0303 0404 81          		dc.b	2,   2,	  3,   3,   4,	 4, $81
FFFF02B9 0E0E 0D0D 0C0C 0B0B 0B0A+  byte_C82E5:	dc.b   $E,  $E,	 $D,  $D,  $C,	$C,  $B,  $B,  $B,  $A,	 $A,  $A,   9,	 9,   9,   8
FFFF02C9                            					; DATA XREF: ROM:000C8164o
FFFF02C9 0808 0707 0706 0605 81     		dc.b	8,   8,	  7,   7,   7,	 6,   6,   5, $81
FFFF02D2 0300 80                    byte_C82FE:	dc.b	3,   0,	$80	; DATA XREF: ROM:000C8168o
FFFF02D5 0606 0606 0606 0606 0606+  byte_C8301:	dc.b	6,   6,	  6,   6,   6,	 6,   6,   6,	6,   6,	  6,   6,   6,	 6,   6,   6
FFFF02E5                            					; DATA XREF: ROM:000C816Co
FFFF02E5 0606 0606 0606 0606 0606+  		dc.b	6,   6,	  6,   6,   6,	 6,   6,   6,	6,   6,	  6,   6,   6,	 6,   6,   6
FFFF02F5 0606 0606 0707 0707 0707+  		dc.b	6,   6,	  6,   6,   7,	 7,   7,   7,	7,   7,	  7,   7,   7,	 7,   7,   7
FFFF0305 0707 0707 0707 0707 0707+  		dc.b	7,   7,	  7,   7,   7,	 7,   7,   7,	7,   7,	  7,   7,   8,	 8,   8,   8
FFFF0315 0808 0808 0808 0808 0808+  		dc.b	8,   8,	  8,   8,   8,	 8,   8,   8,	8,   8,	  8,   8,   8,	 8,   8,   8
FFFF0325 0808 0808 0909 0909 0909+  		dc.b	8,   8,	  8,   8,   9,	 9,   9,   9,	9,   9,	  9,   9,   9,	 9,   9,   9
FFFF0335 81                         		dc.b  $81
FFFF0336 0003 0609 83               byte_C8362:	dc.b	0,   3,	  6,   9, $83 ;	DATA XREF: ROM:000C8170o
FFFF033B 0706 0504 0302 0102 0102+  byte_C8367:	dc.b	7,   6,	  5,   4,   3,	 2,   1,   2,	1,   2,	  1,   2,   1,	 2,   1,   2
FFFF034B                            					; DATA XREF: ROM:000C8174o
FFFF034B 0102 0102 0102 0304 81     		dc.b	1,   2,	  1,   2,   1,	 2,   3,   4, $81
FFFF0354 0605 0403 0303 0303 0202+  byte_C8380:	dc.b	6,   5,	  4,   3,   3,	 3,   3,   3,	2,   2,	  2,   2,   2,	 1,   1,   1
FFFF0364                            					; DATA XREF: ROM:000C8178o
FFFF0364 0101 0202 0202 81          		dc.b	1,   1,	  2,   2,   2,	 2, $81
FFFF036B 0606 0505 0403 0201 0000+  byte_C8397:	dc.b	6,   6,	  5,   5,   4,	 3,   2,   1,	0,   0,	  0,   0,   0,	 1,   1,   2
FFFF037B                            					; DATA XREF: ROM:000C817Co
FFFF037B 0203 81                    		dc.b	2,   3,	$81
FFFF037E 0001 0203 0304 0404 0505+  byte_C83AA:	dc.b	0,   1,	  2,   3,   3,	 4,   4,   4,	5,   5,	  5,   6,   6,	 7,  $A,  $C
FFFF038E                            					; DATA XREF: ROM:000C8180o
FFFF038E 0C0D 0D0E 83               		dc.b   $C,  $D,	 $D,  $E, $83
FFFF0393 0000 0000 0101 0101 0102+  byte_C83BF:	dc.b	0,   0,	  0,   0,   1,	 1,   1,   1,	1,   2,	  2,   3,   3,	 4,   4,   4
FFFF03A3                            					; DATA XREF: ROM:000C8184o
FFFF03A3 0403 0302 0201 8183        		dc.b	4,   3,	  3,   2,   2,	 1, $81, $83
FFFF03AB 0000 0202 0404 0608 1083+  byte_C83D7:	dc.b	0,   0,	  2,   2,   4,	 4,   6,   8, $10, $83,	  0
FFFF03B6                            					; DATA XREF: ROM:000C8188o
FFFF03B6 8130 0100                  DACIndex_0:	Play_sample_data_macro $81, $30, 1, 0 ; DATA XREF: ROM:000C8048o
FFFF03BA                            					; SMPS_UpdateDAC+48o
FFFF03BA 8230 0100                  		Play_sample_data_macro $82, $30, 1, 0
FFFF03BE 8330 0100                  		Play_sample_data_macro $83, $30, 1, 0
FFFF03C2 8430 0100                  		Play_sample_data_macro $84, $30, 1, 0
FFFF03C6 0130 0100                  		Play_sample_data_macro 1, $30, 1, 0
FFFF03CA 0240 0100                  		Play_sample_data_macro 2, $40, 1, 0
FFFF03CE 0930 0100                  		Play_sample_data_macro 9, $30, 1, 0
FFFF03D2 0A30 0100                  		Play_sample_data_macro $A, $30, 1, 0
FFFF03D6 0B30 0100                  		Play_sample_data_macro $B, $30, 1, 0
FFFF03DA 0C50 0100                  		Play_sample_data_macro $C, $50, 1, 0
FFFF03DE 0D50 0100                  		Play_sample_data_macro $D, $50, 1, 0
FFFF03E2 0E50 0100                  		Play_sample_data_macro $E, $50, 1, 0
FFFF03E6 0F50 0100                  		Play_sample_data_macro $F, $50, 1, 0
FFFF03EA 1050 0100                  		Play_sample_data_macro $10, $50, 1, 0
FFFF03EE 1150 0100                  		Play_sample_data_macro $11, $50, 1, 0
FFFF03F2 1250 0100                  		Play_sample_data_macro $12, $50, 1, 0	; $10
FFFF03F6 1330 0100                  		Play_sample_data_macro $13, $30, 1, 0
FFFF03FA 1430 0100                  		Play_sample_data_macro $14, $30, 1, 0
FFFF03FE 1530 0100                  		Play_sample_data_macro $15, $30, 1, 0
FFFF0402 8530 0100                  		Play_sample_data_macro $85, $30, 1, 0
FFFF0406 1610 0100                  		Play_sample_data_macro $16, $10, 1, 0
FFFF040A 1710 0100                  		Play_sample_data_macro $17, $10, 1, 0
FFFF040E 1830 0100                  		Play_sample_data_macro $18, $30, 1, 0
FFFF0412 1930 0100                  		Play_sample_data_macro $19, $30, 1, 0
FFFF0416 1A30 0100                  		Play_sample_data_macro $1A, $30, 1, 0
FFFF041A 1B30 0100                  		Play_sample_data_macro $1B, $30, 1, 0
FFFF041E 1C30 0100                  		Play_sample_data_macro $1C, $30, 1, 0
FFFF0422 0340 0100                  		Play_sample_data_macro 3, $40, 1, 0
FFFF0426 0440 0100                  		Play_sample_data_macro 4, $40, 1, 0
FFFF042A 0540 0100                  		Play_sample_data_macro 5, $40, 1, 0
FFFF042E 0640 0100                  		Play_sample_data_macro 6, $40, 1, 0
FFFF0432 0740 0100                  		Play_sample_data_macro 7, $40, 1, 0
FFFF0436 0840 0100                  		Play_sample_data_macro 8, $40, 1, 0
FFFF043A 1D40 0100                  		Play_sample_data_macro $1D, $40, 1, 0
FFFF043E 1E40 0100                  		Play_sample_data_macro $1E, $40, 1, 0
FFFF0442 1F40 0100                  		Play_sample_data_macro $1F, $40, 1, 0
FFFF0446 2040 0100                  		Play_sample_data_macro $20, $40, 1, 0
FFFF044A 2130 0100                  		Play_sample_data_macro $21, $30, 1, 0
FFFF044E 2230 0100                  		Play_sample_data_macro $22, $30, 1, 0
FFFF0452 2350 0100                  		Play_sample_data_macro $23, $50, 1, 0
FFFF0456 2450 0100                  		Play_sample_data_macro $24, $50, 1, 0
FFFF045A 2530 0100                  		Play_sample_data_macro $25, $30, 1, 0
FFFF045E 2650 0100                  		Play_sample_data_macro $26, $50, 1, 0
FFFF0462 2750 0100                  		Play_sample_data_macro $27, $50, 1, 0
FFFF0466 2850 0100                  		Play_sample_data_macro $28, $50, 1, 0
FFFF046A 3350 0100                  		Play_sample_data_macro $33, $50, 1, 0
FFFF046E 0350 0100                  DACIndex_1:	Play_sample_data_macro 3, $50, 1, 0	; DATA XREF: ROM:000C804Co
FFFF0472                            					; Sound_PlaySample+Co
FFFF0472 0450 0100                  		Play_sample_data_macro 4, $50, 1, 0
FFFF0476 0550 0100                  		Play_sample_data_macro 5, $50, 1, 0
FFFF047A 0650 0100                  		Play_sample_data_macro 6, $50, 1, 0
FFFF047E 0750 0100                  		Play_sample_data_macro 7, $50, 1, 0
FFFF0482 0850 0100                  		Play_sample_data_macro 8, $50, 1, 0
FFFF0486 0C50 0100                  		Play_sample_data_macro $C, $50, 1, 0
FFFF048A 0D50 0100                  		Play_sample_data_macro $D, $50, 1, 0
FFFF048E 0E50 0100                  		Play_sample_data_macro $E, $50, 1, 0
FFFF0492 0F50 0100                  		Play_sample_data_macro $F, $50, 1, 0
FFFF0496 1050 0100                  		Play_sample_data_macro $10, $50, 1, 0
FFFF049A 1150 0100                  		Play_sample_data_macro $11, $50, 1, 0
FFFF049E 1250 0100                  		Play_sample_data_macro $12, $50, 1, 0
FFFF04A2 2450 0100                  		Play_sample_data_macro $24, $50, 1, 0
FFFF04A6 2750 0100                  		Play_sample_data_macro $27, $50, 1, 0
FFFF04AA 2850 0100                  		Play_sample_data_macro $28, $50, 1, 0
FFFF04AE 2250 0100                  		Play_sample_data_macro $22, $50, 1, 0
FFFF04B2 2940 0100                  		Play_sample_data_macro $29, $40, 1, 0
FFFF04B6 2A50 0100                  		Play_sample_data_macro $2A, $50, 1, 0
FFFF04BA 2B50 0100                  		Play_sample_data_macro $2B, $50, 1, 0
FFFF04BE 2C50 0100                  		Play_sample_data_macro $2C, $50, 1, 0
FFFF04C2 2D40 0100                  		Play_sample_data_macro $2D, $40, 1, 0
FFFF04C6 2E50 0100                  		Play_sample_data_macro $2E, $50, 1, 0
FFFF04CA 2F50 0100                  		Play_sample_data_macro $2F, $50, 1, 0
FFFF04CE 3050 0100                  		Play_sample_data_macro $30, $50, 1, 0
FFFF04D2 3150 0100                  		Play_sample_data_macro $31, $50, 1, 0
FFFF04D6 3250 0100                  		Play_sample_data_macro $32, $50, 1, 0
FFFF04DA 3350 0100                  		Play_sample_data_macro $33, $50, 1, 0
FFFF04DE 3450 0100                  		Play_sample_data_macro $34, $50, 1, 0
FFFF04E2 3550 0100                  		Play_sample_data_macro $35, $50, 1, 0
FFFF04E6 3650 0100                  		Play_sample_data_macro $36, $50, 1, 0
FFFF04EA 3750 0100                  		Play_sample_data_macro $37, $50, 1, 0
FFFF04EE 3850 0100                  		Play_sample_data_macro $38, $50, 1, 0
FFFF04F2 3950 0100                  		Play_sample_data_macro $39, $50, 1, 0
FFFF04F6 3A50 0100                  		Play_sample_data_macro $3A, $50, 1, 0
FFFF04FA 3B50 0100                  		Play_sample_data_macro $3B, $50, 1, 0
FFFF04FE 8080 8080 8080 8080 8080   SoundPriorities:dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF0508                            					; DATA XREF: ROM:000C8020o
FFFF0508                            					; Sound_Play+6o
FFFF0508 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF0512 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF051C 8070 7070 7070 7E7E 7070   		dc.b $80, $70, $70, $70, $70, $70, $7E,	$7E, $70, $70
FFFF0526 7070 707F 7070 7070 7070   		dc.b $70, $70, $70, $7F, $70, $70, $70,	$70, $70, $70
FFFF0530 7070 7070 7070 7070 7070   		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70
FFFF053A 707F 7070 7070 7070 7070   		dc.b $70, $7F, $70, $70, $70, $70, $70,	$70, $70, $70
FFFF0544 7070 7070 7070 7070 7070   		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70
FFFF054E 7070 7F7F 7F7F 7F70 8070   		dc.b $70, $70, $7F, $7F, $7F, $7F, $7F,	$70, $80, $70
FFFF0558 7070 7F70 7E80 7070 7070   		dc.b $70, $70, $7F, $70, $7E, $80, $70,	$70, $70, $70
FFFF0562 707E 7E70 7070 7070 7070   		dc.b $70, $7E, $7E, $70, $70, $70, $70,	$70, $70, $70
FFFF056C 707F 7F70 7070 7070 7070   		dc.b $70, $7F, $7F, $70, $70, $70, $70,	$70, $70, $70
FFFF0576 7070 8070 7070 7070 7070   		dc.b $70, $70, $80, $70, $70, $70, $70,	$70, $70, $70
FFFF0580 7070 707E 7070 7070 7080   		dc.b $70, $70, $70, $7E, $70, $70, $70,	$70, $70, $80
FFFF058A 7070 7080 8080 8080 8080   		dc.b $70, $70, $70, $80, $80, $80, $80,	$80, $80, $80
FFFF0594 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF059E 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF05A8 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF05B2 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF05BC 8080 8080 8080 8080 8080   		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80
FFFF05C6 8080 8080                  		dc.b $80, $80, $80, $80
FFFF05CA                            
FFFF05CA                            loc_C867E:				; CODE XREF: sub_C8018j
FFFF05CA 48E7 FFFE                  		movem.l	d0-a6,-(sp)
FFFF05CE 4DF8 8000                  		lea	Drv68Kmem.w,a6
FFFF05D2 6100 0000                  		bsr.w	Sound_Play
FFFF05D6 6100 0000                  		bsr.w	Sound_ChkValue
FFFF05DA 4A2E 0003                  		tst.b	3(a6)
FFFF05DE 6B00 0000                  		bmi.w	loc_C86E8
FFFF05E2 6100 0000                  		bsr.w	DoFade
FFFF05E6 6100 0000                  		bsr.w	TempoWait
FFFF05EA 6100 0000                  		bsr.w	DoFadeOut
FFFF05EE 6100 0000                  		bsr.w	UpdateEverything
FFFF05F2 6100 0000                  		bsr.w	OverrideFM4Freq
FFFF05F6 6100 0000                  		bsr.w	DoTrackNoteCutoff
FFFF05FA 0838 0006 A1FC             		btst	#6,HWVersion.w
FFFF0600 6700 0000                  		beq.w	loc_C86E8
FFFF0604 0C2E 0005 0048             		cmpi.b	#5,$48(a6)
FFFF060A 6700 0000                  		beq.w	loc_C86CA
FFFF060E 522E 0048                  		addq.b	#1,$48(a6)
FFFF0612 6000 0000                  		bra.w	loc_C86E8
FFFF0616                            ; ---------------------------------------------------------------------------
FFFF0616                            
FFFF0616                            loc_C86CA:				; CODE XREF: sub_C8018+6A6j
FFFF0616 1D7C 0000 0048             		move.b	#0,$48(a6)
FFFF061C 6100 0000                  		bsr.w	DoFade
FFFF0620 6100 0000                  		bsr.w	TempoWait
FFFF0624 6100 0000                  		bsr.w	DoFadeOut
FFFF0628 6100 0000                  		bsr.w	UpdateEverything
FFFF062C 6100 0000                  		bsr.w	OverrideFM4Freq
FFFF0630 6100 0000                  		bsr.w	DoTrackNoteCutoff
FFFF0634                            
FFFF0634                            loc_C86E8:				; CODE XREF: sub_C8018+67Aj
FFFF0634                            					; sub_C8018+69Cj ...
FFFF0634 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
FFFF0638 4E75                       		rts
FFFF063A                            ; End of function sub_C8018
FFFF063A                            
FFFF063A                            
FFFF063A                            ; =============== S U B	R O U T	I N E =======================================
FFFF063A                            
FFFF063A                            
FFFF063A                            DoTrackNoteCutoff:			; CODE XREF: sub_C8018+692p
FFFF063A                            					; sub_C8018+6CCp
FFFF063A 41EE 004A                  		lea	$4A(a6),a0
FFFF063E 7034                       		moveq	#$34,d0	; '4'
FFFF0640 7209                       		moveq	#9,d1
FFFF0642                            
FFFF0642                            loc_C86F6:				; CODE XREF: DoTrackNoteCutoff+2Cj
FFFF0642 4A10                       		tst.b	(a0)
FFFF0644 6A00                       		bpl.s	loc_C8718
FFFF0646 4A28 002C                  		tst.b	$2C(a0)
FFFF064A 6700 0000                  		beq.w	loc_C8718
FFFF064E 1428 002C                  		move.b	$2C(a0),d2
FFFF0652 B428 000E                  		cmp.b	$E(a0),d2
FFFF0656 6A00 0000                  		bpl.w	loc_C8718
FFFF065A 9528 000E                  		sub.b	d2,$E(a0)
FFFF065E 117C 0000 002C             		move.b	#0,$2C(a0)
FFFF0664                            
FFFF0664                            loc_C8718:				; CODE XREF: DoTrackNoteCutoff+Aj
FFFF0664                            					; DoTrackNoteCutoff+10j ...
FFFF0664 D0C0                       		adda.w	d0,a0
FFFF0666 51C9 FFDA                  		dbf	d1,loc_C86F6
FFFF066A 4E75                       		rts
FFFF066C                            ; End of function DoTrackNoteCutoff
FFFF066C                            
FFFF066C                            ; ---------------------------------------------------------------------------
FFFF066C                            ; START	OF FUNCTION CHUNK FOR Sound_ChkValue
FFFF066C                            
FFFF066C                            PlaySample:				; CODE XREF: Sound_ChkValue+52j
FFFF066C 4BEE 004A                  		lea	$4A(a6),a5
FFFF0670 7000                       		moveq	#0,d0
FFFF0672 1007                       		move.b	d7,d0
FFFF0674 0400 0091                  		subi.b	#$91,d0
FFFF0678 41FA FDF4                  		lea	DACIndex_1,a0
FFFF067C 0200 007F                  		andi.b	#$7F,d0	; ''
FFFF0680 5300                       		subq.b	#1,d0
FFFF0682 D040                       		add.w	d0,d0
FFFF0684 D040                       		add.w	d0,d0
FFFF0686 D0C0                       		adda.w	d0,a0
FFFF0688 1828 0002                  		move.b	2(a0),d4
FFFF068C 1A28 0001                  		move.b	1(a0),d5
FFFF0690 1C10                       		move.b	(a0),d6
FFFF0692 6A00 0000                  		bpl.w	@getsampledata
FFFF0696 1B7C 0000 0016             		move.b	#0,$16(a5)
FFFF069C 6000 0000                  		bra.w	@gotsampledata
FFFF06A0                            ; ---------------------------------------------------------------------------
FFFF06A0                            
FFFF06A0                            @getsampledata:				; CODE XREF: Sound_ChkValue-7D6j
FFFF06A0 7000                       		moveq	#0,d0
FFFF06A2 1006                       		move.b	d6,d0
FFFF06A4 1C3C 0080                  		move.b	#$80,d6
FFFF06A8 207A F96A                  		move.l	DACTable1(pc),a0
FFFF06AC 5300                       		subq.b	#1,d0
FFFF06AE D040                       		add.w	d0,d0
FFFF06B0 D040                       		add.w	d0,d0
FFFF06B2 D040                       		add.w	d0,d0
FFFF06B4 D040                       		add.w	d0,d0
FFFF06B6 D0C0                       		adda.w	d0,a0
FFFF06B8 2018                       		move.l	(a0)+,d0
FFFF06BA 2200                       		move.l	d0,d1
FFFF06BC 4841                       		swap	d1
FFFF06BE E399                       		rol.l	#1,d1
FFFF06C0 0001 0080                  		ori.b	#$80,d1
FFFF06C4 1B41 0016                  		move.b	d1,$16(a5)
FFFF06C8 0040 8000                  		ori.w	#$8000,d0
FFFF06CC 3200                       		move.w	d0,d1
FFFF06CE 1B41 0018                  		move.b	d1,$18(a5)
FFFF06D2 E049                       		lsr.w	#8,d1
FFFF06D4 1B41 0017                  		move.b	d1,$17(a5)
FFFF06D8 4440                       		neg.w	d0
FFFF06DA 48C0                       		ext.l	d0
FFFF06DC 2218                       		move.l	(a0)+,d1
FFFF06DE B081                       		cmp.l	d1,d0
FFFF06E0 6500                       		bcs.s	loc_C879A
FFFF06E2 3001                       		move.w	d1,d0
FFFF06E4                            
FFFF06E4                            loc_C879A:				; CODE XREF: Sound_ChkValue-786j
FFFF06E4 9280                       		sub.l	d0,d1
FFFF06E6 1B40 001A                  		move.b	d0,$1A(a5)
FFFF06EA E048                       		lsr.w	#8,d0
FFFF06EC 1B40 0019                  		move.b	d0,$19(a5)
FFFF06F0 1B41 001D                  		move.b	d1,$1D(a5)
FFFF06F4 E089                       		lsr.l	#8,d1
FFFF06F6 1B41 001C                  		move.b	d1,$1C(a5)
FFFF06FA E049                       		lsr.w	#8,d1
FFFF06FC 1B41 001B                  		move.b	d1,$1B(a5)
FFFF0700                            
FFFF0700                            @gotsampledata:				; CODE XREF: Sound_ChkValue-7CCj
FFFF0700 41F9 00A0 0000             		lea	($A00000).l,a0
FFFF0706 43F9 00A0 1FEA             		lea	($A01FEA).l,a1
FFFF070C 6100 0000                  		bsr.w	WaitForZ80
FFFF0710 BA11                       		cmp.b	0(a1),d5
FFFF0712 6500 0000                  		bcs.w	.releasebus
FFFF0716 117C 0080 1FFE             		move.b	#$80,$1FFE(a0)
FFFF071C 1346 0001                  		move.b	d6,1(a1)
FFFF0720 1285                       		move.b	d5,0(a1)
FFFF0722 136D 0016 0002             		move.b	$16(a5),2(a1)
FFFF0728 136D 0018 0004             		move.b	$18(a5),4(a1)
FFFF072E 136D 0017 0003             		move.b	$17(a5),3(a1)
FFFF0734 136D 001A 0006             		move.b	$1A(a5),6(a1)
FFFF073A 136D 0019 0005             		move.b	$19(a5),5(a1)
FFFF0740 136D 001D 0009             		move.b	$1D(a5),9(a1)
FFFF0746 136D 001C 0008             		move.b	$1C(a5),8(a1)
FFFF074C 136D 001B 0007             		move.b	$1B(a5),7(a1)
FFFF0752                            
FFFF0752                            .releasebus:				; CODE XREF: Sound_ChkValue-752j
FFFF0752 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF075A 4E75                       		rts
FFFF075C                            ; END OF FUNCTION CHUNK	FOR Sound_ChkValue
FFFF075C                            
FFFF075C                            ; =============== S U B	R O U T	I N E =======================================
FFFF075C                            
FFFF075C                            
FFFF075C                            UpdateEverything:			; CODE XREF: sub_C8018+68Ap
FFFF075C                            					; sub_C8018+6C4p
FFFF075C 422E 000E                  		clr.b	$E(a6)
FFFF0760 4BEE 004A                  		lea	$4A(a6),a5
FFFF0764 1D7C 0080 0008             		move.b	#$80,8(a6)
FFFF076A 7E01                       		moveq	#1,d7
FFFF076C                            
FFFF076C                            loc_C8826:				; CODE XREF: UpdateEverything+1Cj
FFFF076C 4A15                       		tst.b	(a5)
FFFF076E 6A00                       		bpl.s	loc_C882E
FFFF0770 6100 0000                  		bsr.w	sub_C88AE
FFFF0774                            
FFFF0774                            loc_C882E:				; CODE XREF: UpdateEverything+12j
FFFF0774 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF0778 51CF FFF2                  		dbf	d7,loc_C8826
FFFF077C 422E 0008                  		clr.b	8(a6)
FFFF0780 7E04                       		moveq	#4,d7
FFFF0782                            
FFFF0782                            loc_C883C:				; CODE XREF: UpdateEverything+32j
FFFF0782 4A15                       		tst.b	(a5)
FFFF0784 6A00                       		bpl.s	loc_C8844
FFFF0786 6100 0000                  		bsr.w	sub_C8A00
FFFF078A                            
FFFF078A                            loc_C8844:				; CODE XREF: UpdateEverything+28j
FFFF078A DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF078E 51CF FFF2                  		dbf	d7,loc_C883C
FFFF0792 7E02                       		moveq	#2,d7
FFFF0794                            
FFFF0794                            loc_C884E:				; CODE XREF: UpdateEverything+44j
FFFF0794 4A15                       		tst.b	(a5)
FFFF0796 6A00                       		bpl.s	loc_C8856
FFFF0798 6100 0000                  		bsr.w	sub_C9A9C
FFFF079C                            
FFFF079C                            loc_C8856:				; CODE XREF: UpdateEverything+3Aj
FFFF079C DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF07A0 51CF FFF2                  		dbf	d7,loc_C884E
FFFF07A4 1D7C 0080 000E             		move.b	#$80,$E(a6)
FFFF07AA 7E02                       		moveq	#2,d7
FFFF07AC                            
FFFF07AC                            loc_C8866:				; CODE XREF: UpdateEverything+5Cj
FFFF07AC 4A15                       		tst.b	(a5)
FFFF07AE 6A00                       		bpl.s	loc_C886E
FFFF07B0 6100 0000                  		bsr.w	sub_C8A00
FFFF07B4                            
FFFF07B4                            loc_C886E:				; CODE XREF: UpdateEverything+52j
FFFF07B4 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF07B8 51CF FFF2                  		dbf	d7,loc_C8866
FFFF07BC 7E02                       		moveq	#2,d7
FFFF07BE                            
FFFF07BE                            loc_C8878:				; CODE XREF: UpdateEverything+6Ej
FFFF07BE 4A15                       		tst.b	(a5)
FFFF07C0 6A00                       		bpl.s	loc_C8880
FFFF07C2 6100 0000                  		bsr.w	sub_C9A9C
FFFF07C6                            
FFFF07C6                            loc_C8880:				; CODE XREF: UpdateEverything+64j
FFFF07C6 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF07CA 51CF FFF2                  		dbf	d7,loc_C8878
FFFF07CE 1D7C 0040 000E             		move.b	#$40,$E(a6) ; '@'
FFFF07D4 7E01                       		moveq	#1,d7
FFFF07D6                            
FFFF07D6                            loc_C8890:				; CODE XREF: UpdateEverything+92j
FFFF07D6 4A15                       		tst.b	(a5)
FFFF07D8 6A00                       		bpl.s	loc_C88A4
FFFF07DA 4A2D 0001                  		tst.b	1(a5)
FFFF07DE 6B00                       		bmi.s	loc_C88A0
FFFF07E0 6100 0000                  		bsr.w	sub_C8A00
FFFF07E4 6000                       		bra.s	loc_C88A4
FFFF07E6                            ; ---------------------------------------------------------------------------
FFFF07E6                            
FFFF07E6                            loc_C88A0:				; CODE XREF: UpdateEverything+82j
FFFF07E6 6100 0000                  		bsr.w	sub_C9A9C
FFFF07EA                            
FFFF07EA                            loc_C88A4:				; CODE XREF: UpdateEverything+7Cj
FFFF07EA                            					; UpdateEverything+88j
FFFF07EA DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF07EE 51CF FFE6                  		dbf	d7,loc_C8890
FFFF07F2 4E75                       		rts
FFFF07F4                            ; End of function UpdateEverything
FFFF07F4                            
FFFF07F4                            
FFFF07F4                            ; =============== S U B	R O U T	I N E =======================================
FFFF07F4                            
FFFF07F4                            
FFFF07F4                            sub_C88AE:				; CODE XREF: UpdateEverything+14p
FFFF07F4 532D 000E                  		subq.b	#1,$E(a5)
FFFF07F8 6600 0000                  		bne.w	locret_C89FE
FFFF07FC 286D 0004                  		movea.l	4(a5),a4
FFFF0800                            
FFFF0800                            loc_C88BA:				; CODE XREF: sub_C88AE+1Aj
FFFF0800 7A00                       		moveq	#0,d5
FFFF0802 1A1C                       		move.b	(a4)+,d5
FFFF0804 0C05 00E0                  		cmpi.b	#$E0,d5
FFFF0808 6500                       		bcs.s	loc_C88CA
FFFF080A 6100 0000                  		bsr.w	cfHandler
FFFF080E 60F0                       		bra.s	loc_C88BA
FFFF0810                            ; ---------------------------------------------------------------------------
FFFF0810                            
FFFF0810                            loc_C88CA:				; CODE XREF: sub_C88AE+14j
FFFF0810 4A05                       		tst.b	d5
FFFF0812 6A00                       		bpl.s	loc_C88E0
FFFF0814 1B45 0010                  		move.b	d5,$10(a5)
FFFF0818 1A1C                       		move.b	(a4)+,d5
FFFF081A 6A00                       		bpl.s	loc_C88E0
FFFF081C 534C                       		subq.w	#1,a4
FFFF081E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
FFFF0824 6000                       		bra.s	gotsampledur
FFFF0826                            ; ---------------------------------------------------------------------------
FFFF0826                            
FFFF0826                            loc_C88E0:				; CODE XREF: sub_C88AE+1Ej
FFFF0826                            					; sub_C88AE+26j
FFFF0826 6100 0000                  		bsr.w	sub_C8A98
FFFF082A                            
FFFF082A                            gotsampledur:				; CODE XREF: sub_C88AE+30j
FFFF082A 2B4C 0004                  		move.l	a4,4(a5)
FFFF082E 7000                       		moveq	#0,d0
FFFF0830 102D 0010                  		move.b	$10(a5),d0
FFFF0834 0C00 0080                  		cmpi.b	#$80,d0
FFFF0838 6700 0000                  		beq.w	locret_C89FE
FFFF083C 41FA FB78                  		lea	DACIndex_0,a0
FFFF0840 0200 007F                  		andi.b	#$7F,d0	; ''
FFFF0844 5300                       		subq.b	#1,d0
FFFF0846 D040                       		add.w	d0,d0
FFFF0848 D040                       		add.w	d0,d0
FFFF084A D0C0                       		adda.w	d0,a0
FFFF084C 1828 0002                  		move.b	2(a0),d4
FFFF0850 1A28 0001                  		move.b	1(a0),d5
FFFF0854 1C10                       		move.b	(a0),d6
FFFF0856 6A00 0000                  		bpl.w	@validsample
FFFF085A 1B7C 0000 0016             		move.b	#0,$16(a5)
FFFF0860 1B7C 0000 001D             		move.b	#0,$1D(a5)
FFFF0866 1B7C 0000 001C             		move.b	#0,$1C(a5)
FFFF086C 1B7C 0000 001B             		move.b	#0,$1B(a5)
FFFF0872 6000 0000                  		bra.w	@setsampledata
FFFF0876                            ; ---------------------------------------------------------------------------
FFFF0876                            
FFFF0876                            @validsample:				; CODE XREF: sub_C88AE+62j
FFFF0876 7000                       		moveq	#0,d0
FFFF0878 1006                       		move.b	d6,d0
FFFF087A 1C3C 0080                  		move.b	#$80,d6
FFFF087E 207A F794                  		move.l	DACTable1(pc),a0
FFFF0882 5300                       		subq.b	#1,d0
FFFF0884 D040                       		add.w	d0,d0
FFFF0886 D040                       		add.w	d0,d0
FFFF0888 D040                       		add.w	d0,d0
FFFF088A D040                       		add.w	d0,d0
FFFF088C D0C0                       		adda.w	d0,a0
FFFF088E 2018                       		move.l	(a0)+,d0
FFFF0890 2200                       		move.l	d0,d1
FFFF0892 4841                       		swap	d1
FFFF0894 E399                       		rol.l	#1,d1
FFFF0896 0001 0080                  		ori.b	#$80,d1
FFFF089A 1B41 0016                  		move.b	d1,$16(a5)
FFFF089E 0040 8000                  		ori.w	#$8000,d0
FFFF08A2 3200                       		move.w	d0,d1
FFFF08A4 1B41 0018                  		move.b	d1,$18(a5)
FFFF08A8 E049                       		lsr.w	#8,d1
FFFF08AA 1B41 0017                  		move.b	d1,$17(a5)
FFFF08AE 4440                       		neg.w	d0
FFFF08B0 48C0                       		ext.l	d0
FFFF08B2 2218                       		move.l	(a0)+,d1
FFFF08B4 B081                       		cmp.l	d1,d0
FFFF08B6 6500                       		bcs.s	@C8976
FFFF08B8 3001                       		move.w	d1,d0
FFFF08BA                            
FFFF08BA                            @C8976:					; CODE XREF: sub_C88AE+C4j
FFFF08BA 9280                       		sub.l	d0,d1
FFFF08BC 1B40 001A                  		move.b	d0,$1A(a5)
FFFF08C0 E048                       		lsr.w	#8,d0
FFFF08C2 1B40 0019                  		move.b	d0,$19(a5)
FFFF08C6 1B41 001D                  		move.b	d1,$1D(a5)
FFFF08CA E089                       		lsr.l	#8,d1
FFFF08CC 1B41 001C                  		move.b	d1,$1C(a5)
FFFF08D0 E049                       		lsr.w	#8,d1
FFFF08D2 1B41 001B                  		move.b	d1,$1B(a5)
FFFF08D6                            
FFFF08D6                            @setsampledata:				; CODE XREF: sub_C88AE+7Ej
FFFF08D6 41F9 00A0 0000             		lea	($A00000).l,a0
FFFF08DC 43F9 00A0 1FF4             		lea	($A01FF4).l,a1
FFFF08E2 082D 0000 0001             		btst	#0,1(a5)
FFFF08E8 6700 0000                  		beq.w	@gotsampleentry
FFFF08EC 92FC 000A                  		suba.w	#$A,a1
FFFF08F0                            
FFFF08F0                            @gotsampleentry:			; CODE XREF: sub_C88AE+F6j
FFFF08F0 6100 0000                  		bsr.w	WaitForZ80
FFFF08F4 BA11                       		cmp.b	0(a1),d5
FFFF08F6 6500 0000                  		bcs.w	.releasebus
FFFF08FA 117C 0080 1FFE             		move.b	#$80,$1FFE(a0)
FFFF0900 1346 0001                  		move.b	d6,1(a1)
FFFF0904 1285                       		move.b	d5,0(a1)
FFFF0906 136D 0016 0002             		move.b	$16(a5),2(a1)
FFFF090C 136D 0018 0004             		move.b	$18(a5),4(a1)
FFFF0912 136D 0017 0003             		move.b	$17(a5),3(a1)
FFFF0918 136D 001A 0006             		move.b	$1A(a5),6(a1)
FFFF091E 136D 0019 0005             		move.b	$19(a5),5(a1)
FFFF0924 136D 001D 0009             		move.b	$1D(a5),9(a1)
FFFF092A 136D 001C 0008             		move.b	$1C(a5),8(a1)
FFFF0930 136D 001B 0007             		move.b	$1B(a5),7(a1)
FFFF0936                            
FFFF0936                            .releasebus:				; CODE XREF: sub_C88AE+106j
FFFF0936 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF093E                            
FFFF093E                            locret_C89FE:				; CODE XREF: sub_C88AE+4j
FFFF093E                            					; sub_C88AE+44j
FFFF093E 4E75                       		rts
FFFF0940                            ; End of function sub_C88AE
FFFF0940                            
FFFF0940                            
FFFF0940                            ; =============== S U B	R O U T	I N E =======================================
FFFF0940                            
FFFF0940                            
FFFF0940                            sub_C8A00:				; CODE XREF: UpdateEverything+2Ap
FFFF0940                            					; UpdateEverything+54p	...
FFFF0940                            
FFFF0940                            ; FUNCTION CHUNK AT 000C9922 SIZE 0000001C BYTES
FFFF0940                            
FFFF0940 532D 000E                  		subq.b	#1,$E(a5)
FFFF0944 6600                       		bne.s	loc_C8A1A
FFFF0946 0895 0004                  		bclr	#4,(a5)
FFFF094A 6100 0000                  		bsr.w	sub_C8A2A
FFFF094E 6100 0000                  		bsr.w	sub_C8C50
FFFF0952 6100 0000                  		bsr.w	sub_C8D94
FFFF0956 6000 0000                  		bra.w	loc_C9922
FFFF095A                            ; ---------------------------------------------------------------------------
FFFF095A                            
FFFF095A                            loc_C8A1A:				; CODE XREF: sub_C8A00+4j
FFFF095A 6100 0000                  		bsr.w	sub_C8B82
FFFF095E 6100 0000                  		bsr.w	sub_C8DAE
FFFF0962 6100 0000                  		bsr.w	sub_C8BB6
FFFF0966 6000 0000                  		bra.w	loc_C8C5C
FFFF096A                            ; End of function sub_C8A00
FFFF096A                            
FFFF096A                            
FFFF096A                            ; =============== S U B	R O U T	I N E =======================================
FFFF096A                            
FFFF096A                            
FFFF096A                            sub_C8A2A:				; CODE XREF: sub_C8A00+Ap
FFFF096A 286D 0004                  		movea.l	4(a5),a4
FFFF096E 0895 0001                  		bclr	#1,(a5)
FFFF0972                            
FFFF0972                            loc_C8A32:				; CODE XREF: sub_C8A2A+16j
FFFF0972 7A00                       		moveq	#0,d5
FFFF0974 1A1C                       		move.b	(a4)+,d5
FFFF0976 0C05 00E0                  		cmpi.b	#$E0,d5
FFFF097A 6500                       		bcs.s	loc_C8A42
FFFF097C 6100 0000                  		bsr.w	cfHandler
FFFF0980 60F0                       		bra.s	loc_C8A32
FFFF0982                            ; ---------------------------------------------------------------------------
FFFF0982                            
FFFF0982                            loc_C8A42:				; CODE XREF: sub_C8A2A+10j
FFFF0982 6100 0000                  		bsr.w	sub_C993E
FFFF0986 4A05                       		tst.b	d5
FFFF0988 6A00                       		bpl.s	loc_C8A58
FFFF098A 6100 0000                  		bsr.w	sub_C8A60
FFFF098E 1A1C                       		move.b	(a4)+,d5
FFFF0990 6A00                       		bpl.s	loc_C8A58
FFFF0992 534C                       		subq.w	#1,a4
FFFF0994 6000 0000                  		bra.w	sub_C8AB8
FFFF0998                            ; ---------------------------------------------------------------------------
FFFF0998                            
FFFF0998                            loc_C8A58:				; CODE XREF: sub_C8A2A+1Ej
FFFF0998                            					; sub_C8A2A+26j
FFFF0998 6100 0000                  		bsr.w	sub_C8A98
FFFF099C 6000 0000                  		bra.w	sub_C8AB8
FFFF09A0                            ; End of function sub_C8A2A
FFFF09A0                            
FFFF09A0                            
FFFF09A0                            ; =============== S U B	R O U T	I N E =======================================
FFFF09A0                            
FFFF09A0                            
FFFF09A0                            sub_C8A60:				; CODE XREF: sub_C8A2A+20p
FFFF09A0                            
FFFF09A0                            ; FUNCTION CHUNK AT 000C8AB0 SIZE 00000008 BYTES
FFFF09A0                            
FFFF09A0 0405 0080                  		subi.b	#$80,d5
FFFF09A4 6700                       		beq.s	loc_C8AB0
FFFF09A6 DA2D 0008                  		add.b	8(a5),d5
FFFF09AA 4EB9 0000 0000             		jsr	sub_C8B32
FFFF09B0 0285 0000 007F             		andi.l	#$7F,d5	; ''
FFFF09B6 8AFC 000C                  		divu.w	#$C,d5
FFFF09BA 4845                       		swap	d5
FFFF09BC E34D                       		lsl.w	#1,d5
FFFF09BE 41F9 0000 0000             		lea	word_C9A84,a0
FFFF09C4 3C30 5000                  		move.w	(a0,d5.w),d6
FFFF09C8 4845                       		swap	d5
FFFF09CA 0245 0007                  		andi.w	#7,d5
FFFF09CE 700B                       		moveq	#$B,d0
FFFF09D0 E16D                       		lsl.w	d0,d5
FFFF09D2 8C45                       		or.w	d5,d6
FFFF09D4 3B46 0010                  		move.w	d6,$10(a5)
FFFF09D8 4E75                       		rts
FFFF09DA                            ; End of function sub_C8A60
FFFF09DA                            
FFFF09DA                            
FFFF09DA                            ; =============== S U B	R O U T	I N E =======================================
FFFF09DA                            
FFFF09DA                            
FFFF09DA                            sub_C8A98:				; CODE XREF: sub_C88AE:loc_C88E0p
FFFF09DA                            					; sub_C8A2A:loc_C8A58p	...
FFFF09DA 1005                       		move.b	d5,d0
FFFF09DC 122D 0002                  		move.b	2(a5),d1
FFFF09E0                            
FFFF09E0                            loc_C8A9E:				; CODE XREF: sub_C8A98+Cj
FFFF09E0 5301                       		subq.b	#1,d1
FFFF09E2 6700                       		beq.s	loc_C8AA6
FFFF09E4 D005                       		add.b	d5,d0
FFFF09E6 60F8                       		bra.s	loc_C8A9E
FFFF09E8                            ; ---------------------------------------------------------------------------
FFFF09E8                            
FFFF09E8                            loc_C8AA6:				; CODE XREF: sub_C8A98+8j
FFFF09E8 1B40 000F                  		move.b	d0,$F(a5)
FFFF09EC 1B40 000E                  		move.b	d0,$E(a5)
FFFF09F0 4E75                       		rts
FFFF09F2                            ; End of function sub_C8A98
FFFF09F2                            
FFFF09F2                            ; ---------------------------------------------------------------------------
FFFF09F2                            ; START	OF FUNCTION CHUNK FOR sub_C8A60
FFFF09F2                            
FFFF09F2                            loc_C8AB0:				; CODE XREF: sub_C8A60+4j
FFFF09F2 08D5 0001                  		bset	#1,(a5)
FFFF09F6 426D 0010                  		clr.w	$10(a5)
FFFF09FA                            ; END OF FUNCTION CHUNK	FOR sub_C8A60
FFFF09FA                            
FFFF09FA                            ; =============== S U B	R O U T	I N E =======================================
FFFF09FA                            
FFFF09FA                            
FFFF09FA                            sub_C8AB8:				; CODE XREF: sub_C8A2A+2Aj
FFFF09FA                            					; sub_C8A2A+32j ...
FFFF09FA 1B7C 0000 002E             		move.b	#0,$2E(a5)
FFFF0A00 1014                       		move.b	(a4),d0
FFFF0A02 0C00 00E7                  		cmpi.b	#$E7,d0
FFFF0A06 6600 0000                  		bne.w	loc_C8ACE
FFFF0A0A 1B7C 0001 002E             		move.b	#1,$2E(a5)
FFFF0A10                            
FFFF0A10                            loc_C8ACE:				; CODE XREF: sub_C8AB8+Cj
FFFF0A10 2B4C 0004                  		move.l	a4,4(a5)
FFFF0A14 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
FFFF0A1A 4EB9 0000 0000             		jsr	sub_C8B16
FFFF0A20 0815 0004                  		btst	#4,(a5)
FFFF0A24 6600                       		bne.s	locret_C8B14
FFFF0A26 422D 000C                  		clr.b	$C(a5)
FFFF0A2A 422D 0026                  		clr.b	$26(a5)
FFFF0A2E 422D 0003                  		clr.b	3(a5)
FFFF0A32 082D 0007 000A             		btst	#7,$A(a5)
FFFF0A38 6700                       		beq.s	locret_C8B14
FFFF0A3A 206D 0014                  		movea.l	$14(a5),a0
FFFF0A3E 1B58 0018                  		move.b	(a0)+,$18(a5)
FFFF0A42 1B58 0019                  		move.b	(a0)+,$19(a5)
FFFF0A46 1B58 001A                  		move.b	(a0)+,$1A(a5)
FFFF0A4A 1018                       		move.b	(a0)+,d0
FFFF0A4C E208                       		lsr.b	#1,d0
FFFF0A4E 1B40 001B                  		move.b	d0,$1B(a5)
FFFF0A52 426D 001C                  		clr.w	$1C(a5)
FFFF0A56                            
FFFF0A56                            locret_C8B14:				; CODE XREF: sub_C8AB8+2Aj
FFFF0A56                            					; sub_C8AB8+3Ej
FFFF0A56 4E75                       		rts
FFFF0A58                            ; End of function sub_C8AB8
FFFF0A58                            
FFFF0A58                            
FFFF0A58                            ; =============== S U B	R O U T	I N E =======================================
FFFF0A58                            
FFFF0A58                            
FFFF0A58                            sub_C8B16:				; CODE XREF: sub_C8AB8+20p
FFFF0A58 4A2D 002D                  		tst.b	$2D(a5)
FFFF0A5C 6700 0000                  		beq.w	loc_C8B2A
FFFF0A60 102D 000F                  		move.b	$F(a5),d0
FFFF0A64 902D 002D                  		sub.b	$2D(a5),d0
FFFF0A68 1B40 0013                  		move.b	d0,$13(a5)
FFFF0A6C                            
FFFF0A6C                            loc_C8B2A:				; CODE XREF: sub_C8B16+4j
FFFF0A6C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
FFFF0A72 4E75                       		rts
FFFF0A74                            ; End of function sub_C8B16
FFFF0A74                            
FFFF0A74                            
FFFF0A74                            ; =============== S U B	R O U T	I N E =======================================
FFFF0A74                            
FFFF0A74                            
FFFF0A74                            sub_C8B32:				; CODE XREF: sub_C8A60+Ap
FFFF0A74 BBFC FFFF 8252             		cmpa.l	#Drv68Kmem+$0252,a5
FFFF0A7A 6500 0000                  		bcs.w	loc_C8B3E
FFFF0A7E 4E75                       		rts
FFFF0A80                            ; ---------------------------------------------------------------------------
FFFF0A80                            
FFFF0A80                            loc_C8B3E:				; CODE XREF: sub_C8B32+6j
FFFF0A80 48E7 C080                  		movem.l	d0-d1/a0,-(sp)
FFFF0A84 41F8 8000                  		lea	Drv68Kmem.w,a0
FFFF0A88 4A28 003E                  		tst.b	$3E(a0)
FFFF0A8C 6700 0000                  		beq.w	loc_C8B70
FFFF0A90                            
FFFF0A90                            loc_C8B50:				; CODE XREF: sub_C8B32+3Cj
FFFF0A90 1028 0040                  		move.b	$40(a0),d0
FFFF0A94 0C00 000B                  		cmpi.b	#$B,d0
FFFF0A98 6700 0000                  		beq.w	loc_C8B68
FFFF0A9C DA3B 0000                  		add.b	byte_C8B76(pc,d0.w),d5
FFFF0AA0 5228 0040                  		addq.b	#1,$40(a0)
FFFF0AA4 6000 0000                  		bra.w	loc_C8B70
FFFF0AA8                            ; ---------------------------------------------------------------------------
FFFF0AA8                            
FFFF0AA8                            loc_C8B68:				; CODE XREF: sub_C8B32+26j
FFFF0AA8 117C 0000 0040             		move.b	#0,$40(a0)
FFFF0AAE 60E0                       		bra.s	loc_C8B50
FFFF0AB0                            ; ---------------------------------------------------------------------------
FFFF0AB0                            
FFFF0AB0                            loc_C8B70:				; CODE XREF: sub_C8B32+1Aj
FFFF0AB0                            					; sub_C8B32+32j
FFFF0AB0 4CDF 0103                  		movem.l	(sp)+,d0-d1/a0
FFFF0AB4 4E75                       		rts
FFFF0AB6                            ; End of function sub_C8B32
FFFF0AB6                            
FFFF0AB6                            ; ---------------------------------------------------------------------------
FFFF0AB6 FF05 0402 06FE 03FF 0401+  byte_C8B76:	dc.b $FF, 5, 4,	2, 6, $FE, 3, $FF, 4, 1, 3, 0 ;	DATA XREF: sub_C8B32+2Ar
FFFF0AC2                            
FFFF0AC2                            ; =============== S U B	R O U T	I N E =======================================
FFFF0AC2                            
FFFF0AC2                            
FFFF0AC2                            sub_C8B82:				; CODE XREF: sub_C8A00:loc_C8A1Ap
FFFF0AC2                            					; sub_C9A9C:loc_C9AB2p
FFFF0AC2 4A2D 0012                  		tst.b	$12(a5)
FFFF0AC6 6700                       		beq.s	locret_C8BB4
FFFF0AC8 532D 0012                  		subq.b	#1,$12(a5)
FFFF0ACC 6600                       		bne.s	locret_C8BB4
FFFF0ACE 4A2D 002E                  		tst.b	$2E(a5)
FFFF0AD2 6600 0000                  		bne.w	locret_C8BB4
FFFF0AD6 08D5 0001                  		bset	#1,(a5)
FFFF0ADA 4A2D 0001                  		tst.b	1(a5)
FFFF0ADE 6B00 0000                  		bmi.w	loc_C8BAE
FFFF0AE2 0895 0004                  		bclr	#4,(a5)
FFFF0AE6 6100 0000                  		bsr.w	sub_C993E
FFFF0AEA 584F                       		addq.w	#4,sp
FFFF0AEC 4E75                       		rts
FFFF0AEE                            ; ---------------------------------------------------------------------------
FFFF0AEE                            
FFFF0AEE                            loc_C8BAE:				; CODE XREF: sub_C8B82+1Cj
FFFF0AEE 6100 0000                  		bsr.w	sub_C9C16
FFFF0AF2 584F                       		addq.w	#4,sp
FFFF0AF4                            
FFFF0AF4                            locret_C8BB4:				; CODE XREF: sub_C8B82+4j sub_C8B82+Aj ...
FFFF0AF4 4E75                       		rts
FFFF0AF6                            ; End of function sub_C8B82
FFFF0AF6                            
FFFF0AF6                            
FFFF0AF6                            ; =============== S U B	R O U T	I N E =======================================
FFFF0AF6                            
FFFF0AF6                            
FFFF0AF6                            sub_C8BB6:				; CODE XREF: sub_C8A00+22p
FFFF0AF6                            					; sub_C9A9C+1Ep
FFFF0AF6 082D 0007 000A             		btst	#7,$A(a5)
FFFF0AFC 6700 0000                  		beq.w	locret_C8C4E
FFFF0B00 4A2D 0018                  		tst.b	$18(a5)
FFFF0B04 6700                       		beq.s	loc_C8BCC
FFFF0B06 532D 0018                  		subq.b	#1,$18(a5)
FFFF0B0A 4E75                       		rts
FFFF0B0C                            ; ---------------------------------------------------------------------------
FFFF0B0C                            
FFFF0B0C                            loc_C8BCC:				; CODE XREF: sub_C8BB6+Ej
FFFF0B0C 532D 0019                  		subq.b	#1,$19(a5)
FFFF0B10 6700                       		beq.s	loc_C8BD4
FFFF0B12 4E75                       		rts
FFFF0B14                            ; ---------------------------------------------------------------------------
FFFF0B14                            
FFFF0B14                            loc_C8BD4:				; CODE XREF: sub_C8BB6+1Aj
FFFF0B14 206D 0014                  		movea.l	$14(a5),a0
FFFF0B18 1B68 0001 0019             		move.b	1(a0),$19(a5)
FFFF0B1E 4A2D 001B                  		tst.b	$1B(a5)
FFFF0B22 6600                       		bne.s	loc_C8C10
FFFF0B24 1B68 0003 001B             		move.b	3(a0),$1B(a5)
FFFF0B2A 0C2E 0002 003E             		cmpi.b	#2,$3E(a6)
FFFF0B30 6600 0000                  		bne.w	loc_C8C0A
FFFF0B34 BBFC FFFF 8252             		cmpa.l	#Drv68Kmem+$0252,a5
FFFF0B3A 6400 0000                  		bcc.w	loc_C8C0A
FFFF0B3E 4A2D 001B                  		tst.b	$1B(a5)
FFFF0B42 6700 0000                  		beq.w	loc_C8C0A
FFFF0B46 542D 001B                  		addq.b	#2,$1B(a5)
FFFF0B4A                            
FFFF0B4A                            loc_C8C0A:				; CODE XREF: sub_C8BB6+3Aj
FFFF0B4A                            					; sub_C8BB6+44j ...
FFFF0B4A 442D 001A                  		neg.b	$1A(a5)
FFFF0B4E 4E75                       		rts
FFFF0B50                            ; ---------------------------------------------------------------------------
FFFF0B50                            
FFFF0B50                            loc_C8C10:				; CODE XREF: sub_C8BB6+2Cj
FFFF0B50 532D 001B                  		subq.b	#1,$1B(a5)
FFFF0B54 1C2D 001A                  		move.b	$1A(a5),d6
FFFF0B58 0C2E 0002 003E             		cmpi.b	#2,$3E(a6)
FFFF0B5E 6600 0000                  		bne.w	loc_C8C40
FFFF0B62 BBFC FFFF 8252             		cmpa.l	#Drv68Kmem+$0252,a5
FFFF0B68 6400 0000                  		bcc.w	loc_C8C40
FFFF0B6C 0806 0007                  		btst	#7,d6
FFFF0B70 6600 0000                  		bne.w	loc_C8C3C
FFFF0B74 0606 0028                  		addi.b	#$28,d6	; '('
FFFF0B78 6000 0000                  		bra.w	loc_C8C40
FFFF0B7C                            ; ---------------------------------------------------------------------------
FFFF0B7C                            
FFFF0B7C                            loc_C8C3C:				; CODE XREF: sub_C8BB6+7Aj
FFFF0B7C 0406 0028                  		subi.b	#$28,d6	; '('
FFFF0B80                            
FFFF0B80                            loc_C8C40:				; CODE XREF: sub_C8BB6+68j
FFFF0B80                            					; sub_C8BB6+72j ...
FFFF0B80 4886                       		ext.w	d6
FFFF0B82 DC6D 001C                  		add.w	$1C(a5),d6
FFFF0B86 3B46 001C                  		move.w	d6,$1C(a5)
FFFF0B8A DC6D 0010                  		add.w	$10(a5),d6
FFFF0B8E                            
FFFF0B8E                            locret_C8C4E:				; CODE XREF: sub_C8BB6+6j
FFFF0B8E 4E75                       		rts
FFFF0B90                            ; End of function sub_C8BB6
FFFF0B90                            
FFFF0B90                            
FFFF0B90                            ; =============== S U B	R O U T	I N E =======================================
FFFF0B90                            
FFFF0B90                            
FFFF0B90                            sub_C8C50:				; CODE XREF: sub_C8A00+Ep
FFFF0B90                            
FFFF0B90                            ; FUNCTION CHUNK AT 000C8D4E SIZE 0000003E BYTES
FFFF0B90                            
FFFF0B90 3C2D 0010                  		move.w	$10(a5),d6
FFFF0B94 6600                       		bne.s	loc_C8C64
FFFF0B96 08D5 0001                  		bset	#1,(a5)
FFFF0B9A 4E75                       		rts
FFFF0B9C                            ; ---------------------------------------------------------------------------
FFFF0B9C                            
FFFF0B9C                            loc_C8C5C:				; CODE XREF: sub_C8A00+26j
FFFF0B9C 4A2D 000A                  		tst.b	$A(a5)
FFFF0BA0 6700 0000                  		beq.w	locret_C8CAA
FFFF0BA4                            
FFFF0BA4                            loc_C8C64:				; CODE XREF: sub_C8C50+4j
FFFF0BA4 0815 0001                  		btst	#1,(a5)
FFFF0BA8 6600 0000                  		bne.w	locret_C8CAA
FFFF0BAC 0815 0002                  		btst	#2,(a5)
FFFF0BB0 6600 0000                  		bne.w	locret_C8CAA
FFFF0BB4 6100 0000                  		bsr.w	sub_C8CAC
FFFF0BB8 4A2E 000F                  		tst.b	$F(a6)
FFFF0BBC 6700                       		beq.s	loc_C8C88
FFFF0BBE 0C2D 0002 0001             		cmpi.b	#2,1(a5)
FFFF0BC4 6700 0000                  		beq.w	loc_C8D4E
FFFF0BC8                            
FFFF0BC8                            loc_C8C88:				; CODE XREF: sub_C8C50+2Cj
FFFF0BC8 3206                       		move.w	d6,d1
FFFF0BCA E049                       		lsr.w	#8,d1
FFFF0BCC 103C 00A4                  		move.b	#$A4,d0
FFFF0BD0 6100 0000                  		bsr.w	WaitForZ80
FFFF0BD4 6100 0000                  		bsr.w	sub_C9980
FFFF0BD8 1206                       		move.b	d6,d1
FFFF0BDA 103C 00A0                  		move.b	#$A0,d0
FFFF0BDE 6100 0000                  		bsr.w	sub_C9980
FFFF0BE2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF0BEA                            
FFFF0BEA                            locret_C8CAA:				; CODE XREF: sub_C8C50+10j
FFFF0BEA                            					; sub_C8C50+18j ...
FFFF0BEA 4E75                       		rts
FFFF0BEC                            ; End of function sub_C8C50
FFFF0BEC                            
FFFF0BEC                            
FFFF0BEC                            ; =============== S U B	R O U T	I N E =======================================
FFFF0BEC                            
FFFF0BEC                            
FFFF0BEC                            sub_C8CAC:				; CODE XREF: sub_C8C50+24p
FFFF0BEC                            					; sub_C9B26+1Ep
FFFF0BEC 7C00                       		moveq	#0,d6
FFFF0BEE 102D 000A                  		move.b	$A(a5),d0
FFFF0BF2 0240 007F                  		andi.w	#$7F,d0	; ''
FFFF0BF6 6700                       		beq.s	loc_C8CFC
FFFF0BF8 41FA F42A                  		lea	NoiseIndex,a0
FFFF0BFC 5340                       		subq.w	#1,d0
FFFF0BFE E548                       		lsl.w	#2,d0
FFFF0C00 2070 0000                  		movea.l	(a0,d0.w),a0
FFFF0C04                            
FFFF0C04                            loc_C8CC4:				; CODE XREF: sub_C8CAC+70j
FFFF0C04                            					; sub_C8CAC+76j ...
FFFF0C04 7000                       		moveq	#0,d0
FFFF0C06 102D 0026                  		move.b	$26(a5),d0
FFFF0C0A 522D 0026                  		addq.b	#1,$26(a5)
FFFF0C0E 1C30 0000                  		move.b	(a0,d0.w),d6
FFFF0C12 6A00                       		bpl.s	loc_C8CF2
FFFF0C14 0C06 0080                  		cmpi.b	#$80,d6
FFFF0C18 6700                       		beq.s	loc_C8D18
FFFF0C1A 0C06 0081                  		cmpi.b	#$81,d6
FFFF0C1E 6700                       		beq.s	loc_C8D1E
FFFF0C20 0C06 0083                  		cmpi.b	#$83,d6
FFFF0C24 6700                       		beq.s	loc_C8D24
FFFF0C26 0C06 0082                  		cmpi.b	#$82,d6
FFFF0C2A 6700                       		beq.s	loc_C8D36
FFFF0C2C 0C06 0084                  		cmpi.b	#$84,d6
FFFF0C30 6700                       		beq.s	loc_C8D3E
FFFF0C32                            
FFFF0C32                            loc_C8CF2:				; CODE XREF: sub_C8CAC+26j
FFFF0C32 4886                       		ext.w	d6
FFFF0C34 102D 0003                  		move.b	3(a5),d0
FFFF0C38 4880                       		ext.w	d0
FFFF0C3A CCC0                       		mulu.w	d0,d6
FFFF0C3C                            
FFFF0C3C                            loc_C8CFC:				; CODE XREF: sub_C8CAC+Aj
FFFF0C3C 102D 001E                  		move.b	$1E(a5),d0
FFFF0C40 4880                       		ext.w	d0
FFFF0C42 DC40                       		add.w	d0,d6
FFFF0C44 DC6D 0010                  		add.w	$10(a5),d6
FFFF0C48 4A2D 000A                  		tst.b	$A(a5)
FFFF0C4C 6A00                       		bpl.s	locret_C8D12
FFFF0C4E DC6D 001C                  		add.w	$1C(a5),d6
FFFF0C52                            
FFFF0C52                            locret_C8D12:				; CODE XREF: sub_C8CAC+60j
FFFF0C52 4E75                       		rts
FFFF0C54                            ; ---------------------------------------------------------------------------
FFFF0C54 584F                       		addq.w	#4,sp
FFFF0C56 4E75                       		rts
FFFF0C58                            ; ---------------------------------------------------------------------------
FFFF0C58                            
FFFF0C58                            loc_C8D18:				; CODE XREF: sub_C8CAC+2Cj
FFFF0C58 422D 0026                  		clr.b	$26(a5)
FFFF0C5C 60A6                       		bra.s	loc_C8CC4
FFFF0C5E                            ; ---------------------------------------------------------------------------
FFFF0C5E                            
FFFF0C5E                            loc_C8D1E:				; CODE XREF: sub_C8CAC+32j
FFFF0C5E 552D 0026                  		subq.b	#2,$26(a5)
FFFF0C62 60A0                       		bra.s	loc_C8CC4
FFFF0C64                            ; ---------------------------------------------------------------------------
FFFF0C64                            
FFFF0C64                            loc_C8D24:				; CODE XREF: sub_C8CAC+38j
FFFF0C64 08D5 0001                  		bset	#1,(a5)
FFFF0C68 4A2D 0001                  		tst.b	1(a5)
FFFF0C6C 6B00                       		bmi.s	loc_C8D32
FFFF0C6E 6000 0000                  		bra.w	sub_C993E
FFFF0C72                            ; ---------------------------------------------------------------------------
FFFF0C72                            
FFFF0C72                            loc_C8D32:				; CODE XREF: sub_C8CAC+80j
FFFF0C72 6000 0000                  		bra.w	sub_C9C16
FFFF0C76                            ; ---------------------------------------------------------------------------
FFFF0C76                            
FFFF0C76                            loc_C8D36:				; CODE XREF: sub_C8CAC+3Ej
FFFF0C76 1B70 0001 0026             		move.b	1(a0,d0.w),$26(a5)
FFFF0C7C 6086                       		bra.s	loc_C8CC4
FFFF0C7E                            ; ---------------------------------------------------------------------------
FFFF0C7E                            
FFFF0C7E                            loc_C8D3E:				; CODE XREF: sub_C8CAC+44j
FFFF0C7E 1030 0001                  		move.b	1(a0,d0.w),d0
FFFF0C82 D12D 0003                  		add.b	d0,3(a5)
FFFF0C86 522D 0026                  		addq.b	#1,$26(a5)
FFFF0C8A 6000 FF78                  		bra.w	loc_C8CC4
FFFF0C8E                            ; End of function sub_C8CAC
FFFF0C8E                            
FFFF0C8E                            ; ---------------------------------------------------------------------------
FFFF0C8E                            ; START	OF FUNCTION CHUNK FOR sub_C8C50
FFFF0C8E                            
FFFF0C8E                            loc_C8D4E:				; CODE XREF: sub_C8C50+34j
FFFF0C8E 43F9 0000 0000             		lea	byte_C8D8C,a1
FFFF0C94 45EE 0010                  		lea	$10(a6),a2
FFFF0C98 4A2E 000E                  		tst.b	$E(a6)
FFFF0C9C 6700                       		beq.s	loc_C8D60
FFFF0C9E 45EE 0018                  		lea	$18(a6),a2
FFFF0CA2                            
FFFF0CA2                            loc_C8D60:				; CODE XREF: sub_C8C50+10Aj
FFFF0CA2 7A03                       		moveq	#3,d5
FFFF0CA4 6100 0000                  		bsr.w	WaitForZ80
FFFF0CA8                            
FFFF0CA8                            loc_C8D66:				; CODE XREF: sub_C8C50+12Ej
FFFF0CA8 3206                       		move.w	d6,d1
FFFF0CAA 301A                       		move.w	(a2)+,d0
FFFF0CAC D240                       		add.w	d0,d1
FFFF0CAE 3601                       		move.w	d1,d3
FFFF0CB0 E049                       		lsr.w	#8,d1
FFFF0CB2 1019                       		move.b	(a1)+,d0
FFFF0CB4 6100 0000                  		bsr.w	sub_C998C
FFFF0CB8 1203                       		move.b	d3,d1
FFFF0CBA 1019                       		move.b	(a1)+,d0
FFFF0CBC 6100 0000                  		bsr.w	sub_C998C
FFFF0CC0 51CD FFE6                  		dbf	d5,loc_C8D66
FFFF0CC4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF0CCC 4E75                       		rts
FFFF0CCE                            ; END OF FUNCTION CHUNK	FOR sub_C8C50
FFFF0CCE                            ; ---------------------------------------------------------------------------
FFFF0CCE ADA9 ACA8 AEAA A6A2        byte_C8D8C:	dc.b $AD, $A9, $AC, $A8, $AE, $AA, $A6,	$A2
FFFF0CD6                            					; DATA XREF: sub_C8C50:loc_C8D4Eo
FFFF0CD6                            
FFFF0CD6                            ; =============== S U B	R O U T	I N E =======================================
FFFF0CD6                            
FFFF0CD6                            
FFFF0CD6                            sub_C8D94:				; CODE XREF: sub_C8A00+12p
FFFF0CD6 0815 0001                  		btst	#1,(a5)
FFFF0CDA 6600                       		bne.s	locret_C8DA6
FFFF0CDC 7000                       		moveq	#0,d0
FFFF0CDE 102D 001F                  		move.b	$1F(a5),d0
FFFF0CE2 E348                       		lsl.w	#1,d0
FFFF0CE4 4EFB 0000                  		jmp	locret_C8DA6(pc,d0.w)
FFFF0CE8                            
FFFF0CE8                            locret_C8DA6:				; CODE XREF: sub_C8D94+4j
FFFF0CE8 4E75                       		rts
FFFF0CEA                            ; End of function sub_C8D94
FFFF0CEA                            
FFFF0CEA                            ; ---------------------------------------------------------------------------
FFFF0CEA 6000                       		bra.s	loc_C8DD2
FFFF0CEC                            ; ---------------------------------------------------------------------------
FFFF0CEC 6000                       		bra.s	loc_C8DC8
FFFF0CEE                            ; ---------------------------------------------------------------------------
FFFF0CEE 6000                       		bra.s	loc_C8DC8
FFFF0CF0                            
FFFF0CF0                            ; =============== S U B	R O U T	I N E =======================================
FFFF0CF0                            
FFFF0CF0                            
FFFF0CF0                            sub_C8DAE:				; CODE XREF: sub_C8A00+1Ep
FFFF0CF0 0815 0001                  		btst	#1,(a5)
FFFF0CF4 6600                       		bne.s	locret_C8DC0
FFFF0CF6 7000                       		moveq	#0,d0
FFFF0CF8 102D 001F                  		move.b	$1F(a5),d0
FFFF0CFC E348                       		lsl.w	#1,d0
FFFF0CFE 4EFB 0000                  		jmp	locret_C8DC0(pc,d0.w)
FFFF0D02                            
FFFF0D02                            locret_C8DC0:				; CODE XREF: sub_C8DAE+4j
FFFF0D02 4E75                       		rts
FFFF0D04                            ; End of function sub_C8DAE
FFFF0D04                            
FFFF0D04                            ; ---------------------------------------------------------------------------
FFFF0D04 4E75                       		rts
FFFF0D06                            ; ---------------------------------------------------------------------------
FFFF0D06 6000                       		bra.s	loc_C8DD2
FFFF0D08                            ; ---------------------------------------------------------------------------
FFFF0D08 6000                       		bra.s	loc_C8DD2
FFFF0D0A                            ; ---------------------------------------------------------------------------
FFFF0D0A                            
FFFF0D0A                            loc_C8DC8:				; CODE XREF: ROM:000C8DAAj
FFFF0D0A                            					; ROM:000C8DACj
FFFF0D0A 1B6D 0023 0024             		move.b	$23(a5),$24(a5)
FFFF0D10 422D 0021                  		clr.b	$21(a5)
FFFF0D14                            
FFFF0D14                            loc_C8DD2:				; CODE XREF: ROM:000C8DA8j
FFFF0D14                            					; ROM:000C8DC4j ...
FFFF0D14 102D 0024                  		move.b	$24(a5),d0
FFFF0D18 B02D 0023                  		cmp.b	$23(a5),d0
FFFF0D1C 6600                       		bne.s	loc_C8DFA
FFFF0D1E 162D 0022                  		move.b	$22(a5),d3
FFFF0D22 B62D 0021                  		cmp.b	$21(a5),d3
FFFF0D26 6A00                       		bpl.s	loc_C8DF2
FFFF0D28 0C2D 0002 001F             		cmpi.b	#2,$1F(a5)
FFFF0D2E 6700                       		beq.s	locret_C8E2A
FFFF0D30 422D 0021                  		clr.b	$21(a5)
FFFF0D34                            
FFFF0D34                            loc_C8DF2:				; CODE XREF: ROM:000C8DE4j
FFFF0D34 422D 0024                  		clr.b	$24(a5)
FFFF0D38 522D 0021                  		addq.b	#1,$21(a5)
FFFF0D3C                            
FFFF0D3C                            loc_C8DFA:				; CODE XREF: ROM:000C8DDAj
FFFF0D3C 7000                       		moveq	#0,d0
FFFF0D3E 102D 0020                  		move.b	$20(a5),d0
FFFF0D42 5340                       		subq.w	#1,d0
FFFF0D44 E548                       		lsl.w	#2,d0
FFFF0D46 207B 0000                  		movea.l	off_C8E2C(pc,d0.w),a0
FFFF0D4A 7000                       		moveq	#0,d0
FFFF0D4C 102D 0021                  		move.b	$21(a5),d0
FFFF0D50 5340                       		subq.w	#1,d0
FFFF0D52 1230 0000                  		move.b	(a0,d0.w),d1
FFFF0D56 102D 0027                  		move.b	$27(a5),d0
FFFF0D5A 0200 0037                  		andi.b	#$37,d0	; '7'
FFFF0D5E 8200                       		or.b	d0,d1
FFFF0D60 103C 00B4                  		move.b	#$B4,d0
FFFF0D64 6100 0000                  		bsr.w	sub_C9956
FFFF0D68 522D 0024                  		addq.b	#1,$24(a5)
FFFF0D6C                            
FFFF0D6C                            locret_C8E2A:				; CODE XREF: ROM:000C8DECj
FFFF0D6C 4E75                       		rts
FFFF0D6E                            ; ---------------------------------------------------------------------------
FFFF0D6E 0000 0000 0000 0000 0000+  off_C8E2C:	dc.l byte_C8E38, byte_C8E3A, byte_C8E3D	; DATA XREF: ROM:000C8E04r
FFFF0D7A 4080                       byte_C8E38:	dc.b $40, $80		; DATA XREF: ROM:off_C8E2Co
FFFF0D7C 40C0 80                    byte_C8E3A:	dc.b $40, $C0, $80	; DATA XREF: ROM:off_C8E2Co
FFFF0D7F C080 C040 00               byte_C8E3D:	dc.b $C0, $80, $C0, $40, 0 ; DATA XREF:	ROM:off_C8E2Co
FFFF0D84                            
FFFF0D84                            ; =============== S U B	R O U T	I N E =======================================
FFFF0D84                            
FFFF0D84                            
FFFF0D84                            OverrideFM4Freq:			; CODE XREF: sub_C8018+68Ep
FFFF0D84                            					; sub_C8018+6C8p
FFFF0D84 4A2E 002F                  		tst.b	$2F(a6)
FFFF0D88 6700 0000                  		beq.w	locret_C8E88
FFFF0D8C 102E 003F                  		move.b	$3F(a6),d0
FFFF0D90 0400 0040                  		subi.b	#$40,d0	; '@'
FFFF0D94 6A00 0000                  		bpl.w	loc_C8E58
FFFF0D98 4600                       		not.b	d0
FFFF0D9A                            
FFFF0D9A                            loc_C8E58:				; CODE XREF: OverrideFM4Freq+10j
FFFF0D9A E208                       		lsr.b	#1,d0
FFFF0D9C 0240 007E                  		andi.w	#$7E,d0	; '~'
FFFF0DA0 343B 0000                  		move.w	word_C8E8A(pc,d0.w),d2
FFFF0DA4 3202                       		move.w	d2,d1
FFFF0DA6 E049                       		lsr.w	#8,d1
FFFF0DA8 103C 00A4                  		move.b	#$A4,d0
FFFF0DAC 6100 0000                  		bsr.w	WaitForZ80
FFFF0DB0 6100 0000                  		bsr.w	sub_C99B2
FFFF0DB4 1202                       		move.b	d2,d1
FFFF0DB6 103C 00A0                  		move.b	#$A0,d0
FFFF0DBA 6100 0000                  		bsr.w	WaitForZ80
FFFF0DBE 6100 0000                  		bsr.w	sub_C99B2
FFFF0DC2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF0DCA                            
FFFF0DCA                            locret_C8E88:				; CODE XREF: OverrideFM4Freq+4j
FFFF0DCA 4E75                       		rts
FFFF0DCC                            ; End of function OverrideFM4Freq
FFFF0DCC                            
FFFF0DCC                            ; ---------------------------------------------------------------------------
FFFF0DCC 1008 1010 1020 1030 1040+  word_C8E8A:	dc.w $1008, $1010, $1020, $1030, $1040,	$1050, $1060, $1070
FFFF0DDC                            					; DATA XREF: OverrideFM4Freq+1Cr
FFFF0DDC 1080 1090 10A0 10B0 10C0+  		dc.w $1080, $1090, $10A0, $10B0, $10C0,	$10D0, $10E0, $10F0
FFFF0DEC 1100 1110 1120 1130 1140+  		dc.w $1100, $1110, $1120, $1130, $1140,	$1150, $1160, $1170
FFFF0DFC 1180 1190 11A0 11B0 11C0+  		dc.w $1180, $1190, $11A0, $11B0, $11C0,	$11D0, $11E0, $11F0
FFFF0E0C                            
FFFF0E0C                            ; =============== S U B	R O U T	I N E =======================================
FFFF0E0C                            
FFFF0E0C                            
FFFF0E0C                            Sound_Play:				; CODE XREF: sub_C8018+66Ep
FFFF0E0C 4AAE 000A                  		tst.l	$A(a6)
FFFF0E10 6700                       		beq.s	locret_C8F1A
FFFF0E12 41FA F6EA                  		lea	SoundPriorities,a0
FFFF0E16 43EE 000A                  		lea	$A(a6),a1
FFFF0E1A 1D56 0030                  		move.b	0(a6),$30(a6)
FFFF0E1E 7003                       		moveq	#3,d0
FFFF0E20                            
FFFF0E20                            loc_C8EE0:				; CODE XREF: Sound_Play:loc_C8F10j
FFFF0E20 1411                       		move.b	(a1),d2
FFFF0E22 1602                       		move.b	d2,d3
FFFF0E24 4219                       		clr.b	(a1)+
FFFF0E26 5302                       		subq.b	#1,d2
FFFF0E28 6500                       		bcs.s	loc_C8F10
FFFF0E2A 0242 00FF                  		andi.w	#$FF,d2
FFFF0E2E 1830 2000                  		move.b	(a0,d2.w),d4
FFFF0E32 B82E 0030                  		cmp.b	$30(a6),d4
FFFF0E36 6500                       		bcs.s	loc_C8F10
FFFF0E38 4A04                       		tst.b	d4
FFFF0E3A 6B00                       		bmi.s	loc_C8F00
FFFF0E3C 1D44 0030                  		move.b	d4,$30(a6)
FFFF0E40                            
FFFF0E40                            loc_C8F00:				; CODE XREF: Sound_Play+30j
FFFF0E40 1D43 0009                  		move.b	d3,9(a6)
FFFF0E44 48E7 FFFE                  		movem.l	d0-a6,-(sp)
FFFF0E48 4EB9 0000 0000             		jsr	Sound_ChkValue
FFFF0E4E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
FFFF0E52                            
FFFF0E52                            loc_C8F10:				; CODE XREF: Sound_Play+1Ej
FFFF0E52                            					; Sound_Play+2Cj
FFFF0E52 51C8 FFCC                  		dbf	d0,loc_C8EE0
FFFF0E56 1CAE 0030                  		move.b	$30(a6),0(a6)
FFFF0E5A                            
FFFF0E5A                            locret_C8F1A:				; CODE XREF: Sound_Play+4j
FFFF0E5A 4E75                       		rts
FFFF0E5C                            ; End of function Sound_Play
FFFF0E5C                            
FFFF0E5C                            
FFFF0E5C                            ; =============== S U B	R O U T	I N E =======================================
FFFF0E5C                            
FFFF0E5C                            
FFFF0E5C                            Sound_ChkValue:				; CODE XREF: sub_C8018+672p
FFFF0E5C                            					; Sound_Play+3Ep
FFFF0E5C                            
FFFF0E5C                            ; FUNCTION CHUNK AT 000C8720 SIZE 000000F6 BYTES
FFFF0E5C                            ; FUNCTION CHUNK AT 000C9412 SIZE 00000062 BYTES
FFFF0E5C                            ; FUNCTION CHUNK AT 000C9512 SIZE 000000F6 BYTES
FFFF0E5C                            ; FUNCTION CHUNK AT 000C9754 SIZE 00000028 BYTES
FFFF0E5C                            ; FUNCTION CHUNK AT 000C979A SIZE 00000082 BYTES
FFFF0E5C                            
FFFF0E5C 7E00                       		moveq	#0,d7
FFFF0E5E 1E2E 0009                  		move.b	9(a6),d7
FFFF0E62 6700 0000                  		beq.w	locret_C8F86
FFFF0E66 422E 0009                  		clr.b	9(a6)
FFFF0E6A 0C07 007B                  		cmpi.b	#$7B,d7	; '{'
FFFF0E6E 6700 0000                  		beq.w	loc_C8FC4
FFFF0E72 0C07 0059                  		cmpi.b	#$59,d7	; 'Y'
FFFF0E76 6700 0000                  		beq.w	loc_C8FC4
FFFF0E7A 0C07 008C                  		cmpi.b	#$8C,d7
FFFF0E7E 6700 0000                  		beq.w	loc_C8FC4
FFFF0E82 0C07 001F                  		cmpi.b	#$1F,d7
FFFF0E86 6300 0000                  		bls.w	loc_C8FC4
FFFF0E8A 0C07 0020                  		cmpi.b	#$20,d7	; ' '
FFFF0E8E 6500 0000                  		bcs.w	locret_C8F86
FFFF0E92 0C07 008F                  		cmpi.b	#$8F,d7
FFFF0E96 6300 0000                  		bls.w	loc_C9176
FFFF0E9A 0C07 0090                  		cmpi.b	#$90,d7
FFFF0E9E 6500 0000                  		bcs.w	locret_C8F86
FFFF0EA2 0C07 0092                  		cmpi.b	#$92,d7
FFFF0EA6 6500 0000                  		bcs.w	loc_C926E
FFFF0EAA 0C07 00C0                  		cmpi.b	#$C0,d7
FFFF0EAE 6500 F7BC                  		bcs.w	PlaySample
FFFF0EB2 0C07 00CC                  		cmpi.b	#$CC,d7
FFFF0EB6 6300 0000                  		bls.w	Sound_DoSpecial
FFFF0EBA 0C07 00E8                  		cmpi.b	#$E8,d7
FFFF0EBE 6300 0000                  		bls.w	loc_C9176
FFFF0EC2 6000 0000                  		bra.w	LoadDualDriver
FFFF0EC6                            ; ---------------------------------------------------------------------------
FFFF0EC6                            
FFFF0EC6                            locret_C8F86:				; CODE XREF: Sound_ChkValue+6j
FFFF0EC6                            					; Sound_ChkValue+32j ...
FFFF0EC6 4E75                       		rts
FFFF0EC8                            ; ---------------------------------------------------------------------------
FFFF0EC8                            
FFFF0EC8                            Sound_DoSpecial:			; CODE XREF: Sound_ChkValue+5Aj
FFFF0EC8 0407 00C0                  		subi.b	#$C0,d7
FFFF0ECC DE47                       		add.w	d7,d7
FFFF0ECE DE47                       		add.w	d7,d7
FFFF0ED0 4EFB 7000                  		jmp	loc_C8F94(pc,d7.w)
FFFF0ED4                            
FFFF0ED4                            loc_C8F94:
FFFF0ED4 6000 0000                  		bra.w	loc_C9418
FFFF0ED8                            ; ---------------------------------------------------------------------------
FFFF0ED8 6000 0000                  		bra.w	sub_C9310
FFFF0EDC                            ; ---------------------------------------------------------------------------
FFFF0EDC 6000 0000                  		bra.w	sub_C93A8
FFFF0EE0                            ; ---------------------------------------------------------------------------
FFFF0EE0 6000 0000                  		bra.w	loc_C9754
FFFF0EE4                            ; ---------------------------------------------------------------------------
FFFF0EE4 6000 0000                  		bra.w	loc_C9512
FFFF0EE8                            ; ---------------------------------------------------------------------------
FFFF0EE8 6000 0000                  		bra.w	loc_C9552
FFFF0EEC                            ; ---------------------------------------------------------------------------
FFFF0EEC 6000 0000                  		bra.w	loc_C9552
FFFF0EF0                            ; ---------------------------------------------------------------------------
FFFF0EF0 6000 0000                  		bra.w	LoadSimpleDriver
FFFF0EF4                            ; ---------------------------------------------------------------------------
FFFF0EF4 6000 0000                  		bra.w	loc_C95D6
FFFF0EF8                            ; ---------------------------------------------------------------------------
FFFF0EF8 6000 0000                  		bra.w	loc_C95EE
FFFF0EFC                            ; ---------------------------------------------------------------------------
FFFF0EFC 6000 0000                  		bra.w	loc_C9412
FFFF0F00                            ; ---------------------------------------------------------------------------
FFFF0F00 6000 0000                  		bra.w	loc_C944C
FFFF0F04                            ; ---------------------------------------------------------------------------
FFFF0F04                            
FFFF0F04                            loc_C8FC4:				; CODE XREF: Sound_ChkValue+12j
FFFF0F04                            					; Sound_ChkValue+1Aj ...
FFFF0F04 6100 0000                  		bsr.w	sub_C9310
FFFF0F08 6100 0000                  		bsr.w	sub_C93A8
FFFF0F0C 122E 0041                  		move.b	$41(a6),d1
FFFF0F10 48E7 4000                  		movem.l	d1,-(sp)
FFFF0F14 6100 0000                  		bsr.w	sub_C977C
FFFF0F18 4CDF 0002                  		movem.l	(sp)+,d1
FFFF0F1C 1D41 0041                  		move.b	d1,$41(a6)
FFFF0F20 49FA F0E2                  		lea	MusicPointers,a4
FFFF0F24 0C07 007B                  		cmpi.b	#$7B,d7	; '{'
FFFF0F28 6600 0000                  		bne.w	loc_C8FF0
FFFF0F2C 1E3C 0020                  		move.b	#$20,d7	; ' '
FFFF0F30                            
FFFF0F30                            loc_C8FF0:				; CODE XREF: Sound_ChkValue+CCj
FFFF0F30 0C07 0059                  		cmpi.b	#$59,d7	; 'Y'
FFFF0F34 6600 0000                  		bne.w	loc_C8FFC
FFFF0F38 1E3C 0021                  		move.b	#$21,d7	; '!'
FFFF0F3C                            
FFFF0F3C                            loc_C8FFC:				; CODE XREF: Sound_ChkValue+D8j
FFFF0F3C 0C07 008C                  		cmpi.b	#$8C,d7
FFFF0F40 6600 0000                  		bne.w	loc_C9008
FFFF0F44 1E3C 0022                  		move.b	#$22,d7	; '"'
FFFF0F48                            
FFFF0F48                            loc_C9008:				; CODE XREF: Sound_ChkValue+E4j
FFFF0F48 5307                       		subq.b	#1,d7
FFFF0F4A E54F                       		lsl.w	#2,d7
FFFF0F4C 2874 7000                  		movea.l	(a4,d7.w),a4
FFFF0F50 7000                       		moveq	#0,d0
FFFF0F52 3014                       		move.w	(a4),d0
FFFF0F54 D08C                       		add.l	a4,d0
FFFF0F56 2D40 0020                  		move.l	d0,$20(a6)
FFFF0F5A 1D6C 0005 0002             		move.b	5(a4),2(a6)
FFFF0F60 1D6C 0005 0001             		move.b	5(a4),1(a6)
FFFF0F66 6100 0000                  		bsr.w	ClearSampleQueue
FFFF0F6A 7200                       		moveq	#0,d1
FFFF0F6C 264C                       		movea.l	a4,a3
FFFF0F6E 5C4C                       		addq.w	#6,a4
FFFF0F70 7E00                       		moveq	#0,d7
FFFF0F72 1E2B 0002                  		move.b	2(a3),d7
FFFF0F76 6700                       		beq.s	loc_C90B0
FFFF0F78 5307                       		subq.b	#1,d7
FFFF0F7A 123C 00C0                  		move.b	#$C0,d1
FFFF0F7E 163C 0080                  		move.b	#$80,d3
FFFF0F82 182B 0004                  		move.b	4(a3),d4
FFFF0F86 7C34                       		moveq	#$34,d6	; '4'
FFFF0F88 1A3C 0001                  		move.b	#1,d5
FFFF0F8C 43EE 004A                  		lea	$4A(a6),a1
FFFF0F90 45F9 0000 0000             		lea	byte_C916A,a2
FFFF0F96                            
FFFF0F96                            loc_C9054:				; CODE XREF: Sound_ChkValue+15Ej
FFFF0F96 1283                       		move.b	d3,(a1)
FFFF0F98 135A 0001                  		move.b	(a2)+,1(a1)
FFFF0F9C 1344 0002                  		move.b	d4,2(a1)
FFFF0FA0 1346 000D                  		move.b	d6,$D(a1)
FFFF0FA4 1341 0027                  		move.b	d1,$27(a1)
FFFF0FA8 1345 000E                  		move.b	d5,$E(a1)
FFFF0FAC 7000                       		moveq	#0,d0
FFFF0FAE 301C                       		move.w	(a4)+,d0
FFFF0FB0 D08B                       		add.l	a3,d0
FFFF0FB2 2340 0004                  		move.l	d0,4(a1)
FFFF0FB6 335C 0008                  		move.w	(a4)+,8(a1)
FFFF0FBA D2C6                       		adda.w	d6,a1
FFFF0FBC 51CF FFD8                  		dbf	d7,loc_C9054
FFFF0FC0 0C2B 0007 0002             		cmpi.b	#7,2(a3)
FFFF0FC6 6600                       		bne.s	loc_C9090
FFFF0FC8 702B                       		moveq	#$2B,d0	; '+'
FFFF0FCA 7200                       		moveq	#0,d1
FFFF0FCC 6100 0000                  		bsr.w	sub_C996E
FFFF0FD0 6000                       		bra.s	loc_C90B0
FFFF0FD2                            ; ---------------------------------------------------------------------------
FFFF0FD2                            
FFFF0FD2                            loc_C9090:				; CODE XREF: Sound_ChkValue+168j
FFFF0FD2 7028                       		moveq	#$28,d0	; '('
FFFF0FD4 7206                       		moveq	#6,d1
FFFF0FD6 6100 0000                  		bsr.w	sub_C996E
FFFF0FDA 103C 00B6                  		move.b	#$B6,d0
FFFF0FDE 123C 00C0                  		move.b	#$C0,d1
FFFF0FE2 6100 0000                  		bsr.w	WaitForZ80
FFFF0FE6 6100 0000                  		bsr.w	sub_C99B2
FFFF0FEA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF0FF2                            
FFFF0FF2                            loc_C90B0:				; CODE XREF: Sound_ChkValue+11Aj
FFFF0FF2                            					; Sound_ChkValue+172j
FFFF0FF2 7E00                       		moveq	#0,d7
FFFF0FF4 1E2B 0003                  		move.b	3(a3),d7
FFFF0FF8 6700                       		beq.s	loc_C90F0
FFFF0FFA 5307                       		subq.b	#1,d7
FFFF0FFC 43EE 01B6                  		lea	$1B6(a6),a1
FFFF1000 45F9 0000 0000             		lea	byte_C9172,a2
FFFF1006                            
FFFF1006                            loc_C90C2:				; CODE XREF: Sound_ChkValue+1D0j
FFFF1006 1283                       		move.b	d3,(a1)
FFFF1008 135A 0001                  		move.b	(a2)+,1(a1)
FFFF100C 1344 0002                  		move.b	d4,2(a1)
FFFF1010 1346 000D                  		move.b	d6,$D(a1)
FFFF1014 1345 000E                  		move.b	d5,$E(a1)
FFFF1018 7000                       		moveq	#0,d0
FFFF101A 301C                       		move.w	(a4)+,d0
FFFF101C D08B                       		add.l	a3,d0
FFFF101E 2340 0004                  		move.l	d0,4(a1)
FFFF1022 335C 0008                  		move.w	(a4)+,8(a1)
FFFF1026 135C 000A                  		move.b	(a4)+,$A(a1)
FFFF102A 135C 000B                  		move.b	(a4)+,$B(a1)
FFFF102E D2C6                       		adda.w	d6,a1
FFFF1030 51CF FFD4                  		dbf	d7,loc_C90C2
FFFF1034                            
FFFF1034                            loc_C90F0:				; CODE XREF: Sound_ChkValue+19Aj
FFFF1034 43EE 0252                  		lea	$252(a6),a1
FFFF1038 7E05                       		moveq	#5,d7
FFFF103A                            
FFFF103A                            loc_C90F6:				; CODE XREF: Sound_ChkValue+204j
FFFF103A 4A11                       		tst.b	(a1)
FFFF103C 6A00 0000                  		bpl.w	loc_C911E
FFFF1040 7000                       		moveq	#0,d0
FFFF1042 1029 0001                  		move.b	1(a1),d0
FFFF1046 6B00 0000                  		bmi.w	loc_C910E
FFFF104A 5500                       		subq.b	#2,d0
FFFF104C D000                       		add.b	d0,d0
FFFF104E 6000 0000                  		bra.w	loc_C9110
FFFF1052                            ; ---------------------------------------------------------------------------
FFFF1052                            
FFFF1052                            loc_C910E:				; CODE XREF: Sound_ChkValue+1E6j
FFFF1052 E808                       		lsr.b	#4,d0
FFFF1054                            
FFFF1054                            loc_C9110:				; CODE XREF: Sound_ChkValue+1EEj
FFFF1054 41F9 0000 0000             		lea	BGMChannelRAM,a0
FFFF105A 3070 0000                  		movea.w	(a0,d0.w),a0
FFFF105E D1CE                       		adda.l	a6,a0
FFFF1060 08D0 0002                  		bset	#2,(a0)
FFFF1064                            
FFFF1064                            loc_C911E:				; CODE XREF: Sound_ChkValue+1DCj
FFFF1064 D2C6                       		adda.w	d6,a1
FFFF1066 51CF FFD2                  		dbf	d7,loc_C90F6
FFFF106A 4A6E 038A                  		tst.w	$38A(a6)
FFFF106E 6A00                       		bpl.s	loc_C9130
FFFF1070 08EE 0002 014E             		bset	#2,$14E(a6)
FFFF1076                            
FFFF1076                            loc_C9130:				; CODE XREF: Sound_ChkValue+20Cj
FFFF1076 4A6E 03BE                  		tst.w	$3BE(a6)
FFFF107A 6A00                       		bpl.s	loc_C913C
FFFF107C 08EE 0002 021E             		bset	#2,$21E(a6)
FFFF1082                            
FFFF1082                            loc_C913C:				; CODE XREF: Sound_ChkValue+218j
FFFF1082 4BEE 00B2                  		lea	$B2(a6),a5
FFFF1086 7804                       		moveq	#4,d4
FFFF1088                            
FFFF1088                            loc_C9142:				; CODE XREF: Sound_ChkValue+22Cj
FFFF1088 6100 0000                  		bsr.w	sub_C993E
FFFF108C DAC6                       		adda.w	d6,a5
FFFF108E 51CC FFF8                  		dbf	d4,loc_C9142
FFFF1092 7802                       		moveq	#2,d4
FFFF1094                            
FFFF1094                            loc_C914E:				; CODE XREF: Sound_ChkValue+238j
FFFF1094 6100 0000                  		bsr.w	sub_C9C16
FFFF1098 DAC6                       		adda.w	d6,a5
FFFF109A 51CC FFF8                  		dbf	d4,loc_C914E
FFFF109E 082E 0002 021E             		btst	#2,$21E(a6)
FFFF10A4 6600                       		bne.s	locret_C9168
FFFF10A6 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
FFFF10AE                            
FFFF10AE                            locret_C9168:				; CODE XREF: Sound_ChkValue+242j
FFFF10AE 4E75                       		rts
FFFF10B0                            ; ---------------------------------------------------------------------------
FFFF10B0 1011 0001 0204 0506        byte_C916A:	dc.b $10, $11, 0, 1, 2,	4, 5, 6	; DATA XREF: Sound_ChkValue+134o
FFFF10B8 80A0 C000                  byte_C9172:	dc.b $80, $A0, $C0, 0	; DATA XREF: Sound_ChkValue+1A2o
FFFF10BC                            ; ---------------------------------------------------------------------------
FFFF10BC                            
FFFF10BC                            loc_C9176:				; CODE XREF: Sound_ChkValue+3Aj
FFFF10BC                            					; Sound_ChkValue+62j
FFFF10BC 41FA EF5C                  		lea	SFXList,a0
FFFF10C0 0C07 00E0                  		cmpi.b	#$E0,d7
FFFF10C4 6500 0000                  		bcs.w	loc_C918E
FFFF10C8 0407 00E0                  		subi.b	#$E0,d7
FFFF10CC 0607 0070                  		addi.b	#$70,d7	; 'p'
FFFF10D0 6000 0000                  		bra.w	loc_C9192
FFFF10D4                            ; ---------------------------------------------------------------------------
FFFF10D4                            
FFFF10D4                            loc_C918E:				; CODE XREF: Sound_ChkValue+262j
FFFF10D4 0407 0020                  		subi.b	#$20,d7	; ' '
FFFF10D8                            
FFFF10D8                            loc_C9192:				; CODE XREF: Sound_ChkValue+26Ej
FFFF10D8 E54F                       		lsl.w	#2,d7
FFFF10DA 2670 7000                  		movea.l	(a0,d7.w),a3
FFFF10DE 224B                       		movea.l	a3,a1
FFFF10E0 7200                       		moveq	#0,d1
FFFF10E2 3219                       		move.w	(a1)+,d1
FFFF10E4 D28B                       		add.l	a3,d1
FFFF10E6 1A19                       		move.b	(a1)+,d5
FFFF10E8 7E00                       		moveq	#0,d7
FFFF10EA 1E19                       		move.b	(a1)+,d7
FFFF10EC 5307                       		subq.b	#1,d7
FFFF10EE 7C34                       		moveq	#$34,d6	; '4'
FFFF10F0                            
FFFF10F0                            loc_C91AA:				; CODE XREF: Sound_ChkValue:loc_C9230j
FFFF10F0 7600                       		moveq	#0,d3
FFFF10F2 1629 0001                  		move.b	1(a1),d3
FFFF10F6 1803                       		move.b	d3,d4
FFFF10F8 6B00                       		bmi.s	loc_C91C8
FFFF10FA 5503                       		subq.b	#2,d3
FFFF10FC D603                       		add.b	d3,d3
FFFF10FE 4BF9 0000 0000             		lea	BGMChannelRAM,a5
FFFF1104 3A75 3000                  		movea.w	(a5,d3.w),a5
FFFF1108 DBCE                       		adda.l	a6,a5
FFFF110A 08D5 0002                  		bset	#2,(a5)
FFFF110E 6000                       		bra.s	loc_C91F4
FFFF1110                            ; ---------------------------------------------------------------------------
FFFF1110                            
FFFF1110                            loc_C91C8:				; CODE XREF: Sound_ChkValue+296j
FFFF1110 E80B                       		lsr.b	#4,d3
FFFF1112 4BF9 0000 0000             		lea	BGMChannelRAM,a5
FFFF1118 3A75 3000                  		movea.w	(a5,d3.w),a5
FFFF111C DBCE                       		adda.l	a6,a5
FFFF111E 08D5 0002                  		bset	#2,(a5)
FFFF1122 0C04 00C0                  		cmpi.b	#$C0,d4
FFFF1126 6600                       		bne.s	loc_C91F4
FFFF1128 1004                       		move.b	d4,d0
FFFF112A 0000 001F                  		ori.b	#$1F,d0
FFFF112E 13C0 00C0 0011             		move.b	d0,($C00011).l
FFFF1134 0840 0005                  		bchg	#5,d0
FFFF1138 13C0 00C0 0011             		move.b	d0,($C00011).l
FFFF113E                            
FFFF113E                            loc_C91F4:				; CODE XREF: Sound_ChkValue+2AAj
FFFF113E                            					; Sound_ChkValue+2C0j
FFFF113E 3A7B 3000                  		movea.w	SFXChannelRAM(pc,d3.w),a5
FFFF1142 DBCE                       		adda.l	a6,a5
FFFF1144 244D                       		movea.l	a5,a2
FFFF1146 700C                       		moveq	#$C,d0
FFFF1148                            
FFFF1148                            loc_C91FE:				; CODE XREF: Sound_ChkValue+2E4j
FFFF1148 429A                       		clr.l	(a2)+
FFFF114A 51C8 FFFC                  		dbf	d0,loc_C91FE
FFFF114E 2B41 0020                  		move.l	d1,$20(a5)
FFFF1152 3A99                       		move.w	(a1)+,(a5)
FFFF1154 1B45 0002                  		move.b	d5,2(a5)
FFFF1158 7000                       		moveq	#0,d0
FFFF115A 3019                       		move.w	(a1)+,d0
FFFF115C D08B                       		add.l	a3,d0
FFFF115E 2B40 0004                  		move.l	d0,4(a5)
FFFF1162 3B59 0008                  		move.w	(a1)+,8(a5)
FFFF1166 1B7C 0001 000E             		move.b	#1,$E(a5)
FFFF116C 1B46 000D                  		move.b	d6,$D(a5)
FFFF1170 4A04                       		tst.b	d4
FFFF1172 6B00                       		bmi.s	loc_C9230
FFFF1174 1B7C 00C0 0027             		move.b	#$C0,$27(a5)
FFFF117A                            
FFFF117A                            loc_C9230:				; CODE XREF: Sound_ChkValue+30Cj
FFFF117A 51CF FF74                  		dbf	d7,loc_C91AA
FFFF117E 4A2E 0286                  		tst.b	$286(a6)
FFFF1182 6A00                       		bpl.s	loc_C9240
FFFF1184 08EE 0002 038A             		bset	#2,$38A(a6)
FFFF118A                            
FFFF118A                            loc_C9240:				; CODE XREF: Sound_ChkValue+31Cj
FFFF118A 4A2E 0356                  		tst.b	$356(a6)
FFFF118E 6A00                       		bpl.s	locret_C924C
FFFF1190 08EE 0002 03BE             		bset	#2,$3BE(a6)
FFFF1196                            
FFFF1196                            locret_C924C:				; CODE XREF: Sound_ChkValue+328j
FFFF1196 4E75                       		rts
FFFF1198                            ; ---------------------------------------------------------------------------
FFFF1198 011A 0000 014E 0182 01B6+  BGMChannelRAM:	dc.w $11A, 0, $14E, $182, $1B6,	$1EA, $21E, $21E
FFFF11A8                            					; DATA XREF: Sound_ChkValue:loc_C9110o
FFFF11A8                            					; Sound_ChkValue+29Co ...
FFFF11A8                            SFXChannelRAM:				; DATA XREF: Sound_ChkValue:loc_C91F4r
FFFF11A8 0252 0000 0286 02BA 02EE+  		dc.w $252, 0, $286, $2BA, $2EE,	$322, $356, $356
FFFF11B8                            ; ---------------------------------------------------------------------------
FFFF11B8                            
FFFF11B8                            loc_C926E:				; CODE XREF: Sound_ChkValue+4Aj
FFFF11B8 41FA EE60                  		lea	SpecialList_Broken,a0
FFFF11BC 0407 0090                  		subi.b	#$90,d7
FFFF11C0 E54F                       		lsl.w	#2,d7
FFFF11C2 2670 7000                  		movea.l	(a0,d7.w),a3
FFFF11C6 224B                       		movea.l	a3,a1
FFFF11C8 7000                       		moveq	#0,d0
FFFF11CA 3019                       		move.w	(a1)+,d0
FFFF11CC D08B                       		add.l	a3,d0
FFFF11CE 2D40 0024                  		move.l	d0,$24(a6)
FFFF11D2 1A19                       		move.b	(a1)+,d5
FFFF11D4 1E19                       		move.b	(a1)+,d7
FFFF11D6 5307                       		subq.b	#1,d7
FFFF11D8 7C34                       		moveq	#$34,d6	; '4'
FFFF11DA                            
FFFF11DA                            loc_C9290:				; CODE XREF: Sound_ChkValue:loc_C92DEj
FFFF11DA 1829 0001                  		move.b	1(a1),d4
FFFF11DE 6B00                       		bmi.s	loc_C92A2
FFFF11E0 08EE 0002 014E             		bset	#2,$14E(a6)
FFFF11E6 4BEE 038A                  		lea	$38A(a6),a5
FFFF11EA 6000                       		bra.s	loc_C92AC
FFFF11EC                            ; ---------------------------------------------------------------------------
FFFF11EC                            
FFFF11EC                            loc_C92A2:				; CODE XREF: Sound_ChkValue+378j
FFFF11EC 08EE 0002 021E             		bset	#2,$21E(a6)
FFFF11F2 4BEE 03BE                  		lea	$3BE(a6),a5
FFFF11F6                            
FFFF11F6                            loc_C92AC:				; CODE XREF: Sound_ChkValue+384j
FFFF11F6 244D                       		movea.l	a5,a2
FFFF11F8 700C                       		moveq	#$C,d0
FFFF11FA                            
FFFF11FA                            loc_C92B0:				; CODE XREF: Sound_ChkValue+396j
FFFF11FA 429A                       		clr.l	(a2)+
FFFF11FC 51C8 FFFC                  		dbf	d0,loc_C92B0
FFFF1200 3A99                       		move.w	(a1)+,(a5)
FFFF1202 1B45 0002                  		move.b	d5,2(a5)
FFFF1206 7000                       		moveq	#0,d0
FFFF1208 3019                       		move.w	(a1)+,d0
FFFF120A D08B                       		add.l	a3,d0
FFFF120C 2B40 0004                  		move.l	d0,4(a5)
FFFF1210 3B59 0008                  		move.w	(a1)+,8(a5)
FFFF1214 1B7C 0001 000E             		move.b	#1,$E(a5)
FFFF121A 1B46 000D                  		move.b	d6,$D(a5)
FFFF121E 4A04                       		tst.b	d4
FFFF1220 6B00                       		bmi.s	loc_C92DE
FFFF1222 1B7C 00C0 0027             		move.b	#$C0,$27(a5)
FFFF1228                            
FFFF1228                            loc_C92DE:				; CODE XREF: Sound_ChkValue+3BAj
FFFF1228 51CF FFB0                  		dbf	d7,loc_C9290
FFFF122C 4A2E 0286                  		tst.b	$286(a6)
FFFF1230 6A00                       		bpl.s	loc_C92EE
FFFF1232 08EE 0002 038A             		bset	#2,$38A(a6)
FFFF1238                            
FFFF1238                            loc_C92EE:				; CODE XREF: Sound_ChkValue+3CAj
FFFF1238 4A2E 0356                  		tst.b	$356(a6)
FFFF123C 6A00                       		bpl.s	locret_C930E
FFFF123E 08EE 0002 03BE             		bset	#2,$3BE(a6)
FFFF1244 0004 001F                  		ori.b	#$1F,d4
FFFF1248 13C4 00C0 0011             		move.b	d4,($C00011).l
FFFF124E 0844 0005                  		bchg	#5,d4
FFFF1252 13C4 00C0 0011             		move.b	d4,($C00011).l
FFFF1258                            
FFFF1258                            locret_C930E:				; CODE XREF: Sound_ChkValue+3D6j
FFFF1258 4E75                       		rts
FFFF125A                            ; End of function Sound_ChkValue
FFFF125A                            
FFFF125A                            
FFFF125A                            ; =============== S U B	R O U T	I N E =======================================
FFFF125A                            
FFFF125A                            
FFFF125A                            sub_C9310:				; CODE XREF: Sound_ChkValue+7Cj
FFFF125A                            					; Sound_ChkValue:loc_C8FC4p ...
FFFF125A 4216                       		clr.b	0(a6)
FFFF125C 7027                       		moveq	#$27,d0	; '''
FFFF125E 7200                       		moveq	#0,d1
FFFF1260 6100 0000                  		bsr.w	sub_C996E
FFFF1264 4BEE 0252                  		lea	$252(a6),a5
FFFF1268 7C05                       		moveq	#5,d6
FFFF126A                            
FFFF126A                            loc_C9322:				; CODE XREF: sub_C9310+92j
FFFF126A 4A15                       		tst.b	(a5)
FFFF126C 6A00 0000                  		bpl.w	loc_C939E
FFFF1270 0895 0007                  		bclr	#7,(a5)
FFFF1274 7600                       		moveq	#0,d3
FFFF1276 162D 0001                  		move.b	1(a5),d3
FFFF127A 6B00                       		bmi.s	loc_C9376
FFFF127C 6100 0000                  		bsr.w	sub_C993E
FFFF1280 0C03 0004                  		cmpi.b	#4,d3
FFFF1284 6600                       		bne.s	loc_C934E
FFFF1286 4A2E 038A                  		tst.b	$38A(a6)
FFFF128A 6A00                       		bpl.s	loc_C934E
FFFF128C 4BEE 038A                  		lea	$38A(a6),a5
FFFF1290 226E 0024                  		movea.l	$24(a6),a1
FFFF1294 6000                       		bra.s	loc_C9362
FFFF1296                            ; ---------------------------------------------------------------------------
FFFF1296                            
FFFF1296                            loc_C934E:				; CODE XREF: sub_C9310+2Cj
FFFF1296                            					; sub_C9310+32j
FFFF1296 5503                       		subq.b	#2,d3
FFFF1298 D603                       		add.b	d3,d3
FFFF129A 264D                       		movea.l	a5,a3
FFFF129C 4BFA FEFA                  		lea	BGMChannelRAM,a5
FFFF12A0 3A75 3000                  		movea.w	(a5,d3.w),a5
FFFF12A4 DBCE                       		adda.l	a6,a5
FFFF12A6 226E 0020                  		movea.l	$20(a6),a1
FFFF12AA                            
FFFF12AA                            loc_C9362:				; CODE XREF: sub_C9310+3Cj
FFFF12AA 0895 0002                  		bclr	#2,(a5)
FFFF12AE 08D5 0001                  		bset	#1,(a5)
FFFF12B2 102D 000B                  		move.b	$B(a5),d0
FFFF12B6 6100 0000                  		bsr.w	sub_C9EB2
FFFF12BA 2A4B                       		movea.l	a3,a5
FFFF12BC 6000                       		bra.s	loc_C939E
FFFF12BE                            ; ---------------------------------------------------------------------------
FFFF12BE                            
FFFF12BE                            loc_C9376:				; CODE XREF: sub_C9310+22j
FFFF12BE 6100 0000                  		bsr.w	sub_C9C16
FFFF12C2 E80B                       		lsr.b	#4,d3
FFFF12C4 41FA FED2                  		lea	BGMChannelRAM,a0
FFFF12C8 3070 3000                  		movea.w	(a0,d3.w),a0
FFFF12CC D1CE                       		adda.l	a6,a0
FFFF12CE 0890 0002                  		bclr	#2,(a0)
FFFF12D2 08D0 0001                  		bset	#1,(a0)
FFFF12D6 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
FFFF12DC 6600                       		bne.s	loc_C939E
FFFF12DE 13E8 0025 00C0 0011        		move.b	$25(a0),($C00011).l
FFFF12E6                            
FFFF12E6                            loc_C939E:				; CODE XREF: sub_C9310+14j
FFFF12E6                            					; sub_C9310+64j ...
FFFF12E6 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF12EA 51CE FF7E                  		dbf	d6,loc_C9322
FFFF12EE 4E75                       		rts
FFFF12F0                            ; End of function sub_C9310
FFFF12F0                            
FFFF12F0                            
FFFF12F0                            ; =============== S U B	R O U T	I N E =======================================
FFFF12F0                            
FFFF12F0                            
FFFF12F0                            sub_C93A8:				; CODE XREF: Sound_ChkValue+80j
FFFF12F0                            					; Sound_ChkValue+ACp ...
FFFF12F0 4BEE 038A                  		lea	$38A(a6),a5
FFFF12F4 4A15                       		tst.b	(a5)
FFFF12F6 6A00                       		bpl.s	loc_C93DA
FFFF12F8 0895 0007                  		bclr	#7,(a5)
FFFF12FC 0815 0002                  		btst	#2,(a5)
FFFF1300 6600                       		bne.s	loc_C93DA
FFFF1302 6100 0000                  		bsr.w	sub_C994A
FFFF1306 4BEE 014E                  		lea	$14E(a6),a5
FFFF130A 0895 0002                  		bclr	#2,(a5)
FFFF130E 08D5 0001                  		bset	#1,(a5)
FFFF1312 4A15                       		tst.b	(a5)
FFFF1314 6A00                       		bpl.s	loc_C93DA
FFFF1316 226E 0020                  		movea.l	$20(a6),a1
FFFF131A 102D 000B                  		move.b	$B(a5),d0
FFFF131E 6100 0000                  		bsr.w	sub_C9EB2
FFFF1322                            
FFFF1322                            loc_C93DA:				; CODE XREF: sub_C93A8+6j
FFFF1322                            					; sub_C93A8+10j ...
FFFF1322 4BEE 03BE                  		lea	$3BE(a6),a5
FFFF1326 4A15                       		tst.b	(a5)
FFFF1328 6A00                       		bpl.s	locret_C9410
FFFF132A 0895 0007                  		bclr	#7,(a5)
FFFF132E 0815 0002                  		btst	#2,(a5)
FFFF1332 6600                       		bne.s	locret_C9410
FFFF1334 6100 0000                  		bsr.w	sub_C9C1C
FFFF1338 4BEE 021E                  		lea	$21E(a6),a5
FFFF133C 0895 0002                  		bclr	#2,(a5)
FFFF1340 08D5 0001                  		bset	#1,(a5)
FFFF1344 4A15                       		tst.b	(a5)
FFFF1346 6A00                       		bpl.s	locret_C9410
FFFF1348 0C2D 00E0 0001             		cmpi.b	#$E0,1(a5)
FFFF134E 6600                       		bne.s	locret_C9410
FFFF1350 13ED 0025 00C0 0011        		move.b	$25(a5),($C00011).l
FFFF1358                            
FFFF1358                            locret_C9410:				; CODE XREF: sub_C93A8+38j
FFFF1358                            					; sub_C93A8+42j ...
FFFF1358 4E75                       		rts
FFFF135A                            ; End of function sub_C93A8
FFFF135A                            
FFFF135A                            ; ---------------------------------------------------------------------------
FFFF135A                            ; START	OF FUNCTION CHUNK FOR Sound_ChkValue
FFFF135A                            
FFFF135A                            loc_C9412:				; CODE XREF: Sound_ChkValue+A0j
FFFF135A 1D7C 0001 0047             		move.b	#1,$47(a6)
FFFF1360                            
FFFF1360                            loc_C9418:				; CODE XREF: Sound_ChkValue:loc_C8F94j
FFFF1360 6100 FEF8                  		bsr.w	sub_C9310
FFFF1364 618A                       		bsr.s	sub_C93A8
FFFF1366 1D7C 0010 002E             		move.b	#$10,$2E(a6)
FFFF136C 1D7C 0010 002D             		move.b	#$10,$2D(a6)
FFFF1372 1D7C 0018 002C             		move.b	#$18,$2C(a6)
FFFF1378 4A2E 0047                  		tst.b	$47(a6)
FFFF137C 6700 0000                  		beq.w	loc_C943E
FFFF1380 1D7C 0040 002C             		move.b	#$40,$2C(a6) ; '@'
FFFF1386                            
FFFF1386                            loc_C943E:				; CODE XREF: Sound_ChkValue+518j
FFFF1386 422E 004A                  		clr.b	$4A(a6)
FFFF138A 422E 007E                  		clr.b	$7E(a6)
FFFF138E 6100 0000                  		bsr.w	ClearSampleQueue
FFFF1392 4E75                       		rts
FFFF1394                            ; ---------------------------------------------------------------------------
FFFF1394                            
FFFF1394                            loc_C944C:				; CODE XREF: Sound_ChkValue+A4j
FFFF1394 6100 FEC4                  		bsr.w	sub_C9310
FFFF1398 6100 FF56                  		bsr.w	sub_C93A8
FFFF139C 1D7C 0001 002E             		move.b	#1,$2E(a6)
FFFF13A2 1D7C 0001 002D             		move.b	#1,$2D(a6)
FFFF13A8 1D7C 000C 002C             		move.b	#$C,$2C(a6)
FFFF13AE 422E 004A                  		clr.b	$4A(a6)
FFFF13B2 422E 007E                  		clr.b	$7E(a6)
FFFF13B6 6100 0000                  		bsr.w	ClearSampleQueue
FFFF13BA 4E75                       		rts
FFFF13BC                            ; END OF FUNCTION CHUNK	FOR Sound_ChkValue
FFFF13BC                            
FFFF13BC                            ; =============== S U B	R O U T	I N E =======================================
FFFF13BC                            
FFFF13BC                            
FFFF13BC                            DoFadeOut:				; CODE XREF: sub_C8018+686p
FFFF13BC                            					; sub_C8018+6C0p
FFFF13BC 7000                       		moveq	#0,d0
FFFF13BE 102E 002C                  		move.b	$2C(a6),d0
FFFF13C2 6700                       		beq.s	locret_C9486
FFFF13C4 102E 002E                  		move.b	$2E(a6),d0
FFFF13C8 6700                       		beq.s	loc_C9488
FFFF13CA 532E 002E                  		subq.b	#1,$2E(a6)
FFFF13CE                            
FFFF13CE                            locret_C9486:				; CODE XREF: DoFadeOut+6j
FFFF13CE 4E75                       		rts
FFFF13D0                            ; ---------------------------------------------------------------------------
FFFF13D0                            
FFFF13D0                            loc_C9488:				; CODE XREF: DoFadeOut+Cj
FFFF13D0 532E 002C                  		subq.b	#1,$2C(a6)
FFFF13D4 6600 0000                  		bne.w	loc_C9498
FFFF13D8 4A2E 0047                  		tst.b	$47(a6)
FFFF13DC 6700 0000                  		beq.w	loc_C9754
FFFF13E0                            
FFFF13E0                            loc_C9498:				; CODE XREF: DoFadeOut+18j
FFFF13E0 422E 000E                  		clr.b	$E(a6)
FFFF13E4 1D6E 002D 002E             		move.b	$2D(a6),$2E(a6)
FFFF13EA 4BEE 00B2                  		lea	$B2(a6),a5
FFFF13EE 7E04                       		moveq	#4,d7
FFFF13F0                            
FFFF13F0                            loc_C94A8:				; CODE XREF: DoFadeOut+6Aj
FFFF13F0 4A15                       		tst.b	(a5)
FFFF13F2 6A00 0000                  		bpl.w	loc_C94DA
FFFF13F6 502D 0009                  		addq.b	#8,9(a5)
FFFF13FA 102D 0009                  		move.b	9(a5),d0
FFFF13FE 0C00 0040                  		cmpi.b	#$40,d0	; '@'
FFFF1402 6500 0000                  		bcs.w	loc_C94D6
FFFF1406 1B7C 007F 0009             		move.b	#$7F,9(a5) ; ''
FFFF140C 6100 0000                  		bsr.w	sub_C9F24
FFFF1410 0895 0007                  		bclr	#7,(a5)
FFFF1414 1D7C 0001 002C             		move.b	#1,$2C(a6)
FFFF141A 6000 0000                  		bra.w	loc_C94DA
FFFF141E                            ; ---------------------------------------------------------------------------
FFFF141E                            
FFFF141E                            loc_C94D6:				; CODE XREF: DoFadeOut+46j
FFFF141E 6100 0000                  		bsr.w	sub_C9F24
FFFF1422                            
FFFF1422                            loc_C94DA:				; CODE XREF: DoFadeOut+36j
FFFF1422                            					; DoFadeOut+5Ej
FFFF1422 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF1426 51CF FFC8                  		dbf	d7,loc_C94A8
FFFF142A 7E02                       		moveq	#2,d7
FFFF142C                            
FFFF142C                            loc_C94E4:				; CODE XREF: DoFadeOut+98j
FFFF142C 4A15                       		tst.b	(a5)
FFFF142E 6A00 0000                  		bpl.w	loc_C9508
FFFF1432 522D 0009                  		addq.b	#1,9(a5)
FFFF1436 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
FFFF143C 6500 0000                  		bcs.w	loc_C9500
FFFF1440 0895 0007                  		bclr	#7,(a5)
FFFF1444 6000 0000                  		bra.w	loc_C9508
FFFF1448                            ; ---------------------------------------------------------------------------
FFFF1448                            
FFFF1448                            loc_C9500:				; CODE XREF: DoFadeOut+80j
FFFF1448 1C2D 0009                  		move.b	9(a5),d6
FFFF144C 6100 0000                  		bsr.w	sub_C9BC4
FFFF1450                            
FFFF1450                            loc_C9508:				; CODE XREF: DoFadeOut+72j
FFFF1450                            					; DoFadeOut+88j
FFFF1450 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF1454 51CF FFD6                  		dbf	d7,loc_C94E4
FFFF1458 4E75                       		rts
FFFF145A                            ; End of function DoFadeOut
FFFF145A                            
FFFF145A                            ; ---------------------------------------------------------------------------
FFFF145A                            ; START	OF FUNCTION CHUNK FOR Sound_ChkValue
FFFF145A                            
FFFF145A                            loc_C9512:				; CODE XREF: Sound_ChkValue+88j
FFFF145A 1D7C 0080 0003             		move.b	#$80,3(a6)
FFFF1460 7402                       		moveq	#2,d2
FFFF1462 103C 00B4                  		move.b	#$B4,d0
FFFF1466 7200                       		moveq	#0,d1
FFFF1468 6100 0000                  		bsr.w	WaitForZ80
FFFF146C                            
FFFF146C                            loc_C9524:				; CODE XREF: Sound_ChkValue+612j
FFFF146C 6100 0000                  		bsr.w	sub_C998C
FFFF1470 6100 0000                  		bsr.w	sub_C99B2
FFFF1474 5200                       		addq.b	#1,d0
FFFF1476 51CA FFF4                  		dbf	d2,loc_C9524
FFFF147A 7402                       		moveq	#2,d2
FFFF147C 7028                       		moveq	#$28,d0	; '('
FFFF147E                            
FFFF147E                            loc_C9536:				; CODE XREF: Sound_ChkValue+626j
FFFF147E 1202                       		move.b	d2,d1
FFFF1480 6100 0000                  		bsr.w	sub_C998C
FFFF1484 5801                       		addq.b	#4,d1
FFFF1486 6100 0000                  		bsr.w	sub_C998C
FFFF148A 51CA FFF2                  		dbf	d2,loc_C9536
FFFF148E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1496 6000 0000                  		bra.w	sub_C9C2C
FFFF149A                            ; ---------------------------------------------------------------------------
FFFF149A                            
FFFF149A                            loc_C9552:				; CODE XREF: Sound_ChkValue+8Cj
FFFF149A                            					; Sound_ChkValue+90j
FFFF149A 422E 0003                  		clr.b	3(a6)
FFFF149E 7634                       		moveq	#$34,d3	; '4'
FFFF14A0 4BEE 00B2                  		lea	$B2(a6),a5
FFFF14A4 7804                       		moveq	#4,d4
FFFF14A6 6100 0000                  		bsr.w	WaitForZ80
FFFF14AA                            
FFFF14AA                            loc_C9562:				; CODE XREF: Sound_ChkValue+660j
FFFF14AA 0815 0007                  		btst	#7,(a5)
FFFF14AE 6700                       		beq.s	loc_C957A
FFFF14B0 0815 0002                  		btst	#2,(a5)
FFFF14B4 6600                       		bne.s	loc_C957A
FFFF14B6 103C 00B4                  		move.b	#$B4,d0
FFFF14BA 122D 0027                  		move.b	$27(a5),d1
FFFF14BE 6100 0000                  		bsr.w	sub_C9980
FFFF14C2                            
FFFF14C2                            loc_C957A:				; CODE XREF: Sound_ChkValue+64Aj
FFFF14C2                            					; Sound_ChkValue+650j
FFFF14C2 DAC3                       		adda.w	d3,a5
FFFF14C4 51CC FFE4                  		dbf	d4,loc_C9562
FFFF14C8 103C 00B6                  		move.b	#$B6,d0
FFFF14CC 123C 00C0                  		move.b	#$C0,d1
FFFF14D0 6100 0000                  		bsr.w	sub_C99B2
FFFF14D4 4BEE 0252                  		lea	$252(a6),a5
FFFF14D8 7802                       		moveq	#2,d4
FFFF14DA                            
FFFF14DA                            loc_C9592:				; CODE XREF: Sound_ChkValue+690j
FFFF14DA 0815 0007                  		btst	#7,(a5)
FFFF14DE 6700                       		beq.s	loc_C95AA
FFFF14E0 0815 0002                  		btst	#2,(a5)
FFFF14E4 6600                       		bne.s	loc_C95AA
FFFF14E6 103C 00B4                  		move.b	#$B4,d0
FFFF14EA 122D 0027                  		move.b	$27(a5),d1
FFFF14EE 6100 0000                  		bsr.w	sub_C9980
FFFF14F2                            
FFFF14F2                            loc_C95AA:				; CODE XREF: Sound_ChkValue+67Aj
FFFF14F2                            					; Sound_ChkValue+680j
FFFF14F2 DAC3                       		adda.w	d3,a5
FFFF14F4 51CC FFE4                  		dbf	d4,loc_C9592
FFFF14F8 4BEE 038A                  		lea	$38A(a6),a5
FFFF14FC 0815 0007                  		btst	#7,(a5)
FFFF1500 6700                       		beq.s	loc_C95CC
FFFF1502 0815 0002                  		btst	#2,(a5)
FFFF1506 6600                       		bne.s	loc_C95CC
FFFF1508 103C 00B4                  		move.b	#$B4,d0
FFFF150C 122D 0027                  		move.b	$27(a5),d1
FFFF1510 6100 0000                  		bsr.w	sub_C9980
FFFF1514                            
FFFF1514                            loc_C95CC:				; CODE XREF: Sound_ChkValue+69Cj
FFFF1514                            					; Sound_ChkValue+6A2j
FFFF1514 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF151C 4E75                       		rts
FFFF151E                            ; ---------------------------------------------------------------------------
FFFF151E                            
FFFF151E                            loc_C95D6:				; CODE XREF: Sound_ChkValue+98j
FFFF151E 4BEE 0356                  		lea	$356(a6),a5
FFFF1522 4EB9 0000 0000             		jsr	sub_C9C16
FFFF1528 0215 007F                  		andi.b	#$7F,(a5) ; ''
FFFF152C 4BEE 021E                  		lea	$21E(a6),a5
FFFF1530 0215 00FB                  		andi.b	#$FB,(a5)
FFFF1534 4E75                       		rts
FFFF1536                            ; ---------------------------------------------------------------------------
FFFF1536                            
FFFF1536                            loc_C95EE:				; CODE XREF: Sound_ChkValue+9Cj
FFFF1536 4BEE 0356                  		lea	$356(a6),a5
FFFF153A 0015 0080                  		ori.b	#$80,(a5)
FFFF153E 4BEE 021E                  		lea	$21E(a6),a5
FFFF1542 0015 0004                  		ori.b	#4,(a5)
FFFF1546 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
FFFF154E 4E75                       		rts
FFFF1550                            ; END OF FUNCTION CHUNK	FOR Sound_ChkValue
FFFF1550                            
FFFF1550                            ; =============== S U B	R O U T	I N E =======================================
FFFF1550                            
FFFF1550                            
FFFF1550                            TempoWait:				; CODE XREF: sub_C8018+682p
FFFF1550                            					; sub_C8018+6BCp
FFFF1550 102E 0002                  		move.b	2(a6),d0
FFFF1554 6700                       		beq.s	loc_C962A
FFFF1556 D12E 0001                  		add.b	d0,1(a6)
FFFF155A 6400                       		bcc.s	loc_C962A
FFFF155C 41EE 004A                  		lea	$4A(a6),a0
FFFF1560 7034                       		moveq	#$34,d0	; '4'
FFFF1562 7209                       		moveq	#9,d1
FFFF1564                            
FFFF1564                            loc_C961C:				; CODE XREF: TempoWait+1Ej
FFFF1564 4A10                       		tst.b	(a0)
FFFF1566 6A00                       		bpl.s	loc_C9624
FFFF1568 5228 000E                  		addq.b	#1,$E(a0)
FFFF156C                            
FFFF156C                            loc_C9624:				; CODE XREF: TempoWait+16j
FFFF156C D0C0                       		adda.w	d0,a0
FFFF156E 51C9 FFF4                  		dbf	d1,loc_C961C
FFFF1572                            
FFFF1572                            loc_C962A:				; CODE XREF: TempoWait+4j TempoWait+Aj
FFFF1572 102E 0042                  		move.b	$42(a6),d0
FFFF1576 6700                       		beq.s	locret_C968C
FFFF1578 142E 0045                  		move.b	$45(a6),d2
FFFF157C B42E 0044                  		cmp.b	$44(a6),d2
FFFF1580 6600 0000                  		bne.w	loc_C9656
FFFF1584 1D7C 0000 0045             		move.b	#0,$45(a6)
FFFF158A 142E 0046                  		move.b	$46(a6),d2
FFFF158E B42E 0042                  		cmp.b	$42(a6),d2
FFFF1592 6700 0000                  		beq.w	loc_C965A
FFFF1596 522E 0042                  		addq.b	#1,$42(a6)
FFFF159A 6000 0000                  		bra.w	loc_C965A
FFFF159E                            ; ---------------------------------------------------------------------------
FFFF159E                            
FFFF159E                            loc_C9656:				; CODE XREF: TempoWait+30j
FFFF159E 522E 0045                  		addq.b	#1,$45(a6)
FFFF15A2                            
FFFF15A2                            loc_C965A:				; CODE XREF: TempoWait+42j
FFFF15A2                            					; TempoWait+4Aj
FFFF15A2 D12E 0043                  		add.b	d0,$43(a6)
FFFF15A6 6400                       		bcc.s	locret_C968C
FFFF15A8 41EE 004A                  		lea	$4A(a6),a0
FFFF15AC 7034                       		moveq	#$34,d0	; '4'
FFFF15AE 7209                       		moveq	#9,d1
FFFF15B0                            
FFFF15B0                            loc_C9668:				; CODE XREF: TempoWait+80j
FFFF15B0 4A10                       		tst.b	(a0)
FFFF15B2 6A00                       		bpl.s	loc_C9686
FFFF15B4 1428 002C                  		move.b	$2C(a0),d2
FFFF15B8 5202                       		addq.b	#1,d2
FFFF15BA B428 000E                  		cmp.b	$E(a0),d2
FFFF15BE 6500 0000                  		bcs.w	loc_C9682
FFFF15C2 5228 002C                  		addq.b	#1,$2C(a0)
FFFF15C6 6000 0000                  		bra.w	loc_C9686
FFFF15CA                            ; ---------------------------------------------------------------------------
FFFF15CA                            
FFFF15CA                            loc_C9682:				; CODE XREF: TempoWait+6Ej
FFFF15CA 9528 000E                  		sub.b	d2,$E(a0)
FFFF15CE                            
FFFF15CE                            loc_C9686:				; CODE XREF: TempoWait+62j
FFFF15CE                            					; TempoWait+76j
FFFF15CE D0C0                       		adda.w	d0,a0
FFFF15D0 51C9 FFDE                  		dbf	d1,loc_C9668
FFFF15D4                            
FFFF15D4                            locret_C968C:				; CODE XREF: TempoWait+26j
FFFF15D4                            					; TempoWait+56j
FFFF15D4 4E75                       		rts
FFFF15D6                            ; End of function TempoWait
FFFF15D6                            
FFFF15D6                            
FFFF15D6                            ; =============== S U B	R O U T	I N E =======================================
FFFF15D6                            
FFFF15D6                            
FFFF15D6                            sub_C968E:				; CODE XREF: cfHandler:loc_C9DB4p
FFFF15D6 6100 0000                  		bsr.w	WaitForZ80
FFFF15DA 7803                       		moveq	#3,d4
FFFF15DC 7640                       		moveq	#$40,d3	; '@'
FFFF15DE 727F                       		moveq	#$7F,d1	; ''
FFFF15E0                            
FFFF15E0                            loc_C9698:				; CODE XREF: sub_C968E+12j
FFFF15E0 1003                       		move.b	d3,d0
FFFF15E2 6100 0000                  		bsr.w	sub_C9980
FFFF15E6 5803                       		addq.b	#4,d3
FFFF15E8 51CC FFF6                  		dbf	d4,loc_C9698
FFFF15EC 7803                       		moveq	#3,d4
FFFF15EE 163C 0080                  		move.b	#$80,d3
FFFF15F2 720F                       		moveq	#$F,d1
FFFF15F4                            
FFFF15F4                            loc_C96AC:				; CODE XREF: sub_C968E+26j
FFFF15F4 1003                       		move.b	d3,d0
FFFF15F6 6100 0000                  		bsr.w	sub_C9980
FFFF15FA 5803                       		addq.b	#4,d3
FFFF15FC 51CC FFF6                  		dbf	d4,loc_C96AC
FFFF1600 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1608 4E75                       		rts
FFFF160A                            ; End of function sub_C968E
FFFF160A                            
FFFF160A                            
FFFF160A                            ; =============== S U B	R O U T	I N E =======================================
FFFF160A                            
FFFF160A                            
FFFF160A                            sub_C96C2:				; CODE XREF: Sound_ChkValue+856p
FFFF160A 7402                       		moveq	#2,d2
FFFF160C 7028                       		moveq	#$28,d0	; '('
FFFF160E 6100 0000                  		bsr.w	WaitForZ80
FFFF1612                            
FFFF1612                            loc_C96CA:				; CODE XREF: sub_C96C2+14j
FFFF1612 1202                       		move.b	d2,d1
FFFF1614 6100 0000                  		bsr.w	sub_C998C
FFFF1618 5801                       		addq.b	#4,d1
FFFF161A 6100 0000                  		bsr.w	sub_C998C
FFFF161E 51CA FFF2                  		dbf	d2,loc_C96CA
FFFF1622 7040                       		moveq	#$40,d0	; '@'
FFFF1624 727F                       		moveq	#$7F,d1	; ''
FFFF1626 7602                       		moveq	#2,d3
FFFF1628                            
FFFF1628                            loc_C96E0:				; CODE XREF: sub_C96C2+32j
FFFF1628 7403                       		moveq	#3,d2
FFFF162A                            
FFFF162A                            loc_C96E2:				; CODE XREF: sub_C96C2+2Aj
FFFF162A 6100 0000                  		bsr.w	sub_C998C
FFFF162E 6100 0000                  		bsr.w	sub_C99B2
FFFF1632 5840                       		addq.w	#4,d0
FFFF1634 51CA FFF4                  		dbf	d2,loc_C96E2
FFFF1638 0400 000F                  		subi.b	#$F,d0
FFFF163C 51CB FFEA                  		dbf	d3,loc_C96E0
FFFF1640 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1648 4E75                       		rts
FFFF164A                            ; End of function sub_C96C2
FFFF164A                            
FFFF164A                            
FFFF164A                            ; =============== S U B	R O U T	I N E =======================================
FFFF164A                            
FFFF164A                            
FFFF164A                            ClearSampleQueue:			; CODE XREF: Sound_ChkValue+10Ap
FFFF164A                            					; Sound_ChkValue+52Ap ...
FFFF164A 6100 0000                  		bsr.w	WaitForZ80
FFFF164E 13FC 0080 00A0 1FFE        		move.b	#$80,($A01FFE).l
FFFF1656 41F9 00A0 1FF4             		lea	($A01FF4).l,a0
FFFF165C 117C 0080 0001             		move.b	#$80,1(a0)
FFFF1662 10BC 0000                  		move.b	#0,0(a0)
FFFF1666 117C 0000 0006             		move.b	#0,6(a0)
FFFF166C 117C 0000 0005             		move.b	#0,5(a0)
FFFF1672 41F9 00A0 1FEA             		lea	($A01FEA).l,a0
FFFF1678 117C 0080 0001             		move.b	#$80,1(a0)
FFFF167E 10BC 0000                  		move.b	#0,0(a0)
FFFF1682 117C 0000 0006             		move.b	#0,6(a0)
FFFF1688 117C 0000 0005             		move.b	#0,5(a0)
FFFF168E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1696 4E75                       		rts
FFFF1698                            ; End of function ClearSampleQueue
FFFF1698                            
FFFF1698                            ; ---------------------------------------------------------------------------
FFFF1698                            ; START	OF FUNCTION CHUNK FOR Sound_ChkValue
FFFF1698                            
FFFF1698                            loc_C9754:				; CODE XREF: Sound_ChkValue+84j
FFFF1698                            					; DoFadeOut+20j ...
FFFF1698 702B                       		moveq	#$2B,d0	; '+'
FFFF169A 123C 0080                  		move.b	#$80,d1
FFFF169E 6100 0000                  		bsr.w	sub_C996E
FFFF16A2 7027                       		moveq	#$27,d0	; '''
FFFF16A4 7200                       		moveq	#0,d1
FFFF16A6 6100 0000                  		bsr.w	sub_C996E
FFFF16AA 204E                       		movea.l	a6,a0
FFFF16AC 303C 00F5                  		move.w	#$F5,d0	; 'õ'
FFFF16B0                            
FFFF16B0                            loc_C976C:				; CODE XREF: Sound_ChkValue+852j
FFFF16B0 4298                       		clr.l	(a0)+
FFFF16B2 51C8 FFFC                  		dbf	d0,loc_C976C
FFFF16B6 6100 FF52                  		bsr.w	sub_C96C2
FFFF16BA 6100 0000                  		bsr.w	sub_C9C2C
FFFF16BE 608A                       		bra.s	ClearSampleQueue
FFFF16C0                            ; END OF FUNCTION CHUNK	FOR Sound_ChkValue
FFFF16C0                            
FFFF16C0                            ; =============== S U B	R O U T	I N E =======================================
FFFF16C0                            
FFFF16C0                            
FFFF16C0                            sub_C977C:				; CODE XREF: Sound_ChkValue+B8p
FFFF16C0 7027                       		moveq	#$27,d0	; '''
FFFF16C2 7200                       		moveq	#0,d1
FFFF16C4 6100 0000                  		bsr.w	sub_C996E
FFFF16C8 204E                       		movea.l	a6,a0
FFFF16CA 1216                       		move.b	0(a6),d1
FFFF16CC 303C 0091                  		move.w	#$91,d0	; '‘'
FFFF16D0                            
FFFF16D0                            loc_C978E:				; CODE XREF: sub_C977C+14j
FFFF16D0 4298                       		clr.l	(a0)+
FFFF16D2 51C8 FFFC                  		dbf	d0,loc_C978E
FFFF16D6 1C81                       		move.b	d1,0(a6)
FFFF16D8 4E75                       		rts
FFFF16DA                            ; End of function sub_C977C
FFFF16DA                            
FFFF16DA                            ; ---------------------------------------------------------------------------
FFFF16DA                            ; START	OF FUNCTION CHUNK FOR Sound_ChkValue
FFFF16DA                            
FFFF16DA                            LoadDualDriver:				; CODE XREF: j_LoadSimpleDriverj
FFFF16DA                            					; Sound_ChkValue+66j
FFFF16DA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
FFFF16E2 4DF8 8000                  		lea	Drv68Kmem.w,a6
FFFF16E6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
FFFF16EE                            
FFFF16EE                            loc_C97AE:				; CODE XREF: Sound_ChkValue+89Aj
FFFF16EE 0839 0000 00A1 1100        		btst	#0,($A11100).l
FFFF16F6 66F6                       		bne.s	loc_C97AE
FFFF16F8 207A E912                  		move.l	PCMDualDriver(pc),a0
FFFF16FC 43F9 00A0 0000             		lea	($A00000).l,a1
FFFF1702 303C 02DB                  		move.w	#filesize("drivers/dual.unc")-1,d0
FFFF1706                            
FFFF1706                            loc_C97C8:				; CODE XREF: Sound_ChkValue+8AEj
FFFF1706 12D8                       		move.b	(a0)+,(a1)+
FFFF1708 51C8 FFFC                  		dbf	d0,loc_C97C8
FFFF170C 207A E902                  		movea.l	PCMSamples(pc),a0
FFFF1710 43F9 00A0 02DC             		lea	($A002DC).l,a1
FFFF1716 303C 137E                  		move.w	#filesize("data/PCMSamples.unc")-1,d0
FFFF171A                            
FFFF171A                            loc_C97DE:				; CODE XREF: Sound_ChkValue+8C4j
FFFF171A 12D8                       		move.b	(a0)+,(a1)+
FFFF171C 51C8 FFFC                  		dbf	d0,loc_C97DE
FFFF1720 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
FFFF1728 4E71                       		nop
FFFF172A 4E71                       		nop
FFFF172C 4E71                       		nop
FFFF172E 4E71                       		nop
FFFF1730 4E71                       		nop
FFFF1732 4E71                       		nop
FFFF1734 4E71                       		nop
FFFF1736 4E71                       		nop
FFFF1738 4E71                       		nop
FFFF173A 4E71                       		nop
FFFF173C 4E71                       		nop
FFFF173E 4E71                       		nop
FFFF1740 4E71                       		nop
FFFF1742 4E71                       		nop
FFFF1744 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
FFFF174C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1754 6000 FF42                  		bra.w	loc_C9754
FFFF1758                            ; END OF FUNCTION CHUNK	FOR Sound_ChkValue
FFFF1758                            ; ---------------------------------------------------------------------------
FFFF1758                            ; START	OF FUNCTION CHUNK FOR sub_C8018
FFFF1758                            
FFFF1758                            LoadSimpleDriver:				; CODE XREF: sub_C8018+4j
FFFF1758                            					; Sound_ChkValue+94j
FFFF1758 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
FFFF1760 4DF8 8000                  		lea	Drv68Kmem.w,a6
FFFF1764 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
FFFF176C                            
FFFF176C                            loc_C9830:				; CODE XREF: sub_C8018+1820j
FFFF176C 0839 0000 00A1 1100        		btst	#0,($A11100).l
FFFF1774 66F6                       		bne.s	loc_C9830
FFFF1776 207A E890                  		move.l	PCMSimpleDriver(pc),a0
FFFF177A 43F9 00A0 0000             		lea	($A00000).l,a1
FFFF1780 303C FFFE                  		move.w	#filesize("dirvers/simple.unc")-1,d0	; 'è'
FFFF1784                            
FFFF1784                            loc_C984A:				; CODE XREF: sub_C8018+1834j
FFFF1784 12D8                       		move.b	(a0)+,(a1)+
FFFF1786 51C8 FFFC                  		dbf	d0,loc_C984A
FFFF178A 4BEE 004A                  		lea	$4A(a6),a5
FFFF178E 207A E884                  		move.l	DACTable1(pc),a0
FFFF1792 303A E884                  		move.w	DACTable2(pc),d0
FFFF1796 D0C0                       		adda.w	d0,a0
FFFF1798 2018                       		move.l	(a0)+,d0
FFFF179A 2200                       		move.l	d0,d1
FFFF179C 4841                       		swap	d1
FFFF179E E399                       		rol.l	#1,d1
FFFF17A0 0001 0080                  		ori.b	#$80,d1
FFFF17A4 1B41 0016                  		move.b	d1,$16(a5)
FFFF17A8 0040 8000                  		ori.w	#$8000,d0
FFFF17AC 3200                       		move.w	d0,d1
FFFF17AE 1B41 0018                  		move.b	d1,$18(a5)
FFFF17B2 E049                       		lsr.w	#8,d1
FFFF17B4 1B41 0017                  		move.b	d1,$17(a5)
FFFF17B8 4440                       		neg.w	d0
FFFF17BA 48C0                       		ext.l	d0
FFFF17BC 2218                       		move.l	(a0)+,d1
FFFF17BE B081                       		cmp.l	d1,d0
FFFF17C0 6500 0000                  		bcs.w	loc_C988C
FFFF17C4 3001                       		move.w	d1,d0
FFFF17C6                            
FFFF17C6                            loc_C988C:				; CODE XREF: sub_C8018+186Ej
FFFF17C6 9280                       		sub.l	d0,d1
FFFF17C8 1B40 001A                  		move.b	d0,$1A(a5)
FFFF17CC E048                       		lsr.w	#8,d0
FFFF17CE 1B40 0019                  		move.b	d0,$19(a5)
FFFF17D2 1B41 001D                  		move.b	d1,$1D(a5)
FFFF17D6 E089                       		lsr.l	#8,d1
FFFF17D8 1B41 001C                  		move.b	d1,$1C(a5)
FFFF17DC E049                       		lsr.w	#8,d1
FFFF17DE 1B41 001B                  		move.b	d1,$1B(a5)
FFFF17E2 43F9 00A0 1FF4             		lea	($A01FF4).l,a1
FFFF17E8 13FC 0080 00A0 1FFE        		move.b	#$80,($A01FFE).l
FFFF17F0 137C 0080 0001             		move.b	#$80,1(a1)
FFFF17F6 136D 0016 0002             		move.b	$16(a5),2(a1)
FFFF17FC 136D 0018 0004             		move.b	$18(a5),4(a1)
FFFF1802 136D 0017 0003             		move.b	$17(a5),3(a1)
FFFF1808 136D 001A 0006             		move.b	$1A(a5),6(a1)
FFFF180E 136D 0019 0005             		move.b	$19(a5),5(a1)
FFFF1814 136D 001D 0009             		move.b	$1D(a5),9(a1)
FFFF181A 136D 001C 0008             		move.b	$1C(a5),8(a1)
FFFF1820 136D 001B 0007             		move.b	$1B(a5),7(a1)
FFFF1826 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
FFFF182E 4E71                       		nop
FFFF1830 4E71                       		nop
FFFF1832 4E71                       		nop
FFFF1834 4E71                       		nop
FFFF1836 4E71                       		nop
FFFF1838 4E71                       		nop
FFFF183A 4E71                       		nop
FFFF183C 4E71                       		nop
FFFF183E 4E71                       		nop
FFFF1840 4E71                       		nop
FFFF1842 4E71                       		nop
FFFF1844 4E71                       		nop
FFFF1846 4E71                       		nop
FFFF1848 4E71                       		nop
FFFF184A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
FFFF1852 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF185A 4E75                       		rts
FFFF185C                            ; END OF FUNCTION CHUNK	FOR sub_C8018
FFFF185C                            ; ---------------------------------------------------------------------------
FFFF185C                            ; START	OF FUNCTION CHUNK FOR sub_C8A00
FFFF185C                            
FFFF185C                            loc_C9922:				; CODE XREF: sub_C8A00+16j
FFFF185C 0815 0001                  		btst	#1,(a5)
FFFF1860 6600                       		bne.s	locret_C993C
FFFF1862 0815 0002                  		btst	#2,(a5)
FFFF1866 6600                       		bne.s	locret_C993C
FFFF1868 7028                       		moveq	#$28,d0	; '('
FFFF186A 122D 0001                  		move.b	1(a5),d1
FFFF186E 0001 00F0                  		ori.b	#$F0,d1
FFFF1872 6000 0000                  		bra.w	sub_C996E
FFFF1876                            ; ---------------------------------------------------------------------------
FFFF1876                            
FFFF1876                            locret_C993C:				; CODE XREF: sub_C8A00+F26j
FFFF1876                            					; sub_C8A00+F2Cj
FFFF1876 4E75                       		rts
FFFF1878                            ; END OF FUNCTION CHUNK	FOR sub_C8A00
FFFF1878                            
FFFF1878                            ; =============== S U B	R O U T	I N E =======================================
FFFF1878                            
FFFF1878                            
FFFF1878                            sub_C993E:				; CODE XREF: sub_C8A2A:loc_C8A42p
FFFF1878                            					; sub_C8B82+24p ...
FFFF1878                            
FFFF1878                            ; FUNCTION CHUNK AT 000C9954 SIZE 00000002 BYTES
FFFF1878                            
FFFF1878 0815 0004                  		btst	#4,(a5)
FFFF187C 6600                       		bne.s	locret_C9954
FFFF187E 0815 0002                  		btst	#2,(a5)
FFFF1882 6600                       		bne.s	locret_C9954
FFFF1884                            ; End of function sub_C993E
FFFF1884                            
FFFF1884                            
FFFF1884                            ; =============== S U B	R O U T	I N E =======================================
FFFF1884                            
FFFF1884                            
FFFF1884                            sub_C994A:				; CODE XREF: sub_C93A8+12p
FFFF1884 7028                       		moveq	#$28,d0	; '('
FFFF1886 122D 0001                  		move.b	1(a5),d1
FFFF188A 6000 0000                  		bra.w	sub_C996E
FFFF188E                            ; End of function sub_C994A
FFFF188E                            
FFFF188E                            ; ---------------------------------------------------------------------------
FFFF188E                            ; START	OF FUNCTION CHUNK FOR sub_C993E
FFFF188E                            
FFFF188E                            locret_C9954:				; CODE XREF: sub_C993E+4j sub_C993E+Aj
FFFF188E 4E75                       		rts
FFFF1890                            ; END OF FUNCTION CHUNK	FOR sub_C993E
FFFF1890                            
FFFF1890                            ; =============== S U B	R O U T	I N E =======================================
FFFF1890                            
FFFF1890                            
FFFF1890                            sub_C9956:				; CODE XREF: ROM:000C8E22p
FFFF1890                            					; cfHandler+D2j ...
FFFF1890 0815 0002                  		btst	#2,(a5)
FFFF1894 6600                       		bne.s	locret_C996C
FFFF1896 6100 0000                  		bsr.w	WaitForZ80
FFFF189A 6100 0000                  		bsr.w	sub_C9980
FFFF189E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF18A6                            
FFFF18A6                            locret_C996C:				; CODE XREF: sub_C9956+4j
FFFF18A6 4E75                       		rts
FFFF18A8                            ; End of function sub_C9956
FFFF18A8                            
FFFF18A8                            
FFFF18A8                            ; =============== S U B	R O U T	I N E =======================================
FFFF18A8                            
FFFF18A8                            
FFFF18A8                            sub_C996E:				; CODE XREF: Sound_ChkValue+16Ep
FFFF18A8                            					; Sound_ChkValue+178p ...
FFFF18A8 6100 0000                  		bsr.w	WaitForZ80
FFFF18AC 6100 0000                  		bsr.w	sub_C998C
FFFF18B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF18B8 4E75                       		rts
FFFF18BA                            ; End of function sub_C996E
FFFF18BA                            
FFFF18BA                            
FFFF18BA                            ; =============== S U B	R O U T	I N E =======================================
FFFF18BA                            
FFFF18BA                            
FFFF18BA                            sub_C9980:				; CODE XREF: sub_C8C50+44p
FFFF18BA                            					; sub_C8C50+4Ep ...
FFFF18BA                            
FFFF18BA                            ; FUNCTION CHUNK AT 000C99A8 SIZE 0000000A BYTES
FFFF18BA                            
FFFF18BA 082D 0002 0001             		btst	#2,1(a5)
FFFF18C0 6600                       		bne.s	loc_C99A8
FFFF18C2 D02D 0001                  		add.b	1(a5),d0
FFFF18C6                            ; End of function sub_C9980
FFFF18C6                            
FFFF18C6                            
FFFF18C6                            ; =============== S U B	R O U T	I N E =======================================
FFFF18C6                            
FFFF18C6                            
FFFF18C6                            sub_C998C:				; CODE XREF: sub_C8C50+122p
FFFF18C6                            					; sub_C8C50+12Ap ...
FFFF18C6 41F9 00A0 4000             		lea	($A04000).l,a0
FFFF18CC                            
FFFF18CC                            loc_C9992:				; CODE XREF: sub_C998C+Aj
FFFF18CC 0810 0007                  		btst	#7,(a0)
FFFF18D0 66FA                       		bne.s	loc_C9992
FFFF18D2 1080                       		move.b	d0,(a0)
FFFF18D4 4E71                       		nop
FFFF18D6                            
FFFF18D6                            loc_C999C:				; CODE XREF: sub_C998C+14j
FFFF18D6 0810 0007                  		btst	#7,(a0)
FFFF18DA 66FA                       		bne.s	loc_C999C
FFFF18DC 1141 0001                  		move.b	d1,1(a0)
FFFF18E0 4E75                       		rts
FFFF18E2                            ; End of function sub_C998C
FFFF18E2                            
FFFF18E2                            ; ---------------------------------------------------------------------------
FFFF18E2                            ; START	OF FUNCTION CHUNK FOR sub_C9980
FFFF18E2                            
FFFF18E2                            loc_C99A8:				; CODE XREF: sub_C9980+6j
FFFF18E2 142D 0001                  		move.b	1(a5),d2
FFFF18E6 0882 0002                  		bclr	#2,d2
FFFF18EA D002                       		add.b	d2,d0
FFFF18EC                            ; END OF FUNCTION CHUNK	FOR sub_C9980
FFFF18EC                            
FFFF18EC                            ; =============== S U B	R O U T	I N E =======================================
FFFF18EC                            
FFFF18EC                            
FFFF18EC                            sub_C99B2:				; CODE XREF: OverrideFM4Freq+2Cp
FFFF18EC                            					; OverrideFM4Freq+3Ap ...
FFFF18EC 41F9 00A0 4000             		lea	($A04000).l,a0
FFFF18F2                            
FFFF18F2                            loc_C99B8:				; CODE XREF: sub_C99B2+Aj
FFFF18F2 0810 0007                  		btst	#7,(a0)
FFFF18F6 66FA                       		bne.s	loc_C99B8
FFFF18F8 1140 0002                  		move.b	d0,2(a0)
FFFF18FC 4E71                       		nop
FFFF18FE                            
FFFF18FE                            loc_C99C4:				; CODE XREF: sub_C99B2+16j
FFFF18FE 0810 0007                  		btst	#7,(a0)
FFFF1902 66FA                       		bne.s	loc_C99C4
FFFF1904 1141 0003                  		move.b	d1,3(a0)
FFFF1908 4E75                       		rts
FFFF190A                            ; End of function sub_C99B2
FFFF190A                            
FFFF190A                            
FFFF190A                            ; =============== S U B	R O U T	I N E =======================================
FFFF190A                            
FFFF190A                            
FFFF190A                            WaitForZ80:				; CODE XREF: Sound_ChkValue-75Ap
FFFF190A                            					; sub_C88AE:@gotsampleentryp ...
FFFF190A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
FFFF1912                            
FFFF1912                            loc_C99D8:				; CODE XREF: WaitForZ80+10j
FFFF1912 0839 0000 00A1 1100        		btst	#0,($A11100).l
FFFF191A 66F6                       		bne.s	loc_C99D8
FFFF191C 4A39 00A0 1FFF             		tst.b	($A01FFF).l
FFFF1922 6700                       		beq.s	locret_C99FE
FFFF1924 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF192C 4E71                       		nop
FFFF192E 4E71                       		nop
FFFF1930 4E71                       		nop
FFFF1932 4E71                       		nop
FFFF1934 4E71                       		nop
FFFF1936 60D2                       		bra.s	WaitForZ80
FFFF1938                            ; ---------------------------------------------------------------------------
FFFF1938                            
FFFF1938                            locret_C99FE:				; CODE XREF: WaitForZ80+18j
FFFF1938 4E75                       		rts
FFFF193A                            ; End of function WaitForZ80
FFFF193A                            
FFFF193A                            
FFFF193A                            ; =============== S U B	R O U T	I N E =======================================
FFFF193A                            
FFFF193A                            
FFFF193A                            DoFade:					; CODE XREF: sub_C8018+67Ep
FFFF193A                            					; sub_C8018+6B8p
FFFF193A 4A2E 0028                  		tst.b	$28(a6)
FFFF193E 6700 0000                  		beq.w	locret_C9A82
FFFF1942 0C2E 0002 0028             		cmpi.b	#2,$28(a6)
FFFF1948 6700 0000                  		beq.w	locret_C9A82
FFFF194C 1C2E 0029                  		move.b	$29(a6),d6
FFFF1950 4BEE 00B2                  		lea	$B2(a6),a5
FFFF1954 7E04                       		moveq	#4,d7
FFFF1956                            
FFFF1956                            loc_C9A1C:				; CODE XREF: DoFade+3Aj
FFFF1956 4A15                       		tst.b	(a5)
FFFF1958 6A00                       		bpl.s	loc_C9A36
FFFF195A 4A2E 0028                  		tst.b	$28(a6)
FFFF195E 6A00                       		bpl.s	loc_C9A2C
FFFF1960 9D2D 0009                  		sub.b	d6,9(a5)
FFFF1964 6000                       		bra.s	loc_C9A32
FFFF1966                            ; ---------------------------------------------------------------------------
FFFF1966                            
FFFF1966                            loc_C9A2C:				; CODE XREF: DoFade+24j
FFFF1966 DD2D 0009                  		add.b	d6,9(a5)
FFFF196A 6B00                       		bmi.s	loc_C9A36
FFFF196C                            
FFFF196C                            loc_C9A32:				; CODE XREF: DoFade+2Aj
FFFF196C 6100 0000                  		bsr.w	sub_C9F24
FFFF1970                            
FFFF1970                            loc_C9A36:				; CODE XREF: DoFade+1Ej DoFade+30j
FFFF1970 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF1974 51CF FFE0                  		dbf	d7,loc_C9A1C
FFFF1978 1A2E 002A                  		move.b	$2A(a6),d5
FFFF197C 7E02                       		moveq	#2,d7
FFFF197E                            
FFFF197E                            loc_C9A44:				; CODE XREF: DoFade+6Cj
FFFF197E 4A15                       		tst.b	(a5)
FFFF1980 6A00                       		bpl.s	loc_C9A68
FFFF1982 4A2E 0028                  		tst.b	$28(a6)
FFFF1986 6A00                       		bpl.s	loc_C9A54
FFFF1988 9B2D 0009                  		sub.b	d5,9(a5)
FFFF198C 6000                       		bra.s	loc_C9A60
FFFF198E                            ; ---------------------------------------------------------------------------
FFFF198E                            
FFFF198E                            loc_C9A54:				; CODE XREF: DoFade+4Cj
FFFF198E DB2D 0009                  		add.b	d5,9(a5)
FFFF1992 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
FFFF1998 6400                       		bcc.s	loc_C9A68
FFFF199A                            
FFFF199A                            loc_C9A60:				; CODE XREF: DoFade+52j
FFFF199A 1C2D 0009                  		move.b	9(a5),d6
FFFF199E 6100 0000                  		bsr.w	sub_C9BC4
FFFF19A2                            
FFFF19A2                            loc_C9A68:				; CODE XREF: DoFade+46j DoFade+5Ej
FFFF19A2 DAFC 0034                  		adda.w	#$34,a5	; '4'
FFFF19A6 51CF FFD6                  		dbf	d7,loc_C9A44
FFFF19AA 4A2E 0028                  		tst.b	$28(a6)
FFFF19AE 6B00                       		bmi.s	loc_C9A7E
FFFF19B0 1D7C 0002 0028             		move.b	#2,$28(a6)
FFFF19B6 4E75                       		rts
FFFF19B8                            ; ---------------------------------------------------------------------------
FFFF19B8                            
FFFF19B8                            loc_C9A7E:				; CODE XREF: DoFade+74j
FFFF19B8 422E 0028                  		clr.b	$28(a6)
FFFF19BC                            
FFFF19BC                            locret_C9A82:				; CODE XREF: DoFade+4j	DoFade+Ej
FFFF19BC 4E75                       		rts
FFFF19BE                            ; End of function DoFade
FFFF19BE                            
FFFF19BE                            ; ---------------------------------------------------------------------------
FFFF19BE 025E 0284 02AB 02D3 02FE+  word_C9A84:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
FFFF19D0                            					; DATA XREF: sub_C8A60+1Eo
FFFF19D0 03FF 043C 047C             		dc.w $3FF, $43C, $47C
FFFF19D6                            
FFFF19D6                            ; =============== S U B	R O U T	I N E =======================================
FFFF19D6                            
FFFF19D6                            
FFFF19D6                            sub_C9A9C:				; CODE XREF: UpdateEverything+3Cp
FFFF19D6                            					; UpdateEverything+66p	...
FFFF19D6 532D 000E                  		subq.b	#1,$E(a5)
FFFF19DA 6600                       		bne.s	loc_C9AB2
FFFF19DC 0895 0004                  		bclr	#4,(a5)
FFFF19E0 6100 0000                  		bsr.w	sub_C9AC2
FFFF19E4 6100 0000                  		bsr.w	sub_C9B26
FFFF19E8 6000 0000                  		bra.w	loc_C9B7A
FFFF19EC                            ; ---------------------------------------------------------------------------
FFFF19EC                            
FFFF19EC                            loc_C9AB2:				; CODE XREF: sub_C9A9C+4j
FFFF19EC 6100 F0D4                  		bsr.w	sub_C8B82
FFFF19F0 6100 0000                  		bsr.w	sub_C9B72
FFFF19F4 6100 F100                  		bsr.w	sub_C8BB6
FFFF19F8 6000 0000                  		bra.w	loc_C9B32
FFFF19FC                            ; End of function sub_C9A9C
FFFF19FC                            
FFFF19FC                            
FFFF19FC                            ; =============== S U B	R O U T	I N E =======================================
FFFF19FC                            
FFFF19FC                            
FFFF19FC                            sub_C9AC2:				; CODE XREF: sub_C9A9C+Ap
FFFF19FC 0895 0001                  		bclr	#1,(a5)
FFFF1A00 286D 0004                  		movea.l	4(a5),a4
FFFF1A04                            
FFFF1A04                            loc_C9ACA:				; CODE XREF: sub_C9AC2+16j
FFFF1A04 7A00                       		moveq	#0,d5
FFFF1A06 1A1C                       		move.b	(a4)+,d5
FFFF1A08 0C05 00E0                  		cmpi.b	#$E0,d5
FFFF1A0C 6500                       		bcs.s	loc_C9ADA
FFFF1A0E 6100 0000                  		bsr.w	cfHandler
FFFF1A12 60F0                       		bra.s	loc_C9ACA
FFFF1A14                            ; ---------------------------------------------------------------------------
FFFF1A14                            
FFFF1A14                            loc_C9ADA:				; CODE XREF: sub_C9AC2+10j
FFFF1A14 4A05                       		tst.b	d5
FFFF1A16 6A00                       		bpl.s	loc_C9AEE
FFFF1A18 6100 0000                  		bsr.w	sub_C9AF6
FFFF1A1C 1A1C                       		move.b	(a4)+,d5
FFFF1A1E 4A05                       		tst.b	d5
FFFF1A20 6A00                       		bpl.s	loc_C9AEE
FFFF1A22 534C                       		subq.w	#1,a4
FFFF1A24 6000 EFD4                  		bra.w	sub_C8AB8
FFFF1A28                            ; ---------------------------------------------------------------------------
FFFF1A28                            
FFFF1A28                            loc_C9AEE:				; CODE XREF: sub_C9AC2+1Aj
FFFF1A28                            					; sub_C9AC2+24j
FFFF1A28 6100 EFB0                  		bsr.w	sub_C8A98
FFFF1A2C 6000 EFCC                  		bra.w	sub_C8AB8
FFFF1A30                            ; End of function sub_C9AC2
FFFF1A30                            
FFFF1A30                            
FFFF1A30                            ; =============== S U B	R O U T	I N E =======================================
FFFF1A30                            
FFFF1A30                            
FFFF1A30                            sub_C9AF6:				; CODE XREF: sub_C9AC2+1Cp
FFFF1A30 0405 0081                  		subi.b	#$81,d5
FFFF1A34 6500                       		bcs.s	loc_C9B14
FFFF1A36 DA2D 0008                  		add.b	8(a5),d5
FFFF1A3A 0245 007F                  		andi.w	#$7F,d5	; ''
FFFF1A3E E34D                       		lsl.w	#1,d5
FFFF1A40 41F9 0000 0000             		lea	word_C9C44,a0
FFFF1A46 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
FFFF1A4C 6000 EFAC                  		bra.w	sub_C8AB8
FFFF1A50                            ; ---------------------------------------------------------------------------
FFFF1A50                            
FFFF1A50                            loc_C9B14:				; CODE XREF: sub_C9AF6+4j
FFFF1A50 08D5 0001                  		bset	#1,(a5)
FFFF1A54 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)
FFFF1A5A 6100 EF9E                  		bsr.w	sub_C8AB8
FFFF1A5E 6000 0000                  		bra.w	sub_C9C16
FFFF1A62                            ; End of function sub_C9AF6
FFFF1A62                            
FFFF1A62                            
FFFF1A62                            ; =============== S U B	R O U T	I N E =======================================
FFFF1A62                            
FFFF1A62                            
FFFF1A62                            sub_C9B26:				; CODE XREF: sub_C9A9C+Ep
FFFF1A62 3C2D 0010                  		move.w	$10(a5),d6
FFFF1A66 6A00                       		bpl.s	loc_C9B38
FFFF1A68 08D5 0001                  		bset	#1,(a5)
FFFF1A6C 4E75                       		rts
FFFF1A6E                            ; ---------------------------------------------------------------------------
FFFF1A6E                            
FFFF1A6E                            loc_C9B32:				; CODE XREF: sub_C9A9C+22j
FFFF1A6E 4A2D 000A                  		tst.b	$A(a5)
FFFF1A72 6700                       		beq.s	locret_C9B70
FFFF1A74                            
FFFF1A74                            loc_C9B38:				; CODE XREF: sub_C9B26+4j
FFFF1A74 0815 0001                  		btst	#1,(a5)
FFFF1A78 6600                       		bne.s	locret_C9B70
FFFF1A7A 0815 0002                  		btst	#2,(a5)
FFFF1A7E 6600                       		bne.s	locret_C9B70
FFFF1A80 6100 F16A                  		bsr.w	sub_C8CAC
FFFF1A84 102D 0001                  		move.b	1(a5),d0
FFFF1A88 0C00 00E0                  		cmpi.b	#$E0,d0
FFFF1A8C 6600                       		bne.s	loc_C9B56
FFFF1A8E 103C 00C0                  		move.b	#$C0,d0
FFFF1A92                            
FFFF1A92                            loc_C9B56:				; CODE XREF: sub_C9B26+2Aj
FFFF1A92 3206                       		move.w	d6,d1
FFFF1A94 0201 000F                  		andi.b	#$F,d1
FFFF1A98 8001                       		or.b	d1,d0
FFFF1A9A E84E                       		lsr.w	#4,d6
FFFF1A9C 0206 003F                  		andi.b	#$3F,d6	; '?'
FFFF1AA0 13C0 00C0 0011             		move.b	d0,($C00011).l
FFFF1AA6 13C6 00C0 0011             		move.b	d6,($C00011).l
FFFF1AAC                            
FFFF1AAC                            locret_C9B70:				; CODE XREF: sub_C9B26+10j
FFFF1AAC                            					; sub_C9B26+16j ...
FFFF1AAC 4E75                       		rts
FFFF1AAE                            ; End of function sub_C9B26
FFFF1AAE                            
FFFF1AAE                            
FFFF1AAE                            ; =============== S U B	R O U T	I N E =======================================
FFFF1AAE                            
FFFF1AAE                            
FFFF1AAE                            sub_C9B72:				; CODE XREF: sub_C9A9C+1Ap
FFFF1AAE                            
FFFF1AAE                            ; FUNCTION CHUNK AT 000C9BF4 SIZE 00000022 BYTES
FFFF1AAE                            
FFFF1AAE 4A2D 000B                  		tst.b	$B(a5)
FFFF1AB2 6700 0000                  		beq.w	locret_C9BE4
FFFF1AB6                            
FFFF1AB6                            loc_C9B7A:				; CODE XREF: sub_C9A9C+12j
FFFF1AB6 1C2D 0009                  		move.b	9(a5),d6
FFFF1ABA 7000                       		moveq	#0,d0
FFFF1ABC 102D 000B                  		move.b	$B(a5),d0
FFFF1AC0 6700                       		beq.s	sub_C9BC4
FFFF1AC2 41FA E624                  		lea	FlutterIndex,a0
FFFF1AC6 5340                       		subq.w	#1,d0
FFFF1AC8 E548                       		lsl.w	#2,d0
FFFF1ACA 2070 0000                  		movea.l	(a0,d0.w),a0
FFFF1ACE                            
FFFF1ACE                            loc_C9B92:				; CODE XREF: sub_C9B72+9Aj
FFFF1ACE                            					; sub_C9B72+A0j
FFFF1ACE 7000                       		moveq	#0,d0
FFFF1AD0 102D 000C                  		move.b	$C(a5),d0
FFFF1AD4 522D 000C                  		addq.b	#1,$C(a5)
FFFF1AD8 1030 0000                  		move.b	(a0,d0.w),d0
FFFF1ADC 6A00                       		bpl.s	loc_C9BBA
FFFF1ADE 0C00 0083                  		cmpi.b	#$83,d0
FFFF1AE2 6700                       		beq.s	loc_C9BF4
FFFF1AE4 0C00 0081                  		cmpi.b	#$81,d0
FFFF1AE8 6700                       		beq.s	loc_C9C00
FFFF1AEA 0C00 0082                  		cmpi.b	#$82,d0
FFFF1AEE 6700                       		beq.s	loc_C9C06
FFFF1AF0 0C00 0080                  		cmpi.b	#$80,d0
FFFF1AF4 6700                       		beq.s	loc_C9C0E
FFFF1AF6                            
FFFF1AF6                            loc_C9BBA:				; CODE XREF: sub_C9B72+2Ej
FFFF1AF6 DC40                       		add.w	d0,d6
FFFF1AF8 0C06 0010                  		cmpi.b	#$10,d6
FFFF1AFC 6500                       		bcs.s	sub_C9BC4
FFFF1AFE 7C0F                       		moveq	#$F,d6
FFFF1B00                            ; End of function sub_C9B72
FFFF1B00                            
FFFF1B00                            
FFFF1B00                            ; =============== S U B	R O U T	I N E =======================================
FFFF1B00                            
FFFF1B00                            
FFFF1B00                            sub_C9BC4:				; CODE XREF: DoFadeOut+90p DoFade+64p	...
FFFF1B00 0815 0001                  		btst	#1,(a5)
FFFF1B04 6600                       		bne.s	locret_C9BE4
FFFF1B06 0815 0002                  		btst	#2,(a5)
FFFF1B0A 6600                       		bne.s	locret_C9BE4
FFFF1B0C 0815 0004                  		btst	#4,(a5)
FFFF1B10 6600                       		bne.s	loc_C9BE6
FFFF1B12                            
FFFF1B12                            loc_C9BD6:				; CODE XREF: sub_C9BC4+26j
FFFF1B12                            					; sub_C9BC4+2Cj
FFFF1B12 8C2D 0001                  		or.b	1(a5),d6
FFFF1B16 0606 0010                  		addi.b	#$10,d6
FFFF1B1A 13C6 00C0 0011             		move.b	d6,($C00011).l
FFFF1B20                            
FFFF1B20                            locret_C9BE4:				; CODE XREF: sub_C9B72+4j sub_C9BC4+4j ...
FFFF1B20 4E75                       		rts
FFFF1B22                            ; ---------------------------------------------------------------------------
FFFF1B22                            
FFFF1B22                            loc_C9BE6:				; CODE XREF: sub_C9BC4+10j
FFFF1B22 4A2D 0013                  		tst.b	$13(a5)
FFFF1B26 67EA                       		beq.s	loc_C9BD6
FFFF1B28 4A2D 0012                  		tst.b	$12(a5)
FFFF1B2C 66E4                       		bne.s	loc_C9BD6
FFFF1B2E 4E75                       		rts
FFFF1B30                            ; End of function sub_C9BC4
FFFF1B30                            
FFFF1B30                            ; ---------------------------------------------------------------------------
FFFF1B30                            ; START	OF FUNCTION CHUNK FOR sub_C9B72
FFFF1B30                            
FFFF1B30                            loc_C9BF4:				; CODE XREF: sub_C9B72+34j
FFFF1B30 552D 000C                  		subq.b	#2,$C(a5)
FFFF1B34 08D5 0001                  		bset	#1,(a5)
FFFF1B38 6000 0000                  		bra.w	sub_C9C16
FFFF1B3C                            ; ---------------------------------------------------------------------------
FFFF1B3C                            
FFFF1B3C                            loc_C9C00:				; CODE XREF: sub_C9B72+3Aj
FFFF1B3C 552D 000C                  		subq.b	#2,$C(a5)
FFFF1B40 4E75                       		rts
FFFF1B42                            ; ---------------------------------------------------------------------------
FFFF1B42                            
FFFF1B42                            loc_C9C06:				; CODE XREF: sub_C9B72+40j
FFFF1B42 1B70 0001 000C             		move.b	1(a0,d0.w),$C(a5)
FFFF1B48 6084                       		bra.s	loc_C9B92
FFFF1B4A                            ; ---------------------------------------------------------------------------
FFFF1B4A                            
FFFF1B4A                            loc_C9C0E:				; CODE XREF: sub_C9B72+46j
FFFF1B4A 422D 000C                  		clr.b	$C(a5)
FFFF1B4E 6000 FF7E                  		bra.w	loc_C9B92
FFFF1B52                            ; END OF FUNCTION CHUNK	FOR sub_C9B72
FFFF1B52                            
FFFF1B52                            ; =============== S U B	R O U T	I N E =======================================
FFFF1B52                            
FFFF1B52                            
FFFF1B52                            sub_C9C16:				; CODE XREF: sub_C8B82:loc_C8BAEp
FFFF1B52                            					; sub_C8CAC:loc_C8D32j	...
FFFF1B52 0815 0002                  		btst	#2,(a5)
FFFF1B56 6600                       		bne.s	locret_C9C2A
FFFF1B58                            ; End of function sub_C9C16
FFFF1B58                            
FFFF1B58                            
FFFF1B58                            ; =============== S U B	R O U T	I N E =======================================
FFFF1B58                            
FFFF1B58                            
FFFF1B58                            sub_C9C1C:				; CODE XREF: sub_C93A8+44p
FFFF1B58 102D 0001                  		move.b	1(a5),d0
FFFF1B5C 0000 001F                  		ori.b	#$1F,d0
FFFF1B60 13C0 00C0 0011             		move.b	d0,($C00011).l
FFFF1B66                            
FFFF1B66                            locret_C9C2A:				; CODE XREF: sub_C9C16+4j
FFFF1B66 4E75                       		rts
FFFF1B68                            ; End of function sub_C9C1C
FFFF1B68                            
FFFF1B68                            
FFFF1B68                            ; =============== S U B	R O U T	I N E =======================================
FFFF1B68                            
FFFF1B68                            
FFFF1B68                            sub_C9C2C:				; CODE XREF: Sound_ChkValue+632j
FFFF1B68                            					; Sound_ChkValue+85Ap
FFFF1B68 41F9 00C0 0011             		lea	($C00011).l,a0
FFFF1B6E 10BC 009F                  		move.b	#$9F,(a0)
FFFF1B72 10BC 00BF                  		move.b	#$BF,(a0)
FFFF1B76 10BC 00DF                  		move.b	#$DF,(a0)
FFFF1B7A 10BC 00FF                  		move.b	#$FF,(a0)
FFFF1B7E 4E75                       		rts
FFFF1B80                            ; End of function sub_C9C2C
FFFF1B80                            
FFFF1B80                            ; ---------------------------------------------------------------------------
FFFF1B80 0356 0326 02F9 02CE 02A5+  word_C9C44:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
FFFF1B92                            					; DATA XREF: sub_C9AF6+10o
FFFF1B92 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
FFFF1BA4 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
FFFF1BB8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
FFFF1BCC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
FFFF1BE0 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
FFFF1BF4 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
FFFF1C08 0011 0000                  		dc.w $11, 0
FFFF1C0C                            
FFFF1C0C                            ; =============== S U B	R O U T	I N E =======================================
FFFF1C0C                            
FFFF1C0C                            
FFFF1C0C                            cfHandler:				; CODE XREF: sub_C88AE+16p
FFFF1C0C                            					; sub_C8A2A+12p ...
FFFF1C0C                            
FFFF1C0C                            ; FUNCTION CHUNK AT 000C9E66 SIZE 0000004C BYTES
FFFF1C0C                            ; FUNCTION CHUNK AT 000CA0AA SIZE 0000001A BYTES
FFFF1C0C                            ; FUNCTION CHUNK AT 000CA0CA SIZE 000000B4 BYTES
FFFF1C0C                            ; FUNCTION CHUNK AT 000CA186 SIZE 0000001C BYTES
FFFF1C0C                            ; FUNCTION CHUNK AT 000CA262 SIZE 00000094 BYTES
FFFF1C0C                            
FFFF1C0C 0445 00E0                  		subi.w	#$E0,d5	; 'à'
FFFF1C10 E54D                       		lsl.w	#2,d5
FFFF1C12 4EFB 5000                  		jmp	loc_C9CDA(pc,d5.w)
FFFF1C16                            
FFFF1C16                            loc_C9CDA:
FFFF1C16 6000 0000                  		bra.w	loc_C9D88
FFFF1C1A                            ; ---------------------------------------------------------------------------
FFFF1C1A 6000 0000                  		bra.w	loc_C9DA8
FFFF1C1E                            ; ---------------------------------------------------------------------------
FFFF1C1E 6000 0000                  		bra.w	loc_C9DAE
FFFF1C22                            ; ---------------------------------------------------------------------------
FFFF1C22 6000 0000                  		bra.w	loc_C9DB4
FFFF1C26                            ; ---------------------------------------------------------------------------
FFFF1C26 6000 0000                  		bra.w	loc_C9DBC
FFFF1C2A                            ; ---------------------------------------------------------------------------
FFFF1C2A 6000 0000                  		bra.w	loc_C9DE4
FFFF1C2E                            ; ---------------------------------------------------------------------------
FFFF1C2E 6000 0000                  		bra.w	loc_C9DF4
FFFF1C32                            ; ---------------------------------------------------------------------------
FFFF1C32 6000 0000                  		bra.w	loc_C9DFE
FFFF1C36                            ; ---------------------------------------------------------------------------
FFFF1C36 6000 0000                  		bra.w	loc_C9E04
FFFF1C3A                            ; ---------------------------------------------------------------------------
FFFF1C3A 6000 0000                  		bra.w	loc_C9E14
FFFF1C3E                            ; ---------------------------------------------------------------------------
FFFF1C3E 6000 0000                  		bra.w	loc_C9E66
FFFF1C42                            ; ---------------------------------------------------------------------------
FFFF1C42 6000 0000                  		bra.w	loc_C9E70
FFFF1C46                            ; ---------------------------------------------------------------------------
FFFF1C46 6000 0000                  		bra.w	loc_C9E76
FFFF1C4A                            ; ---------------------------------------------------------------------------
FFFF1C4A 6000 0000                  		bra.w	loc_C9E7E
FFFF1C4E                            ; ---------------------------------------------------------------------------
FFFF1C4E 6000 0000                  		bra.w	loc_C9E86
FFFF1C52                            ; ---------------------------------------------------------------------------
FFFF1C52 6000 0000                  		bra.w	loc_C9E8E
FFFF1C56                            ; ---------------------------------------------------------------------------
FFFF1C56 6000 0000                  		bra.w	loc_C9FAC
FFFF1C5A                            ; ---------------------------------------------------------------------------
FFFF1C5A 6000 0000                  		bra.w	loc_C9FD0
FFFF1C5E                            ; ---------------------------------------------------------------------------
FFFF1C5E 6000 0000                  		bra.w	loc_C9FE2
FFFF1C62                            ; ---------------------------------------------------------------------------
FFFF1C62 6000 0000                  		bra.w	loc_CA0AA
FFFF1C66                            ; ---------------------------------------------------------------------------
FFFF1C66 6000 0000                  		bra.w	loc_CA0C4
FFFF1C6A                            ; ---------------------------------------------------------------------------
FFFF1C6A 6000 0000                  		bra.w	loc_CA0CA
FFFF1C6E                            ; ---------------------------------------------------------------------------
FFFF1C6E 6000 0000                  		bra.w	loc_CA0D0
FFFF1C72                            ; ---------------------------------------------------------------------------
FFFF1C72 6000 0000                  		bra.w	loc_CA0DA
FFFF1C76                            ; ---------------------------------------------------------------------------
FFFF1C76 6000 0000                  		bra.w	loc_CA10C
FFFF1C7A                            ; ---------------------------------------------------------------------------
FFFF1C7A 6000 0000                  		bra.w	loc_CA11E
FFFF1C7E                            ; ---------------------------------------------------------------------------
FFFF1C7E 6000 0000                  		bra.w	loc_CA132
FFFF1C82                            ; ---------------------------------------------------------------------------
FFFF1C82 6000 0000                  		bra.w	loc_CA138
FFFF1C86                            ; ---------------------------------------------------------------------------
FFFF1C86 6000 0000                  		bra.w	loc_CA140
FFFF1C8A                            ; ---------------------------------------------------------------------------
FFFF1C8A 6000 0000                  		bra.w	loc_CA148
FFFF1C8E                            ; ---------------------------------------------------------------------------
FFFF1C8E 6000 0000                  		bra.w	loc_CA150
FFFF1C92                            ; ---------------------------------------------------------------------------
FFFF1C92 7000                       		moveq	#0,d0
FFFF1C94 101C                       		move.b	(a4)+,d0
FFFF1C96 E548                       		lsl.w	#2,d0
FFFF1C98 4EFB 0000                  		jmp	metacf(pc,d0.w)
FFFF1C9C                            
FFFF1C9C                            metacf:
FFFF1C9C 6000 0000                  		bra.w	loc_CA186
FFFF1CA0                            ; ---------------------------------------------------------------------------
FFFF1CA0 6000 0000                  		bra.w	loc_CA1AA
FFFF1CA4                            ; ---------------------------------------------------------------------------
FFFF1CA4 6000 0000                  		bra.w	loc_CA262
FFFF1CA8                            ; ---------------------------------------------------------------------------
FFFF1CA8 6000 0000                  		bra.w	loc_CA278
FFFF1CAC                            ; ---------------------------------------------------------------------------
FFFF1CAC 6000 0000                  		bra.w	loc_CA292
FFFF1CB0                            ; ---------------------------------------------------------------------------
FFFF1CB0 6000 0000                  		bra.w	loc_CA29A
FFFF1CB4                            ; ---------------------------------------------------------------------------
FFFF1CB4 6000 0000                  		bra.w	loc_CA2A0
FFFF1CB8                            ; ---------------------------------------------------------------------------
FFFF1CB8 6000 0000                  		bra.w	loc_CA2B2
FFFF1CBC                            ; ---------------------------------------------------------------------------
FFFF1CBC 6000 0000                  		bra.w	loc_CA2C2
FFFF1CC0                            ; ---------------------------------------------------------------------------
FFFF1CC0 6000 0000                  		bra.w	loc_CA2DA
FFFF1CC4                            ; ---------------------------------------------------------------------------
FFFF1CC4                            
FFFF1CC4                            loc_C9D88:				; CODE XREF: cfHandler:loc_C9CDAj
FFFF1CC4 121C                       		move.b	(a4)+,d1
FFFF1CC6 4A2D 0001                  		tst.b	1(a5)
FFFF1CCA 6B00                       		bmi.s	locret_C9DA6
FFFF1CCC 102D 0027                  		move.b	$27(a5),d0
FFFF1CD0 0200 0037                  		andi.b	#$37,d0	; '7'
FFFF1CD4 8200                       		or.b	d0,d1
FFFF1CD6 1B41 0027                  		move.b	d1,$27(a5)
FFFF1CDA 103C 00B4                  		move.b	#$B4,d0
FFFF1CDE 6000 FBB0                  		bra.w	sub_C9956
FFFF1CE2                            ; ---------------------------------------------------------------------------
FFFF1CE2                            
FFFF1CE2                            locret_C9DA6:				; CODE XREF: cfHandler+BEj
FFFF1CE2 4E75                       		rts
FFFF1CE4                            ; ---------------------------------------------------------------------------
FFFF1CE4                            
FFFF1CE4                            loc_C9DA8:				; CODE XREF: cfHandler+Ej
FFFF1CE4 1B5C 001E                  		move.b	(a4)+,$1E(a5)
FFFF1CE8 4E75                       		rts
FFFF1CEA                            ; ---------------------------------------------------------------------------
FFFF1CEA                            
FFFF1CEA                            loc_C9DAE:				; CODE XREF: cfHandler+12j
FFFF1CEA 1D5C 002B                  		move.b	(a4)+,$2B(a6)
FFFF1CEE 4E75                       		rts
FFFF1CF0                            ; ---------------------------------------------------------------------------
FFFF1CF0                            
FFFF1CF0                            loc_C9DB4:				; CODE XREF: cfHandler+16j
FFFF1CF0 6100 F8E4                  		bsr.w	sub_C968E
FFFF1CF4 6000 0000                  		bra.w	loc_C9FE2
FFFF1CF8                            ; ---------------------------------------------------------------------------
FFFF1CF8                            
FFFF1CF8                            loc_C9DBC:				; CODE XREF: cfHandler+1Aj
FFFF1CF8 1B5C 001F                  		move.b	(a4)+,$1F(a5)
FFFF1CFC 6700                       		beq.s	loc_C9DD8
FFFF1CFE 1B5C 0020                  		move.b	(a4)+,$20(a5)
FFFF1D02 1B5C 0021                  		move.b	(a4)+,$21(a5)
FFFF1D06 1B5C 0022                  		move.b	(a4)+,$22(a5)
FFFF1D0A 1B54 0023                  		move.b	(a4),$23(a5)
FFFF1D0E 1B5C 0024                  		move.b	(a4)+,$24(a5)
FFFF1D12 4E75                       		rts
FFFF1D14                            ; ---------------------------------------------------------------------------
FFFF1D14                            
FFFF1D14                            loc_C9DD8:				; CODE XREF: cfHandler+F0j
FFFF1D14 103C 00B4                  		move.b	#$B4,d0
FFFF1D18 122D 0027                  		move.b	$27(a5),d1
FFFF1D1C 6000 FB72                  		bra.w	sub_C9956
FFFF1D20                            ; ---------------------------------------------------------------------------
FFFF1D20                            
FFFF1D20                            loc_C9DE4:				; CODE XREF: cfHandler+1Ej
FFFF1D20 101C                       		move.b	(a4)+,d0
FFFF1D22 4A2D 0001                  		tst.b	1(a5)
FFFF1D26 6A00                       		bpl.s	loc_C9DF4
FFFF1D28 D12D 0009                  		add.b	d0,9(a5)
FFFF1D2C 524C                       		addq.w	#1,a4
FFFF1D2E 4E75                       		rts
FFFF1D30                            ; ---------------------------------------------------------------------------
FFFF1D30                            
FFFF1D30                            loc_C9DF4:				; CODE XREF: cfHandler+22j
FFFF1D30                            					; cfHandler+11Aj
FFFF1D30 101C                       		move.b	(a4)+,d0
FFFF1D32 D12D 0009                  		add.b	d0,9(a5)
FFFF1D36 6000 0000                  		bra.w	sub_C9F24
FFFF1D3A                            ; ---------------------------------------------------------------------------
FFFF1D3A                            
FFFF1D3A                            loc_C9DFE:				; CODE XREF: cfHandler+26j
FFFF1D3A 08D5 0004                  		bset	#4,(a5)
FFFF1D3E 4E75                       		rts
FFFF1D40                            ; ---------------------------------------------------------------------------
FFFF1D40                            
FFFF1D40                            loc_C9E04:				; CODE XREF: cfHandler+2Aj
FFFF1D40 1B54 0012                  		move.b	(a4),$12(a5)
FFFF1D44 1B5C 0013                  		move.b	(a4)+,$13(a5)
FFFF1D48 1B7C 0000 002D             		move.b	#0,$2D(a5)
FFFF1D4E 4E75                       		rts
FFFF1D50                            ; ---------------------------------------------------------------------------
FFFF1D50                            
FFFF1D50                            loc_C9E14:				; CODE XREF: cfHandler+2Ej
FFFF1D50 226E 0020                  		movea.l	$20(a6),a1
FFFF1D54 6700                       		beq.s	loc_C9E1E
FFFF1D56 226D 0020                  		movea.l	$20(a5),a1
FFFF1D5A                            
FFFF1D5A                            loc_C9E1E:				; CODE XREF: cfHandler+148j
FFFF1D5A 1614                       		move.b	(a4),d3
FFFF1D5C D0FC 0009                  		adda.w	#9,a0
FFFF1D60 45F9 0000 0000             		lea	byte_C9E62,a2
FFFF1D66 7C03                       		moveq	#3,d6
FFFF1D68                            
FFFF1D68                            loc_C9E2A:				; CODE XREF: cfHandler+16Ej
FFFF1D68 1219                       		move.b	(a1)+,d1
FFFF1D6A 101A                       		move.b	(a2)+,d0
FFFF1D6C 0803 0007                  		btst	#7,d3
FFFF1D70 6700                       		beq.s	loc_C9E3C
FFFF1D72 08C1 0007                  		bset	#7,d1
FFFF1D76 6100 FB18                  		bsr.w	sub_C9956
FFFF1D7A                            
FFFF1D7A                            loc_C9E3C:				; CODE XREF: cfHandler+162j
FFFF1D7A E34B                       		lsl.w	#1,d3
FFFF1D7C 51CE FFEA                  		dbf	d6,loc_C9E2A
FFFF1D80 121C                       		move.b	(a4)+,d1
FFFF1D82 7022                       		moveq	#$22,d0	; '"'
FFFF1D84 6100 FB22                  		bsr.w	sub_C996E
FFFF1D88 121C                       		move.b	(a4)+,d1
FFFF1D8A 102D 0027                  		move.b	$27(a5),d0
FFFF1D8E 0200 00C0                  		andi.b	#$C0,d0
FFFF1D92 8200                       		or.b	d0,d1
FFFF1D94 1B41 0027                  		move.b	d1,$27(a5)
FFFF1D98 103C 00B4                  		move.b	#$B4,d0
FFFF1D9C 6000 FAF2                  		bra.w	sub_C9956
FFFF1DA0                            ; End of function cfHandler
FFFF1DA0                            
FFFF1DA0                            ; ---------------------------------------------------------------------------
FFFF1DA0 6068 646C                  byte_C9E62:	dc.b $60, $68, $64, $6C	; DATA XREF: cfHandler+154o
FFFF1DA4                            ; ---------------------------------------------------------------------------
FFFF1DA4                            ; START	OF FUNCTION CHUNK FOR cfHandler
FFFF1DA4                            
FFFF1DA4                            loc_C9E66:				; CODE XREF: cfHandler+32j
FFFF1DA4 1D54 0002                  		move.b	(a4),2(a6)
FFFF1DA8 1D5C 0001                  		move.b	(a4)+,1(a6)
FFFF1DAC 4E75                       		rts
FFFF1DAE                            ; ---------------------------------------------------------------------------
FFFF1DAE                            
FFFF1DAE                            loc_C9E70:				; CODE XREF: cfHandler+36j
FFFF1DAE 1D5C 000A                  		move.b	(a4)+,$A(a6)
FFFF1DB2 4E75                       		rts
FFFF1DB4                            ; ---------------------------------------------------------------------------
FFFF1DB4                            
FFFF1DB4                            loc_C9E76:				; CODE XREF: cfHandler+3Aj
FFFF1DB4 101C                       		move.b	(a4)+,d0
FFFF1DB6 D12D 0009                  		add.b	d0,9(a5)
FFFF1DBA 4E75                       		rts
FFFF1DBC                            ; ---------------------------------------------------------------------------
FFFF1DBC                            
FFFF1DBC                            loc_C9E7E:				; CODE XREF: cfHandler+3Ej
FFFF1DBC 101C                       		move.b	(a4)+,d0
FFFF1DBE 121C                       		move.b	(a4)+,d1
FFFF1DC0 6000 FACE                  		bra.w	sub_C9956
FFFF1DC4                            ; ---------------------------------------------------------------------------
FFFF1DC4                            
FFFF1DC4                            loc_C9E86:				; CODE XREF: cfHandler+42j
FFFF1DC4 101C                       		move.b	(a4)+,d0
FFFF1DC6 121C                       		move.b	(a4)+,d1
FFFF1DC8 6000 FADE                  		bra.w	sub_C996E
FFFF1DCC                            ; ---------------------------------------------------------------------------
FFFF1DCC                            
FFFF1DCC                            loc_C9E8E:				; CODE XREF: cfHandler+46j
FFFF1DCC 7000                       		moveq	#0,d0
FFFF1DCE 101C                       		move.b	(a4)+,d0
FFFF1DD0 1B40 000B                  		move.b	d0,$B(a5)
FFFF1DD4 0815 0002                  		btst	#2,(a5)
FFFF1DD8 6600 0000                  		bne.w	locret_C9F1A
FFFF1DDC 226E 0020                  		movea.l	$20(a6),a1
FFFF1DE0 4A2E 000E                  		tst.b	$E(a6)
FFFF1DE4 6700                       		beq.s	sub_C9EB2
FFFF1DE6 226D 0020                  		movea.l	$20(a5),a1
FFFF1DEA 6B00                       		bmi.s	sub_C9EB2
FFFF1DEC 226E 0024                  		movea.l	$24(a6),a1
FFFF1DF0                            ; END OF FUNCTION CHUNK	FOR cfHandler
FFFF1DF0                            
FFFF1DF0                            ; =============== S U B	R O U T	I N E =======================================
FFFF1DF0                            
FFFF1DF0                            
FFFF1DF0                            sub_C9EB2:				; CODE XREF: sub_C9310+5Ep
FFFF1DF0                            					; sub_C93A8+2Ep ...
FFFF1DF0 5340                       		subq.w	#1,d0
FFFF1DF2 6B00                       		bmi.s	loc_C9EC0
FFFF1DF4 323C 0019                  		move.w	#$19,d1
FFFF1DF8                            
FFFF1DF8                            loc_C9EBA:				; CODE XREF: sub_C9EB2+Aj
FFFF1DF8 D2C1                       		adda.w	d1,a1
FFFF1DFA 51C8 FFFC                  		dbf	d0,loc_C9EBA
FFFF1DFE                            
FFFF1DFE                            loc_C9EC0:				; CODE XREF: sub_C9EB2+2j
FFFF1DFE 6100 FB0A                  		bsr.w	WaitForZ80
FFFF1E02 1219                       		move.b	(a1)+,d1
FFFF1E04 1B41 0025                  		move.b	d1,$25(a5)
FFFF1E08 1801                       		move.b	d1,d4
FFFF1E0A 103C 00B0                  		move.b	#$B0,d0
FFFF1E0E 6100 FAAA                  		bsr.w	sub_C9980
FFFF1E12 45F9 0000 0000             		lea	byte_C9F94,a2
FFFF1E18 7613                       		moveq	#$13,d3
FFFF1E1A                            
FFFF1E1A                            loc_C9EDA:				; CODE XREF: sub_C9EB2+30j
FFFF1E1A 101A                       		move.b	(a2)+,d0
FFFF1E1C 1219                       		move.b	(a1)+,d1
FFFF1E1E 6100 FA9A                  		bsr.w	sub_C9980
FFFF1E22 51CB FFF6                  		dbf	d3,loc_C9EDA
FFFF1E26 7A03                       		moveq	#3,d5
FFFF1E28 0244 0007                  		andi.w	#7,d4
FFFF1E2C 183B 4000                  		move.b	byte_C9F1C(pc,d4.w),d4
FFFF1E30 162D 0009                  		move.b	9(a5),d3
FFFF1E34                            
FFFF1E34                            loc_C9EF4:				; CODE XREF: sub_C9EB2+50j
FFFF1E34 101A                       		move.b	(a2)+,d0
FFFF1E36 1219                       		move.b	(a1)+,d1
FFFF1E38 E20C                       		lsr.b	#1,d4
FFFF1E3A 6400                       		bcc.s	loc_C9EFE
FFFF1E3C D203                       		add.b	d3,d1
FFFF1E3E                            
FFFF1E3E                            loc_C9EFE:				; CODE XREF: sub_C9EB2+48j
FFFF1E3E 6100 FA7A                  		bsr.w	sub_C9980
FFFF1E42 51CD FFF0                  		dbf	d5,loc_C9EF4
FFFF1E46 103C 00B4                  		move.b	#$B4,d0
FFFF1E4A 122D 0027                  		move.b	$27(a5),d1
FFFF1E4E 6100 FA6A                  		bsr.w	sub_C9980
FFFF1E52 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1E5A                            
FFFF1E5A                            locret_C9F1A:				; CODE XREF: cfHandler+1CAj
FFFF1E5A 4E75                       		rts
FFFF1E5C                            ; End of function sub_C9EB2
FFFF1E5C                            
FFFF1E5C                            ; ---------------------------------------------------------------------------
FFFF1E5C 0808 0808 0A0E 0E0F        byte_C9F1C:	dc.b 8,	8, 8, 8, $A, $E, $E, $F	; DATA XREF: sub_C9EB2+3Ar
FFFF1E64                            					; sub_C9F24+42r
FFFF1E64                            
FFFF1E64                            ; =============== S U B	R O U T	I N E =======================================
FFFF1E64                            
FFFF1E64                            
FFFF1E64                            sub_C9F24:				; CODE XREF: DoFadeOut+50p
FFFF1E64                            					; DoFadeOut:loc_C94D6p	...
FFFF1E64 0815 0002                  		btst	#2,(a5)
FFFF1E68 6600                       		bne.s	locret_C9F92
FFFF1E6A 7000                       		moveq	#0,d0
FFFF1E6C 102D 000B                  		move.b	$B(a5),d0
FFFF1E70 226E 0020                  		movea.l	$20(a6),a1
FFFF1E74 4A2E 000E                  		tst.b	$E(a6)
FFFF1E78 6700                       		beq.s	loc_C9F48
FFFF1E7A 226D 0020                  		movea.l	$20(a5),a1
FFFF1E7E 4A2E 000E                  		tst.b	$E(a6)
FFFF1E82 6B00                       		bmi.s	loc_C9F48
FFFF1E84 226E 0024                  		movea.l	$24(a6),a1
FFFF1E88                            
FFFF1E88                            loc_C9F48:				; CODE XREF: sub_C9F24+14j
FFFF1E88                            					; sub_C9F24+1Ej
FFFF1E88 5340                       		subq.w	#1,d0
FFFF1E8A 6B00                       		bmi.s	loc_C9F56
FFFF1E8C 323C 0019                  		move.w	#$19,d1
FFFF1E90                            
FFFF1E90                            loc_C9F50:				; CODE XREF: sub_C9F24+2Ej
FFFF1E90 D2C1                       		adda.w	d1,a1
FFFF1E92 51C8 FFFC                  		dbf	d0,loc_C9F50
FFFF1E96                            
FFFF1E96                            loc_C9F56:				; CODE XREF: sub_C9F24+26j
FFFF1E96 D2FC 0015                  		adda.w	#$15,a1
FFFF1E9A 45F9 0000 0000             		lea	byte_C9FA8,a2
FFFF1EA0 102D 0025                  		move.b	$25(a5),d0
FFFF1EA4 0240 0007                  		andi.w	#7,d0
FFFF1EA8 183B 00B2                  		move.b	byte_C9F1C(pc,d0.w),d4
FFFF1EAC 162D 0009                  		move.b	9(a5),d3
FFFF1EB0 6B00                       		bmi.s	locret_C9F92
FFFF1EB2 7A03                       		moveq	#3,d5
FFFF1EB4 6100 FA54                  		bsr.w	WaitForZ80
FFFF1EB8                            
FFFF1EB8                            loc_C9F76:				; CODE XREF: sub_C9F24:loc_C9F86j
FFFF1EB8 101A                       		move.b	(a2)+,d0
FFFF1EBA 1219                       		move.b	(a1)+,d1
FFFF1EBC E20C                       		lsr.b	#1,d4
FFFF1EBE 6400                       		bcc.s	loc_C9F86
FFFF1EC0 D203                       		add.b	d3,d1
FFFF1EC2 6500                       		bcs.s	loc_C9F86
FFFF1EC4 6100 F9F4                  		bsr.w	sub_C9980
FFFF1EC8                            
FFFF1EC8                            loc_C9F86:				; CODE XREF: sub_C9F24+58j
FFFF1EC8                            					; sub_C9F24+5Cj
FFFF1EC8 51CD FFEE                  		dbf	d5,loc_C9F76
FFFF1ECC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF1ED4                            
FFFF1ED4                            locret_C9F92:				; CODE XREF: sub_C9F24+4j
FFFF1ED4                            					; sub_C9F24+4Aj
FFFF1ED4 4E75                       		rts
FFFF1ED6                            ; End of function sub_C9F24
FFFF1ED6                            
FFFF1ED6                            ; ---------------------------------------------------------------------------
FFFF1ED6 3038 343C 5058 545C 6068   byte_C9F94:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
FFFF1EE0                            					; DATA XREF: sub_C9EB2+22o
FFFF1EE0 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
FFFF1EEA 4048 444C                  byte_C9FA8:	dc.b $40, $48, $44, $4C	; DATA XREF: sub_C9F24+36o
FFFF1EEE                            ; ---------------------------------------------------------------------------
FFFF1EEE                            
FFFF1EEE                            loc_C9FAC:				; CODE XREF: cfHandler+4Aj
FFFF1EEE 08ED 0007 000A             		bset	#7,$A(a5)
FFFF1EF4 2B4C 0014                  		move.l	a4,$14(a5)
FFFF1EF8 1B5C 0018                  		move.b	(a4)+,$18(a5)
FFFF1EFC 1B5C 0019                  		move.b	(a4)+,$19(a5)
FFFF1F00 1B5C 001A                  		move.b	(a4)+,$1A(a5)
FFFF1F04 101C                       		move.b	(a4)+,d0
FFFF1F06 E208                       		lsr.b	#1,d0
FFFF1F08 1B40 001B                  		move.b	d0,$1B(a5)
FFFF1F0C 426D 001C                  		clr.w	$1C(a5)
FFFF1F10 4E75                       		rts
FFFF1F12                            ; ---------------------------------------------------------------------------
FFFF1F12                            
FFFF1F12                            loc_C9FD0:				; CODE XREF: cfHandler+4Ej
FFFF1F12 101C                       		move.b	(a4)+,d0
FFFF1F14 4A2D 0001                  		tst.b	1(a5)
FFFF1F18 6A00 0000                  		bpl.w	loc_CA0C4
FFFF1F1C 1B40 000A                  		move.b	d0,$A(a5)
FFFF1F20 101C                       		move.b	(a4)+,d0
FFFF1F22 4E75                       		rts
FFFF1F24                            ; ---------------------------------------------------------------------------
FFFF1F24                            
FFFF1F24                            loc_C9FE2:				; CODE XREF: cfHandler+52j
FFFF1F24                            					; cfHandler+E8j
FFFF1F24 0895 0007                  		bclr	#7,(a5)
FFFF1F28 0895 0004                  		bclr	#4,(a5)
FFFF1F2C 4A2D 0001                  		tst.b	1(a5)
FFFF1F30 6B00                       		bmi.s	loc_C9FFE
FFFF1F32 4A2E 0008                  		tst.b	8(a6)
FFFF1F36 6B00 0000                  		bmi.w	loc_CA0A6
FFFF1F3A 6100 F93C                  		bsr.w	sub_C993E
FFFF1F3E 6000                       		bra.s	loc_CA002
FFFF1F40                            ; ---------------------------------------------------------------------------
FFFF1F40                            
FFFF1F40                            loc_C9FFE:				; CODE XREF: ROM:000C9FEEj
FFFF1F40 6100 FC10                  		bsr.w	sub_C9C16
FFFF1F44                            
FFFF1F44                            loc_CA002:				; CODE XREF: ROM:000C9FFCj
FFFF1F44 4A2E 000E                  		tst.b	$E(a6)
FFFF1F48 6A00 0000                  		bpl.w	loc_CA0A6
FFFF1F4C 4216                       		clr.b	0(a6)
FFFF1F4E 7000                       		moveq	#0,d0
FFFF1F50 102D 0001                  		move.b	1(a5),d0
FFFF1F54 6B00                       		bmi.s	loc_CA06E
FFFF1F56 41FA F240                  		lea	BGMChannelRAM,a0
FFFF1F5A 264D                       		movea.l	a5,a3
FFFF1F5C 0C00 0004                  		cmpi.b	#4,d0
FFFF1F60 6600                       		bne.s	loc_CA032
FFFF1F62 4A2E 038A                  		tst.b	$38A(a6)
FFFF1F66 6A00                       		bpl.s	loc_CA032
FFFF1F68 4BEE 038A                  		lea	$38A(a6),a5
FFFF1F6C 226E 0024                  		movea.l	$24(a6),a1
FFFF1F70 6000                       		bra.s	loc_CA044
FFFF1F72                            ; ---------------------------------------------------------------------------
FFFF1F72                            
FFFF1F72                            loc_CA032:				; CODE XREF: ROM:000CA020j
FFFF1F72                            					; ROM:000CA026j
FFFF1F72 5500                       		subq.b	#2,d0
FFFF1F74 D000                       		add.b	d0,d0
FFFF1F76 3A70 0000                  		movea.w	(a0,d0.w),a5
FFFF1F7A DBCE                       		adda.l	a6,a5
FFFF1F7C 4A15                       		tst.b	(a5)
FFFF1F7E 6A00                       		bpl.s	loc_CA054
FFFF1F80 226E 0020                  		movea.l	$20(a6),a1
FFFF1F84                            
FFFF1F84                            loc_CA044:				; CODE XREF: ROM:000CA030j
FFFF1F84 0895 0002                  		bclr	#2,(a5)
FFFF1F88 08D5 0001                  		bset	#1,(a5)
FFFF1F8C 102D 000B                  		move.b	$B(a5),d0
FFFF1F90 6100 FE5E                  		bsr.w	sub_C9EB2
FFFF1F94                            
FFFF1F94                            loc_CA054:				; CODE XREF: ROM:000CA03Ej
FFFF1F94 2A4B                       		movea.l	a3,a5
FFFF1F96 0C2D 0002 0001             		cmpi.b	#2,1(a5)
FFFF1F9C 6600                       		bne.s	loc_CA0A6
FFFF1F9E 4A2E 000F                  		tst.b	$F(a6)
FFFF1FA2 6600                       		bne.s	loc_CA0A6
FFFF1FA4 7200                       		moveq	#0,d1
FFFF1FA6 7027                       		moveq	#$27,d0	; '''
FFFF1FA8 6100 F8FE                  		bsr.w	sub_C996E
FFFF1FAC 6000                       		bra.s	loc_CA0A6
FFFF1FAE                            ; ---------------------------------------------------------------------------
FFFF1FAE                            
FFFF1FAE                            loc_CA06E:				; CODE XREF: ROM:000CA014j
FFFF1FAE 41EE 03BE                  		lea	$3BE(a6),a0
FFFF1FB2 4A10                       		tst.b	(a0)
FFFF1FB4 6A00                       		bpl.s	loc_CA082
FFFF1FB6 0C00 00E0                  		cmpi.b	#$E0,d0
FFFF1FBA 6700                       		beq.s	loc_CA08E
FFFF1FBC 0C00 00C0                  		cmpi.b	#$C0,d0
FFFF1FC0 6700                       		beq.s	loc_CA08E
FFFF1FC2                            
FFFF1FC2                            loc_CA082:				; CODE XREF: ROM:000CA074j
FFFF1FC2 41FA F1D4                  		lea	BGMChannelRAM,a0
FFFF1FC6 E808                       		lsr.b	#4,d0
FFFF1FC8 3070 0000                  		movea.w	(a0,d0.w),a0
FFFF1FCC D1CE                       		adda.l	a6,a0
FFFF1FCE                            
FFFF1FCE                            loc_CA08E:				; CODE XREF: ROM:000CA07Aj
FFFF1FCE                            					; ROM:000CA080j
FFFF1FCE 0890 0002                  		bclr	#2,(a0)
FFFF1FD2 08D0 0001                  		bset	#1,(a0)
FFFF1FD6 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
FFFF1FDC 6600                       		bne.s	loc_CA0A6
FFFF1FDE 13E8 0025 00C0 0011        		move.b	$25(a0),($C00011).l
FFFF1FE6                            
FFFF1FE6                            loc_CA0A6:				; CODE XREF: ROM:000C9FF4j
FFFF1FE6                            					; ROM:000CA006j ...
FFFF1FE6 504F                       		addq.w	#8,sp
FFFF1FE8 4E75                       		rts
FFFF1FEA                            ; ---------------------------------------------------------------------------
FFFF1FEA                            ; START	OF FUNCTION CHUNK FOR cfHandler
FFFF1FEA                            
FFFF1FEA                            loc_CA0AA:				; CODE XREF: cfHandler+56j
FFFF1FEA 1B7C 00E0 0001             		move.b	#$E0,1(a5)
FFFF1FF0 1B5C 0025                  		move.b	(a4)+,$25(a5)
FFFF1FF4 0815 0002                  		btst	#2,(a5)
FFFF1FF8 6600                       		bne.s	locret_CA0C2
FFFF1FFA 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
FFFF2002                            
FFFF2002                            locret_CA0C2:				; CODE XREF: cfHandler+3E8j
FFFF2002 4E75                       		rts
FFFF2004                            ; END OF FUNCTION CHUNK	FOR cfHandler
FFFF2004                            ; ---------------------------------------------------------------------------
FFFF2004                            
FFFF2004                            loc_CA0C4:				; CODE XREF: cfHandler+5Aj
FFFF2004                            					; ROM:000C9FD6j
FFFF2004 1B5C 000A                  		move.b	(a4)+,$A(a5)
FFFF2008 4E75                       		rts
FFFF200A                            ; ---------------------------------------------------------------------------
FFFF200A                            ; START	OF FUNCTION CHUNK FOR cfHandler
FFFF200A                            
FFFF200A                            loc_CA0CA:				; CODE XREF: cfHandler+5Ej
FFFF200A 1B5C 000B                  		move.b	(a4)+,$B(a5)
FFFF200E 4E75                       		rts
FFFF2010                            ; ---------------------------------------------------------------------------
FFFF2010                            
FFFF2010                            loc_CA0D0:				; CODE XREF: cfHandler+62j
FFFF2010                            					; cfHandler+436j ...
FFFF2010 101C                       		move.b	(a4)+,d0
FFFF2012 E148                       		lsl.w	#8,d0
FFFF2014 101C                       		move.b	(a4)+,d0
FFFF2016 D8C0                       		adda.w	d0,a4
FFFF2018 4E75                       		rts
FFFF201A                            ; ---------------------------------------------------------------------------
FFFF201A                            
FFFF201A                            loc_CA0DA:				; CODE XREF: cfHandler+66j
FFFF201A 7000                       		moveq	#0,d0
FFFF201C 101C                       		move.b	(a4)+,d0
FFFF201E 121C                       		move.b	(a4)+,d1
FFFF2020 48E7 2000                  		movem.l	d2,-(sp)
FFFF2024 1435 0028                  		move.b	$28(a5,d0.w),d2
FFFF2028 4CDF 0004                  		movem.l	(sp)+,d2
FFFF202C 4A35 0028                  		tst.b	$28(a5,d0.w)
FFFF2030 6600                       		bne.s	loc_CA0F6
FFFF2032 1B81 0028                  		move.b	d1,$28(a5,d0.w)
FFFF2036                            
FFFF2036                            loc_CA0F6:				; CODE XREF: cfHandler+420j
FFFF2036 5335 0028                  		subq.b	#1,$28(a5,d0.w)
FFFF203A 48E7 2000                  		movem.l	d2,-(sp)
FFFF203E 1435 0028                  		move.b	$28(a5,d0.w),d2
FFFF2042 4CDF 0004                  		movem.l	(sp)+,d2
FFFF2046 66C8                       		bne.s	loc_CA0D0
FFFF2048 544C                       		addq.w	#2,a4
FFFF204A 4E75                       		rts
FFFF204C                            ; ---------------------------------------------------------------------------
FFFF204C                            
FFFF204C                            loc_CA10C:				; CODE XREF: cfHandler+6Aj
FFFF204C 7000                       		moveq	#0,d0
FFFF204E 102D 000D                  		move.b	$D(a5),d0
FFFF2052 5900                       		subq.b	#4,d0
FFFF2054 2B8C 0000                  		move.l	a4,(a5,d0.w)
FFFF2058 1B40 000D                  		move.b	d0,$D(a5)
FFFF205C 60B2                       		bra.s	loc_CA0D0
FFFF205E                            ; ---------------------------------------------------------------------------
FFFF205E                            
FFFF205E                            loc_CA11E:				; CODE XREF: cfHandler+6Ej
FFFF205E 7000                       		moveq	#0,d0
FFFF2060 102D 000D                  		move.b	$D(a5),d0
FFFF2064 2875 0000                  		movea.l	(a5,d0.w),a4
FFFF2068 544C                       		addq.w	#2,a4
FFFF206A 5800                       		addq.b	#4,d0
FFFF206C 1B40 000D                  		move.b	d0,$D(a5)
FFFF2070 4E75                       		rts
FFFF2072                            ; ---------------------------------------------------------------------------
FFFF2072                            
FFFF2072                            loc_CA132:				; CODE XREF: cfHandler+72j
FFFF2072 1B5C 0002                  		move.b	(a4)+,2(a5)
FFFF2076 4E75                       		rts
FFFF2078                            ; ---------------------------------------------------------------------------
FFFF2078                            
FFFF2078                            loc_CA138:				; CODE XREF: cfHandler+76j
FFFF2078 101C                       		move.b	(a4)+,d0
FFFF207A D12D 0008                  		add.b	d0,8(a5)
FFFF207E 4E75                       		rts
FFFF2080                            ; ---------------------------------------------------------------------------
FFFF2080                            
FFFF2080                            loc_CA140:				; CODE XREF: cfHandler+7Aj
FFFF2080 08ED 0007 000A             		bset	#7,$A(a5)
FFFF2086 4E75                       		rts
FFFF2088                            ; ---------------------------------------------------------------------------
FFFF2088                            
FFFF2088                            loc_CA148:				; CODE XREF: cfHandler+7Ej
FFFF2088 08AD 0007 000A             		bclr	#7,$A(a5)
FFFF208E 4E75                       		rts
FFFF2090                            ; ---------------------------------------------------------------------------
FFFF2090                            
FFFF2090                            loc_CA150:				; CODE XREF: cfHandler+82j
FFFF2090 41EE 0018                  		lea	$18(a6),a0
FFFF2094 4A2E 000E                  		tst.b	$E(a6)
FFFF2098 6600                       		bne.s	loc_CA164
FFFF209A 41EE 0010                  		lea	$10(a6),a0
FFFF209E 1D7C 0080 000F             		move.b	#$80,$F(a6)
FFFF20A4                            
FFFF20A4                            loc_CA164:				; CODE XREF: cfHandler+488j
FFFF20A4 7003                       		moveq	#3,d0
FFFF20A6                            
FFFF20A6                            loc_CA166:				; CODE XREF: cfHandler+4A0j
FFFF20A6 7200                       		moveq	#0,d1
FFFF20A8 121C                       		move.b	(a4)+,d1
FFFF20AA E349                       		lsl.w	#1,d1
FFFF20AC 30FB 1000                  		move.w	word_CA17E(pc,d1.w),(a0)+
FFFF20B0 51C8 FFF4                  		dbf	d0,loc_CA166
FFFF20B4 103C 0027                  		move.b	#$27,d0	; '''
FFFF20B8 7240                       		moveq	#$40,d1	; '@'
FFFF20BA 6000 F7EC                  		bra.w	sub_C996E
FFFF20BE                            ; END OF FUNCTION CHUNK	FOR cfHandler
FFFF20BE                            ; ---------------------------------------------------------------------------
FFFF20BE 0000 0180 01F4 0260        word_CA17E:	dc.w 0,	$180, $1F4, $260 ; DATA	XREF: cfHandler+49Cr
FFFF20C6                            ; ---------------------------------------------------------------------------
FFFF20C6                            ; START	OF FUNCTION CHUNK FOR cfHandler
FFFF20C6                            
FFFF20C6                            loc_CA186:				; CODE XREF: cfHandler:metacfj
FFFF20C6 43F9 0000 0000             		lea	byte_CA1A2,a1
FFFF20CC 7603                       		moveq	#3,d3
FFFF20CE                            
FFFF20CE                            loc_CA18C:				; CODE XREF: cfHandler+4CCj
FFFF20CE 1019                       		move.b	(a1)+,d0
FFFF20D0 121C                       		move.b	(a4)+,d1
FFFF20D2 6100 F7BC                  		bsr.w	sub_C9956
FFFF20D6 1019                       		move.b	(a1)+,d0
FFFF20D8 721F                       		moveq	#$1F,d1
FFFF20DA 6100 F7B4                  		bsr.w	sub_C9956
FFFF20DE 51CB FFEE                  		dbf	d3,loc_CA18C
FFFF20E2 4E75                       		rts
FFFF20E4                            ; END OF FUNCTION CHUNK	FOR cfHandler
FFFF20E4                            ; ---------------------------------------------------------------------------
FFFF20E4 9050 9858 9454 9C5C        byte_CA1A2:	dc.b $90, $50, $98, $58, $94, $54, $9C,	$5C
FFFF20EC                            					; DATA XREF: cfHandler:loc_CA186o
FFFF20EC                            ; ---------------------------------------------------------------------------
FFFF20EC                            
FFFF20EC                            loc_CA1AA:				; CODE XREF: cfHandler+94j
FFFF20EC 7634                       		moveq	#$34,d3	; '4'
FFFF20EE 101C                       		move.b	(a4)+,d0
FFFF20F0 6700                       		beq.s	loc_CA206
FFFF20F2 264D                       		movea.l	a5,a3
FFFF20F4 4BEE 004A                  		lea	$4A(a6),a5
FFFF20F8 0815 0007                  		btst	#7,(a5)
FFFF20FC 6700                       		beq.s	loc_CA1C4
FFFF20FE 0895 0007                  		bclr	#7,(a5)
FFFF2102 08D5 0000                  		bset	#0,(a5)
FFFF2106                            
FFFF2106                            loc_CA1C4:				; CODE XREF: ROM:000CA1BAj
FFFF2106 7804                       		moveq	#4,d4
FFFF2108                            
FFFF2108                            loc_CA1C6:				; CODE XREF: ROM:loc_CA1E4j
FFFF2108 DAC3                       		adda.w	d3,a5
FFFF210A 0815 0007                  		btst	#7,(a5)
FFFF210E 6700                       		beq.s	loc_CA1E4
FFFF2110 0895 0007                  		bclr	#7,(a5)
FFFF2114 08D5 0000                  		bset	#0,(a5)
FFFF2118 103C 00B4                  		move.b	#$B4,d0
FFFF211C 7200                       		moveq	#0,d1
FFFF211E 6100 F770                  		bsr.w	sub_C9956
FFFF2122 6100 F754                  		bsr.w	sub_C993E
FFFF2126                            
FFFF2126                            loc_CA1E4:				; CODE XREF: ROM:000CA1CCj
FFFF2126 51CC FFE0                  		dbf	d4,loc_CA1C6
FFFF212A 7802                       		moveq	#2,d4
FFFF212C                            
FFFF212C                            loc_CA1EA:				; CODE XREF: ROM:loc_CA1FEj
FFFF212C DAC3                       		adda.w	d3,a5
FFFF212E 0815 0007                  		btst	#7,(a5)
FFFF2132 6700                       		beq.s	loc_CA1FE
FFFF2134 0895 0007                  		bclr	#7,(a5)
FFFF2138 08D5 0000                  		bset	#0,(a5)
FFFF213C 6100 FA14                  		bsr.w	sub_C9C16
FFFF2140                            
FFFF2140                            loc_CA1FE:				; CODE XREF: ROM:000CA1F0j
FFFF2140 51CC FFEA                  		dbf	d4,loc_CA1EA
FFFF2144 2A4B                       		movea.l	a3,a5
FFFF2146 4E75                       		rts
FFFF2148                            ; ---------------------------------------------------------------------------
FFFF2148                            
FFFF2148                            loc_CA206:				; CODE XREF: ROM:000CA1AEj
FFFF2148 264D                       		movea.l	a5,a3
FFFF214A 4BEE 004A                  		lea	$4A(a6),a5
FFFF214E 0815 0000                  		btst	#0,(a5)
FFFF2152 6700                       		beq.s	loc_CA226
FFFF2154 08D5 0007                  		bset	#7,(a5)
FFFF2158 0895 0000                  		bclr	#0,(a5)
FFFF215C 103C 00B4                  		move.b	#$B4,d0
FFFF2160 122D 0027                  		move.b	$27(a5),d1
FFFF2164 6100 F72A                  		bsr.w	sub_C9956
FFFF2168                            
FFFF2168                            loc_CA226:				; CODE XREF: ROM:000CA210j
FFFF2168 7804                       		moveq	#4,d4
FFFF216A                            
FFFF216A                            loc_CA228:				; CODE XREF: ROM:loc_CA244j
FFFF216A DAC3                       		adda.w	d3,a5
FFFF216C 0815 0000                  		btst	#0,(a5)
FFFF2170 6700                       		beq.s	loc_CA244
FFFF2172 08D5 0007                  		bset	#7,(a5)
FFFF2176 0895 0000                  		bclr	#0,(a5)
FFFF217A 103C 00B4                  		move.b	#$B4,d0
FFFF217E 122D 0027                  		move.b	$27(a5),d1
FFFF2182 6100 F70C                  		bsr.w	sub_C9956
FFFF2186                            
FFFF2186                            loc_CA244:				; CODE XREF: ROM:000CA22Ej
FFFF2186 51CC FFE2                  		dbf	d4,loc_CA228
FFFF218A 7802                       		moveq	#2,d4
FFFF218C                            
FFFF218C                            loc_CA24A:				; CODE XREF: ROM:loc_CA25Aj
FFFF218C DAC3                       		adda.w	d3,a5
FFFF218E 0815 0000                  		btst	#0,(a5)
FFFF2192 6700                       		beq.s	loc_CA25A
FFFF2194 08D5 0007                  		bset	#7,(a5)
FFFF2198 0895 0000                  		bclr	#0,(a5)
FFFF219C                            
FFFF219C                            loc_CA25A:				; CODE XREF: ROM:000CA250j
FFFF219C 51CC FFEE                  		dbf	d4,loc_CA24A
FFFF21A0 2A4B                       		movea.l	a3,a5
FFFF21A2 4E75                       		rts
FFFF21A4                            ; ---------------------------------------------------------------------------
FFFF21A4                            ; START	OF FUNCTION CHUNK FOR cfHandler
FFFF21A4                            
FFFF21A4                            loc_CA262:				; CODE XREF: cfHandler+98j
FFFF21A4 41EE 004A                  		lea	$4A(a6),a0
FFFF21A8 101C                       		move.b	(a4)+,d0
FFFF21AA 7234                       		moveq	#$34,d1	; '4'
FFFF21AC 7409                       		moveq	#9,d2
FFFF21AE                            
FFFF21AE                            loc_CA26C:				; CODE XREF: cfHandler+5A2j
FFFF21AE 1140 0002                  		move.b	d0,2(a0)
FFFF21B2 D0C1                       		adda.w	d1,a0
FFFF21B4 51CA FFF8                  		dbf	d2,loc_CA26C
FFFF21B8 4E75                       		rts
FFFF21BA                            ; ---------------------------------------------------------------------------
FFFF21BA                            
FFFF21BA                            loc_CA278:				; CODE XREF: cfHandler+9Cj
FFFF21BA 0C2E 0002 0028             		cmpi.b	#2,$28(a6)
FFFF21C0 6700 0000                  		beq.w	locret_CA290
FFFF21C4 1D7C 0001 0028             		move.b	#1,$28(a6)
FFFF21CA 1D5C 0029                  		move.b	(a4)+,$29(a6)
FFFF21CE 1D5C 002A                  		move.b	(a4)+,$2A(a6)
FFFF21D2                            
FFFF21D2                            locret_CA290:				; CODE XREF: cfHandler+5AEj
FFFF21D2 4E75                       		rts
FFFF21D4                            ; ---------------------------------------------------------------------------
FFFF21D4                            
FFFF21D4                            loc_CA292:				; CODE XREF: cfHandler+A0j
FFFF21D4 1D7C 0080 0028             		move.b	#$80,$28(a6)
FFFF21DA 4E75                       		rts
FFFF21DC                            ; ---------------------------------------------------------------------------
FFFF21DC                            
FFFF21DC                            loc_CA29A:				; CODE XREF: cfHandler+A4j
FFFF21DC 1D5C 002F                  		move.b	(a4)+,$2F(a6)
FFFF21E0 4E75                       		rts
FFFF21E2                            ; ---------------------------------------------------------------------------
FFFF21E2                            
FFFF21E2                            loc_CA2A0:				; CODE XREF: cfHandler+A8j
FFFF21E2 1B5C 002D                  		move.b	(a4)+,$2D(a5)
FFFF21E6 1B7C 0000 0012             		move.b	#0,$12(a5)
FFFF21EC 1B7C 0000 0013             		move.b	#0,$13(a5)
FFFF21F2 4E75                       		rts
FFFF21F4                            ; ---------------------------------------------------------------------------
FFFF21F4                            
FFFF21F4                            loc_CA2B2:				; CODE XREF: cfHandler+ACj
FFFF21F4 4A2E 0041                  		tst.b	$41(a6)
FFFF21F8 6600 FE16                  		bne.w	loc_CA0D0
FFFF21FC D9FC 0000 0002             		adda.l	#2,a4
FFFF2202 4E75                       		rts
FFFF2204                            ; ---------------------------------------------------------------------------
FFFF2204                            
FFFF2204                            loc_CA2C2:				; CODE XREF: cfHandler+B0j
FFFF2204 0838 0006 A1FC             		btst	#6,HWVersion.w
FFFF220A 6600 0000                  		bne.w	loc_CA2D4
FFFF220E D9FC 0000 0001             		adda.l	#1,a4
FFFF2214 4E75                       		rts
FFFF2216                            ; ---------------------------------------------------------------------------
FFFF2216                            
FFFF2216                            loc_CA2D4:				; CODE XREF: cfHandler+5F8j
FFFF2216 1D5C 0002                  		move.b	(a4)+,2(a6)
FFFF221A 4E75                       		rts
FFFF221C                            ; ---------------------------------------------------------------------------
FFFF221C                            
FFFF221C                            loc_CA2DA:				; CODE XREF: cfHandler+B4j
FFFF221C 0838 0006 A1FC             		btst	#6,HWVersion.w
FFFF2222 6600 0000                  		bne.w	loc_CA2EC
FFFF2226 D9FC 0000 0001             		adda.l	#1,a4
FFFF222C 4E75                       		rts
FFFF222E                            ; ---------------------------------------------------------------------------
FFFF222E                            
FFFF222E                            loc_CA2EC:				; CODE XREF: cfHandler+610j
FFFF222E 1B54 000E                  		move.b	(a4),$E(a5)
FFFF2232 1B5C 000F                  		move.b	(a4)+,$F(a5)
FFFF2236 4E75                       		rts
FFFF2238                            ; ---------------------------------------------------------------------------
