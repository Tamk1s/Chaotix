00000000                            *
00000000                            *    File:          Gems.a - Version 2.5 for MicroTec 5/21/92
00000000                            *
00000000                            *    Contains: The library routines and includes for Gems data.
00000000                            *
00000000                            *    Written by:    Burt Sloane & Jonathan L. Miller
00000000                            *
00000000                            *    Copyright:     1991,1992 by Sega of America, Inc., all rights reserved.
00000000                            *
00000000                            *    Change History:
00000000                            *         5/21/92 JLM Update for 2.5 - unchaged from 2.2
00000000                            *         3/5/92 JLM Update for 2.2 - new z80 mem map, plus fixed dmastart
00000000                            *         11/19/91 BAS Update for 2.0, several routines didnt disable ints
00000000                            *
00000000                            *    To Do:
00000000                            *
00000000                            *
00000000                            *
00000000                            * N.B.  in routines in this file, a0 and d0 are freely trashed
00000000                            
00000000                            
00000000                            ********************************** DATA INCLUDES ********************************
00000000                                 include "..\..\code\macro.asm"
00000000                            	opt ae+		; automatic even's
00000000                            	opt l+		; . is local lable symbol
00000000                            	opt w-		; don't print warnings
00000000                            	opt op+		; optimize PC relative addressing
00000000                            	opt os+		; optimize short branches
00000000                            	opt ow+		; optimize absolute long addressing
00000000                            	opt oz+		; optimize zero displacements
00000000                            	opt oaq+	; optimize addq
00000000                            	opt osq+	; optimize subq
00000000                            	opt omq+	; optimize moveq
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	if narg>=2
00000000                            		cnop \2,\1
00000000                            	else
00000000                            		cnop 0,\1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ===========================================================================
00000000                            vdpComm		macro ins,addr,type,rwd,end,end2
00000000                            	if narg=5
00000000                            		\ins #(((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14), \end
00000000                            
00000000                            	elseif narg=6
00000000                            		\ins #(((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
00000000                            
00000000                            	else
00000000                            		\ins (((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)
00000000                            	endif
00000000                                endm
00000000                            
00000000                            vdpCoord	macro base,x,y,rwd
00000000                            .addr =		(\base+\x+\x+(\y*$40))
00000000                            	dc.l (((VRAM&\rwd)&3)<<30)|((.addr&$3FFF)<<16)|(((VRAM&\rwd)&$FC)<<2)|((.addr&$C000)>>14)
00000000                                endm
00000000                            
00000000                            propdat		macro typ, base,x,y,rwd
00000000                            	dc.w \typ
00000000                            	vdpCoord \base, \x, \y, \rwd
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; values for the type argument
00000000 =00000021                  VRAM =  %100001
00000000 =0000002B                  CRAM =  %101011
00000000 =00000025                  VSRAM = %100101
00000000                            
00000000                            ; values for the rwd argument
00000000 =0000000C                  READ =  %001100
00000000 =00000007                  WRITE = %000111
00000000 =00000027                  DMA =   %100111
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the VDP to copy a region of 68k memory to VRAM or CRAM or VSRAM
00000000                            dma68kToVDP macro source,dest,length,type
00000000                            		lea	VDP_control_port,a5
00000000                            		move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(a5)
00000000                            		move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(a5)
00000000                            		move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            	vdpComm	move.l,\dest,\type,DMA,(a5)
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the VDP to fill a region of VRAM with a certain byte
00000000                            dmaFillVRAM macro byte,addr,length,wait
00000000                            	lea	VDP_control_port,a5
00000000                            	move.w	#$8F01,(a5) ; VRAM pointer increment: $0001
00000000                            	move.l	#(($9400|((((length)-1)&$FF00)>>8))<<16)|($9300|(((length)-1)&$FF)),(a5) ; DMA length ...
00000000                            	move.w	#$9780,(a5) ; VRAM fill
00000000                            	move.l	#$40000080|(((addr)&$3FFF)<<16)|(((addr)&$C000)>>14),(a5) ; Start at ...
00000000                            	move.w	#(byte)<<8,(VDP_data_port).l ; Fill with byte
00000000                            
00000000                            	if narg<4
00000000                            .loop\@		move.w	(a5),d1
00000000                            		btst	#1,d1
00000000                            		bne.s	.loop\@	; busy loop until the VDP is finished filling...
00000000                            		move.w	#$8F02,(a5) ; VRAM pointer increment: $0002
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; allows you to declare string to be converted to character map or mappings
00000000                            asc2	macro	or, str
00000000                            	dc.W strlen(\str)-1
00000000                            	asc	\or, \str
00000000                                endm
00000000                            
00000000                            asc	macro	or, str
00000000                            .lc = 0
00000000                            	rept strlen(\str)
00000000                            .cc		substr .lc+1,.lc+1,\str
00000000                            
00000000                            		if '\.cc'=' '
00000000                            			dc.\0 0|or			; whitespace
00000000                            
00000000                            		elseif ('\.cc'>='0')&('\.cc'<='9')
00000000                            			dc.\0 ('\.cc'-'0'+1)|or		; 0-9
00000000                            
00000000                            		elseif ('\.cc'>='a')&('\.cc'<='z')
00000000                            			dc.\0 ('\.cc'-'a'+$2B)|or	; a-z
00000000                            
00000000                            		elseif ('\.cc'>='A')&('\.cc'<='Z')
00000000                            			dc.\0 ('\.cc'-'A'+$B)|or	; A-Z
00000000                            
00000000                            		elseif '\.cc'='!'
00000000                            			dc.\0 $25|or	; !
00000000                            
00000000                            		elseif '\.cc'='?'
00000000                            			dc.\0 $26|or	; ?
00000000                            
00000000                            		elseif '\.cc'='.'
00000000                            			dc.\0 $27|or	; .
00000000                            
00000000                            		elseif '\.cc'=','
00000000                            			dc.\0 $28|or	; ,
00000000                            
00000000                            		elseif '\.cc'=':'
00000000                            			dc.\0 $29|or	; :
00000000                            
00000000                            		elseif '\.cc'=';'
00000000                            			dc.\0 $2A|or	; ;
00000000                            
00000000                            		elseif '\.cc'='^'
00000000                            			dc.\0 $45|or	; ^
00000000                            
00000000                            		elseif '\.cc'='/'
00000000                            			dc.\0 $46|or	; /
00000000                            
00000000                            		elseif '\.cc'='\\'
00000000                            			dc.\0 $47|or	; \
00000000                            
00000000                            		elseif '\.cc'='*'
00000000                            			dc.\0 $48|or	; *
00000000                            
00000000                            		elseif '\.cc'='-'
00000000                            			dc.\0 $49|or	; -
00000000                            
00000000                            		elseif '\.cc'='|'
00000000                            			dc.\0 $4A|or	; _ (wider)
00000000                            
00000000                            		elseif '\.cc'='$'
00000000                            			dc.\0 $4B|or	; $
00000000                            
00000000                            		elseif '\.cc'='%'
00000000                            			dc.\0 $4C|or	; %
00000000                            
00000000                            		elseif '\.cc'='#'
00000000                            			dc.\0 $4D|or	; #
00000000                            
00000000                            		elseif '\.cc'='+'
00000000                            			dc.\0 $4E|or	; +
00000000                            
00000000                            		elseif '\.cc'='}'
00000000                            			dc.\0 $4F|or	; ->
00000000                            
00000000                            		elseif '\.cc'='{'
00000000                            			dc.\0 $50|or	; <-
00000000                            
00000000                            		elseif '\.cc'='@'
00000000                            			dc.\0 $51|or	; @
00000000                            
00000000                            		elseif '\.cc'='_'
00000000                            			dc.\0 $52|or	; _
00000000                            
00000000                            		elseif '\.cc'='('
00000000                            			dc.\0 $53|or	; (
00000000                            
00000000                            		elseif '\.cc'=')'
00000000                            			dc.\0 $54|or	; )
00000000                            
00000000                            		elseif '\.cc'='['
00000000                            			dc.\0 $55|or	; [
00000000                            
00000000                            		elseif '\.cc'=']'
00000000                            			dc.\0 $56|or	; ]
00000000                            
00000000                            		elseif '\.cc'='>'
00000000                            			dc.\0 $57|or	; >
00000000                            
00000000                            		elseif '\.cc'='<'
00000000                            			dc.\0 $58|or	; <
00000000                            
00000000                            		elseif '\.cc'='&'
00000000                            			dc.\0 $59|or	; &
00000000                            
00000000                            		elseif '\.cc'='~'
00000000                            			dc.\0 $5A|or	; ~
00000000                            
00000000                            		elseif '\.cc'="'"
00000000                            			dc.\0 $5B|or	; '
00000000                            
00000000                            		elseif '\.cc'='"'
00000000                            			dc.\0 $5C|or	; "
00000000                            
00000000                            		elseif '\.cc'='='
00000000                            			dc.\0 $5D|or	; =
00000000                            
00000000                            		elseif '\.cc'='`'
00000000                            			dc.\0 $5E|or	; `
00000000                            
00000000                            		else
00000000                            			inform 2,"ASCII value failure: \.cc %d", .cc
00000000                            		endif
00000000                            
00000000                            .lc =		.lc+1
00000000                            	endr
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; tells the Z80 to stop, and waits for it to finish stopping (acquire bus)
00000000                            stopZ80 macro
00000000                            		move.w	#$100,Z80_bus_request	; stop the Z80
00000000                            .loop\@		btst	#0,Z80_bus_request
00000000                            		bne.s	.loop\@			; loop until it says it's stopped
00000000                                endm
00000000                            
00000000                            ; tells the Z80 to start again
00000000                            startZ80 macro
00000000                            		move.w	#0,Z80_bus_request	; start the Z80
00000000                                endm
00000000                            
00000000                            ; waits for YM
00000000                            waitYM        macro	reg
00000000                            .wait\@:	move.b	(\reg),d2
00000000                            		btst	#7,d2
00000000                            		bne.s	.wait\@
00000000                                    endm
00000000                            
00000000                            ; ===========================================================================
00000000                            	rsreset		; set __rs to 0
00000000 =00000000                  cmp_none	rs.l 1	; no data
00000000 =00000004                  cmp_unc		rs.l 1	; uncompressed driver image
00000000 =00000008                  cmp_kos		rs.l 1	; kosinski compressed driver image
00000000 =0000000C                  cmp_comp	rs.l 1	; comper compressed driver image
00000000 =00000010                  cmp_nem		rs.l 1	; nemesis compressed driver image
00000000 =00000014                  cmp_eni		rs.l 1	; enigma compressed driver image
00000000                            
00000000                            ; ===========================================================================
00000000                            incdrv	macro	type, folder, comp
00000000                            \folder	=	drvnum		; equate driver name with it's ID
00000000                            Driver_Folder_\#drvnum	equs "\folder"; get the folder the driver is installed on
00000000                            
00000000                            	dc.l \folder\_dmaon
00000000                            	dc.l \folder\_dmaoff
00000000                            	dc.l \folder\_load
00000000                            	dc.l \folder\_play
00000000                            	dc.l \folder\_update
00000000                            
00000000                            Driver68k_\#drvnum:
00000000                            	dc.w \comp		; set compression mode
00000000                            
00000000                            	if \comp<>cmp_none	; if compression is none, dont include any files
00000000                            	if \comp=cmp_unc	; set size of the driver if uncompressed
00000000                            		dc.w ((DriverZ80_\#drvnum-DriverZ80_End_\#drvnum-4)/4)-1
00000000                            	else			; if not uncompressed, set a pointer to z80 driver
00000000                            		dc.l DriverZ80_\#drvnum
00000000                            	endif
00000000                            	incbin	"\type\/\folder\/drv.68k"; include the actual driver code
00000000                            Driver68k_End_\#drvnum:		; set ending point for the driver (uncompressed only)
00000000                            
00000000                            DriverZ80_\#drvnum:
00000000                            	if \comp=cmp_unc	; set size of the driver if uncompressed
00000000                            		dc.w ((DriverZ80_\#drvnum-DriverZ80_End_\#drvnum-4)/4)-1
00000000                            	endif
00000000                            	incbin	"\type\/\folder\/drv.z80"; include the actual driver code
00000000                            DriverZ80_End_\#drvnum:		; set ending point for the driver (uncompressed only)
00000000                            	endif
00000000                            
00000000                            	include	"\type\/\folder\/code.asm"; finally include play, load and update code
00000000                            
00000000                            drvnum	=	drvnum+4	; next driver ID
00000000                                endm
00000000                            
00000000                            ; ===========================================================================
00000000                            ; following macros are all about including specific array's to driver images
00000000                            ; and specific data.
00000000                            drvimg	macro
00000000                            rvar	= 0			; reset driver ID
00000000                            	rept	drvnum/4	; do for all installed drivers
00000000                            		dc.l Driver68k_\#rvar; set pointer to driver data
00000000                            
00000000                            rvar	= rvar+4		; next driver
00000000                            	endr
00000000                                endm
00000000                            ; ===========================================================================
00000000                            ; Driver type definition
00000000                            		rsset 0
00000000 =00000000                  TYPE_NULL	rs.w 1
00000000 =00000002                  TYPE_SMPS	rs.w 1
00000000 =00000004                  TYPE_GEMS	rs.w 1
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_end =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A11100                  Z80_bus_request =		$A11100
00000000 =00A11200                  Z80_reset =			$A11200
00000000                            
00000000 =00A130F1                  SRAM_access =			$A130F1
00000000 =00A14000                  Security_addr =			$A14000
00000000                            ; ===========================================================================
00000000                            ; I/O Area
00000000 =00A10001                  HW_Version =			$A10001
00000000 =00A10003                  HW_Port_1_Data =		$A10003
00000000 =00A10005                  HW_Port_2_Data =		$A10005
00000000 =00A10007                  HW_Expansion_Data =		$A10007
00000000 =00A10009                  HW_Port_1_Control =		$A10009
00000000 =00A1000B                  HW_Port_2_Control =		$A1000B
00000000 =00A1000D                  HW_Expansion_Control =		$A1000D
00000000 =00A1000F                  HW_Port_1_TxData =		$A1000F
00000000 =00A10011                  HW_Port_1_RxData =		$A10011
00000000 =00A10013                  HW_Port_1_SCtrl =		$A10013
00000000 =00A10015                  HW_Port_2_TxData =		$A10015
00000000 =00A10017                  HW_Port_2_RxData =		$A10017
00000000 =00A10019                  HW_Port_2_SCtrl =		$A10019
00000000 =00A1001B                  HW_Expansion_TxData =		$A1001B
00000000 =00A1001D                  HW_Expansion_RxData =		$A1001D
00000000 =00A1001F                  HW_Expansion_SCtrl =		$A1001F
00000000                            
00000000                            ; ===========================================================================
00000000                            ; VDP addresses
00000000 =00C00000                  VDP_data_port =			$C00000
00000000 =00C00004                  VDP_control_port =		$C00004
00000000 =00C00011                  PSG_input =			$C00011
00000000                            ; ===========================================================================
00000000                            	rsset	$FFFF0000
00000000 =FFFF0002                  Z80music	equ __rs+2	; if z80 driver, this is the address of the music file.
00000000 =FFFF0000                  Driver68K	rs.b $8000	; 68k driver ROM. if Z80 driver, this is rte
00000000 =FFFF8000                  Drv68Kmem	rs.b 0		; memory for the 68k driver.
00000000 =FFFF8000                  NemDecBuffer	rs.b $1C00	; used when decompressing Nemesis format sound drivers
00000000 =FFFF9C00                  HBlankRAM	rs.b $400	; code to run in HBlank. Can also be used as extra RAM for sound driver
00000000                            		rs.l 3		; stack overflow area
00000000 =FFFFA00C                  StackUflowRAM	rs.l 1		; stack overflow area
00000000 =FFFFA010                  StackStart	rs.b $100	; 68k stack
00000000 =FFFFA110                  Stack		rs.b 0		; 68k stack pointer
00000000 =FFFFA110                  StackOflowRAM	rs.l 4		; stack underflow area
00000000 =FFFFA120                  MainPalette	rs.b $80	; current palette of the program
00000000 =FFFFA1A0                  VScrollRAM	rs.b 80		; Vertical scrolling RAM
00000000 =FFFFA1F0                  ActiveChnLast	rs.w 1		; active sound channels for last frame
00000000 =FFFFA1F2                  ActiveChn	rs.w 1		; currently active sound channels. Bits 0-5 = FM1-FM6, Bits 6-9 = PSG1-PSG3, Bit 10 = DAC
00000000 =FFFFA1F4                  MusSelection	rs.w 1		; current song selection
00000000 =FFFFA1F6                  MusPlaying	rs.w 1		; current song playing
00000000 =FFFFA1F8                  DMAlen		rs.w 1		; current fake DMA mode
00000000 =FFFFA1FA                  DisplayList	rs.l 1		; address of display data to load
00000000 =FFFFA1FE                  LoadedDriver	rs.b 1		; currently loaded sound driver
00000000 =FFFFA1FF                  DriverType	rs.b 1		; the type of the sound driver loaded
00000000 =FFFFA200                  HWVersion	rs.b 1		; determines the region of the machine
00000000 =FFFFA202                  VintTime	rs.w 1		; V-int timer in frames
00000000 =FFFFA204                  Ctrl1Held	rs.b 1		; controller 1 held buttons
00000000 =FFFFA205                  Ctrl1Press	rs.b 1		; controller 1 pressed buttons
00000000 =FFFFA206                  Ctrl2Held	rs.b 1		; controller 2 held buttons
00000000 =FFFFA207                  Ctrl2Press	rs.b 1		; controller 2 pressed buttons
00000000 =FFFFA208                  Ctrl0Held	rs.b 1		; controller 0 held buttons
00000000 =FFFFA209                  Ctrl0Press	rs.b 1		; controller 0 pressed buttons
00000000 =FFFFA20A                  ChanDat		rs.b 8+(16*6)	; total amount of space for channel data
00000000                            
00000000                            ; SMPS Channel data
00000000                            	rsset ChanDat
00000000 =FFFFA20A                  sTempo		rs.b 1		; tempo of the driver
00000000 =FFFFA20B                  sTickMul	rs.b 1		; tick multiplier of the driver
00000000                            
00000000                            ; format:
00000000                            ; 0 - tick mul
00000000                            ; 1 - instrument
00000000                            ; 2 - volume
00000000                            ; 3 - timeout
00000000                            ; 4-5 - freq
00000000                            ; 6-7 - freq + mod + det
00000000                            
00000000 =FFFFA20C                  sPSG3		rs.b 8
00000000 =FFFFA214                  sPSG2		rs.b 8
00000000 =FFFFA21C                  sPSG1		rs.b 8
00000000 =FFFFA224                  sFM6		rs.b 8
00000000 =FFFFA22C                  sFM5		rs.b 8
00000000 =FFFFA234                  sFM4		rs.b 8
00000000 =FFFFA23C                  sFM3		rs.b 8
00000000 =FFFFA244                  sFM2		rs.b 8
00000000 =FFFFA24C                  sFM1		rs.b 8
00000000 =FFFFA254                  sDAC1		rs.b 8
00000000 =FFFFA25C                  sDAC2		rs.b 8
00000000                            
00000000                            ; GEMS Channel data
00000000                            	rsset ChanDat
00000000 =FFFFA20A                  gTempo		rs.w 1		; current bpm
00000000 =FFFFA20C                  gVolume		rs.b 1		; master volume
00000000 =FFFFA20D                  gCurSeq		rs.b 1		; sequence number (used in GEMS manipulate mode!)
00000000 =FFFFA20E                  gSeq		rs.b 1		; current sequence(!)
00000000 =FFFFA20F                  gFlags		rs.b 1		; channel flags
00000000 =FFFFA210                  gPrio		rs.b 1		; current priority
00000000 =FFFFA211                  gPatch		rs.b 1		; current patch id
00000000 =FFFFA212                  gVol		rs.b 1		; how loud the channel is
00000000 =FFFFA214                  gTime		rs.w 1		; timer for next event
00000000 =FFFFA216                  gNote		rs.b 1		; doesnt seem to be possible ;(
00000000                            		rs.b 8*16	; do the same for the rest of the channels
00000000                            
00000000 =FFFFA298                  gMutedChs	rs.w 1		; muted channels list
00000000 =FFFFA29A                  gSustain	rs.w 1		; sustained channels list
00000000 =FFFFA29C                  gCursor		rs.b 1		; current cursor position for manipulate menu
00000000                            ; ===========================================================================
00000000 =00000000                  pal60mod =	0	; Set to 1 if you want to enable 60hz PAL mode for all sound drivers (note; some may not correctly play music)
00000000                            			; NOTE: Drivers are modified in order to support this feature.
00000000 =00000000                  extremeDMA =	0	; set to 1 to unlock extreme ($4000 bytes!!!) DMA mode.
00000000                            			; You must acknowledge however, that most drivers can not cope with this and it will cause all kinds of crazy glitches.
00000000                            			; this is nonstandard and no driver is designed to be able to deal with this.
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                                 opt l-    ; because yes GEMS.
00000000                            
00000000                            fix	macro n
00000000                            \n =	offset(.\n)+Driver68K
00000000                                endm
00000000                            
00000000                            ptrto	macro off
00000000                            .z =	\off
00000000                            .x	equs "\off"
00000000                            	dc.b '\.x = $\$.z', $0A
00000000                            kek\@
00000000                                endm
00000000                            
00000000 =00A11100                  BUSREQ         EQU  $A11100             ; Z80 bus request control register
00000000 =00A11200                  BUSRES         EQU  $A11200             ; Z80 reset control register
00000000 =00A00000                  Z80RAM         EQU  $A00000             ; Z80 RAM in 68k addr space
00000000 =00A01B20                  Z80DMABLOCK    EQU  $A01b20             ; Z80 can't read 68k space if set
00000000 =00A01B21                  Z80DMAUNSAFE   EQU  $A01b21             ; Z80 might be reading 68k space if set
00000000 =00A01B22                  Z80MBOXBASE    EQU  $A01b22             ; Z80 mailbox base addr
00000000                            
00000000                            m SECTION OBJ(Driver68K)
00000000 4E75                            rts
00000002                            
00000002                            ********************************** Z80 CONTROL ROUTINES ********************************
00000002                            
00000002                            
00000002                            *
00000002                            * gemsdmastart - tell the z80 we want to do dma
00000002                            *
00000002                            
00000002                            .gemsdmastart
00000002                            
00000002                            
00000002 40E7                                 move.w    sr,-(SP)
00000004 007C 0700                            or.w #$0700,sr      ; disable ints
00000008                            
00000008                            dsretry
00000008 33FC 0100 00A1 1100                  move.w    #$100,BUSREQ        ; Z80 bus request on
00000010 0839 0000 00A1 1100        dslp      btst.b    #0,BUSREQ      ; spin on bus grant
00000018 66F6                                 bne.s     dslp
0000001A                            
0000001A 13FC 0001 00A0 1B20                  move.b    #1,Z80DMABLOCK      ; set dma block semaphore
00000022 1039 00A0 1B21                       move.b    Z80DMAUNSAFE,d0          ; get unsafe flag
00000028                            
00000028 33FC 0000 00A1 1100                  move.w    #$0,BUSREQ          ; Z80 bus request off
00000030                            
00000030 4A00                                 tst.b     d0             ; was it safe?
00000032 6700                                 beq.s     dsok           ; yes
00000034 7044                                 moveq     #68,d0              ; no, wait > 59 microsecs (ms*8[states/ms]/10[dbra])
00000036 51C8 FFFE                  dswait         dbra d0,dswait      ; wait
0000003A 60CC                                 bra.s     dsretry
0000003C                            dsok
0000003C                            
0000003C 46DF                                 move.w    (sp)+,sr
0000003E 4E75                                 rts
00000040                            
00000040                            *
00000040                            * gemsdmaend - tell the z80 we're done with dma
00000040                            *
00000040                            
00000040                            .gemsdmaend
00000040                            
00000040 40E7                                 move.w    sr,-(SP)
00000042 007C 0700                            or.w #$0700,sr      ; disable ints
00000046                            
00000046 4EB9 0000 0000                       jsr  .gemsholdz80
0000004C 13FC 0000 00A0 1B20                  move.b    #0,Z80DMABLOCK
00000054 4EB9 0000 0000                       jsr  .gemsreleasez80
0000005A                            
0000005A 46DF                                 move.w    (sp)+,sr
0000005C 4E75                                 rts
0000005E                            
0000005E                            *
0000005E                            * gemsholdz80 - take the z80 bus
0000005E                            *
0000005E                            
0000005E                            .gemsholdz80
0000005E                            
0000005E 33FC 0100 00A1 1100                  move.w    #$100,BUSREQ        ; Z80 bus request on
00000066 0839 0000 00A1 1100        hzlp      btst.b    #0,BUSREQ      ; spin on bus grant
0000006E 66F6                                 bne.s     hzlp
00000070                            
00000070 4E75                                 rts
00000072                            
00000072                            *
00000072                            * gemsreleasez80 - release the z80 bus
00000072                            *
00000072                            
00000072                            .gemsreleasez80
00000072                            
00000072 33FC 0000 00A1 1100                  move.w    #$0,BUSREQ          ; Z80 bus request off
0000007A                            
0000007A 4E75                                 rts
0000007C                            
0000007C                            *
0000007C                            * gemsloadz80 - bus request the z80 and download the code between Z80CODE and Z80END
0000007C                            * NATSUMI: Do not load GEMS here; we do it in core
0000007C                            
0000007C                            .gemsloadz80
0000007C 4E75                                 rts
0000007E                            
0000007E                            *
0000007E                            * gemsstartz80 - release the z80 bus and reset the z80 (use after loadz80)
0000007E                            *
0000007E                            
0000007E                            .gemsstartz80
0000007E                            
0000007E 40E7                                 move.w    sr,-(SP)
00000080 007C 0700                            or.w #$0700,sr      ; disable ints
00000084                            
00000084 33FC 0000 00A1 1200                  move.w    #$0,BUSRES          ; Z80 bus reset on (assumes buss rquest on)
0000008C 700F                                 move.l    #15,d0              ; a loop > 26 uS
0000008E 5380                       szlp      subq.l    #1,d0
00000090 66FC                                 bne.s     szlp
00000092 33FC 0000 00A1 1100                  move.w    #$0,BUSREQ          ; Z80 bus request off
0000009A 33FC 0100 00A1 1200                  move.w    #$100,BUSRES        ; Z80 bus reset off
000000A2                            
000000A2 46DF                                 move.w    (sp)+,sr
000000A4 4E75                                 rts
000000A6                            
000000A6                            *
000000A6                            * stdsetup - setup these regs:
000000A6                            *  d1 - the old value of wptr
000000A6                            *  a0 - Z80RAM+$36(wptr)
000000A6                            *  a1 - Z80RAM+$1B40(fifo)
000000A6                            * also save the sr, turns off ints, and holds the z80
000000A6                            *
000000A6                            stdsetup
000000A6 205F                                 move.l    (sp)+,a0       ; get the return addr
000000A8 4E56 0000                            link a6,#0               ; set up the link
000000AC 48E7 4040                            movem.l   d1/a1,-(sp)         ; save some regs
000000B0 40E7                                 move.w    sr,-(SP)
000000B2                            
000000B2 2F08                                 move.l    a0,-(sp)       ; push the return addr
000000B4                            
000000B4 41F9 00A0 0036                       lea  Z80RAM+$36,a0       ; a0 points to wptr
000000BA 43F9 00A0 1B40                       lea  Z80RAM+$1B40,a1          ; a1 points to fifo
000000C0                            
000000C0 007C 0700                            or.w #$0700,sr      ; disable ints
000000C4                            
000000C4 33FC 0100 00A1 1100                  move.w    #$100,BUSREQ        ; Z80 bus request on
000000CC 0839 0000 00A1 1100        sslp      btst.b    #0,BUSREQ      ; spin on bus grant
000000D4 66F6                                 bne.s     sslp
000000D6                            
000000D6 1210                                 move.b    (a0),d1             ; d1 is write index into fifo
000000D8 4881                                 ext.w     d1             ; extend to 16 bits
000000DA                            
000000DA 4E75                                 rts
000000DC                            
000000DC                            *
000000DC                            * stdcleanup - clean up after stdsetup - JMP here only!!!
000000DC                            *
000000DC                            stdcleanup
000000DC 33FC 0000 00A1 1100                  move.w    #$0,BUSREQ          ; Z80 bus request off
000000E4 46DF                                 move.w    (sp)+,sr
000000E6 4CDF 0202                            movem.l   (sp)+,d1/a1
000000EA 4E5E                                 unlk a6
000000EC 4E75                                 rts
000000EE                            
000000EE                            *
000000EE                            * stdcmdwrite - write a command to the z80(-1, d0), assuming:
000000EE                            *  d0 - the byte
000000EE                            *  d1 - the value of wptr
000000EE                            *  a0 - Z80RAM+$36(wptr)
000000EE                            *  a1 - Z80RAM+$1B40(fifo)
000000EE                            *
000000EE                            stdcmdwrite
000000EE 13BC 00FF 1000                       move.b    #-1,(a1,d1.w)          ; write into fifo   ; NATSUMI: Fucking GEMS devs, this is no good. removed 0,
000000F4                            
000000F4 5201                                 addq.b    #1,d1               ; increment write index mod 64
000000F6 0201 003F                            andi.b    #$3F,d1
000000FA                            * fall through to stdwrite
000000FA                            
000000FA                            *
000000FA                            * stdwrite - write a byte to the z80, assuming:
000000FA                            *  d0 - the byte
000000FA                            *  d1 - the value of wptr
000000FA                            *  a0 - Z80RAM+$36(wptr)
000000FA                            *  a1 - Z80RAM+$1B40(fifo)
000000FA                            *
000000FA                            stdwrite
000000FA 1380 1000                            move.b    d0,(a1,d1.w)      ; write into fifo   ; NATSUMI: Fucking GEMS devs, this is no good. removed 0,
000000FE                            
000000FE 5201                                 addq.b    #1,d1               ; increment write index mod 64
00000100 0201 003F                            andi.b    #$3F,d1
00000104 1081                                 move.b    d1,(a0)             ; write it back
00000106                            
00000106 4E75                                 rts
00000108                            
00000108                            *
00000108                            * gemsputcbyte - write a byte into the z80's incoming command fifo
00000108                            *
00000108                            * stack frame after the link:
00000108                            *    +------------------+
00000108                            *    +    byte(long)    +  000000bb
00000108                            *  +8     +------------------+
00000108                            *    +  return address  +
00000108                            *  +4     +------------------+
00000108                            *    +    previous a6   +
00000108                            *  a6-> +------------------+
00000108                            
00000108                            .gemsputcbyte
00000108 4EBA FF9C                            jsr  stdsetup
0000010C                            
0000010C 202E 0008                            move.l    8(a6),d0       ; get command byte into d0
00000110 4EBA FFE8                            jsr  stdwrite
00000114                            
00000114 4EFA FFC6                            jmp  stdcleanup
00000118                            
00000118                            *
00000118                            * gemsputptr - utility to send a 24-bit ptr to the z80's incoming command fifo
00000118                            *
00000118                            * stack frame after the link:
00000118                            *    +------------------+
00000118                            *    +     ptr(long)    +  00pppppp
00000118                            *  +8     +------------------+
00000118                            *    +  return address  +
00000118                            *  +4     +------------------+
00000118                            *    +    previous a6   +
00000118                            *  a6-> +------------------+
00000118                            
00000118                            .gemsputptr
00000118 4EBA FF8C                            jsr  stdsetup
0000011C                            
0000011C 202E 0008                            move.l    8(a6),d0       ; get ptr into d0
00000120 4EBA FFD8                            jsr  stdwrite
00000124                            
00000124 E080                                 asr.l     #8,d0
00000126 4EBA FFD2                            jsr  stdwrite
0000012A                            
0000012A E080                                 asr.l     #8,d0
0000012C 4EBA FFCC                            jsr  stdwrite
00000130                            
00000130 4EFA FFAA                            jmp  stdcleanup
00000134                            
00000134                            *
00000134                            * gemsinit - initialize the z80 and send pointers to data in 68000 space
00000134                            *
00000134                            * stack frame after the link:
00000134                            *    +------------------+
00000134                            *    +   sampbankptr    +  00pppppp
00000134                            *  +20    +------------------+
00000134                            *    +    seqbankptr    +  00pppppp
00000134                            *  +16    +------------------+
00000134                            *    +    envbankptr    +  00pppppp
00000134                            *  +12    +------------------+
00000134                            *    +   patchbankptr   +  00pppppp
00000134                            *  +8     +------------------+
00000134                            *    +  return address  +
00000134                            *  +4     +------------------+
00000134                            *    +    previous a6   +
00000134                            *  a6-> +------------------+
00000134                            
00000134                            .gemsinit
00000134 4E56 0000                            link a6,#0
00000138 4EBA FF42                            jsr  .gemsloadz80
0000013C 4EBA FF40                            jsr  .gemsstartz80
00000140                            
00000140 70FF                                 moveq     #-1,d0
00000142 2F00                                 move.l    d0,-(A7)
00000144 4EBA FFC2                            jsr  .gemsputcbyte
00000148 700B                                 moveq     #11,d0
0000014A 2F00                                 move.l    d0,-(A7)
0000014C 4EBA FFBA                            jsr  .gemsputcbyte
00000150                            
00000150 2F2E 0008                            move.l    8(A6),-(A7)
00000154 4EBA FFC2                            jsr  .gemsputptr
00000158 2F2E 000C                            move.l    12(A6),-(A7)
0000015C 4EBA FFBA                            jsr  .gemsputptr
00000160 2F2E 0010                            move.l    16(A6),-(A7)
00000164 4EBA FFB2                            jsr  .gemsputptr
00000168 2F2E 0014                            move.l    20(A6),-(A7)
0000016C 4EBA FFAA                            jsr  .gemsputptr
00000170 4E5E                                 unlk a6
00000172                            
00000172 4E75                                 rts
00000174                            
00000174                            *
00000174                            * gemsstartsong - start a song by #
00000174                            *
00000174                            * stack frame after the link:
00000174                            *    +------------------+
00000174                            *    +   song #(long)   +  000000ss
00000174                            *  +8     +------------------+
00000174                            *    +  return address  +
00000174                            *  +4     +------------------+
00000174                            *    +    previous a6   +
00000174                            *  a6-> +------------------+
00000174                            
00000174                            .gemsstartsong
00000174 4EBA FF30                            jsr  stdsetup
00000178                            
00000178 7010                                 moveq     #16,d0
0000017A                            
0000017A                            com1arg
0000017A 4EBA FF72                            jsr  stdcmdwrite
0000017E                            
0000017E 202E 0008                            move.l    8(A6),d0
00000182 4EBA FF76                            jsr  stdwrite
00000186                            
00000186 4EFA FF54                            jmp  stdcleanup
0000018A                            
0000018A                            *
0000018A                            * gemsstopsong - stop a song by #
0000018A                            *
0000018A                            * stack frame after the link:
0000018A                            *    +------------------+
0000018A                            *    +   song #(long)   +  000000ss
0000018A                            *  +8     +------------------+
0000018A                            *    +  return address  +
0000018A                            *  +4     +------------------+
0000018A                            *    +    previous a6   +
0000018A                            *  a6-> +------------------+
0000018A                            
0000018A                            .gemsstopsong
0000018A 4EBA FF1A                            jsr  stdsetup
0000018E                            
0000018E 7012                                 moveq     #18,d0
00000190 60E8                                 bra.s     com1arg
00000192                            
00000192                            *
00000192                            * gemssettempo - set tempo
00000192                            *
00000192                            * stack frame after the link:
00000192                            *    +------------------+
00000192                            *    +   tempo (long)   +  000000tt
00000192                            *  +8     +------------------+
00000192                            *    +  return address  +
00000192                            *  +4     +------------------+
00000192                            *    +    previous a6   +
00000192                            *  a6-> +------------------+
00000192                            
00000192                            .gemssettempo
00000192 4EBA FF12                            jsr  stdsetup
00000196                            
00000196 7005                                 moveq     #5,d0
00000198 60E0                                 bra.s     com1arg
0000019A                            
0000019A                            *
0000019A                            * gemspauseall - pause all songs currently running
0000019A                            *
0000019A                            * stack frame after the link:
0000019A                            *    +------------------+
0000019A                            *    +  return address  +
0000019A                            *  +4     +------------------+
0000019A                            *    +    previous a6   +
0000019A                            *  a6-> +------------------+
0000019A                            
0000019A                            .gemspauseall
0000019A 4EBA FF0A                            jsr  stdsetup
0000019E                            
0000019E 700C                                 moveq     #12,d0
000001A0 4EBA FF4C                            jsr  stdcmdwrite
000001A4                            
000001A4 4EFA FF36                            jmp  stdcleanup
000001A8                            
000001A8                            *
000001A8                            * gemsresumeall - resume all songs currently paused
000001A8                            *
000001A8                            * stack frame after the link:
000001A8                            *    +------------------+
000001A8                            *    +  return address  +
000001A8                            *  +4     +------------------+
000001A8                            *    +    previous a6   +
000001A8                            *  a6-> +------------------+
000001A8                            
000001A8                            .gemsresumeall
000001A8 4EBA FEFC                            jsr  stdsetup
000001AC                            
000001AC 700D                                 moveq     #13,d0
000001AE 4EBA FF3E                            jsr  stdcmdwrite
000001B2                            
000001B2 4EFA FF28                            jmp  stdcleanup
000001B6                            
000001B6                            
000001B6                            *
000001B6                            * gemsstopall - stop all songs currently playing, reset
000001B6                            *
000001B6                            * stack frame after the link:
000001B6                            *    +------------------+
000001B6                            *    +  return address  +
000001B6                            *  +4     +------------------+
000001B6                            *    +    previous a6   +
000001B6                            *  a6-> +------------------+
000001B6                            
000001B6                            .gemsstopall
000001B6 4EBA FEEE                            jsr  stdsetup
000001BA                            
000001BA 7016                                 moveq     #22,d0
000001BC 4EBA FF30                            jsr  stdcmdwrite
000001C0                            
000001C0 4EFA FF1A                            jmp  stdcleanup
000001C4                            
000001C4                            
000001C4                            *
000001C4                            * gemslockchannel - lock a sound effects channel
000001C4                            *
000001C4                            * stack frame after the link:
000001C4                            *    +------------------+
000001C4                            *    +  channel (long)  +  000000cc
000001C4                            *  +8     +------------------+
000001C4                            *    +  return address  +
000001C4                            *  +4     +------------------+
000001C4                            *    +    previous a6   +
000001C4                            *  a6-> +------------------+
000001C4                            
000001C4                            .gemslockchannel
000001C4 4EBA FEE0                            jsr  stdsetup
000001C8                            
000001C8 701C                                 moveq     #28,d0
000001CA 60AE                                 bra.s     com1arg
000001CC                            
000001CC                            *
000001CC                            * gemsunlockchannel - unlock a sound effects channel
000001CC                            *
000001CC                            * stack frame after the link:
000001CC                            *    +------------------+
000001CC                            *    +  channel (long)  +  000000cc
000001CC                            *  +8     +------------------+
000001CC                            *    +  return address  +
000001CC                            *  +4     +------------------+
000001CC                            *    +    previous a6   +
000001CC                            *  a6-> +------------------+
000001CC                            
000001CC                            .gemsunlockchannel
000001CC 4EBA FED8                            jsr  stdsetup
000001D0                            
000001D0 701D                                 moveq     #29,d0
000001D2 60A6                                 bra.s     com1arg
000001D4                            
000001D4                            *
000001D4                            * gemsnatmastervol - set master volume
000001D4                            
000001D4                            * stack frame after the link:
000001D4                            *    +------------------+
000001D4                            *    +  volume (long)  +  000000vv
000001D4                            *  +8     +------------------+
000001D4                            *    +  return address  +
000001D4                            *  +4     +------------------+
000001D4                            *    +    previous a6   +
000001D4                            *  a6-> +------------------+
000001D4                            
000001D4                            .gemsnatmastervol
000001D4 4EBA FED0                            jsr  stdsetup
000001D8                            
000001D8 7020                                 moveq     #32,d0
000001DA 609E                                 bra.s     com1arg
000001DC                            
000001DC                            *
000001DC                            * gemsprogchange - program change
000001DC                            *
000001DC                            * stack frame after the link:
000001DC                            *    +------------------+
000001DC                            *    +    prog (long)   +  000000pp
000001DC                            *  +12    +------------------+
000001DC                            *    +  channel (long)  +  000000cc
000001DC                            *  +8     +------------------+
000001DC                            *    +  return address  +
000001DC                            *  +4     +------------------+
000001DC                            *    +    previous a6   +
000001DC                            *  a6-> +------------------+
000001DC                            
000001DC                            .gemsprogchange
000001DC 4EBA FEC8                            jsr  stdsetup
000001E0                            
000001E0 7002                                 moveq     #2,d0
000001E2                            
000001E2                            com2arg
000001E2 4EBA FF0A                            jsr  stdcmdwrite
000001E6                            
000001E6 202E 0008                            move.l    8(A6),d0
000001EA 4EBA FF0E                            jsr  stdwrite
000001EE                            
000001EE 202E 000C                            move.l    12(A6),d0
000001F2 4EBA FF06                            jsr  stdwrite
000001F6                            
000001F6 4EFA FEE4                            jmp  stdcleanup
000001FA                            
000001FA                            *
000001FA                            * gemsnoteon - turn note on
000001FA                            *
000001FA                            * stack frame after the link:
000001FA                            *    +------------------+
000001FA                            *    +    note (long)   +  000000nn
000001FA                            *  +12    +------------------+
000001FA                            *    +  channel (long)  +  000000cc
000001FA                            *  +8     +------------------+
000001FA                            *    +  return address  +
000001FA                            *  +4     +------------------+
000001FA                            *    +    previous a6   +
000001FA                            *  a6-> +------------------+
000001FA                            
000001FA                            .gemsnoteon
000001FA 4EBA FEAA                            jsr  stdsetup
000001FE                            
000001FE 7000                                 moveq     #0,d0
00000200 60E0                                 bra.s     com2arg
00000202                            
00000202                            *
00000202                            * gemsnoteoff - turn note off
00000202                            *
00000202                            * stack frame after the link:
00000202                            *    +------------------+
00000202                            *    +    note (long)   +  000000nn
00000202                            *  +12    +------------------+
00000202                            *    +  channel (long)  +  000000cc
00000202                            *  +8     +------------------+
00000202                            *    +  return address  +
00000202                            *  +4     +------------------+
00000202                            *    +    previous a6   +
00000202                            *  a6-> +------------------+
00000202                            
00000202                            .gemsnoteoff
00000202 4EBA FEA2                            jsr  stdsetup
00000206                            
00000206 7001                                 moveq     #1,d0
00000208 60D8                                 bra.s     com2arg
0000020A                            
0000020A                            *
0000020A                            * gemssetprio - set channel priority
0000020A                            *
0000020A                            * stack frame after the link:
0000020A                            *    +------------------+
0000020A                            *    + priority (long)  +  000000pp
0000020A                            *  +12    +------------------+
0000020A                            *    +  channel (long)  +  000000cc
0000020A                            *  +8     +------------------+
0000020A                            *    +  return address  +
0000020A                            *  +4     +------------------+
0000020A                            *    +    previous a6   +
0000020A                            *  a6-> +------------------+
0000020A                            
0000020A                            .gemssetprio
0000020A 4EBA FE9A                            jsr  stdsetup
0000020E                            
0000020E 7014                                 moveq     #20,d0
00000210 60D0                                 bra.s     com2arg
00000212                            
00000212                            *
00000212                            * gemspitchbend - pitch bend
00000212                            *
00000212                            * stack frame after the link:
00000212                            *    +------------------+
00000212                            *    +  bend amt (long) +  0000bbbb  signed 8-bit frac is # semi-tones
00000212                            *  +12    +------------------+
00000212                            *    +  channel (long)  +  000000cc
00000212                            *  +8     +------------------+
00000212                            *    +  return address  +
00000212                            *  +4     +------------------+
00000212                            *    +    previous a6   +
00000212                            *  a6-> +------------------+
00000212                            
00000212                            .gemspitchbend
00000212 4EBA FE92                            jsr  stdsetup
00000216                            
00000216 7005                                 moveq     #5,d0
00000218 4EBA FED4                            jsr  stdcmdwrite
0000021C                            
0000021C 202E 0008                            move.l    8(A6),d0
00000220 4EBA FED8                            jsr  stdwrite
00000224                            
00000224 202E 000C                            move.l    12(A6),d0
00000228 4EBA FED0                            jsr  stdwrite
0000022C                            
0000022C E080                                 asr.l     #8,d0
0000022E 4EBA FECA                            jsr  stdwrite
00000232                            
00000232 4EFA FEA8                            jmp  stdcleanup
00000236                            
00000236                            *
00000236                            * gemssetenv - connect channel to envelope(trigger it if not in retrig mode)
00000236                            *
00000236                            * stack frame after the link:
00000236                            *    +------------------+
00000236                            *    +    env (long)    +  000000ee
00000236                            *  +12    +------------------+
00000236                            *    +  channel (long)  +  000000cc
00000236                            *  +8     +------------------+
00000236                            *    +  return address  +
00000236                            *  +4     +------------------+
00000236                            *    +    previous a6   +
00000236                            *  a6-> +------------------+
00000236                            
00000236                            .gemssetenv
00000236 4EBA FE6E                            jsr  stdsetup
0000023A                            
0000023A 7006                                 moveq     #6,d0
0000023C 60A4                                 bra.s     com2arg
0000023E                            
0000023E                            *
0000023E                            * gemsretrigenv - turn on retrig mode if val is 80h, off if 0h
0000023E                            *
0000023E                            * stack frame after the link:
0000023E                            *    +------------------+
0000023E                            *    +    val (long)    +  000000vv
0000023E                            *  +12    +------------------+
0000023E                            *    +  channel (long)  +  000000cc
0000023E                            *  +8     +------------------+
0000023E                            *    +  return address  +
0000023E                            *  +4     +------------------+
0000023E                            *    +    previous a6   +
0000023E                            *  a6-> +------------------+
0000023E                            
0000023E                            .gemsretrigenv
0000023E 4EBA FE66                            jsr  stdsetup
00000242                            
00000242 7007                                 moveq     #7,d0
00000244 609C                                 bra.s     com2arg
00000246                            
00000246                            *
00000246                            * gemssustain - turn on sustain mode if val is 80h, off if 0h
00000246                            *
00000246                            * stack frame after the link:
00000246                            *    +------------------+
00000246                            *    +    val (long)    +  000000vv
00000246                            *  +12    +------------------+
00000246                            *    +  channel (long)  +  000000cc
00000246                            *  +8     +------------------+
00000246                            *    +  return address  +
00000246                            *  +4     +------------------+
00000246                            *    +    previous a6   +
00000246                            *  a6-> +------------------+
00000246                            
00000246                            .gemssustain
00000246 4EBA FE5E                            jsr  stdsetup
0000024A                            
0000024A 700E                                 moveq     #14,d0
0000024C 6094                                 bra.s     com2arg
0000024E                            
0000024E                            *
0000024E                            * gemsmute - mute song/channel if val is 1, enable if 0
0000024E                            *
0000024E                            * stack frame after the link:
0000024E                            *    +------------------+
0000024E                            *    +    val (long)    +  000000vv
0000024E                            *  +16    +------------------+
0000024E                            *    +  channel (long)  +  000000cc
0000024E                            *  +12    +------------------+
0000024E                            *    +    song (long)   +  000000ss
0000024E                            *  +8     +------------------+
0000024E                            *    +  return address  +
0000024E                            *  +4     +------------------+
0000024E                            *    +    previous a6   +
0000024E                            *  a6-> +------------------+
0000024E                            
0000024E                            .gemsmute
0000024E 4EBA FE56                            jsr  stdsetup
00000252                            
00000252 7017                                 moveq     #23,d0
00000254                            com3arg
00000254 4EBA FE98                            jsr  stdcmdwrite
00000258                            
00000258 202E 0008                            move.l    8(A6),d0
0000025C 4EBA FE9C                            jsr  stdwrite
00000260                            
00000260 202E 000C                            move.l    12(A6),d0
00000264 4EBA FE94                            jsr  stdwrite
00000268                            
00000268 202E 0010                            move.l    16(A6),d0
0000026C 4EBA FE8C                            jsr  stdwrite
00000270                            
00000270 4EFA FE6A                            jmp  stdcleanup
00000274                            
00000274                            
00000274                            *
00000274                            * gemsstorembox - store val(0..127) in mailbox(0..29)
00000274                            *
00000274                            * stack frame after the link:
00000274                            *    +------------------+
00000274                            *    +    val (long)    +  000000vv
00000274                            *  +12    +------------------+
00000274                            *    +  mailbox (long)  +  000000mm
00000274                            *  +8     +------------------+
00000274                            *    +  return address  +
00000274                            *  +4     +------------------+
00000274                            *    +    previous a6   +
00000274                            *  a6-> +------------------+
00000274                            
00000274                            .gemsstorembox
00000274                            
00000274 4EBA FE30                            jsr  stdsetup
00000278                            
00000278 701B                                 moveq     #27,d0
0000027A 6000 FF66                            bra  com2arg
0000027E                            
0000027E                            *
0000027E                            * gemsreadmbox - read a val(0..127) from a mailbox(0..29)
0000027E                            *
0000027E                            * stack frame at the top of the proc:
0000027E                            *    +------------------+
0000027E                            *    +  mailbox (long)  +  000000mm
0000027E                            *  +4     +------------------+
0000027E                            *    +  return address  +
0000027E                            *  a7-> +------------------+
0000027E                            *
0000027E                            * returns value in d0
0000027E                            
0000027E                            .gemsreadmbox
0000027E                            
0000027E 40E7                                 move.w    sr,-(SP)
00000280 007C 0700                            or.w #$0700,sr      ; disable ints
00000284                            
00000284 4EBA FDD8                            jsr  .gemsholdz80
00000288 7000                                 moveq     #0,d0
0000028A 102F 000B                            move.b    11(a7),d0
0000028E 41F9 00A0 1B22                       lea  Z80MBOXBASE,a0
00000294 1030 0000                            move.b    0(a0,d0.w),d0   ; NATSUMI: Fucking GEMS devs, how you get dx and ax mixed here?
00000298 4EBA FDD8                            jsr  .gemsreleasez80
0000029C                            
0000029C 46DF                                 move.w    (sp)+,sr
0000029E 4E75                                 rts
000002A0                            
000002A0                            *
000002A0                            * gemssamprate - set digital playback rate for channel
000002A0                            *  4 = no override, get rate from sample header
000002A0                            *  5 = 10.4 kHz, see docs for other freqs
000002A0                            *
000002A0                            * stack frame after the link:
000002A0                            *    +------------------+
000002A0                            *    +    rate (long)   +  000000rr
000002A0                            *  +12    +------------------+
000002A0                            *    +  channel (long)  +  000000cc
000002A0                            *  +8     +------------------+
000002A0                            *    +  return address  +
000002A0                            *  +4     +------------------+
000002A0                            *    +    previous a6   +
000002A0                            *  a6-> +------------------+
000002A0                            
000002A0                            .gemssamprate
000002A0                            
000002A0 4EBA FE04                            jsr  stdsetup
000002A4                            
000002A4 701A                                 moveq     #26,d0
000002A6 6000 FF3A                            bra  com2arg
000002AA                            
000002AA                            *
000002AA                            * gemsnatvol - set channel volume
000002AA                            *
000002AA                            * stack frame after the link:
000002AA                            *    +------------------+
000002AA                            *    +   volume (long)  +  000000vv
000002AA                            *  +12    +------------------+
000002AA                            *    +  channel (long)  +  000000cc
000002AA                            *  +8     +------------------+
000002AA                            *    +  return address  +
000002AA                            *  +4     +------------------+
000002AA                            *    +    previous a6   +
000002AA                            *  a6-> +------------------+
000002AA                            
000002AA                            .gemsnatvol
000002AA                            
000002AA 4EBA FDFA                            jsr  stdsetup
000002AE                            
000002AE 701F                                 moveq     #31,d0
000002B0 6000 FF30                            bra  com2arg
000002B4                            
000002B4                            	fix gemsinit
000002B4                            	fix gemsstartsong
000002B4                            	fix gemsstopsong
000002B4                            	fix gemsstopall
000002B4                            	fix gemsdmastart
000002B4                            	fix gemsdmaend
000002B4                            	fix gemssettempo
000002B4                            	fix gemsmute
000002B4                            	fix gemsstorembox
000002B4                            	fix gemsreadmbox
000002B4                            	fix gemspauseall
000002B4                            	fix gemsresumeall
000002B4                            	fix gemsretrigenv
000002B4                            	fix gemsprogchange
000002B4                            	fix gemsnatvol
000002B4                            	fix gemsnatmastervol
000002B4                            
000002B4                            x SECTION FILE("a")
00000000 6765 6D73 696E 6974 203D+  	ptrto gemsinit
00000015 6765 6D73 7374 6172 7473+  	ptrto gemsstartsong
0000002F 6765 6D73 7374 6F70 736F+  	ptrto gemsstopsong
00000048 6765 6D73 7374 6F70 616C+  	ptrto gemsstopall
00000060 6765 6D73 646D 6173 7461+  	ptrto gemsdmastart
00000079 6765 6D73 646D 6165 6E64+  	ptrto gemsdmaend
00000090 6765 6D73 7365 7474 656D+  	ptrto gemssettempo
000000A9 6765 6D73 6D75 7465 203D+  	ptrto gemsmute
000000BE 6765 6D73 7374 6F72 656D+  	ptrto gemsstorembox
000000D8 6765 6D73 7265 6164 6D62+  	ptrto gemsreadmbox
000000F1 6765 6D73 7061 7573 6561+  	ptrto gemspauseall
0000010A 6765 6D73 7265 7375 6D65+  	ptrto gemsresumeall
00000124 6765 6D73 7265 7472 6967+  	ptrto gemsretrigenv
0000013E 6765 6D73 7072 6F67 6368+  	ptrto gemsprogchange
00000159 6765 6D73 6E61 7476 6F6C+  	ptrto gemsnatvol
00000170 6765 6D73 6E61 746D 6173+  	ptrto gemsnatmastervol
