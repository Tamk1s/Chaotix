

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-327F-7274-B7			    |
; |			       ESET spol. s r.o.			    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B0FBCF214D0A3E066805736BA61E88B7
; Input	CRC32 :	C7FACAD6

; ---------------------------------------------------------------------------
; File Name   :	D:\VStudio-Programme\VC2010\SMPSPlay\SMPS_Lib\Z80Drvs\Special\Chaotix Beta 1994-12-07.bin
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 13B8h Loaded length: 13B8h

; Processor	  : z80	[]
; Target assembler: Zilog Macro	Assembler

; ===========================================================================

; Segment type:	Regular
		segment	RAM
		di
		di
		im	1
		jp	InitDriver
; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


ReadPtrTable:				; CODE XREF: TrkUpdate_Proc+39p
					; TrkUpdate_Proc+55p ...
		ld	c, a
		ld	b, 0
		add	hl, bc
		add	hl, bc
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ret
; End of function ReadPtrTable

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


WriteFMIorII:				; CODE XREF: SendFMFreq+Fp
					; SendFMFreq+13p ...

; FUNCTION CHUNK AT 002E SIZE 00000002 BYTES

		bit	2, (ix+0)
		ret	nz
		add	a, (ix+1)
		bit	2, (ix+1)
		jr	nz, WriteFMIIPart
; End of function WriteFMIorII


; =============== S U B	R O U T	I N E =======================================


WriteFMI:				; CODE XREF: SendFMFreq+37p
					; SendFMFreq+3Ep ...
		ld	(4000h), a
		ld	a, c
		ld	(4001h), a
		ret
; End of function WriteFMI

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR WriteFMIorII

WriteFMIIPart:				; CODE XREF: WriteFMIorII+Cj
		sub	4
; END OF FUNCTION CHUNK	FOR WriteFMIorII

; =============== S U B	R O U T	I N E =======================================


WriteFMII:				; CODE XREF: DoPause+11Bp
		ld	(4002h), a
		ld	a, c
		ld	(4003h), a
		ret
; End of function WriteFMII

; ---------------------------------------------------------------------------

VInt:
		di
		call	DoSoundQueue
		call	UpdateAll
		ret
; ---------------------------------------------------------------------------
aCasablancaVers:.ascii 'casablanca version by MILPO'
; ---------------------------------------------------------------------------

InitDriver:				; CODE XREF: RAM:0004j
		ld	sp, 2000h
		ld	c, 0

loc_60:					; CODE XREF: RAM:0065j
		ld	b, 0

loc_62:					; CODE XREF: RAM:loc_62j
		djnz	$
		dec	c
		jr	nz, loc_60
		call	StopAllSound
		call	SendPSGState
		xor	a
		ld	hl, PSGState_Ch1
		ld	b, 10h

loc_73:					; CODE XREF: RAM:0075j
		ld	(hl), a
		inc	hl
		djnz	loc_73
		ld	hl, unk_1BF8	; 1BF8 - PWM Sound Commands
		ld	b, 8

loc_7C:					; CODE XREF: RAM:007Ej
		ld	(hl), a
		inc	hl
		djnz	loc_7C
		ld	(byte_1BF7), a
		ld	a, 8
		ld	(byte_1C04), a	; set Song Bank	  to 08	(840000)
		ld	hl, byte_1C04
		ld	a, (hl)
		ld	hl, 6000h	; switch to Song Bank
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1

loc_9F:					; CODE XREF: RAM:00A2j
		ei
		nop
		nop
		jr	loc_9F

; =============== S U B	R O U T	I N E =======================================


UpdateAll:				; CODE XREF: RAM:003Cp
		call	DoPause
		call	DoTempo
		call	DoFading
		call	PlaySoundID
		call	UpdateSFXTracks
		xor	a
		ld	(byte_1C19), a	; 00 - Music Mode
		ld	hl, byte_1C04
		ld	a, (hl)
		ld	hl, 6000h	; switch to Song Bank
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		ld	ix, byte_1C40	; leftover code	(1C40 -	Music Track Drum)
		ld	b, 0Dh		; 13 Tracks (6x	FM + 3x	PSG + 4x PWM)
		ld	ix, byte_1C40	; 1C40 - Music Track FM	1
		call	TrkUpdateLoop
		call	SendPSGState
		call	SetReadyStatus
		ret
; End of function UpdateAll


; =============== S U B	R O U T	I N E =======================================


UpdateSFXTracks:			; CODE XREF: UpdateAll+Cp
		ld	a, 1
		ld	(byte_1C19), a	; 01 - SFX Mode
		ld	hl, 6000h	; switch to SFX	Bank (8D0000)
		xor	a		; Bank bits written: 11Ah
		ld	e, 1
		ld	(hl), a
		ld	(hl), e
		ld	(hl), a
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		ld	ix, unk_1EB0	; 1EB0 - SFX Tracks
		ld	b, 5		; 5 SFX	tracks
; End of function UpdateSFXTracks


; =============== S U B	R O U T	I N E =======================================


TrkUpdateLoop:				; CODE XREF: UpdateAll+34p
					; TrkUpdateLoop+Ej
		push	bc
		bit	7, (ix+0)
		call	nz, UpdateTrack
		ld	de, 30h
		add	ix, de
		pop	bc
		djnz	TrkUpdateLoop
		ret
; End of function TrkUpdateLoop


; =============== S U B	R O U T	I N E =======================================


UpdateTrack:				; CODE XREF: TrkUpdateLoop+5p

; FUNCTION CHUNK AT 028E SIZE 00000019 BYTES
; FUNCTION CHUNK AT 0D56 SIZE 0000009A BYTES
; FUNCTION CHUNK AT 0EC2 SIZE 00000068 BYTES
; FUNCTION CHUNK AT 0F2E SIZE 0000000A BYTES

		bit	7, (ix+1)	; 80/A0/C0
		jp	nz, UpdatePSGTrk
		bit	3, (ix+1)	; 18/1A/1C/1E (the bit for 08 is checked)
		jp	nz, UpdatePWMTrk
		call	TrackTimeout
		jr	nz, loc_138
		call	TrkUpdate_Proc
		bit	4, (ix+0)
		ret	nz
		call	PrepareModulat
		call	DoPitchSlide
		call	DoModulation
		call	SendFMFreq
		jp	DoNoteOn
; ---------------------------------------------------------------------------

loc_138:				; CODE XREF: UpdateTrack+11j
		call	ExecPanAnim
		bit	4, (ix+0)
		ret	nz
		call	DoFMVolEnv
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_14F
		dec	(ix+1Eh)
		jp	z, DoNoteOff

loc_14F:				; CODE XREF: UpdateTrack+39j
		call	DoPitchSlide
		bit	6, (ix+0)
		ret	nz
		call	DoModulation
; End of function UpdateTrack


; =============== S U B	R O U T	I N E =======================================


SendFMFreq:				; CODE XREF: UpdateTrack+24p
		bit	2, (ix+0)
		ret	nz
		bit	0, (ix+0)
		jp	nz, loc_16F

loc_166:				; CODE XREF: SendFMFreq+1Aj
		ld	a, 0A4h
		ld	c, h
		rst	WriteFMIorII
		ld	a, 0A0h
		ld	c, l
		rst	WriteFMIorII
		ret
; ---------------------------------------------------------------------------

loc_16F:				; CODE XREF: SendFMFreq+9j
		ld	a, (ix+1)
		cp	2
		jr	nz, loc_166
		call	GetFM3FreqPtr
		ld	b, 4
		ld	hl, SpcFM3Regs

loc_17E:				; CODE XREF: SendFMFreq+43j
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ex	de, hl
		ld	c, (hl)
		inc	hl
		ld	b, (hl)
		inc	hl
		ex	de, hl
		ld	l, (ix+0Dh)
		ld	h, (ix+0Eh)
		add	hl, bc
		push	af
		ld	c, h
		call	WriteFMI
		pop	af
		sub	4
		ld	c, l
		call	WriteFMI
		pop	hl
		pop	bc
		djnz	loc_17E
		ret
; End of function SendFMFreq

; ---------------------------------------------------------------------------
SpcFM3Regs:	db 0ADh, 0AEh, 0ACh, 0A6h ; DATA XREF: SendFMFreq+21o

; =============== S U B	R O U T	I N E =======================================


GetFM3FreqPtr:				; CODE XREF: SendFMFreq+1Cp RAM:0C8Fp
		ld	de, unk_1C2A
		ld	a, (byte_1C19)
		or	a
		ret	z		; Music	Mode (00) - 1C2A
		ld	de, unk_1C1A
		ret	p		; Special SFX Mode (80)	- 1C1A
		ld	de, unk_1C22
		ret			; SFX Mode (01)	- 1C22
; End of function GetFM3FreqPtr


; =============== S U B	R O U T	I N E =======================================


TrkUpdate_Proc:				; CODE XREF: UpdateTrack+13p
					; UpdateTrack+C4Dp

; FUNCTION CHUNK AT 0994 SIZE 0000000C BYTES

		ld	e, (ix+3)
		ld	d, (ix+4)
		res	1, (ix+0)
		res	4, (ix+0)

loc_1C2:				; CODE XREF: RAM:09A1j
		ld	a, (de)
		inc	de
		cp	0E0h
		jp	nc, cfHandler
		ex	af, af'
		call	DoNoteOff
		call	DoPanAnimation
		ex	af, af'
		bit	3, (ix+0)
		jp	nz, DoRawFreqMode
		or	a
		jp	p, SetDuration	; 00-7F	- Delay
		sub	81h
		jp	p, GetNote	; 81-DF	- Note
		call	SetRest		; 80 - Rest
		jr	loc_214
; ---------------------------------------------------------------------------

GetNote:				; CODE XREF: TrkUpdate_Proc+2Aj
		add	a, (ix+5)
		ld	hl, PSGFreqs
		push	af
		rst	ReadPtrTable
		pop	af
		bit	7, (ix+1)
		jr	nz, loc_20E	; PSG channel -	jump
		push	de		; calculate FM frequency
		ld	d, 8
		ld	e, 0Ch
		ex	af, af'
		xor	a

loc_1FC:				; CODE XREF: TrkUpdate_Proc+4Ej
		ex	af, af'
		sub	e
		jr	c, loc_205
		ex	af, af'
		add	a, d
		jr	loc_1FC
; ---------------------------------------------------------------------------
		ex	af, af'         ; dead code

loc_205:				; CODE XREF: TrkUpdate_Proc+4Aj
		add	a, e
		ld	hl, FMFreqs
		rst	ReadPtrTable
		ex	af, af'
		or	h
		ld	h, a
		pop	de

loc_20E:				; CODE XREF: TrkUpdate_Proc+3Fj
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h

loc_214:				; CODE XREF: TrkUpdate_Proc+30j
		bit	5, (ix+0)
		jr	nz, loc_227
		ld	a, (de)
		or	a
		jp	p, loc_253
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jr	FinishTrkUpdate
; ---------------------------------------------------------------------------

loc_227:				; CODE XREF: TrkUpdate_Proc+64j
		ld	a, (de)
		inc	de
		ld	(ix+10h), a
		jr	loc_252
; ---------------------------------------------------------------------------

DoRawFreqMode:				; CODE XREF: TrkUpdate_Proc+21j
		ld	h, a
		ld	a, (de)
		inc	de
		ld	l, a
		or	h
		jr	z, loc_241
		ld	a, (ix+5)
		ld	b, 0
		or	a
		jp	p, loc_23F
		dec	b

loc_23F:				; CODE XREF: TrkUpdate_Proc+87j
		ld	c, a
		add	hl, bc

loc_241:				; CODE XREF: TrkUpdate_Proc+7Fj
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h
		bit	5, (ix+0)
		jr	z, loc_252
		ld	a, (de)
		inc	de
		ld	(ix+10h), a

loc_252:				; CODE XREF: TrkUpdate_Proc+78j
					; TrkUpdate_Proc+97j
		ld	a, (de)

loc_253:				; CODE XREF: TrkUpdate_Proc+68j
		inc	de

SetDuration:				; CODE XREF: TrkUpdate_Proc+25j
		call	TickMultiplier
		ld	(ix+0Ch), a

FinishTrkUpdate:			; CODE XREF: TrkUpdate_Proc+71j
		ld	(ix+3),	e
		ld	(ix+4),	d
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		bit	1, (ix+0)
		ret	nz
		xor	a
		ld	(ix+25h), a
		ld	(ix+22h), a
		ld	(ix+17h), a
		ld	a, (ix+1Fh)
		ld	(ix+1Eh), a
		ret
; End of function TrkUpdate_Proc


; =============== S U B	R O U T	I N E =======================================


TickMultiplier:				; CODE XREF: TrkUpdate_Proc:SetDurationp
					; RAM:cfE8_NoteStopp ...
		ld	b, (ix+2)
		dec	b
		ret	z
		ld	c, a

loc_282:				; CODE XREF: TickMultiplier+7j
		add	a, c
		djnz	loc_282
		ret
; End of function TickMultiplier


; =============== S U B	R O U T	I N E =======================================


TrackTimeout:				; CODE XREF: UpdateTrack+Ep
					; UpdateTrack:UpdatePSGTrkp ...
		ld	a, (ix+0Bh)
		dec	a
		ld	(ix+0Bh), a
		ret
; End of function TrackTimeout

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR UpdateTrack

DoNoteOn:				; CODE XREF: UpdateTrack+27j
		ld	a, (ix+0Dh)
		or	(ix+0Eh)
		ret	z
		ld	a, (ix+0)
		and	6
		ret	nz
		ld	a, (ix+1)
		or	0F0h
		ld	c, a
		ld	a, 28h
		call	WriteFMI
		ret
; END OF FUNCTION CHUNK	FOR UpdateTrack

; =============== S U B	R O U T	I N E =======================================


DoNoteOff:				; CODE XREF: UpdateTrack+3Ej
					; TrkUpdate_Proc+16p ...
		ld	a, (ix+0)
		and	6
		ret	nz

SendNoteOff:				; CODE XREF: RAM:0CF2p
		ld	c, (ix+1)
		bit	7, c
		ret	nz
; End of function DoNoteOff

; START	OF FUNCTION CHUNK FOR SilenceFMChn

FMNoteOff:				; CODE XREF: SilenceFMChn+Dj
		ld	a, 28h
		call	WriteFMI
		res	6, (ix+0)
		ret
; END OF FUNCTION CHUNK	FOR SilenceFMChn

; =============== S U B	R O U T	I N E =======================================


DoPanAnimation:				; CODE XREF: TrkUpdate_Proc+19p
		ld	a, (ix+11h)
		dec	a
		ret	m
		jr	nz, loc_303
		bit	1, (ix+0)
		ret	nz

loc_2C9:				; CODE XREF: ExecPanAnim+6j
		dec	(ix+16h)
		ret	nz
		push	bc
		push	de
		push	hl
		ld	a, (ix+15h)
		ld	(ix+16h), a
		ld	a, (ix+12h)
		ld	hl, PanAniPtrList
		rst	ReadPtrTable
		ld	e, (ix+13h)
		inc	(ix+13h)
		ld	a, (ix+14h)
		dec	a
		cp	e
		jr	nz, loc_2F8
		dec	(ix+13h)
		ld	a, (ix+11h)
		cp	2
		jr	z, loc_2F8
		ld	(ix+13h), 0

loc_2F8:				; CODE XREF: DoPanAnimation+2Bj
					; DoPanAnimation+35j
		ld	d, 0
		add	hl, de
		ex	de, hl
		call	cfE0_Pan
		pop	hl
		pop	de
		pop	bc
		ret
; ---------------------------------------------------------------------------

loc_303:				; CODE XREF: DoPanAnimation+5j
		xor	a
		ld	(ix+13h), a
; End of function DoPanAnimation


; =============== S U B	R O U T	I N E =======================================


ExecPanAnim:				; CODE XREF: UpdateTrack:loc_138p
		ld	a, (ix+11h)
		sub	2
		ret	m
		jr	loc_2C9
; End of function ExecPanAnim

; ---------------------------------------------------------------------------
PanAniPtrList:	dw byte_317, byte_318, byte_319, byte_31A ; DATA XREF: DoPanAnimation+1Co
byte_317:	db 0C0h			; DATA XREF: RAM:PanAniPtrListo
byte_318:	db  80h			; DATA XREF: RAM:PanAniPtrListo
byte_319:	db 0C0h			; DATA XREF: RAM:PanAniPtrListo
byte_31A:	db  40h,0C0h, 80h	; DATA XREF: RAM:PanAniPtrListo

; =============== S U B	R O U T	I N E =======================================


DoFMVolEnv:				; CODE XREF: UpdateTrack+32p
		ld	a, (ix+18h)
		or	a
		ret	z
		ret	m
		dec	a
		ld	hl, (VolEnvListPtr)
		rst	ReadPtrTable
		call	DoPSGVolEnv
		ld	h, (ix+1Dh)
		ld	l, (ix+1Ch)
		ld	de, Volume_Ops
		ld	b, 4
		ld	c, (ix+19h)

loc_339:				; CODE XREF: DoFMVolEnv+2Cj
		push	af
		sra	c
		push	bc
		jr	nc, loc_345
		add	a, (hl)
		and	7Fh
		ld	c, a
		ld	a, (de)
		rst	WriteFMIorII

loc_345:				; CODE XREF: DoFMVolEnv+20j
		pop	bc
		inc	de
		inc	hl
		pop	af
		djnz	loc_339
		ret
; End of function DoFMVolEnv


; =============== S U B	R O U T	I N E =======================================


PrepareModulat:				; CODE XREF: UpdateTrack+1Bp
					; UpdateTrack+C55p
		bit	7, (ix+7)
		ret	z
		bit	1, (ix+0)
		ret	nz
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	ix
		pop	hl
		ld	b, 0
		ld	c, 24h
		add	hl, bc
		ex	de, hl
		ldi
		ldi
		ldi
		ld	a, (hl)
		srl	a
		ld	(de), a
		xor	a
		ld	(ix+22h), a
		ld	(ix+23h), a
		ret
; End of function PrepareModulat


; =============== S U B	R O U T	I N E =======================================


DoModulation:				; CODE XREF: UpdateTrack+21p
					; UpdateTrack+49p ...
		ld	a, (ix+7)
		or	a
		ret	z		; ModType 00 ->	return (modulation off)
		cp	80h
		jr	nz, DoModulatEnv ; ModType != 80 -> jump
		dec	(ix+24h)	; ModType 80 ->	manual modulation parameters
		ret	nz
		inc	(ix+24h)
		push	hl
		ld	l, (ix+22h)
		ld	h, (ix+23h)
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	de
		pop	iy
		dec	(ix+25h)
		jr	nz, loc_3B3
		ld	a, (iy+1)
		ld	(ix+25h), a
		ld	a, (ix+26h)
		ld	c, a
		and	80h
		rlca
		neg
		ld	b, a
		add	hl, bc
		ld	(ix+22h), l
		ld	(ix+23h), h

loc_3B3:				; CODE XREF: DoModulation+23j
		pop	bc
		add	hl, bc
		dec	(ix+27h)
		ret	nz
		ld	a, (iy+3)
		ld	(ix+27h), a
		ld	a, (ix+26h)
		neg
		ld	(ix+26h), a
		ret
; ---------------------------------------------------------------------------

DoModulatEnv:				; CODE XREF: DoModulation+7j
		dec	a
		ex	de, hl
		ld	hl, (ModEnvListPtr)
		rst	ReadPtrTable
		jr	loc_3D3
; ---------------------------------------------------------------------------

loc_3D0:				; CODE XREF: DoModulation+82j
					; DoModulation+85j
		ld	(ix+25h), a

loc_3D3:				; CODE XREF: DoModulation+57j
					; DoModulation+95j
		push	hl
		ld	c, (ix+25h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jp	z, ModEnv_Positive
		cp	82h
		jr	z, ModEnv_Jump2Idx
		cp	80h
		jr	z, ModEnv_Reset
		cp	84h
		jr	z, ModEnv_ChgMult
		ld	h, 0FFh
		jr	nc, ModEnv_Next
		set	6, (ix+0)
		pop	hl
		ret
; ---------------------------------------------------------------------------

ModEnv_Jump2Idx:			; CODE XREF: DoModulation+6Cj
		inc	bc
		ld	a, (bc)
		jr	loc_3D0
; ---------------------------------------------------------------------------

ModEnv_Reset:				; CODE XREF: DoModulation+70j
		xor	a
		jr	loc_3D0
; ---------------------------------------------------------------------------

ModEnv_ChgMult:				; CODE XREF: DoModulation+74j
		inc	bc
		ld	a, (bc)
		add	a, (ix+22h)
		ld	(ix+22h), a
		inc	(ix+25h)
		inc	(ix+25h)
		jr	loc_3D3
; ---------------------------------------------------------------------------

ModEnv_Positive:			; CODE XREF: DoModulation+67j
		ld	h, 0

ModEnv_Next:				; CODE XREF: DoModulation+78j
		ld	l, a
		ld	b, (ix+22h)
		inc	b
		ex	de, hl

loc_416:				; CODE XREF: DoModulation+A0j
		add	hl, de
		djnz	loc_416
		inc	(ix+25h)
		ret
; End of function DoModulation


; =============== S U B	R O U T	I N E =======================================


DoPitchSlide:				; CODE XREF: UpdateTrack+1Ep
					; UpdateTrack:loc_14Fp	...
		ld	b, 0
		ld	a, (ix+10h)
		or	a
		jp	p, loc_427
		dec	b

loc_427:				; CODE XREF: DoPitchSlide+6j
		ld	h, (ix+0Eh)
		ld	l, (ix+0Dh)
		ld	c, a
		add	hl, bc
		bit	7, (ix+1)
		jr	nz, loc_457
		ex	de, hl
		ld	a, 7
		and	d
		ld	b, a
		ld	c, e
		or	a
		ld	hl, 283h
		sbc	hl, bc
		jr	c, loc_449
		ld	hl, -57Bh
		add	hl, de
		jr	loc_457
; ---------------------------------------------------------------------------

loc_449:				; CODE XREF: DoPitchSlide+24j
		or	a
		ld	hl, 508h
		sbc	hl, bc
		jr	nc, loc_456
		ld	hl, 57Ch
		add	hl, de
		ex	de, hl

loc_456:				; CODE XREF: DoPitchSlide+32j
		ex	de, hl

loc_457:				; CODE XREF: DoPitchSlide+16j
					; DoPitchSlide+2Aj
		bit	5, (ix+0)
		ret	z
		ld	(ix+0Eh), h
		ld	(ix+0Dh), l
		ret
; End of function DoPitchSlide


; =============== S U B	R O U T	I N E =======================================


GetFMInsPtr:				; CODE XREF: SetInsFromSong+1Bp
		ld	hl, (word_1C37)
		ld	a, (byte_1C19)
		or	a
		jr	z, JumpToInsData
		ld	l, (ix+2Ah)
		ld	h, (ix+2Bh)
; End of function GetFMInsPtr


; =============== S U B	R O U T	I N E =======================================


JumpToInsData:				; CODE XREF: GetFMInsPtr+7j
					; SetInsFromSong+14p ...
		xor	a
		or	b
		ret	z
		ld	de, 19h

loc_478:				; CODE XREF: JumpToInsData+7j
		add	hl, de
		djnz	loc_478
		ret
; End of function JumpToInsData

; ---------------------------------------------------------------------------
FMInsOperators:	db 0B0h			; DATA XREF: SendFMInso
		db  30h, 38h, 34h, 3Ch
		db  50h, 58h, 54h, 5Ch
		db  60h, 68h, 64h, 6Ch
		db  70h, 78h, 74h, 7Ch
		db  80h, 88h, 84h, 8Ch
Volume_Ops:	db  40h, 48h, 44h, 4Ch	; DATA XREF: DoFMVolEnv+14o
					; RefreshVolume+1o
SSGEG_Regs:	db  90h, 98h, 94h, 9Ch	; DATA XREF: SendSSGEGo

; =============== S U B	R O U T	I N E =======================================


SendFMIns:				; CODE XREF: SetInsFromSong:loc_B00p
					; RAM:0B9Cp
		ld	de, FMInsOperators
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII
		call	WriteInsReg
		ld	(ix+1Bh), a
		ld	b, 14h

loc_4AA:				; CODE XREF: SendFMIns+14j
		call	WriteInsReg
		djnz	loc_4AA
		ld	(ix+1Ch), l
		ld	(ix+1Dh), h
		jp	RefreshVolume
; End of function SendFMIns


; =============== S U B	R O U T	I N E =======================================


WriteInsReg:				; CODE XREF: SendFMIns+9p
					; SendFMIns:loc_4AAp
		ld	a, (de)
		inc	de
		ld	c, (hl)
		inc	hl
		rst	WriteFMIorII
		ret
; End of function WriteInsReg


; =============== S U B	R O U T	I N E =======================================


PlaySoundID:				; CODE XREF: UpdateAll+9p

; FUNCTION CHUNK AT 05FC SIZE 000000A2 BYTES

		ld	a, (byte_1C09)	; read Sound ID
		cp	29h
		jp	c, PlayMusic	; 00-28	- Music
		cp	69h
		jp	c, PlaySFX	; 29-68	- SFX
		cp	0F0h
		jp	c, StopAllSound	; 69-EF	- Stop All
		cp	0FFh
		jp	nc, StopAllSound ; FF -	Stop All

PlaySnd_Command:			; F0-FE	- Control Commands
		sub	0F0h
		ld	hl, CmdPtrTable
		rst	ReadPtrTable
		xor	a
		ld	(byte_1C18), a	; reset	current	Sound Priority
		jp	(hl)
; ---------------------------------------------------------------------------
CmdPtrTable:				; DATA XREF: PlaySoundID+19o
		dw FadeOutMusic, StopAllSound, PSGSilenceAll
		dw FadeOutMusic, StopAllSound, PSGSilenceAll
		dw FadeOutMusic, StopAllSound, PSGSilenceAll
		dw FadeOutMusic, StopAllSound, PSGSilenceAll
		dw FadeOutMusic, StopAllSound, PSGSilenceAll
		dw StopAllSound
; ---------------------------------------------------------------------------

PlayMusic:				; CODE XREF: PlaySoundID+5j
		dec	a
		ret	m
		ex	af, af'
		call	StopAllSound
		ex	af, af'
		push	af
		ld	hl, (SongBankPtr)
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (hl)
		ld	(byte_1C04), a
		ld	hl, byte_1C04
		ld	a, (hl)
		ld	hl, 6000h	; switch to Song Bank
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		pop	af
		ld	hl, (MusListPtr)
		rst	ReadPtrTable
		push	hl
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(word_1C37), hl
		pop	hl
		pop	iy
		ld	a, (iy+5)
		ld	(byte_1C13), a
		ld	(byte_1C14), a
		ld	de, 6
		add	hl, de
		ld	(word_1C33), hl
		ld	hl, FMInitBytes
		ld	(word_1C35), hl
		ld	de, byte_1C40
		ld	b, (iy+2)
		ld	a, (iy+4)

loc_55B:				; CODE XREF: PlaySoundID+BCj
		push	bc
		ld	hl, (word_1C35)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(word_1C35), hl
		ld	hl, (word_1C33)
		ldi
		ldi
		ldi
		ldi
		ld	(word_1C33), hl
		call	FinishFMTrkInit
		pop	bc
		djnz	loc_55B
		ld	a, (iy+3)
		or	a
		jp	z, ClearSoundID
		ld	b, a
		ld	hl, PSGInitBytes
		ld	(word_1C35), hl
		ld	de, byte_1D60
		ld	a, (iy+4)

loc_590:				; CODE XREF: PlaySoundID+EEj
		push	bc
		ld	hl, (word_1C35)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(word_1C35), hl
		ld	hl, (word_1C33)
		ld	bc, 6
		ldir
		ld	(word_1C33), hl
		call	FinishTrkInit
		pop	bc
		djnz	loc_590
		ld	hl, PWMInitBytes
		ld	(word_1C35), hl
		ld	de, byte_1DF0
		ld	a, (iy+4)
		ld	b, 4

loc_5BC:				; CODE XREF: PlaySoundID+11Dj
		push	bc
		ld	hl, (word_1C35)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(word_1C35), hl
		ld	hl, (word_1C33)
		ldi
		ldi
		ldi
		ldi
		ld	(word_1C33), hl
		call	FinishFMTrkInit
		pop	bc
		djnz	loc_5BC
; End of function PlaySoundID

; START	OF FUNCTION CHUNK FOR StopAllSound

ClearSoundID:				; CODE XREF: PlaySoundID+C2j
					; PlaySoundID+1DDj ...
		xor	a
		ld	(byte_1C09), a
		ret
; END OF FUNCTION CHUNK	FOR StopAllSound
; ---------------------------------------------------------------------------
FMInitBytes:	db  80h,   0		; DATA XREF: PlaySoundID+8Eo
					; StopAllSound+Do
		db  80h,   1
		db  80h,   2
		db  80h,   4
		db  80h,   5
		db  80h,   6
PSGInitBytes:	db  80h, 80h		; DATA XREF: PlaySoundID+C6o
		db  80h,0A0h
		db  80h,0C0h
PWMInitBytes:	db  80h, 18h		; DATA XREF: PlaySoundID+F0o
		db  80h, 1Ah
		db  80h, 1Ch
		db  80h, 1Eh
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR PlaySoundID

PlaySFX:				; CODE XREF: PlaySoundID+Aj
		ex	af, af'
		ld	hl, 6000h
		xor	a
		ld	e, 1		; set Bank 8D0000
		ld	(hl), a
		ld	(hl), e
		ld	(hl), a
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		ex	af, af'
		sub	29h		; Sound	ID -> SFX Index
		ex	af, af'
		xor	a
		ld	hl, (SFXListPtr)
		ld	(byte_1C19), a
		ex	af, af'
		rst	ReadPtrTable
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(word_1C39), hl
		xor	a
		ld	(byte_1C15), a
		pop	hl
		push	hl
		pop	iy
		ld	a, (iy+2)
		ld	(byte_1C3B), a
		ld	de, 4
		add	hl, de
		ld	b, (iy+3)

SFXTrkInitLoop:				; CODE XREF: PlaySoundID+1DBj
		push	bc
		push	hl
		inc	hl
		ld	c, (hl)
		call	GetSFXChnPtrs
		set	2, (hl)
		push	ix
		ld	a, (byte_1C19)
		or	a
		jr	z, loc_64B
		pop	hl
		push	iy

loc_64B:				; CODE XREF: PlaySoundID+188j
		pop	de
		pop	hl
		ldi
		ld	a, (de)
		cp	2
		call	z, ResetSpcFM3Mode
		ldi
		ld	a, (byte_1C3B)
		ld	(de), a
		inc	de
		ldi
		ldi
		ldi
		ldi
		call	FinishFMTrkInit
		bit	7, (ix+0)
		jr	z, loc_679
		ld	a, (ix+1)
		cp	(iy+1)
		jr	nz, loc_679
		set	2, (iy+0)

loc_679:				; CODE XREF: PlaySoundID+1ADj
					; PlaySoundID+1B5j
		push	hl
		ld	hl, (word_1C39)
		ld	a, (byte_1C19)
		or	a
		jr	z, loc_687
		push	iy
		pop	ix

loc_687:				; CODE XREF: PlaySoundID+1C3j
		ld	(ix+2Ah), l
		ld	(ix+2Bh), h
		call	DoNoteOff
		bit	7, (ix+1)
		call	z, DisableSSGEG
		pop	hl
		pop	bc
		djnz	SFXTrkInitLoop
		jp	ClearSoundID
; END OF FUNCTION CHUNK	FOR PlaySoundID

; =============== S U B	R O U T	I N E =======================================


GetSFXChnPtrs:				; CODE XREF: PlaySoundID+17Dp
					; RAM:0B3Bp
		bit	7, c
		jr	nz, loc_6AA
		ld	a, c
		bit	2, a
		jr	z, loc_6C3
		dec	a
		jr	loc_6C3
; ---------------------------------------------------------------------------

loc_6AA:				; CODE XREF: GetSFXChnPtrs+2j
		ld	a, 1Fh
		push	bc
		call	SilencePSGChn
		pop	bc
		ld	a, 0FFh
		ld	(PSGState_Ch4+2), a
		ld	a, c
		srl	a
		srl	a
		srl	a
		srl	a
		srl	a
		add	a, 2

loc_6C3:				; CODE XREF: GetSFXChnPtrs+7j
					; GetSFXChnPtrs+Aj
		sub	2
		ld	(byte_1C32), a
		push	af
		ld	hl, SFXChnPtrs
		rst	ReadPtrTable
		push	hl
		pop	ix		; IX - SFX Track
		pop	af
		ld	hl, BGMChnPtrs
		rst	ReadPtrTable	; HL - Music Track
		ret
; End of function GetSFXChnPtrs


; =============== S U B	R O U T	I N E =======================================


FinishFMTrkInit:			; CODE XREF: PlaySoundID+B8p
					; PlaySoundID+119p ...
		ex	af, af'
		xor	a
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ex	af, af'
; End of function FinishFMTrkInit


; =============== S U B	R O U T	I N E =======================================


FinishTrkInit:				; CODE XREF: PlaySoundID+EAp
		ex	de, hl
		ld	(hl), 30h
		inc	hl
		ld	(hl), 0C0h
		inc	hl
		ld	(hl), 1
		ld	b, 24h

loc_6E8:				; CODE XREF: FinishTrkInit+Ej
		inc	hl
		ld	(hl), 0
		djnz	loc_6E8
		inc	hl
		ex	de, hl
		ret
; End of function FinishTrkInit

; ---------------------------------------------------------------------------
SFXChnPtrs:	dw 1EB0h, 1EB0h, 1EE0h,	1F10h, 1F40h, 1F40h, 1F70h, 1F70h
					; DATA XREF: GetSFXChnPtrs+2Bo
BGMChnPtrs:	dw 1CD0h, 1CD0h, 1D00h,	1D30h, 1D90h, 1D90h, 1DC0h, 1DC0h
					; DATA XREF: GetSFXChnPtrs+33o

; =============== S U B	R O U T	I N E =======================================


DoPause:				; CODE XREF: UpdateAllp

; FUNCTION CHUNK AT 0813 SIZE 0000002F BYTES

		ld	hl, unk_1C10	; 1C10 = Pause Mode
		ld	a, (hl)
		or	a
		ret	z
		jp	m, UnpauseMusic
		pop	de
		dec	a
		ret	nz
		ld	(hl), 2
		jp	SilenceAll
; ---------------------------------------------------------------------------

UnpauseMusic:				; CODE XREF: DoPause+6j
		xor	a
		ld	(hl), a
		ld	a, (byte_1C0D)
		or	a
		jp	nz, StopAllSound
		ld	ix, byte_1C40
		ld	b, 6

loc_730:				; CODE XREF: DoPause+37j
		ld	a, (byte_1C11)
		or	a
		jr	nz, loc_73C
		bit	7, (ix+0)
		jr	z, loc_742

loc_73C:				; CODE XREF: DoPause+24j
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII

loc_742:				; CODE XREF: DoPause+2Aj
		ld	de, 30h
		add	ix, de
		djnz	loc_730
		ld	ix, unk_1EB0
		ld	b, 5

loc_74F:				; CODE XREF: DoPause+56j
		bit	7, (ix+0)
		jr	z, loc_761
		bit	7, (ix+1)
		jr	nz, loc_761
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII

loc_761:				; CODE XREF: DoPause+43j DoPause+49j
		ld	de, 30h
		add	ix, de
		djnz	loc_74F
		ret
; End of function DoPause

; ---------------------------------------------------------------------------

FadeOutMusic:				; DATA XREF: PlaySoundID:CmdPtrTableo
		ld	a, 28h		; Number of fading steps
		ld	(byte_1C0D), a
		ld	a, 6		; Frames per Step
		ld	(byte_1C0F), a
		ld	(byte_1C0E), a

; =============== S U B	R O U T	I N E =======================================


StopDrumPSG:				; CODE XREF: DoFading+6p
		xor	a
		ld	(byte_1D60), a
		ld	(byte_1D90), a
		jp	PSGSilenceAll
; End of function StopDrumPSG


; =============== S U B	R O U T	I N E =======================================


DoFading:				; CODE XREF: UpdateAll+6p
		ld	hl, byte_1C0D
		ld	a, (hl)		; load remaining Fading	Steps
		or	a
		ret	z		; reached 0 - return
		call	m, StopDrumPSG	; 80+ -	mute Drum and PSG channels
		res	7, (hl)
		ld	a, (byte_1C0F)	; 1C0F - Timeout Counter
		dec	a
		jr	z, ApplyFading
		ld	(byte_1C0F), a
		ret
; ---------------------------------------------------------------------------

ApplyFading:				; CODE XREF: DoFading+Fj
		ld	a, (byte_1C0E)
		ld	(byte_1C0F), a
		ld	a, (byte_1C0D)
		dec	a
		ld	(byte_1C0D), a
		jr	z, StopAllSound
		ld	hl, byte_1C06
		inc	(hl)
		ld	ix, byte_1C40
		ld	b, 6

loc_7AE:				; CODE XREF: DoFading+44j
		bit	7, (ix+0)
		jr	z, loc_7BF
		bit	2, (ix+0)
		jr	nz, loc_7BF
		push	bc
		call	RefreshVolume
		pop	bc

loc_7BF:				; CODE XREF: DoFading+32j DoFading+38j
		ld	de, 30h
		add	ix, de
		djnz	loc_7AE
		ret
; End of function DoFading


; =============== S U B	R O U T	I N E =======================================


StopAllSound:				; CODE XREF: RAM:0067p	PlaySoundID+Fj	...

; FUNCTION CHUNK AT 05DD SIZE 00000005 BYTES

		ld	hl, byte_1C09
		ld	de, byte_1C0A
		ld	bc, 396h
		ld	(hl), 0
		ldir
		ld	ix, FMInitBytes
		ld	b, 6

loc_7DA:				; CODE XREF: StopAllSound+1Fj
		push	bc
		call	SilenceFMChn
		call	DisableSSGEG
		inc	ix
		inc	ix
		pop	bc
		djnz	loc_7DA
		ld	b, 7
		xor	a
		ld	(byte_1BF7), a	; clear	driver status byte
		ld	(byte_1C06), a	; reset	Fade volume
		ld	(byte_1C0D), a	; clear	Fading Step Counter
		call	PSGSilenceAll
		ld	c, 0
		ld	a, 2Bh
		call	WriteFMI

ResetSpcFM3Mode:			; CODE XREF: PlaySoundID+194p
		ld	a, 0Fh
		ld	(byte_1C12), a
		ld	c, a
		ld	a, 27h
		call	WriteFMI
		jp	ClearSoundID
; End of function StopAllSound


; =============== S U B	R O U T	I N E =======================================


DisableSSGEG:				; CODE XREF: PlaySoundID+1D6p
					; StopAllSound+17p
		ld	a, 90h
		ld	c, 0
		jp	SendAllFMOps
; End of function DisableSSGEG

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DoPause

SilenceAll:				; CODE XREF: DoPause+Ej
		call	PSGSilenceAll
		push	bc
		push	af
		ld	b, 3
		ld	a, 0B4h
		ld	c, 0

loc_81E:				; CODE XREF: DoPause+114j
		push	af
		call	WriteFMI
		pop	af
		inc	a
		djnz	loc_81E
		ld	b, 3
		ld	a, 0B4h

loc_82A:				; CODE XREF: DoPause+120j
		push	af
		call	WriteFMII
		pop	af
		inc	a
		djnz	loc_82A
		ld	c, 0
		ld	b, 7
		ld	a, 28h

loc_838:				; CODE XREF: DoPause+12Ej
		push	af
		call	WriteFMI
		inc	c
		pop	af
		djnz	loc_838
		pop	af
		pop	bc
; END OF FUNCTION CHUNK	FOR DoPause

; =============== S U B	R O U T	I N E =======================================


PSGSilenceAll:				; CODE XREF: StopDrumPSG+7j
					; StopAllSound+2Dp ...
		push	bc
		push	hl
		push	de
		ld	b, 4
		ld	a, 9Fh
		ld	hl,  PSGState_Ch1+2
		ld	de, 4

loc_84F:				; CODE XREF: PSGSilenceAll+11j
		ld	(hl), a
		add	a, 20h
		add	hl, de
		djnz	loc_84F
		pop	de
		pop	hl
		pop	bc
		jp	ClearSoundID
; End of function PSGSilenceAll


; =============== S U B	R O U T	I N E =======================================


DoTempo:				; CODE XREF: UpdateAll+3p
		ld	a, (byte_1C14)	; get Tempo Increment
		ld	hl, byte_1C13
		add	a, (hl)		; add current Tempo Counter
		ld	(hl), a		; and write it back
		ret	nc		; Addition didn't overflow - return
					; If it	did, delay all Music Tracks by 1 frame.
		ld	hl,  byte_1C40+0Bh ; 1C40 (Drum	Track) + 0B (Note Timeout)
		ld	de, 30h
		ld	b, 0Dh		; 13 Music Tracks

loc_86C:				; CODE XREF: DoTempo+13j
		inc	(hl)
		add	hl, de
		djnz	loc_86C
		ret
; End of function DoTempo


; =============== S U B	R O U T	I N E =======================================


DoSoundQueue:				; CODE XREF: RAM:0039p
		ld	a, r
		ld	(byte_1C17), a
		ld	de, byte_1C0A
		ld	b, 3

loc_87B:				; CODE XREF: DoSoundQueue+31j
		ld	a, (de)
		ld	c, a
		or	a
		jr	z, loc_89F
		sub	28h
		jp	c, DequeueSound
		sub	1
		ld	hl, (SndPrioPtr)
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (byte_1C18)
		cp	(hl)
		jr	z, loc_897
		jr	nc, loc_89F

loc_897:				; CODE XREF: DoSoundQueue+22j
		ld	a, c
		ld	(byte_1C09), a
		ld	a, (hl)
		ld	(byte_1C18), a

loc_89F:				; CODE XREF: DoSoundQueue+Dj
					; DoSoundQueue+24j
		xor	a
		ld	(de), a
		inc	de
		djnz	loc_87B
		ret
; ---------------------------------------------------------------------------

DequeueSound:				; CODE XREF: DoSoundQueue+11j
		ld	a, c
		ld	(byte_1C09), a
		xor	a
		ld	(byte_1C18), a
		ld	de, byte_1C0A
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ld	(de), a
		ret
; End of function DoSoundQueue


; =============== S U B	R O U T	I N E =======================================


SilenceFMChn:				; CODE XREF: StopAllSound+14p
					; RAM:cfE3_SilenceTrkp

; FUNCTION CHUNK AT 02B3 SIZE 0000000A BYTES

		call	SetMaxRelRate
		ld	a, 40h
		ld	c, 7Fh
		call	SendAllFMOps
		ld	c, (ix+1)
		jp	FMNoteOff
; End of function SilenceFMChn


; =============== S U B	R O U T	I N E =======================================


SetMaxRelRate:				; CODE XREF: SilenceFMChnp RAM:0AD2p
		ld	a, 80h
		ld	c, 0FFh
; End of function SetMaxRelRate


; =============== S U B	R O U T	I N E =======================================


SendAllFMOps:				; CODE XREF: DisableSSGEG+4j
					; SilenceFMChn+7p
		ld	b, 4

loc_8CC:				; CODE XREF: SendAllFMOps+7j
		push	af
		rst	WriteFMIorII
		pop	af
		add	a, 4
		djnz	loc_8CC
		ret
; End of function SendAllFMOps

; ---------------------------------------------------------------------------
PSGFreqs:	dw  3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3F7h,	3BEh, 388h
					; DATA XREF: TrkUpdate_Proc+35o
		dw  356h, 326h,	2F9h, 2CEh, 2A5h, 280h,	25Ch, 23Ah, 21Ah, 1FBh,	1DFh, 1C4h
		dw  1ABh, 193h,	17Dh, 167h, 153h, 140h,	12Eh, 11Dh, 10Dh, 0FEh,	0EFh, 0E2h
		dw  0D6h, 0C9h,	0BEh, 0B4h, 0A9h, 0A0h,	 97h,  8Fh,  87h,  7Fh,	 78h,  71h
		dw   6Bh,  65h,	 5Fh,  5Ah,  55h,  50h,	 4Bh,  47h,  43h,  40h,	 3Ch,  39h
		dw   36h,  33h,	 30h,  2Dh,  2Bh,  28h,	 26h,  24h,  22h,  20h,	 1Fh,  1Dh
		dw   1Bh,  1Ah,	 18h,  17h,  16h,  15h,	 13h,  12h,  11h,  10h,	   0,	 0
FMFreqs:	dw  284h, 2ABh,	2D3h, 2FEh, 32Dh, 35Ch,	38Fh, 3C5h, 3FFh, 43Ch,	47Ch, 4C0h
					; DATA XREF: TrkUpdate_Proc+52o
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR TrkUpdate_Proc

cfHandler:				; CODE XREF: TrkUpdate_Proc+12j
		ld	hl, cfReturn

cfHandler_JmpIn:			; CODE XREF: UpdateTrack+DCEj
		push	hl
		sub	0E0h
		ld	hl, cfPtrTable
		rst	ReadPtrTable
		ld	a, (de)
		jp	(hl)
; END OF FUNCTION CHUNK	FOR TrkUpdate_Proc
; ---------------------------------------------------------------------------

cfReturn:				; DATA XREF: TrkUpdate_Proc:cfHandlero
		inc	de
		jp	loc_1C2
; ---------------------------------------------------------------------------
cfPtrTable:	dw cfE0_Pan, cfE1_Detune, cfE2_SetComm,	cfE3_SilenceTrk
					; DATA XREF: TrkUpdate_Proc+7E6o
		dw cfE4_PanAnim, cfE5_ChgPFMVol, cfE6_ChgFMVol,	cfE7_Hold
		dw cfE8_NoteStop, cfE9_SetLFO, cfEA_Dummy, cfEB_LoopExit
		dw cfEC_ChgPSGVol, cfED_FMChnWrite, cfEE_FM1Write, cfEF_SetFMIns
		dw cfF0_ModSetup, cfF1_ModTypePFM, cfF2_StopTrk, cfF3_PSGNoise
		dw cfF4_ModType, cfF5_SetPSGIns, cfF6_GoTo, cfF7_Loop
		dw cfF8_GoSub, cfF9_Return, cfFA_TickMult, cfFB_ChgTransp
		dw cfFC_PitchSlide, cfFD_RawFrqMode, cfFE_SpcFM3Mode, cfMetaCoordFlag
cfMetaPtrTable:	dw cf00_SetTempo, cf01_PlaySnd,	cf02_MusPause, cf03_CopyMem
					; DATA XREF: RAM:cfMetaCoordFlago
		dw cf04_TickMulAll, cf05_SSGEG,	cf06_FMVolEnv
; ---------------------------------------------------------------------------

cfEA_Dummy:				; DATA XREF: RAM:cfPtrTableo
		dec	de
		ret

; =============== S U B	R O U T	I N E =======================================


cfE0_Pan:				; CODE XREF: DoPanAnimation+3Fp
					; DATA XREF: RAM:cfPtrTableo
		ld	c, 3Fh

loc_9F6:				; CODE XREF: RAM:0A0Ej
		ld	a, (ix+0Ah)
		and	c
		ex	de, hl
		or	(hl)
		ld	(ix+0Ah), a
		ld	c, a
		ld	a, 0B4h
		rst	WriteFMIorII
		ex	de, hl
		ret
; End of function cfE0_Pan

; ---------------------------------------------------------------------------

cfE9_SetLFO:				; DATA XREF: RAM:cfPtrTableo
		ld	c, a
		ld	a, 22h
		call	WriteFMI
		inc	de
		ld	c, 0C0h
		jr	loc_9F6
; ---------------------------------------------------------------------------

cfE1_Detune:				; DATA XREF: RAM:cfPtrTableo
		ld	(ix+10h), a
		ret
; ---------------------------------------------------------------------------

cfE2_SetComm:				; DATA XREF: RAM:cfPtrTableo
		ld	(byte_1C16), a
		ret
; ---------------------------------------------------------------------------

cfE3_SilenceTrk:			; DATA XREF: RAM:cfPtrTableo
		call	SilenceFMChn
		jp	cfF2_StopTrk
; ---------------------------------------------------------------------------

cfE4_PanAnim:				; DATA XREF: RAM:cfPtrTableo
		push	ix
		pop	hl
		ld	bc, 11h
		add	hl, bc
		ex	de, hl
		ld	bc, 5
		ldir
		ld	a, 1
		ld	(de), a
		ex	de, hl
		dec	de
		ret
; ---------------------------------------------------------------------------

cfE5_ChgPFMVol:				; DATA XREF: RAM:cfPtrTableo
		inc	de
		add	a, (ix+6)
		ld	(ix+6),	a
		ld	a, (de)

cfE6_ChgFMVol:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		ret	nz
		add	a, (ix+6)
		ld	(ix+6),	a
		bit	3, (ix+1)
		jp	nz, locret_F38

; =============== S U B	R O U T	I N E =======================================


RefreshVolume:				; CODE XREF: SendFMIns+1Cj
					; DoFading+3Bp
		push	de
		ld	de, Volume_Ops
		ld	l, (ix+1Ch)
		ld	h, (ix+1Dh)
		ld	b, 4

loc_A57:				; CODE XREF: RefreshVolume+2Bj
		ld	a, (hl)
		or	a
		jp	p, loc_A6F
		add	a, (ix+6)
		jp	m, loc_A64
		ld	a, 0FFh

loc_A64:				; CODE XREF: RefreshVolume+14j
		push	hl
		ld	hl, byte_1C06
		add	a, (hl)
		jp	m, loc_A6E
		ld	a, 0FFh

loc_A6E:				; CODE XREF: RefreshVolume+1Ej
		pop	hl

loc_A6F:				; CODE XREF: RefreshVolume+Ej
		and	7Fh
		ld	c, a
		ld	a, (de)
		rst	WriteFMIorII
		inc	de
		inc	hl
		djnz	loc_A57
		pop	de
		ret
; End of function RefreshVolume

; ---------------------------------------------------------------------------

cfE7_Hold:				; DATA XREF: RAM:cfPtrTableo
		set	1, (ix+0)
		dec	de
		ret
; ---------------------------------------------------------------------------

cfE8_NoteStop:				; DATA XREF: RAM:cfPtrTableo
		call	TickMultiplier
		ld	(ix+1Eh), a
		ld	(ix+1Fh), a
		ret
; ---------------------------------------------------------------------------

cfEB_LoopExit:				; DATA XREF: RAM:cfPtrTableo
		inc	de
		add	a, 28h
		ld	c, a
		ld	b, 0
		push	ix
		pop	hl
		add	hl, bc
		ld	a, (hl)
		dec	a
		jp	z, loc_A9B
		inc	de
		ret
; ---------------------------------------------------------------------------

loc_A9B:				; CODE XREF: RAM:0A96j
		xor	a
		ld	(hl), a
		jp	cfF6_GoTo
; ---------------------------------------------------------------------------

cfEC_ChgPSGVol:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		ret	z
		res	4, (ix+0)
		dec	(ix+17h)
		add	a, (ix+6)
		cp	0Fh
		jp	c, loc_AB6
		ld	a, 0Fh

loc_AB6:				; CODE XREF: RAM:0AB1j
		ld	(ix+6),	a
		ret
; ---------------------------------------------------------------------------

cfED_FMChnWrite:			; DATA XREF: RAM:cfPtrTableo
		call	ReadFMCommand
		rst	WriteFMIorII
		ret
; ---------------------------------------------------------------------------

cfEE_FM1Write:				; DATA XREF: RAM:cfPtrTableo
		call	ReadFMCommand
		call	WriteFMI
		ret

; =============== S U B	R O U T	I N E =======================================


ReadFMCommand:				; CODE XREF: RAM:cfED_FMChnWritep
					; RAM:cfEE_FM1Writep
		ex	de, hl
		ld	a, (hl)		; read Register
		inc	hl
		ld	c, (hl)		; read Data
		ex	de, hl
		ret
; End of function ReadFMCommand

; ---------------------------------------------------------------------------

cfEF_SetFMIns:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		jr	nz, loc_B05
		call	SetMaxRelRate
		ld	a, (de)
		ld	(ix+8),	a
		or	a
		jp	p, loc_AFB
		inc	de
		ld	a, (de)
		ld	(ix+0Fh), a

; =============== S U B	R O U T	I N E =======================================


SetInsFromSong:				; CODE XREF: RAM:0B7Ap
		push	de
		ld	a, (ix+0Fh)
		sub	81h
		ld	hl, (MusListPtr)
		rst	ReadPtrTable
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	a, (ix+8)
		and	7Fh
		ld	b, a
		call	JumpToInsData
		jr	loc_B00
; ---------------------------------------------------------------------------

loc_AFB:				; CODE XREF: RAM:0ADAj
		push	de
		ld	b, a
		call	GetFMInsPtr

loc_B00:				; CODE XREF: SetInsFromSong+17j
		call	SendFMIns
		pop	de
		ret
; End of function SetInsFromSong

; ---------------------------------------------------------------------------

loc_B05:				; CODE XREF: RAM:0AD0j
		or	a
		ret	p
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF0_ModSetup:				; DATA XREF: RAM:cfPtrTableo
		ld	(ix+20h), e
		ld	(ix+21h), d
		ld	(ix+7),	80h
		inc	de
		inc	de
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF1_ModTypePFM:			; DATA XREF: RAM:cfPtrTableo
		inc	de
		bit	7, (ix+1)
		jr	nz, cfF4_ModType
		ld	a, (de)

cfF4_ModType:				; CODE XREF: RAM:0B1Cj
					; DATA XREF: RAM:cfPtrTableo
		ld	(ix+7),	a
		ret
; ---------------------------------------------------------------------------

cfF2_StopTrk:				; CODE XREF: RAM:0A1Bj
					; DATA XREF: RAM:cfPtrTableo
		res	7, (ix+0)
		ld	a, 1Fh
		ld	(byte_1C15), a
		ld	a, (byte_1C3D)
		or	a
		jp	m, loc_BC6
		call	DoNoteOff
		ld	c, (ix+1)
		push	ix
		call	GetSFXChnPtrs
		ld	a, (byte_1C19)
		or	a
		jp	z, loc_BC1
		xor	a
		ld	(byte_1C18), a
		push	hl
		ld	hl, (word_1C37)
		pop	ix
		res	2, (ix+0)
		bit	7, (ix+1)
		jr	nz, loc_BCC
		bit	7, (ix+0)
		jr	z, loc_BC1
		ld	a, 2
		cp	(ix+1)
		jr	nz, loc_B73
		ld	a, 4Fh
		bit	0, (ix+0)
		jr	nz, loc_B70
		and	0Fh

loc_B70:				; CODE XREF: RAM:0B6Cj
		call	SendFM3SpcMode

loc_B73:				; CODE XREF: RAM:0B64j
		ld	a, (ix+8)
		or	a
		jp	p, loc_B7F
		call	SetInsFromSong
		jr	loc_BBE
; ---------------------------------------------------------------------------

loc_B7F:				; CODE XREF: RAM:0B77j
		ld	b, a
		push	hl
		ld	hl, byte_1C04
		ld	a, (hl)
		ld	hl, 6000h	; switch to Song Bank
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		pop	hl
		call	JumpToInsData
		call	SendFMIns
		push	hl
		ld	hl, 6000h	; switch to SFX	Bank (8D0000)
		xor	a		; Bank bits written: 11Ah
		ld	e, 1
		ld	(hl), a
		ld	(hl), e
		ld	(hl), a
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		pop	hl
		ld	a, (ix+18h)
		or	a
		jp	p, loc_BC1
		ld	e, (ix+19h)
		ld	d, (ix+1Ah)

loc_BBE:				; CODE XREF: RAM:0B7Dj
		call	SendSSGEG

loc_BC1:				; CODE XREF: RAM:0B42j	RAM:0B5Dj ...
		pop	ix
		pop	hl
		pop	hl
		ret
; ---------------------------------------------------------------------------

loc_BC6:				; CODE XREF: RAM:0B30j
		xor	a
		ld	(byte_1C3D), a
		pop	hl
		ret
; ---------------------------------------------------------------------------

loc_BCC:				; CODE XREF: RAM:0B57j
		bit	0, (ix+0)
		jr	z, loc_BC1
		ld	a, (ix+1Ah)
		or	a
		jp	p, loc_BDC
		ld	(PSGState_Ch4),	a

loc_BDC:				; CODE XREF: RAM:0BD6j
		jr	loc_BC1
; ---------------------------------------------------------------------------

cfF3_PSGNoise:				; DATA XREF: RAM:cfPtrTableo
		bit	2, (ix+1)
		ret	nz
		ld	a, 0DFh
		ld	(PSGState_Ch3+2), a
		ld	a, (de)
		ld	(ix+1Ah), a
		set	0, (ix+0)
		or	a
		jr	nz, loc_BFD
		res	0, (ix+0)
		ld	a, 0FFh
		ld	(PSGState_Ch4+2), a
		ret
; ---------------------------------------------------------------------------

loc_BFD:				; CODE XREF: RAM:0BF1j
		ld	(PSGState_Ch4),	a
		ret
; ---------------------------------------------------------------------------

cfF5_SetPSGIns:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		ret	z
		ld	(ix+8),	a
		ret
; ---------------------------------------------------------------------------

cfF6_GoTo:				; CODE XREF: RAM:0A9Dj	RAM:0C22j
					; DATA XREF: ...
		ex	de, hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		dec	de
		ret
; ---------------------------------------------------------------------------

cfF7_Loop:				; DATA XREF: RAM:cfPtrTableo
		inc	de
		add	a, 28h
		ld	c, a
		ld	b, 0
		push	ix
		pop	hl
		add	hl, bc
		ld	a, (hl)
		or	a
		jr	nz, loc_C20
		ld	a, (de)
		ld	(hl), a

loc_C20:				; CODE XREF: RAM:0C1Cj
		inc	de
		dec	(hl)
		jp	nz, cfF6_GoTo
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF8_GoSub:				; DATA XREF: RAM:cfPtrTableo
		ld	c, a
		inc	de
		ld	a, (de)
		ld	b, a
		push	bc
		push	ix
		pop	hl
		dec	(ix+9)
		ld	c, (ix+9)
		dec	(ix+9)
		ld	b, 0
		add	hl, bc
		ld	(hl), d
		dec	hl
		ld	(hl), e
		pop	de
		dec	de
		ret
; ---------------------------------------------------------------------------

cfF9_Return:				; DATA XREF: RAM:cfPtrTableo
		push	ix
		pop	hl
		ld	c, (ix+9)
		ld	b, 0
		add	hl, bc
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	(ix+9)
		inc	(ix+9)
		ret
; ---------------------------------------------------------------------------

cfFA_TickMult:				; DATA XREF: RAM:cfPtrTableo
		ld	(ix+2),	a
		ret
; ---------------------------------------------------------------------------

cfFB_ChgTransp:				; DATA XREF: RAM:cfPtrTableo
		add	a, (ix+5)
		ld	(ix+5),	a
		ret
; ---------------------------------------------------------------------------

cfFC_PitchSlide:			; DATA XREF: RAM:cfPtrTableo
		cp	1
		jr	nz, loc_C68
		set	5, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_C68:				; CODE XREF: RAM:0C61j
		res	1, (ix+0)
		res	5, (ix+0)
		xor	a
		ld	(ix+10h), a
		ret
; ---------------------------------------------------------------------------

cfFD_RawFrqMode:			; DATA XREF: RAM:cfPtrTableo
		cp	1
		jr	nz, loc_C7E
		set	3, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_C7E:				; CODE XREF: RAM:0C77j
		res	3, (ix+0)
		ret
; ---------------------------------------------------------------------------

cfFE_SpcFM3Mode:			; DATA XREF: RAM:cfPtrTableo
		ld	a, (ix+1)
		cp	2
		jr	nz, SpcFM3_skip
		set	0, (ix+0)
		ex	de, hl
		call	GetFM3FreqPtr
		ld	b, 4

loc_C94:				; CODE XREF: RAM:0CA6j
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ld	hl, FM3_FreqVals
		add	a, a
		ld	c, a
		ld	b, 0
		add	hl, bc
		ldi
		ldi
		pop	hl
		pop	bc
		djnz	loc_C94
		ex	de, hl
		dec	de
		ld	a, 4Fh

; =============== S U B	R O U T	I N E =======================================


SendFM3SpcMode:				; CODE XREF: RAM:loc_B70p
		ld	(byte_1C12), a
		ld	c, a
		ld	a, 27h
		call	WriteFMI
		ret
; End of function SendFM3SpcMode

; ---------------------------------------------------------------------------

SpcFM3_skip:				; CODE XREF: RAM:0C88j
		inc	de
		inc	de
		inc	de
		ret
; ---------------------------------------------------------------------------
FM3_FreqVals:	dw 0, 132h, 18Eh, 1E4h,	234h, 27Eh, 2C2h, 2F0h ; DATA XREF: RAM:0C98o
; ---------------------------------------------------------------------------

cfMetaCoordFlag:			; DATA XREF: RAM:cfPtrTableo
		ld	hl, cfMetaPtrTable
		rst	ReadPtrTable
		inc	de
		ld	a, (de)
		jp	(hl)
; ---------------------------------------------------------------------------

cf00_SetTempo:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(byte_1C14), a
		ld	(byte_1C13), a
		ret
; ---------------------------------------------------------------------------

cf01_PlaySnd:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(byte_1C09), a	; put into Sound Queue
		ret
; ---------------------------------------------------------------------------

cf02_MusPause:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(byte_1C11), a	; 1C11 - Music is paused
		or	a
		jr	z, loc_CFF	; 00 - unpause,	so jump
		push	ix		; 01-FF	- pause	music
		push	de
		ld	ix, byte_1C40
		ld	b, 0Dh
		ld	de, 30h

loc_CEE:				; CODE XREF: RAM:0CF7j
		res	7, (ix+0)
		call	SendNoteOff
		add	ix, de
		djnz	loc_CEE
		pop	de
		pop	ix
		jp	PSGSilenceAll
; ---------------------------------------------------------------------------

loc_CFF:				; CODE XREF: RAM:0CE0j
		push	ix
		push	de
		ld	ix, byte_1C40
		ld	b, 0Dh
		ld	de, 30h

loc_D0B:				; CODE XREF: RAM:0D11j
		set	7, (ix+0)
		add	ix, de
		djnz	loc_D0B
		pop	de
		pop	ix
		ret
; ---------------------------------------------------------------------------

cf03_CopyMem:				; DATA XREF: RAM:cfMetaPtrTableo
		ex	de, hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	hl
		ld	c, (hl)
		ld	b, 0
		inc	hl
		ex	de, hl
		ldir
		dec	de
		ret
; ---------------------------------------------------------------------------

cf04_TickMulAll:			; DATA XREF: RAM:cfMetaPtrTableo
		ld	b, 0Dh
		ld	hl,  byte_1C40+2

loc_D2A:				; CODE XREF: RAM:0D31j
		push	bc
		ld	bc, 30h
		ld	(hl), a
		add	hl, bc
		pop	bc
		djnz	loc_D2A
		ret
; ---------------------------------------------------------------------------

cf05_SSGEG:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(ix+18h), 80h
		ld	(ix+19h), e
		ld	(ix+1Ah), d

; =============== S U B	R O U T	I N E =======================================


SendSSGEG:				; CODE XREF: RAM:loc_BBEp
		ld	hl, SSGEG_Regs
		ld	b, 4

loc_D43:				; CODE XREF: SendSSGEG+Bj
		ld	a, (de)
		inc	de
		ld	c, a
		ld	a, (hl)
		inc	hl
		rst	WriteFMIorII
		djnz	loc_D43
		dec	de
		ret
; End of function SendSSGEG

; ---------------------------------------------------------------------------

cf06_FMVolEnv:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(ix+18h), a
		inc	de
		ld	a, (de)
		ld	(ix+19h), a
		ret
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR UpdateTrack

UpdatePSGTrk:				; CODE XREF: UpdateTrack+4j
		call	TrackTimeout
		jr	nz, loc_D68
		call	TrkUpdate_Proc
		bit	4, (ix+0)
		ret	nz
		call	PrepareModulat
		jr	loc_D74
; ---------------------------------------------------------------------------

loc_D68:				; CODE XREF: UpdateTrack+C4Bj
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_D74
		dec	(ix+1Eh)
		jp	z, SetRest

loc_D74:				; CODE XREF: UpdateTrack+C58j
					; UpdateTrack+C5Ej
		call	DoPitchSlide
		call	DoModulation
		bit	2, (ix+0)
		ret	nz
		ld	c, (ix+1)
		ld	a, l
		and	0Fh
		or	c
		exx
		push	af
		ld	a, (ix+1)
		sub	80h
		srl	a
		srl	a
		srl	a
		ld	b, 0
		ld	c, a
		ld	hl, PSGState_Ch1
		add	hl, bc
		pop	af
		ld	(hl), a
		inc	hl
		exx
		ld	a, l
		and	0F0h
		or	h
		rrca
		rrca
		rrca
		rrca
		exx
		ld	(hl), a
		exx
		ld	a, (ix+8)
		or	a
		ld	c, 0
		jr	z, loc_DBA
		dec	a
		ld	hl, (VolEnvListPtr)
		rst	ReadPtrTable
		call	DoPSGVolEnv
		ld	c, a

loc_DBA:				; CODE XREF: UpdateTrack+CA1j
		bit	4, (ix+0)
		ret	nz
		ld	a, (ix+6)
		add	a, c
		bit	4, a
		jr	z, loc_DC9
		ld	a, 0Fh

loc_DC9:				; CODE XREF: UpdateTrack+CB7j
		or	(ix+1)
		add	a, 10h
		bit	0, (ix+0)
		jr	nz, loc_DEA
		push	af
		ld	a, (ix+1)
		sub	80h
		srl	a
		srl	a
		srl	a
		ld	b, 0
		ld	c, a
		ld	hl,  PSGState_Ch1+2
		add	hl, bc
		pop	af
		ld	(hl), a
		ret
; ---------------------------------------------------------------------------

loc_DEA:				; CODE XREF: UpdateTrack+CC4j
		or	0F0h
		ld	(PSGState_Ch4+2), a
		ret
; END OF FUNCTION CHUNK	FOR UpdateTrack
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DoPSGVolEnv

loc_DF0:				; CODE XREF: DoPSGVolEnv+1Bj
					; DoPSGVolEnv+26j
		ld	(ix+17h), a
; END OF FUNCTION CHUNK	FOR DoPSGVolEnv

; =============== S U B	R O U T	I N E =======================================


DoPSGVolEnv:				; CODE XREF: DoFMVolEnv+Bp
					; UpdateTrack+CA8p

; FUNCTION CHUNK AT 0DF0 SIZE 00000003 BYTES

		push	hl
		ld	c, (ix+17h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jr	z, VolEnv_Next
		cp	83h
		jr	z, VolEnv_Off
		cp	81h
		jr	z, VolEnv_Hold
		cp	80h
		jr	z, VolEnv_Reset
		inc	bc
		ld	a, (bc)
		jr	loc_DF0
; ---------------------------------------------------------------------------

VolEnv_Off:				; CODE XREF: DoPSGVolEnv+Fj
		set	4, (ix+0)
		pop	hl
		jp	SetRest
; ---------------------------------------------------------------------------

VolEnv_Reset:				; CODE XREF: DoPSGVolEnv+17j
		xor	a
		jr	loc_DF0
; ---------------------------------------------------------------------------

VolEnv_Hold:				; CODE XREF: DoPSGVolEnv+13j
		pop	hl
		set	4, (ix+0)
		ret
; ---------------------------------------------------------------------------

VolEnv_Next:				; CODE XREF: DoPSGVolEnv+Bj
		inc	(ix+17h)
		ret
; End of function DoPSGVolEnv


; =============== S U B	R O U T	I N E =======================================


SetRest:				; CODE XREF: TrkUpdate_Proc+2Dp
					; UpdateTrack+C63j ...
		set	4, (ix+0)
		bit	2, (ix+0)
		ret	nz
; End of function SetRest


; =============== S U B	R O U T	I N E =======================================


SilencePSGChn:				; CODE XREF: GetSFXChnPtrs+Fp
		ld	a, (ix+1)
		or	a
		ret	p
		sub	80h
		srl	a
		srl	a
		srl	a
		ld	b, 0
		ld	c, a
		ld	hl,  PSGState_Ch1+2
		add	hl, bc
		ld	a, 1Fh
		add	a, (ix+1)
		ld	(hl), a
		bit	0, (ix+0)
		ret	z
		ld	a, 0FFh
		ld	(PSGState_Ch4+2), a
		ret
; End of function SilencePSGChn


; =============== S U B	R O U T	I N E =======================================


SendPSGState:				; CODE XREF: RAM:006Ap	UpdateAll+37p
		ld	hl, 6000h	; switch to Bank 400000
		xor	a
		ld	b, 7

loc_E59:				; CODE XREF: SendPSGState+7j
		ld	(hl), a
		djnz	loc_E59
		ld	(hl), 1
		ld	(hl), a
		ld	hl, PSGState_Ch1
		ld	b, 3

loc_E64:				; CODE XREF: SendPSGState:loc_E7Bj
		ld	a, (hl)
		inc	hl
		ld	c, (hl)
		inc	hl
		or	a
		jr	z, loc_E72
		ld	(7F11h), a
		ld	a, c
		ld	(7F11h), a

loc_E72:				; CODE XREF: SendPSGState+16j
		ld	a, (hl)
		inc	hl
		inc	hl
		or	a
		jr	z, loc_E7B
		ld	(7F11h), a

loc_E7B:				; CODE XREF: SendPSGState+23j
		djnz	loc_E64
		ld	a, (hl)
		inc	hl
		inc	hl
		or	a
		jr	z, loc_E86
		ld	(7F11h), a

loc_E86:				; CODE XREF: SendPSGState+2Ej
		ld	a, (hl)
		or	a
		jr	z, loc_E8D
		ld	(7F11h), a

loc_E8D:				; CODE XREF: SendPSGState+35j
		ld	hl, PSGState_Ch1
		ld	de,  PSGState_Ch1+1
		ld	bc, 0Fh
		ld	(hl), 0
		ldir
		ld	hl, byte_1C04
		ld	a, (hl)
		ld	hl, 6000h	; switch to Song Bank
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), 1
		ret
; End of function SendPSGState

; ---------------------------------------------------------------------------
PSGState_Ch1:	db 0, 0, 0, 0		; DATA XREF: RAM:006Eo
					; UpdateTrack+C88o ...
PSGState_Ch2:	db 0, 0, 0, 0
PSGState_Ch3:	db 0, 0, 0, 0		; DATA XREF: RAM:0BE5w
PSGState_Ch4:	db 0, 0, 0, 0		; DATA XREF: RAM:0BD9w	RAM:loc_BFDw ...
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR UpdateTrack

UpdatePWMTrk:				; CODE XREF: UpdateTrack+Bj
		call	TrackTimeout
		ret	nz
		ld	a, 80h
		ld	(byte_1C3D), a	; set "processing PWM track" status byte
		ld	e, (ix+3)
		ld	d, (ix+4)
		res	1, (ix+0)

loc_ED5:				; CODE XREF: RAM:0F2Bj
		ld	a, (de)
		inc	de
		ld	hl, cfReturn_PWM
		cp	0E0h
		jp	nc, cfHandler_JmpIn
		or	a
		jp	p, SetDuration_PWM
		ld	(ix+0Dh), a
		ld	a, (de)
		or	a
		jp	p, loc_F2E
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a

loc_EF1:				; CODE XREF: UpdateTrack+E27j
		ld	hl, unk_1BF8	; 1BF8 - PWM Sound Commands
		ld	a, (ix+1)
		sub	18h
		ld	c, a
		ld	b, 0
		add	hl, bc
		ld	a, (ix+0Dh)
		cp	80h
		jp	z, loc_F09
		ld	a, (ix+6)
		ld	(hl), a

loc_F09:				; CODE XREF: UpdateTrack+DF4j
		inc	hl
		bit	1, (ix+0)
		jr	nz, loc_F19
		ld	a, (ix+0Dh)
		sub	81h
		jp	m, loc_F19
		ld	(hl), a

loc_F19:				; CODE XREF: UpdateTrack+E00j
					; UpdateTrack+E07j
		ld	(ix+3),	e
		ld	(ix+4),	d
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		xor	a
		ld	(byte_1C3D), a
		ret
; END OF FUNCTION CHUNK	FOR UpdateTrack
; ---------------------------------------------------------------------------

cfReturn_PWM:				; DATA XREF: UpdateTrack+DC9o
		inc	de
		jp	loc_ED5
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR UpdateTrack

loc_F2E:				; CODE XREF: UpdateTrack+DDAj
		inc	de

SetDuration_PWM:			; CODE XREF: UpdateTrack+DD2j
		call	TickMultiplier
		ld	(ix+0Ch), a
		jp	loc_EF1
; END OF FUNCTION CHUNK	FOR UpdateTrack
; ---------------------------------------------------------------------------

locret_F38:				; CODE XREF: RAM:0A48j
		ret

; =============== S U B	R O U T	I N E =======================================


SetReadyStatus:				; CODE XREF: UpdateAll+3Ap
		ld	hl, byte_1BF7	; 1BF7 - Status	Byte
		dec	(hl)		; set to FF (finished)
		ret
; End of function SetReadyStatus

; ---------------------------------------------------------------------------
		db [ 0C2h ], 0AAh
SndPrioPtr:	dw SndPriorities	; DATA XREF: DoSoundQueue+16r
		dw SFXPtrs		; actually SpcSFXPtrs
MusListPtr:	dw MusicPtrs		; DATA XREF: PlaySoundID+6Er
					; SetInsFromSong+6r
SFXListPtr:	dw SFXPtrs		; DATA XREF: PlaySoundID+154r
ModEnvListPtr:	dw ModEnvPtrs		; DATA XREF: DoModulation+53r
VolEnvListPtr:	dw VolEnvPtrs		; DATA XREF: DoFMVolEnv+7r
					; UpdateTrack+CA4r
		dw 29h			; music	limit
		dw 0
SongBankPtr:	dw SongBanks		; DATA XREF: PlaySoundID+4Ar
SongBanks:	db 18h,	18h, 18h, 18h, 18h, 18h, 18h, 18h, 18h,	18h, 18h
					; DATA XREF: RAM:SongBankPtro
		db 18h,	18h, 18h, 19h, 19h, 19h, 19h, 19h, 19h,	19h, 19h
		db 19h,	19h, 19h, 19h, 19h, 19h, 19h, 19h, 19h,	19h, 19h
		db 19h,	19h, 19h, 19h, 1Ah, 1Ah, 1Ah
MusicPtrs:	dw   8000h,  8D61h,  9904h, 0A8A6h, 0B49Ah, 0C220h, 0D09Ch
					; DATA XREF: RAM:MusListPtro
		dw  0D36Bh, 0DDEEh, 0E1BEh, 0E8E5h, 0EFE8h, 0F4E3h, 0F7F0h
		dw   8000h,  836Ah,  8A39h,  8C96h,  915Dh,  951Dh,  9FB0h
		dw  0A58Ch, 0AC3Ch, 0B082h, 0B6F5h, 0BBFFh, 0C44Eh, 0C8FAh
		dw  0CD0Dh, 0D0EFh, 0D34Ch, 0D53Fh, 0D67Ah, 0D8D4h, 0DAABh
		dw  0DCF8h, 0E45Fh,  8000h,  8066h,  80CCh
SFXPtrs:	dw  0E000h, 0E03Eh, 0E066h, 0E099h, 0E0DAh, 0E106h, 0E157h
					; DATA XREF: RAM:1002o	RAM:SFXListPtro
		dw  0E1B0h, 0E1DAh, 0E23Dh, 0E273h, 0E2EDh, 0E319h, 0E351h
		dw  0E390h, 0E3C5h, 0E3E2h, 0E402h, 0E45Dh, 0E4B6h, 0E4F7h
		dw  0E530h, 0E569h, 0E5A3h, 0E5D8h, 0E63Bh, 0E692h, 0E6C3h
		dw  0E708h, 0E732h, 0E7A7h, 0E7EFh, 0E850h, 0E880h, 0E88Dh
		dw  0E8D3h, 0E900h, 0E943h, 0E97Ch, 0E9BDh, 0E9F0h, 0EA1Fh
		dw  0EA62h, 0EA85h, 0EAB2h, 0EAEDh, 0EB15h, 0EB53h, 0EB85h
		dw  0EBBDh, 0EBF5h, 0EC3Bh, 0EC83h, 0EC94h, 0ECBDh, 0ECF0h
		dw  0ED6Bh, 0ED9Fh, 0EDCCh, 0EDFEh, 0EE41h, 0EE6Eh, 0EEA2h
		dw  0EECFh
SndPriorities:	db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
					; DATA XREF: RAM:SndPrioPtro
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh
VolEnvPtrs:	dw byte_116A, byte_116C, byte_1175, byte_117F, byte_118B
					; DATA XREF: RAM:VolEnvListPtro
		dw byte_1196, byte_11BD, byte_1201, byte_1209, byte_121E
		dw byte_1233, byte_123D, byte_1246, byte_1273
byte_116A:	db 2, 83h		; DATA XREF: RAM:VolEnvPtrso
byte_116C:	db 0, 0, 0, 2, 4, 6, 8,	10h, 83h ; DATA	XREF: RAM:VolEnvPtrso
byte_1175:	db 1, 0, 0, 0, 2, 4, 6,	8, 10h,	83h ; DATA XREF: RAM:VolEnvPtrso
byte_117F:	db 4, 3, 2, 1, 0, 0, 1,	1, 2, 2, 2, 81h	; DATA XREF: RAM:VolEnvPtrso
byte_118B:	db 3, 0, 1, 1, 1, 2, 3,	4, 4, 5, 81h ; DATA XREF: RAM:VolEnvPtrso
byte_1196:	db 0, 0, 0, 0, 1, 1, 1,	1, 1, 1, 2, 2, 2, 2, 2,	2, 2, 3
					; DATA XREF: RAM:VolEnvPtrso
		db 3, 3, 3, 4, 4, 4, 4,	5, 5, 5, 6, 6, 6, 7, 8,	0Ah, 0Ch
		db 0Eh,	10h, 12h, 83h
byte_11BD:	db 12h,	12h, 11h, 11h, 10h, 10h, 0Fh, 0Fh, 0Fh,	0Eh, 0Eh
					; DATA XREF: RAM:VolEnvPtrso
		db 0Eh,	0Dh, 0Dh, 0Dh, 0Dh, 0Ch, 0Ch, 0Ch, 0Ch,	0Bh, 0Bh
		db 0Bh,	0Bh, 0Bh, 0Ah, 0Ah, 0Ah, 0Ah, 9, 9, 9, 9, 8, 8
		db 8, 8, 7, 7, 7, 7, 6,	6, 6, 6, 5, 5, 5, 5, 4,	4, 4, 4
		db 3, 3, 3, 2, 2, 2, 1,	1, 1, 0, 0, 2, 1, 0, 81h
byte_1201:	db 2, 1, 0, 0, 1, 1, 2,	81h ; DATA XREF: RAM:VolEnvPtrso
byte_1209:	db 6, 6, 6, 6, 6, 5, 5,	5, 5, 5, 4, 4, 4, 3, 3,	3, 3, 3
					; DATA XREF: RAM:VolEnvPtrso
		db 3, 2, 81h
byte_121E:	db 1, 0, 0, 0, 0, 1, 1,	1, 2, 2, 2, 3, 3, 3, 3,	4, 4, 4
					; DATA XREF: RAM:VolEnvPtrso
		db 5, 5, 81h
byte_1233:	db 10h,	20h, 30h, 40h, 30h, 20h, 10h, 0, 0F0h, 80h
					; DATA XREF: RAM:VolEnvPtrso
byte_123D:	db 0, 0, 1, 1, 3, 3, 4,	5, 83h ; DATA XREF: RAM:VolEnvPtrso
byte_1246:	db 0, 0, 0, 0, 1, 1, 1,	1, 2, 2, 2, 2, 3, 3, 3,	3, 4, 4
					; DATA XREF: RAM:VolEnvPtrso
		db 4, 4, 5, 5, 5, 5, 6,	6, 6, 6, 7, 7, 7, 7, 8,	8, 8, 8
		db 9, 9, 9, 9, 0Ah, 0Ah, 0Ah, 0Ah, 81h
byte_1273:	db 0, 0, 2, 5, 9, 0Eh, 83h ; DATA XREF:	RAM:VolEnvPtrso
ModEnvPtrs:	dw byte_128E, byte_129A, byte_12A7, byte_12B3, byte_12F5
					; DATA XREF: RAM:ModEnvListPtro
		dw byte_132A, byte_1367, byte_1381, byte_139B, byte_13A3
byte_128E:	db 40h,	60h, 70h, 60h, 50h, 30h, 10h, 0F0h, 0D0h, 0B0h
					; DATA XREF: RAM:ModEnvPtrso
		db 90h,	83h
byte_129A:	db 0, 2, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h,	18h, 81h
					; DATA XREF: RAM:ModEnvPtrso
byte_12A7:	db 0, 0, 1, 3, 1, 0, 0FFh, 0FDh, 0FFh, 0, 82h, 2
					; DATA XREF: RAM:ModEnvPtrso
byte_12B3:	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
					; DATA XREF: RAM:ModEnvPtrso
		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
		db 0, 0, 0, 0, 2, 4, 6,	8, 0Ah,	0Ch, 0Ah, 8, 6,	4, 2, 0
		db 0FEh, 0FCh, 0FAh, 0F8h, 0F6h, 0F4h, 0F6h, 0F8h, 0FAh
		db 0FCh, 0FEh, 0, 82h, 29h
byte_12F5:	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
					; DATA XREF: RAM:ModEnvPtrso
		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 2, 4, 6, 8, 0Ah, 0Ch
		db 0Ah,	8, 6, 4, 2, 0, 0FEh, 0FCh, 0FAh, 0F8h, 0F6h, 0F4h
		db 0F6h, 0F8h, 0FAh, 0FCh, 0FEh, 82h, 1Bh
byte_132A:	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
					; DATA XREF: RAM:ModEnvPtrso
		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 3,	6, 3, 0
		db 0FDh, 0FAh, 0FAh, 0FDh, 0, 82h, 33h
byte_1367:	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 2, 4
					; DATA XREF: RAM:ModEnvPtrso
		db 2, 0, 0FEh, 0FCh, 0FEh, 0, 82h, 11h
byte_1381:	db 0FEh, 0FFh, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
					; DATA XREF: RAM:ModEnvPtrso
		db 0, 0, 1, 1, 0, 0, 0FFh, 0FFh, 82h, 11h
byte_139B:	db 3, 2, 1, 0, 0, 0, 1,	81h ; DATA XREF: RAM:ModEnvPtrso
byte_13A3:	db 0, 0, 0, 0, 1, 1, 1,	1, 2, 2, 1, 1, 1, 0, 0,	0, 84h
					; DATA XREF: RAM:ModEnvPtrso
		db 1, 82h, 4
		align 2
		ds 83Fh
byte_1BF7:	ds 1			; DATA XREF: RAM:0080w
					; StopAllSound+24w ...
unk_1BF8:	ds 1			; DATA XREF: RAM:0077o
					; UpdateTrack:loc_EF1o
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
byte_1C04:	ds 1			; DATA XREF: RAM:0085w	RAM:0088o ...
		ds 1
byte_1C06:	ds 1			; DATA XREF: DoFading+24o
					; StopAllSound+27w ...
		ds 1
		ds 1
byte_1C09:	ds 1			; DATA XREF: PlaySoundIDr
					; StopAllSound-1E9w ...
byte_1C0A:	ds 1			; DATA XREF: StopAllSound+3o
					; DoSoundQueue+5o ...
		ds 1
		ds 1
byte_1C0D:	ds 1			; DATA XREF: DoPause+13r RAM:076Bw ...
byte_1C0E:	ds 1			; DATA XREF: RAM:0773w
					; DoFading:ApplyFadingr
byte_1C0F:	ds 1			; DATA XREF: RAM:0770w	DoFading+Br ...
unk_1C10:	ds 1			; DATA XREF: DoPauseo
byte_1C11:	ds 1			; DATA XREF: DoPause:loc_730r
					; RAM:cf02_MusPausew
byte_1C12:	ds 1			; DATA XREF: StopAllSound+39w
					; SendFM3SpcModew
byte_1C13:	ds 1			; DATA XREF: PlaySoundID+81w
					; DoTempo+3o ...
byte_1C14:	ds 1			; DATA XREF: PlaySoundID+84w DoTempor	...
byte_1C15:	ds 1			; DATA XREF: PlaySoundID+165w
					; RAM:0B29w
byte_1C16:	ds 1			; DATA XREF: RAM:cfE2_SetCommw
byte_1C17:	ds 1			; DATA XREF: DoSoundQueue+2w
byte_1C18:	ds 1			; DATA XREF: PlaySoundID+1Ew
					; DoSoundQueue+1Er ...
byte_1C19:	ds 1			; DATA XREF: UpdateAll+10w
					; UpdateSFXTracks+2w ...
unk_1C1A:	ds 1			; DATA XREF: GetFM3FreqPtr+8o
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
unk_1C22:	ds 1			; DATA XREF: GetFM3FreqPtr+Co
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
unk_1C2A:	ds 1			; DATA XREF: GetFM3FreqPtro
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
byte_1C32:	ds 1			; DATA XREF: GetSFXChnPtrs+27w
word_1C33:	ds 2			; DATA XREF: PlaySoundID+8Bw
					; PlaySoundID+AAr ...
word_1C35:	ds 2			; DATA XREF: PlaySoundID+91w
					; PlaySoundID+9Er ...
word_1C37:	ds 2			; DATA XREF: GetFMInsPtrr
					; PlaySoundID+78w ...
word_1C39:	ds 2			; DATA XREF: PlaySoundID+161w
					; PlaySoundID+1BCr
byte_1C3B:	ds 1			; DATA XREF: PlaySoundID+16Fw
					; PlaySoundID+199r
		ds 1
byte_1C3D:	ds 1			; DATA XREF: RAM:0B2Cr	RAM:0BC7w ...
		ds 1
		ds 1
byte_1C40:	ds 30h			; DATA XREF: UpdateAll+2Ao
					; UpdateAll+30o ...
		ds 30h
		ds 30h
		ds 30h
		ds 30h
		ds 30h
byte_1D60:	ds 30h			; DATA XREF: PlaySoundID+CCo
					; StopDrumPSG+1w
byte_1D90:	ds 30h			; DATA XREF: StopDrumPSG+4w
		ds 30h
byte_1DF0:	ds 0C0h			; DATA XREF: PlaySoundID+F6o
unk_1EB0:	ds 1			; DATA XREF: UpdateSFXTracks+15o
					; DoPause+39o
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
		ds 1
; end of 'RAM'


		end
