                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
       = 00008E         pFingSnap	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm

                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000
       = 000022         PWMVol1	EQU	$22
       = 000010         PWMVol2	EQU	$10

                        ;!@ PSGVoi1	EQU	$01
                        ;!@ PSGVoi2	EQU	$04
                        ;!@ PSGVoi3	EQU	$05
       = 000000         PSGVoi1	EQU	$00
       = 000000         PSGVoi2	EQU	$00
       = 000000         PSGVoi3	EQU	$00

                        ;!@ PSGVol1	EQU	$07
                        ;!@ PSGVol2	EQU	$0B
                        ;!@ PSGVol3	EQU	$0A
       = 000003         PSGVol1	EQU	$03
       = 000006         PSGVol2	EQU	$06
       = 000004         PSGVol3	EQU	$04

                        ;!@
       = 00000C         PSGFOff EQU	$0C
000000                  	smpsHeaderVoice		SH_SystemMenu_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SH_SystemMenu_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 2A8D             	dc.w  (((((SH_SystemMenu_Patches+Target))<<8)&$FF00)|((((SH_SystemMenu_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		6,3
                        	if 2==2
000002 0603             		dc.b	6,3
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $0F
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($0F)
                        		if ($0F)==0
                        		else
000005 11               			dc.b	((256 - ((((($0F))-1)*256 + ((($0F))/2)) / (($0F)))) % 256)
                        		endif
000006                  	smpsHeaderFM	SH_SystemMenu_FM1, Target, $00, $11
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SH_SystemMenu_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SH_SystemMenu_FM1+Target))<<8)&$FF00)|((((SH_SystemMenu_FM1+Target))>>8)&$7F)|$80)
000008 0011             	dc.b	$00,$11
00000A                  	smpsHeaderFM	SH_SystemMenu_FM2, Target, $00, $23+$08
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SH_SystemMenu_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A EF80             	dc.w  (((((SH_SystemMenu_FM2+Target))<<8)&$FF00)|((((SH_SystemMenu_FM2+Target))>>8)&$7F)|$80)
00000C 002B             	dc.b	$00,$23+$08
00000E                  	smpsHeaderFM	SH_SystemMenu_FM3, Target, $00, $14+$08
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SH_SystemMenu_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 1F83             	dc.w  (((((SH_SystemMenu_FM3+Target))<<8)&$FF00)|((((SH_SystemMenu_FM3+Target))>>8)&$7F)|$80)
000010 001C             	dc.b	$00,$14+$08
000012                  	smpsHeaderFM	SH_SystemMenu_FM4, Target, $00, $23
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SH_SystemMenu_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 3F84             	dc.w  (((((SH_SystemMenu_FM4+Target))<<8)&$FF00)|((((SH_SystemMenu_FM4+Target))>>8)&$7F)|$80)
000014 0023             	dc.b	$00,$23
000016                  	smpsHeaderFM	SH_SystemMenu_FM5, Target, $F4, $20	;!@ $18
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SH_SystemMenu_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 4385             	dc.w  (((((SH_SystemMenu_FM5+Target))<<8)&$FF00)|((((SH_SystemMenu_FM5+Target))>>8)&$7F)|$80)
000018 F420             	dc.b	$F4,$20
00001A                  	smpsHeaderFM	SH_SystemMenu_FM6, Target, $00, $21
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SH_SystemMenu_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 5986             	dc.w  (((((SH_SystemMenu_FM6+Target))<<8)&$FF00)|((((SH_SystemMenu_FM6+Target))>>8)&$7F)|$80)
00001C 0021             	dc.b	$00,$21
00001E                  	smpsHeaderPSG	SH_SystemMenu_PSG1, Target, PSGFOff, PSGVol1, $00, PSGVoi1
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SH_SystemMenu_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E 5987             	dc.w  (((((SH_SystemMenu_PSG1+Target))<<8)&$FF00)|((((SH_SystemMenu_PSG1+Target))>>8)&$7F)|$80)
000020 0C03             	dc.b	PSGFOff,PSGVol1
                        	;dc.w	voice
000022 0000             	dc.b	$00,PSGVoi1
000024                  	smpsHeaderPSG	SH_SystemMenu_PSG2, Target, PSGFOff, PSGVol2, $00, PSGVoi2
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SH_SystemMenu_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 1A88             	dc.w  (((((SH_SystemMenu_PSG2+Target))<<8)&$FF00)|((((SH_SystemMenu_PSG2+Target))>>8)&$7F)|$80)
000026 0C06             	dc.b	PSGFOff,PSGVol2
                        	;dc.w	voice
000028 0000             	dc.b	$00,PSGVoi2
00002A                  	smpsHeaderPSG	SH_SystemMenu_PSG3, Target, PSGFOff, PSGVol3, $00, PSGVoi2
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SH_SystemMenu_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A D289             	dc.w  (((((SH_SystemMenu_PSG3+Target))<<8)&$FF00)|((((SH_SystemMenu_PSG3+Target))>>8)&$7F)|$80)
00002C 0C04             	dc.b	PSGFOff,PSGVol3
                        	;dc.w	voice
00002E 0000             	dc.b	$00,PSGVoi2
000030                  	smpsHeaderPWM	SH_SystemMenu_PWM1, Target, $00, PWMVol1
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SH_SystemMenu_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 AF8A             	dc.w  (((((SH_SystemMenu_PWM1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	$00
000033 22               	dc.b	PWMVol1
000034                  	smpsHeaderPWM	SH_SystemMenu_PWM2, Target, $00, PWMVol2
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SH_SystemMenu_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 258B             	dc.w  (((((SH_SystemMenu_PWM2+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	$00
000037 10               	dc.b	PWMVol2
000038                  	smpsHeaderPWM	SH_SystemMenu_PWM3, Target, $00, PWMVol2
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SH_SystemMenu_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 D98B             	dc.w  (((((SH_SystemMenu_PWM3+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	$00
00003B 10               	dc.b	PWMVol2
00003C                  	smpsHeaderPWM	SH_SystemMenu_PWM4, Target, $00, PWMVol2
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SH_SystemMenu_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 868C             	dc.w  (((((SH_SystemMenu_PWM4+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	$00
00003F 10               	dc.b	PWMVol2

000040                  SH_SystemMenu_FM1:
000040                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E0C0             		dc.b $E0,panCenter
                        	endif
000042                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,$00
                        	endif
000044 8005             	dc.b	nRst, $05

000046                  SH_SystemMenu_Loop2:
000046 B8               	dc.b	nG4

000047                  SH_SystemMenu_Loop1:
000047 06BD0380C40C     	dc.b	$06, nC5, $03, nRst, nG5, $0C
                        	; dc.b	nG5, $06, nC5, $03, nRst, nG5, $0C
00004D                  	smpsLoop		$00, $02, SH_SystemMenu_Loop1, Target
00004D F7               	dc.b	$F7
00004E 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop1<*)
000050                  		rom_ptr_z80(SH_SystemMenu_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000050 4780             	dc.w  (((((SH_SystemMenu_Loop1+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000052 B806BDBFB8B80380 	dc.b	nG4, $06, nC5, nD5, nG4, nG4, $03, nRst
00005A B606B8188054     	dc.b	nF4, $06, nG4, $18, nRst, $54
000060                  	smpsLoop		$01, $03, SH_SystemMenu_Loop2, Target
000060 F7               	dc.b	$F7
000061 0103             	dc.b	$01,$03
                        	if (SH_SystemMenu_Loop2<*)
000063                  		rom_ptr_z80(SH_SystemMenu_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000063 4680             	dc.w  (((((SH_SystemMenu_Loop2+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000065 B8               	dc.b	nG4

000066                  SH_SystemMenu_Loop3:
000066 06BD0380C40C     	dc.b	$06, nC5, $03, nRst, nG5, $0C
                        	;dc.b	nG5, $06, nC5, $03, nRst, nG5, $0C
00006C                  	smpsLoop		$00, $02, SH_SystemMenu_Loop3, Target
00006C F7               	dc.b	$F7
00006D 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop3<*)
00006F                  		rom_ptr_z80(SH_SystemMenu_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00006F 6680             	dc.w  (((((SH_SystemMenu_Loop3+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000071 B806BDBFB8B80380 	dc.b	nG4, $06, nC5, nD5, nG4, nG4, $03, nRst
                        	;!@ dc.b	nF4, $06, nG4, $18, nRst, $7F, $77
000079 B606B818807F8077 	dc.b	nF4, $06, nG4, $18, nRst, $7F, nRst, $77

000081                  SH_SystemMenu_Loop4:
                        	;!@ dc.b	nG5, $03, $03, nRst, $06, nG5, $03, $03
000081 C403C4038006C403 	dc.b	nG5, $03, nG5, $03, nRst, $06, nG5, $03, nG5, $03
000089 C403
00008B 804E             	dc.b	nRst, $4E
00008D                  	smpsLoop		$00, $03, SH_SystemMenu_Loop4, Target
00008D F7               	dc.b	$F7
00008E 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop4<*)
000090                  		rom_ptr_z80(SH_SystemMenu_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000090 8180             	dc.w  (((((SH_SystemMenu_Loop4+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nG5, $03, $03, nRst, $06, nG5, $03, $03
000092 C403C4038006C403 	dc.b	nG5, $03, nG5, $03, nRst, $06, nG5, $03, nG5, $03
00009A C403
00009C 8007             	dc.b	nRst, $07

00009E                  SH_SystemMenu_Jump1:
                        	;!@ dc.b	nRst, $7F, $4C, nA5, $06, nRst, nC6, nA5
00009E 807F804CC60680C9 	dc.b	nRst, $7F, nRst, $4C, nA5, $06, nRst, nC6, nA5
0000A6 C6
0000A7 80C90CC606C9C6C9 	dc.b	nRst, nC6, $0C, nA5, $06, nC6, nA5, nC6
0000AF 80C0BF038009C91E 	dc.b	nRst, nEb5, nD5, $03, nRst, $09, nC6, $1E
0000B7 C006BF038009C90C 	dc.b	nEb5, $06, nD5, $03, nRst, $09, nC6, $0C
0000BF C506C90CCB0380CB 	dc.b	nAb5, $06, nC6, $0C, nD6, $03, nRst, nD6
0000C7 8009C957804B     	dc.b	nRst, $09, nC6, $57, nRst, $4B

0000CD                  SH_SystemMenu_Loop5:
                        	;!@ dc.b	nG5, $03, $03, nRst, $06, nG5, $03, $03
0000CD C403C4038006C403 	dc.b	nG5, $03, nG5, $03, nRst, $06, nG5, $03, nG5, $03
0000D5 C403
0000D7 804E             	dc.b	nRst, $4E
0000D9                  	smpsLoop		$00, $02, SH_SystemMenu_Loop5, Target
0000D9 F7               	dc.b	$F7
0000DA 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop5<*)
0000DC                  		rom_ptr_z80(SH_SystemMenu_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000DC CD80             	dc.w  (((((SH_SystemMenu_Loop5+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nG5, $03, $03, nRst, $06, nG5, $03, $03
0000DE C403C4038006C403 	dc.b	nG5, $03, nG5, $03, nRst, $06, nG5, $03, nG5, $03
0000E6 C403
0000E8                  	smpsAlterNote	$00
0000E8 E100             	dc.b	$E1,$00
0000EA 8007             	dc.b	nRst, $07
0000EC                  	smpsJump		SH_SystemMenu_Jump1, Target
0000EC F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump1<*)
0000ED                  		rom_ptr_z80(SH_SystemMenu_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000ED 9E80             	dc.w  (((((SH_SystemMenu_Jump1+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000EF                  SH_SystemMenu_FM2:
0000EF                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0000EF EF01             		dc.b $EF,$01
                        	endif
0000F1                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000F1 E0C0             		dc.b $E0,panCenter
                        	endif
                        	;!@ dc.b	nRst

0000F3                  SH_SystemMenu_Loop6:
                        	;!@ dc.b	$55
0000F3 8055             	dc.b	nRst, $55
0000F5                  	smpsLoop		$00, $09, SH_SystemMenu_Loop6, Target
0000F5 F7               	dc.b	$F7
0000F6 0009             	dc.b	$00,$09
                        	if (SH_SystemMenu_Loop6<*)
0000F8                  		rom_ptr_z80(SH_SystemMenu_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000F8 F380             	dc.w  (((((SH_SystemMenu_Loop6+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	$02, nG4, $03, nA4, $01
0000FA 8002B803BA01     	dc.b	nRst, $02, nG4, $03, nA4, $01
000100                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000100 EF01             		dc.b $EF,$01
                        	endif
000102                  	smpsAlterVol		$FA
000102 E6FA             	dc.b	$E6,$FA
000104 E702BC03BDBABCBD 	dc.b	smpsNoAttack, $02, nB4, $03, nC5, nA4, nB4, nC5
00010C BFBCBDBFC1BDBFC1 	dc.b	nD5, nB4, nC5, nD5, nE5, nC5, nD5, nE5
000114 C3               	dc.b	nFs5
000115                  	smpsAlterVol		$01
000115 E601             	dc.b	$E6,$01
000117 BFC1C3C4C1C3C4C6 	dc.b	nD5, nE5, nFs5, nG5, nE5, nFs5, nG5, nA5
00011F C3C4C6C8C4C6     	dc.b	nFs5, nG5, nA5, nB5, nG5, nA5
000125                  	smpsAlterVol		$FF
000125 E6FF             	dc.b	$E6,$FF
000127 C8               	dc.b	nB5
000128                  	smpsAlterVol		$01
000128 E601             	dc.b	$E6,$01
00012A C9C6             	dc.b	nC6, nA5
00012C                  	smpsAlterVol		$FF
00012C E6FF             	dc.b	$E6,$FF
00012E C8C9             	dc.b	nB5, nC6
000130                  	smpsAlterVol		$02
000130 E602             	dc.b	$E6,$02
000132 CBC8             	dc.b	nD6, nB5
000134                  	smpsAlterVol		$01
000134 E601             	dc.b	$E6,$01
000136 C9CBCDC9CB       	dc.b	nC6, nD6, nE6, nC6, nD6
00013B                  	smpsAlterVol		$FF
00013B E6FF             	dc.b	$E6,$FF
00013D CDCFCBCDCFD0CDCF 	dc.b	nE6, nFs6, nD6, nE6, nFs6, nG6, nE6, nFs6
000145 D0D2CFD0D2D4D0D2 	dc.b	nG6, nA6, nFs6, nG6, nA6, nB6, nG6, nA6
00014D D4D5D2           	dc.b	nB6, nC7, nA6
000150                  	smpsAlterVol		$01
000150 E601             	dc.b	$E6,$01
000152 D4               	dc.b	nB6
000153                  	smpsAlterVol		$01
000153 E601             	dc.b	$E6,$01
000155 D5D78006         	dc.b	nC7, nD7, nRst, $06
000159                  	smpsAlterVol		$F3
000159 E6F3             	dc.b	$E6,$F3
00015B AC01             	dc.b	nG3, $01
00015D                  	smpsFMvoice		$06
                        	;if song<>""
                        	if 1==2
                        	else
00015D EF06             		dc.b $EF,$06
                        	endif
00015F                  	smpsAlterVol		$1B
00015F E61B             	dc.b	$E6,$1B
000161 E702AE03B1068003 	dc.b	smpsNoAttack, $02, nA3, $03, nC4, $06, nRst, $03
000169                  	smpsAlterVol		$01
000169 E601             	dc.b	$E6,$01
00016B B18006B5         	dc.b	nC4, nRst, $06, nE4
00016F                  	smpsAlterVol		$01
00016F E601             	dc.b	$E6,$01
000171 B103800FAC03     	dc.b	nC4, $03, nRst, $0F, nG3, $03
000177                  	smpsAlterVol		$01
000177 E601             	dc.b	$E6,$01
000179 AEB180B180B306AC 	dc.b	nA3, nC4, nRst, nC4, nRst, nD4, $06, nG3
000181 03AEB180         	dc.b	$03, nA3, nC4, nRst
000185                  	smpsAlterVol		$FF
000185 E6FF             	dc.b	$E6,$FF
000187 B380             	dc.b	nD4, nRst
000189                  	smpsAlterVol		$FF
000189 E6FF             	dc.b	$E6,$FF
00018B B4B5ACAEB1ACAEB1 	dc.b	nEb4, nE4, nG3, nA3, nC4, nG3, nA3, nC4
000193 80B18006B403B580 	dc.b	nRst, nC4, nRst, $06, nEb4, $03, nE4, nRst
00019B 0CB40380B480     	dc.b	$0C, nEb4, $03, nRst, nEb4, nRst
0001A1                  	smpsAlterVol		$08
0001A1 E608             	dc.b	$E6,$08
0001A3 B480B5           	dc.b	nEb4, nRst, nE4
0001A6                  	smpsAlterVol		$F8
0001A6 E6F8             	dc.b	$E6,$F8
0001A8 03               	dc.b	$03
0001A9                  	smpsAlterVol		$08
0001A9 E608             	dc.b	$E6,$08
                        	;!@ dc.b	$03
0001AB B503             	dc.b	nE4, $03
0001AD                  	smpsAlterVol		$F8
0001AD E6F8             	dc.b	$E6,$F8
                        	;!@ dc.b	$03
0001AF B503             	dc.b	nE4, $03
0001B1                  	smpsAlterVol		$0B
0001B1 E60B             	dc.b	$E6,$0B
0001B3 B1               	dc.b	nC4
0001B4                  	smpsAlterVol		$F5
0001B4 E6F5             	dc.b	$E6,$F5
0001B6 03AEAC80         	dc.b	$03, nA3, nG3, nRst
0001BA                  	smpsAlterVol		$02
0001BA E602             	dc.b	$E6,$02
0001BC AAACAE           	dc.b	nF3, nG3, nA3
0001BF                  	smpsAlterVol		$FF
0001BF E6FF             	dc.b	$E6,$FF
0001C1 B180B180         	dc.b	nC4, nRst, nC4, nRst
0001C5                  	smpsAlterVol		$FF
0001C5 E6FF             	dc.b	$E6,$FF
0001C7 B180             	dc.b	nC4, nRst
0001C9                  	smpsAlterVol		$0B
0001C9 E60B             	dc.b	$E6,$0B
0001CB B580             	dc.b	nE4, nRst
0001CD                  	smpsAlterVol		$F5
0001CD E6F5             	dc.b	$E6,$F5
0001CF B4               	dc.b	nEb4
0001D0                  	smpsAlterVol		$0B
0001D0 E60B             	dc.b	$E6,$0B
0001D2 B506B10380       	dc.b	nE4, $06, nC4, $03, nRst
0001D7                  	smpsAlterVol		$F6
0001D7 E6F6             	dc.b	$E6,$F6
0001D9 B180             	dc.b	nC4, nRst
0001DB                  	smpsAlterVol		$02
0001DB E602             	dc.b	$E6,$02
0001DD B1               	dc.b	nC4
0001DE                  	smpsAlterVol		$FF
0001DE E6FF             	dc.b	$E6,$FF
0001E0 0380B180         	dc.b	$03, nRst, nC4, nRst
0001E4                  	smpsAlterVol		$09
0001E4 E609             	dc.b	$E6,$09
0001E6 AC               	dc.b	nG3
0001E7                  	smpsAlterVol		$F7
0001E7 E6F7             	dc.b	$E6,$F7
0001E9 AE               	dc.b	nA3
0001EA                  	smpsAlterVol		$FF
0001EA E6FF             	dc.b	$E6,$FF
0001EC B180             	dc.b	nC4, nRst
0001EE                  	smpsAlterVol		$0A
0001EE E60A             	dc.b	$E6,$0A
0001F0 AC               	dc.b	nG3
0001F1                  	smpsAlterVol		$F5
0001F1 E6F5             	dc.b	$E6,$F5
0001F3 AE               	dc.b	nA3
0001F4                  	smpsAlterVol		$02
0001F4 E602             	dc.b	$E6,$02
0001F6 B1               	dc.b	nC4
0001F7                  	smpsAlterVol		$FE
0001F7 E6FE             	dc.b	$E6,$FE
0001F9 B38001           	dc.b	nD4, nRst, $01

0001FC                  SH_SystemMenu_Jump2:
0001FC 8006             	dc.b	nRst, $06
0001FE                  	smpsFMvoice		$07
                        	;if song<>""
                        	if 1==2
                        	else
0001FE EF07             		dc.b $EF,$07
                        	endif
                        	;!@ dc.b	$01
000200 8001             	dc.b	nRst, $01
000202                  	smpsAlterVol		$F6
000202 E6F6             	dc.b	$E6,$F6
000204 BC8002C3018002C9 	dc.b	nB4, nRst, $02, nFs5, $01, nRst, $02, nC6
00020C 018002D00180D580 	dc.b	$01, nRst, $02, nG6, $01, nRst, nC7, nRst
000214 03D501D48003C901 	dc.b	$03, nC7, $01, nB6, nRst, $03, nC6, $01
00021C 80C6802F         	dc.b	nRst, nA5, nRst, $2F
000220                  	smpsAlterVol		$08
000220 E608             	dc.b	$E6,$08
000222 C401             	dc.b	nG5, $01
000224                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000224 EF01             		dc.b $EF,$01
                        	endif
000226                  	smpsAlterVol		$E8
000226 E6E8             	dc.b	$E6,$E8
000228 E705C206C1BFBFC2 	dc.b	smpsNoAttack, $05, nF5, $06, nE5, nD5, nD5, nF5
000230 C60CC206BFBC     	dc.b	nA5, $0C, nF5, $06, nD5, nB4
000236                  	smpsAlterNote	$00
000236 E100             	dc.b	$E1,$00
                        	;!@ dc.b	nRst, $7F, $7F, $23
000238 807F807F8023     	dc.b	nRst, $7F, nRst, $7F, nRst, $23
00023E                  	smpsFMvoice		$07
                        	;if song<>""
                        	if 1==2
                        	else
00023E EF07             		dc.b $EF,$07
                        	endif
                        	;!@ dc.b	$04
000240 8004             	dc.b	nRst, $04
000242                  	smpsAlterVol		$10
000242 E610             	dc.b	$E6,$10
000244 BC018002C3018002 	dc.b	nB4, $01, nRst, $02, nFs5, $01, nRst, $02
00024C C9018002D00180D5 	dc.b	nC6, $01, nRst, $02, nG6, $01, nRst, nC7
000254 8003D501D48003C9 	dc.b	nRst, $03, nC7, $01, nB6, nRst, $03, nC6
00025C 0180C68002BF0180 	dc.b	$01, nRst, nA5, nRst, $02, nD5, $01, nRst
000264 02B80180B88002BF 	dc.b	$02, nG4, $01, nRst, nG4, nRst, $02, nD5
                        	;!@ dc.b	$01, nRst, $02, nA5, $01, nRst, nRst, $04
00026C 018002C601800180 	dc.b	$01, nRst, $02, nA5, $01, nRst, $01, nRst, $04
000274 04
000275 D4018006         	dc.b	nB6, $01, nRst, $06
000279                  	smpsAlterVol		$FA
000279 E6FA             	dc.b	$E6,$FA
00027B AC01             	dc.b	nG3, $01
00027D                  	smpsFMvoice		$06
                        	;if song<>""
                        	if 1==2
                        	else
00027D EF06             		dc.b $EF,$06
                        	endif
00027F                  	smpsAlterVol		$0F
00027F E60F             	dc.b	$E6,$0F
000281 E702AE03B1068003 	dc.b	smpsNoAttack, $02, nA3, $03, nC4, $06, nRst, $03
000289                  	smpsAlterVol		$01
000289 E601             	dc.b	$E6,$01
00028B B18006B5         	dc.b	nC4, nRst, $06, nE4
00028F                  	smpsAlterVol		$01
00028F E601             	dc.b	$E6,$01
000291 B103800FAC03     	dc.b	nC4, $03, nRst, $0F, nG3, $03
000297                  	smpsAlterVol		$01
000297 E601             	dc.b	$E6,$01
000299 AEB180B180B306AC 	dc.b	nA3, nC4, nRst, nC4, nRst, nD4, $06, nG3
0002A1 03AEB180         	dc.b	$03, nA3, nC4, nRst
0002A5                  	smpsAlterVol		$FF
0002A5 E6FF             	dc.b	$E6,$FF
0002A7 B380             	dc.b	nD4, nRst
0002A9                  	smpsAlterVol		$FF
0002A9 E6FF             	dc.b	$E6,$FF
0002AB B4B5ACAEB1ACAEB1 	dc.b	nEb4, nE4, nG3, nA3, nC4, nG3, nA3, nC4
0002B3 80B18006B403B580 	dc.b	nRst, nC4, nRst, $06, nEb4, $03, nE4, nRst
0002BB 0CB40380B480     	dc.b	$0C, nEb4, $03, nRst, nEb4, nRst
0002C1                  	smpsAlterVol		$08
0002C1 E608             	dc.b	$E6,$08
0002C3 B480B5           	dc.b	nEb4, nRst, nE4
0002C6                  	smpsAlterVol		$F8
0002C6 E6F8             	dc.b	$E6,$F8
0002C8 03               	dc.b	$03
0002C9                  	smpsAlterVol		$08
0002C9 E608             	dc.b	$E6,$08
                        	;!@ dc.b	$03
0002CB B503             	dc.b	nE4, $03
0002CD                  	smpsAlterVol		$F8
0002CD E6F8             	dc.b	$E6,$F8
                        	;!@ dc.b	$03
0002CF B503             	dc.b	nE4, $03
0002D1                  	smpsAlterVol		$0B
0002D1 E60B             	dc.b	$E6,$0B
0002D3 B1               	dc.b	nC4
0002D4                  	smpsAlterVol		$F5
0002D4 E6F5             	dc.b	$E6,$F5
0002D6 03AEAC80         	dc.b	$03, nA3, nG3, nRst
0002DA                  	smpsAlterVol		$02
0002DA E602             	dc.b	$E6,$02
0002DC AAACAE           	dc.b	nF3, nG3, nA3
0002DF                  	smpsAlterVol		$FF
0002DF E6FF             	dc.b	$E6,$FF
0002E1 B180B180         	dc.b	nC4, nRst, nC4, nRst
0002E5                  	smpsAlterVol		$FF
0002E5 E6FF             	dc.b	$E6,$FF
0002E7 B180             	dc.b	nC4, nRst
0002E9                  	smpsAlterVol		$0B
0002E9 E60B             	dc.b	$E6,$0B
0002EB B580             	dc.b	nE4, nRst
0002ED                  	smpsAlterVol		$F5
0002ED E6F5             	dc.b	$E6,$F5
0002EF B4               	dc.b	nEb4
0002F0                  	smpsAlterVol		$0B
0002F0 E60B             	dc.b	$E6,$0B
0002F2 B506B10380       	dc.b	nE4, $06, nC4, $03, nRst
0002F7                  	smpsAlterVol		$F6
0002F7 E6F6             	dc.b	$E6,$F6
0002F9 B180             	dc.b	nC4, nRst
0002FB                  	smpsAlterVol		$02
0002FB E602             	dc.b	$E6,$02
0002FD B1               	dc.b	nC4
0002FE                  	smpsAlterVol		$FF
0002FE E6FF             	dc.b	$E6,$FF
000300 0380B180         	dc.b	$03, nRst, nC4, nRst
000304                  	smpsAlterVol		$09
000304 E609             	dc.b	$E6,$09
000306 AC               	dc.b	nG3
000307                  	smpsAlterVol		$F7
000307 E6F7             	dc.b	$E6,$F7
000309 AE               	dc.b	nA3
00030A                  	smpsAlterVol		$FF
00030A E6FF             	dc.b	$E6,$FF
00030C B180             	dc.b	nC4, nRst
00030E                  	smpsAlterVol		$0A
00030E E60A             	dc.b	$E6,$0A
000310 AC               	dc.b	nG3
000311                  	smpsAlterVol		$F5
000311 E6F5             	dc.b	$E6,$F5
000313 AE               	dc.b	nA3
000314                  	smpsAlterVol		$02
000314 E602             	dc.b	$E6,$02
000316 B1               	dc.b	nC4
000317                  	smpsAlterVol		$FE
000317 E6FE             	dc.b	$E6,$FE
000319 B38001           	dc.b	nD4, nRst, $01
00031C                  	smpsJump		SH_SystemMenu_Jump2, Target
00031C F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump2<*)
00031D                  		rom_ptr_z80(SH_SystemMenu_Jump2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00031D FC81             	dc.w  (((((SH_SystemMenu_Jump2+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00031F                  SH_SystemMenu_FM3:
00031F                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00031F E0C0             		dc.b $E0,panCenter
                        	endif
000321                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
000321 EF03             		dc.b $EF,$03
                        	endif
000323 B80B             	dc.b	nG4, $0B

000325                  SH_SystemMenu_Loop8:
000325 8006B8800CB880B8 	dc.b	nRst, $06, nG4, nRst, $0C, nG4, nRst, nG4
00032D 06800CB806800CB8 	dc.b	$06, nRst, $0C, nG4, $06, nRst, $0C, nG4
000335 8006B8800CB880B8 	dc.b	nRst, $06, nG4, nRst, $0C, nG4, nRst, nG4
00033D 06800CB806800C   	dc.b	$06, nRst, $0C, nG4, $06, nRst, $0C
000344                  	smpsAlterVol		$01
000344 E601             	dc.b	$E6,$01

000346                  SH_SystemMenu_Loop7:
000346 B68006B6800CB680 	dc.b	nF4, nRst, $06, nF4, nRst, $0C, nF4, nRst
00034E B606800CB606800C 	dc.b	nF4, $06, nRst, $0C, nF4, $06, nRst, $0C
000356                  	smpsLoop		$00, $02, SH_SystemMenu_Loop7, Target
000356 F7               	dc.b	$F7
000357 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop7<*)
000359                  		rom_ptr_z80(SH_SystemMenu_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000359 4683             	dc.w  (((((SH_SystemMenu_Loop7+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00035B                  	smpsAlterVol		$FF
00035B E6FF             	dc.b	$E6,$FF
                        	;!@ dc.b	nG4
00035D B80C             	dc.b	nG4, $0C
00035F                  	smpsLoop		$01, $02, SH_SystemMenu_Loop8, Target
00035F F7               	dc.b	$F7
000360 0102             	dc.b	$01,$02
                        	if (SH_SystemMenu_Loop8<*)
000362                  		rom_ptr_z80(SH_SystemMenu_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000362 2583             	dc.w  (((((SH_SystemMenu_Loop8+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000364 8006B8800CB880B8 	dc.b	nRst, $06, nG4, nRst, $0C, nG4, nRst, nG4
00036C 06800CB806800CB8 	dc.b	$06, nRst, $0C, nG4, $06, nRst, $0C, nG4
000374 8006B8800CB880B8 	dc.b	nRst, $06, nG4, nRst, $0C, nG4, nRst, nG4
00037C 06800CB806800C   	dc.b	$06, nRst, $0C, nG4, $06, nRst, $0C
000383                  	smpsAlterVol		$FA
000383 E6FA             	dc.b	$E6,$FA
000385 C101             	dc.b	nE5, $01
000387                  	smpsAlterVol		$0B
000387 E60B             	dc.b	$E6,$0B
000389                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
000389 EF02             		dc.b $EF,$02
                        	endif
00038B E7058006BD80BF80 	dc.b	smpsNoAttack, $05, nRst, $06, nC5, nRst, nD5, nRst
000393 C480C2C1BFBDBF80 	dc.b	nG5, nRst, nF5, nE5, nD5, nC5, nD5, nRst
00039B 12C10680BD80BF80 	dc.b	$12, nE5, $06, nRst, nC5, nRst, nD5, nRst
0003A3 C480C2C1BDBAB880 	dc.b	nG5, nRst, nF5, nE5, nC5, nA4, nG4, nRst
0003AB 12C10680BD80BF80 	dc.b	$12, nE5, $06, nRst, nC5, nRst, nD5, nRst
0003B3 C480C2C1BFBDBF80 	dc.b	nG5, nRst, nF5, nE5, nD5, nC5, nD5, nRst
0003BB 12               	dc.b	$12
0003BC                  	smpsAlterVol		$06
0003BC E606             	dc.b	$E6,$06
                        	;!@ Issues
                        	;dc.b	nE5, $01
0003BE 8001             	dc.b	nRst, $01

0003C0                  SH_SystemMenu_Jump3:
0003C0                  	smpsAlterVol		$F4
0003C0 E6F4             	dc.b	$E6,$F4
0003C2                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
0003C2 EF03             		dc.b $EF,$03
                        	endif
                        	;!@ dc.b	smpsNoAttack, $0B, nG5, $06, nB5, $12, nG5, $06
0003C4 800BC406C812C406 	dc.b	nRst, $0B, nG5, $06, nB5, $12, nG5, $06
                        	;!@ dc.b	nE5, $24, nRst, $12, nF5, $06, $06, nG5
0003CC C1248012C206C206 	dc.b	nE5, $24, nRst, $12, nF5, $06, nF5, $06, nG5
0003D4 C4
0003D5 C60CBA06BDBCB8BC 	dc.b	nA5, $0C, nA4, $06, nC5, nB4, nG4, nB4
0003DD C4C8C4C1C4C62480 	dc.b	nG5, nB5, nG5, nE5, nG5, nA5, $24, nRst
0003E5 4EB90CBDC006C4BF 	dc.b	$4E, nAb4, $0C, nC5, nEb5, $06, nG5, nD5
0003ED 0CC206BFBB0CC406 	dc.b	$0C, nF5, $06, nD5, nBb4, $0C, nG5, $06
0003F5 C2038009C1368024 	dc.b	nF5, $03, nRst, $09, nE5, $36, nRst, $24
0003FD                  	smpsAlterVol		$FA
0003FD E6FA             	dc.b	$E6,$FA
0003FF C101             	dc.b	nE5, $01
000401                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
000401 EF02             		dc.b $EF,$02
                        	endif
000403                  	smpsAlterVol		$0C
000403 E60C             	dc.b	$E6,$0C
000405 E7058006BD80BF80 	dc.b	smpsNoAttack, $05, nRst, $06, nC5, nRst, nD5, nRst
00040D C480C2C1BFBDBF80 	dc.b	nG5, nRst, nF5, nE5, nD5, nC5, nD5, nRst
000415 12C10680BD80BF80 	dc.b	$12, nE5, $06, nRst, nC5, nRst, nD5, nRst
00041D C480C2C1BDBAB880 	dc.b	nG5, nRst, nF5, nE5, nC5, nA4, nG4, nRst
000425 12C10680BD80BF80 	dc.b	$12, nE5, $06, nRst, nC5, nRst, nD5, nRst
00042D C480C2C1BFBDBF   	dc.b	nG5, nRst, nF5, nE5, nD5, nC5, nD5
000434                  	smpsAlterNote	$00
000434 E100             	dc.b	$E1,$00
000436 8012             	dc.b	nRst, $12
000438                  	smpsAlterVol		$06
000438 E606             	dc.b	$E6,$06
                        	;!@ dc.b	$01
00043A 8001             	dc.b	nRst, $01
00043C                  	smpsJump		SH_SystemMenu_Jump3, Target
00043C F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump3<*)
00043D                  		rom_ptr_z80(SH_SystemMenu_Jump3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00043D C083             	dc.w  (((((SH_SystemMenu_Jump3+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00043F                  SH_SystemMenu_FM4:
00043F                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00043F E0C0             		dc.b $E0,panCenter
                        	endif
000441                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
000441 EF04             		dc.b $EF,$04
                        	endif
000443 806BC40C         	dc.b	nRst, $6B, nG5, $0C
000447                  	smpsAlterVol		$02
000447 E602             	dc.b	$E6,$02
000449 C6               	dc.b	nA5
00044A                  	smpsAlterVol		$FE
00044A E6FE             	dc.b	$E6,$FE
00044C C4               	dc.b	nG5
00044D                  	smpsAlterVol		$FE
00044D E6FE             	dc.b	$E6,$FE
00044F C212             	dc.b	nF5, $12
000451                  	smpsAlterVol		$FB
000451 E6FB             	dc.b	$E6,$FB
000453 C1               	dc.b	nE5
000454                  	smpsAlterVol		$FD
000454 E6FD             	dc.b	$E6,$FD
000456 C90C             	dc.b	nC6, $0C
000458                  	smpsAlterVol		$03
000458 E603             	dc.b	$E6,$03
00045A BF24803C         	dc.b	nD5, $24, nRst, $3C
00045E                  	smpsAlterVol		$03
00045E E603             	dc.b	$E6,$03
000460 C40CC2           	dc.b	nG5, $0C, nF5
000463                  	smpsAlterVol		$FE
000463 E6FE             	dc.b	$E6,$FE
000465 C109C203         	dc.b	nE5, $09, nF5, $03
000469                  	smpsAlterVol		$01
000469 E601             	dc.b	$E6,$01
                        	;!@ dc.b	nF6, $0C, nG5, $0F, $09, nA5
00046B CE0CC40FC409C6   	dc.b	nF6, $0C, nG5, $0F, nG5, $09, nA5
000472                  	smpsAlterVol		$01
000472 E601             	dc.b	$E6,$01
000474 C9               	dc.b	nC6
000475                  	smpsAlterVol		$01
000475 E601             	dc.b	$E6,$01
000477 C806             	dc.b	nB5, $06
000479                  	smpsAlterVol		$FF
000479 E6FF             	dc.b	$E6,$FF
00047B C430803CC40CC6C4 	dc.b	nG5, $30, nRst, $3C, nG5, $0C, nA5, nG5
000483 C212C1C90CBF2480 	dc.b	nF5, $12, nE5, nC6, $0C, nD5, $24, nRst
00048B 3C               	dc.b	$3C
00048C                  	smpsAlterVol		$FD
00048C E6FD             	dc.b	$E6,$FD
00048E C40CC2C180       	dc.b	nG5, $0C, nF5, nE5, nRst
000493                  	smpsAlterVol		$02
000493 E602             	dc.b	$E6,$02
                        	;!@ dc.b	nG5, $0F, $09, nA5, nC6, nB5, $06, nG5
000495 C40FC409C6C9C806 	dc.b	nG5, $0F, nG5, $09, nA5, nC6, nB5, $06, nG5
00049D C4
                        	;!@ dc.b	$30, nRst, $7F, $11, nG5, $42, nE5, $06
00049E 30807F8011C442C1 	dc.b	$30, nRst, $7F, nRst, $11, nG5, $42, nE5, $06
0004A6 06
0004A7 C2C1             	dc.b	nF5, nE5
0004A9                  	smpsAlterVol		$01
0004A9 E601             	dc.b	$E6,$01
0004AB C9               	dc.b	nC6
0004AC                  	smpsAlterVol		$01
0004AC E601             	dc.b	$E6,$01
0004AE C448             	dc.b	nG5, $48
0004B0                  	smpsAlterVol		$FF
0004B0 E6FF             	dc.b	$E6,$FF
0004B2 C606C9BFC1C2C448 	dc.b	nA5, $06, nC6, nD5, nE5, nF5, nG5, $48
0004BA 8006C6           	dc.b	nRst, $06, nA5
0004BD                  	smpsAlterVol		$FF
0004BD E6FF             	dc.b	$E6,$FF
0004BF C9BF             	dc.b	nC6, nD5
0004C1                  	smpsAlterVol		$F9
0004C1 E6F9             	dc.b	$E6,$F9
0004C3 C101             	dc.b	nE5, $01

0004C5                  SH_SystemMenu_Jump4:
                        	;!@ dc.b	smpsNoAttack, $0B
0004C5 800B             	dc.b	nRst, $0B
0004C7                  	smpsAlterVol		$04
0004C7 E604             	dc.b	$E6,$04
0004C9 C406             	dc.b	nG5, $06
0004CB                  	smpsAlterVol		$FF
0004CB E6FF             	dc.b	$E6,$FF
0004CD C812             	dc.b	nB5, $12
0004CF                  	smpsAlterVol		$01
0004CF E601             	dc.b	$E6,$01
0004D1 D006             	dc.b	nG6, $06
0004D3                  	smpsAlterVol		$01
0004D3 E601             	dc.b	$E6,$01
0004D5 C1248012         	dc.b	nE5, $24, nRst, $12
0004D9                  	smpsAlterVol		$07
0004D9 E607             	dc.b	$E6,$07
                        	;!@ dc.b	nB5, $06, $06
0004DB C806C806         	dc.b	nB5, $06, nB5, $06
0004DF                  	smpsAlterVol		$FB
0004DF E6FB             	dc.b	$E6,$FB
                        	;!@ dc.b	nD5, nF5, $0C, $06, nA5, nG5, nE5
0004E1 BFC20CC206C6C4C1 	dc.b	nD5, nF5, $0C, nF5, $06, nA5, nG5, nE5
0004E9                  	smpsAlterVol		$01
0004E9 E601             	dc.b	$E6,$01
0004EB C4C8BF           	dc.b	nG5, nB5, nD5
0004EE                  	smpsAlterVol		$FC
0004EE E6FC             	dc.b	$E6,$FC
0004F0 C8               	dc.b	nB5
0004F1                  	smpsAlterVol		$FE
0004F1 E6FE             	dc.b	$E6,$FE
                        	;!@ Issues?
                        	;!@ dc.b	nG5, nB5, nC6, $7F, smpsNoAttack, $17
0004F3 C4C8C97FE7C917   	dc.b	nG5, nB5, nC6, $7F, smpsNoAttack, nC6, $17
0004FA                  	smpsAlterVol		$03
0004FA E603             	dc.b	$E6,$03
                        	;!@ dc.b	nBb5, $0C, $0C, $0C
0004FC C70CC70CC70C     	dc.b	nBb5, $0C, nBb5, $0C, nBb5, $0C
000502                  	smpsAlterVol		$02
000502 E602             	dc.b	$E6,$02
000504 C406C20C         	dc.b	nG5, $06, nF5, $0C
000508                  	smpsAlterVol		$01
000508 E601             	dc.b	$E6,$01
00050A C95A             	dc.b	nC6, $5A
00050C                  	smpsAlterVol		$FE
00050C E6FE             	dc.b	$E6,$FE
00050E C442             	dc.b	nG5, $42
000510                  	smpsAlterVol		$FF
000510 E6FF             	dc.b	$E6,$FF
000512 C106C2           	dc.b	nE5, $06, nF5
000515                  	smpsAlterVol		$FE
000515 E6FE             	dc.b	$E6,$FE
000517 C1               	dc.b	nE5
000518                  	smpsAlterVol		$FF
000518 E6FF             	dc.b	$E6,$FF
00051A C9               	dc.b	nC6
00051B                  	smpsAlterVol		$01
00051B E601             	dc.b	$E6,$01
00051D C448             	dc.b	nG5, $48
00051F                  	smpsAlterVol		$02
00051F E602             	dc.b	$E6,$02
000521 C606C9           	dc.b	nA5, $06, nC6
000524                  	smpsAlterVol		$FF
000524 E6FF             	dc.b	$E6,$FF
000526 BF               	dc.b	nD5
000527                  	smpsAlterVol		$FA
000527 E6FA             	dc.b	$E6,$FA
000529 C1C2             	dc.b	nE5, nF5
00052B                  	smpsAlterVol		$FE
00052B E6FE             	dc.b	$E6,$FE
00052D C4488006         	dc.b	nG5, $48, nRst, $06
000531                  	smpsAlterVol		$0B
000531 E60B             	dc.b	$E6,$0B
000533 C6               	dc.b	nA5
000534                  	smpsAlterVol		$01
000534 E601             	dc.b	$E6,$01
000536 C9BF             	dc.b	nC6, nD5
000538                  	smpsAlterVol		$01
000538 E601             	dc.b	$E6,$01
00053A                  	smpsAlterNote	$00
00053A E100             	dc.b	$E1,$00
00053C 8001             	dc.b	nRst, $01
00053E                  	smpsAlterVol		$F7
00053E E6F7             	dc.b	$E6,$F7
000540                  	smpsJump		SH_SystemMenu_Jump4, Target
000540 F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump4<*)
000541                  		rom_ptr_z80(SH_SystemMenu_Jump4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000541 C584             	dc.w  (((((SH_SystemMenu_Jump4+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000543                  SH_SystemMenu_FM5:
000543                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000543 E0C0             		dc.b $E0,panCenter
                        	endif
000545                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000545 EF00             		dc.b $EF,$00
                        	endif
000547 A008             	dc.b	nG2, $08

000549                  SH_SystemMenu_Loop9:
000549 9B09A00C9B06A0A7 	dc.b	nD2, $09, nG2, $0C, nD2, $06, nG2, nD3
000551 A009             	dc.b	nG2, $09
000553                  	smpsLoop		$00, $03, SH_SystemMenu_Loop9, Target
000553 F7               	dc.b	$F7
000554 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop9<*)
000556                  		rom_ptr_z80(SH_SystemMenu_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000556 4985             	dc.w  (((((SH_SystemMenu_Loop9+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000558 9BA00C9B06A0A7   	dc.b	nD2, nG2, $0C, nD2, $06, nG2, nD3

00055F                  SH_SystemMenu_Loop10:
00055F 9E09999E0C99069E 	dc.b	nF2, $09, nC2, nF2, $0C, nC2, $06, nF2
000567 A5               	dc.b	nC3
000568                  	smpsLoop		$00, $04, SH_SystemMenu_Loop10, Target
000568 F7               	dc.b	$F7
000569 0004             	dc.b	$00,$04
                        	if (SH_SystemMenu_Loop10<*)
00056B                  		rom_ptr_z80(SH_SystemMenu_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
00056B 5F85             	dc.w  (((((SH_SystemMenu_Loop10+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00056D A009             	dc.b	nG2, $09
00056F                  	smpsLoop		$01, $02, SH_SystemMenu_Loop9, Target
00056F F7               	dc.b	$F7
000570 0102             	dc.b	$01,$02
                        	if (SH_SystemMenu_Loop9<*)
000572                  		rom_ptr_z80(SH_SystemMenu_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000572 4985             	dc.w  (((((SH_SystemMenu_Loop9+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000574                  SH_SystemMenu_Loop11:
000574 9BA00C9B06A0A7A0 	dc.b	nD2, nG2, $0C, nD2, $06, nG2, nD3, nG2
00057C 09               	dc.b	$09
00057D                  	smpsLoop		$00, $03, SH_SystemMenu_Loop11, Target
00057D F7               	dc.b	$F7
00057E 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop11<*)
000580                  		rom_ptr_z80(SH_SystemMenu_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
000580 7485             	dc.w  (((((SH_SystemMenu_Loop11+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000582 9BA00C9B06A0A7   	dc.b	nD2, nG2, $0C, nD2, $06, nG2, nD3
000589                  	smpsAlterVol		$06
000589 E606             	dc.b	$E6,$06
00058B 09A2A70CA2A106A0 	dc.b	$09, nA2, nD3, $0C, nA2, nAb2, $06, nG2
000593 A70CACAA06A2A0A7 	dc.b	nD3, $0C, nG3, nF3, $06, nA2, nG2, nD3
00059B 09A2A70CA2A106A0 	dc.b	$09, nA2, nD3, $0C, nA2, nAb2, $06, nG2
0005A3 A7AD0380AC0CAA06 	dc.b	nD3, nAb3, $03, nRst, nG3, $0C, nF3, $06
0005AB A7A1A709A2A70CA2 	dc.b	nD3, nAb2, nD3, $09, nA2, nD3, $0C, nA2
0005B3 A106A0A70CACAA06 	dc.b	nAb2, $06, nG2, nD3, $0C, nG3, nF3, $06
0005BB A2A0A901         	dc.b	nA2, nG2, nE3, $01

0005BF                  SH_SystemMenu_Jump5:
                        	;!@ dc.b	smpsNoAttack, $05, nRst, $03, nE3, nB2, $06, nE3
0005BF 80058003A9A406A9 	dc.b	nRst, $05, nRst, $03, nE3, nB2, $06, nE3
0005C7 098003A906A4A9A8 	dc.b	$09, nRst, $03, nE3, $06, nB2, nE3, nEb3
0005CF 0CA3A9A4AA09A59E 	dc.b	$0C, nBb2, nE3, nB2, nF3, $09, nC3, nF2
0005D7 12A506AAA48003A4 	dc.b	$12, nC3, $06, nF3, nB2, nRst, $03, nB2
0005DF 80069D12A406A0A2 	dc.b	nRst, $06, nE2, $12, nB2, $06, nG2, nA2
                        	;!@ dc.b	nRst, $03, nA2, nRst, $06, nE2, $0C, $06
0005E7 8003A280069D0C9D 	dc.b	nRst, $03, nA2, nRst, $06, nE2, $0C, nE2, $06
0005EF 06
                        	;!@ dc.b	$06, nG2, nAb2, $09, nEb3, nEb2, $0C, $06
0005F0 9D06A0A109A89C0C 	dc.b	nE2, $06, nG2, nAb2, $09, nEb3, nEb2, $0C, nEb2, $06
0005F8 9C06
                        	;!@ dc.b	$06, nG2, nAb2, $09, nEb2, nAb2, $0C, nRst
0005FA 9C06A0A1099CA10C 	dc.b	nEb2, $06, nG2, nAb2, $09, nEb2, nAb2, $0C, nRst
000602 80
000603 06A10380A180A30C 	dc.b	$06, nAb2, $03, nRst, nAb2, nRst, nBb2, $0C
00060B 9E97A306A0A58003 	dc.b	nF2, nBb1, nBb2, $06, nG2, nC3, nRst, $03
000613 A58006A518A006A5 	dc.b	nC3, nRst, $06, nC3, $18, nG2, $06, nC3
00061B 09A0991EA709A2A7 	dc.b	$09, nG2, nC2, $1E, nD3, $09, nA2, nD3
000623 0CA2A106A0A70CAC 	dc.b	$0C, nA2, nAb2, $06, nG2, nD3, $0C, nG3
00062B AA06A2A0A709A2A7 	dc.b	nF3, $06, nA2, nG2, nD3, $09, nA2, nD3
000633 0CA2A106A0A7AD03 	dc.b	$0C, nA2, nAb2, $06, nG2, nD3, nAb3, $03
00063B 80AC0CAA06A7A1A7 	dc.b	nRst, nG3, $0C, nF3, $06, nD3, nAb2, nD3
000643 09A2A70CA2A106A0 	dc.b	$09, nA2, nD3, $0C, nA2, nAb2, $06, nG2
00064B A70CACAA06A2A0   	dc.b	nD3, $0C, nG3, nF3, $06, nA2, nG2
000652                  	smpsAlterNote	$00
000652 E100             	dc.b	$E1,$00
000654 8001             	dc.b	nRst, $01
000656                  	smpsJump		SH_SystemMenu_Jump5, Target
000656 F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump5<*)
000657                  		rom_ptr_z80(SH_SystemMenu_Jump5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000657 BF85             	dc.w  (((((SH_SystemMenu_Jump5+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000659                  SH_SystemMenu_FM6:
000659                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000659 E0C0             		dc.b $E0,panCenter
                        	endif
00065B                  	smpsFMvoice		$05
                        	;if song<>""
                        	if 1==2
                        	else
00065B EF05             		dc.b $EF,$05
                        	endif
                        	;!@ dc.b	nRst

00065D                  SH_SystemMenu_Loop12:
                        	;!@ dc.b	$57
00065D 8057             	dc.b	nRst, $57
00065F                  	smpsLoop		$00, $0B, SH_SystemMenu_Loop12, Target
00065F F7               	dc.b	$F7
000660 000B             	dc.b	$00,$0B
                        	if (SH_SystemMenu_Loop12<*)
000662                  		rom_ptr_z80(SH_SystemMenu_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
000662 5D86             	dc.w  (((((SH_SystemMenu_Loop12+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	$02, nE4, $03, nRst, $06, nE4, $01
000664 8002B5038006B501 	dc.b	nRst, $02, nE4, $03, nRst, $06, nE4, $01
00066C                  	smpsFMvoice		$05
                        	;if song<>""
                        	if 1==2
                        	else
00066C EF05             		dc.b $EF,$05
                        	endif
00066E E7028006B5038009 	dc.b	smpsNoAttack, $02, nRst, $06, nE4, $03, nRst, $09
000676 B5038006B503BCB5 	dc.b	nE4, $03, nRst, $06, nE4, $03, nB4, nE4
00067E B0068003B0       	dc.b	nB3, $06, nRst, $03, nB3

000683                  SH_SystemMenu_Loop13:
000683 8006B003         	dc.b	nRst, $06, nB3, $03
000687                  	smpsLoop		$00, $03, SH_SystemMenu_Loop13, Target
000687 F7               	dc.b	$F7
000688 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop13<*)
00068A                  		rom_ptr_z80(SH_SystemMenu_Loop13+Target)
                        	;dc.w z80_ptr(ptr,addr)
00068A 8386             	dc.w  (((((SH_SystemMenu_Loop13+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop13+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00068C 80B0B1B5068003B5 	dc.b	nRst, nB3, nC4, nE4, $06, nRst, $03, nE4
000694 8006B5038009B503 	dc.b	nRst, $06, nE4, $03, nRst, $09, nE4, $03
00069C 8006B58003B00680 	dc.b	nRst, $06, nE4, nRst, $03, nB3, $06, nRst
0006A4 03B08006B0038009 	dc.b	$03, nB3, nRst, $06, nB3, $03, nRst, $09
0006AC B00380B080B0B1B5 	dc.b	nB3, $03, nRst, nB3, nRst, nB3, nC4, nE4
0006B4 8006B5038006B503 	dc.b	nRst, $06, nE4, $03, nRst, $06, nE4, $03
0006BC 8009B5038006B503 	dc.b	nRst, $09, nE4, $03, nRst, $06, nE4, $03
0006C4 BCB5B0068003B0   	dc.b	nB4, nE4, nB3, $06, nRst, $03, nB3

0006CB                  SH_SystemMenu_Loop14:
0006CB 8006B003         	dc.b	nRst, $06, nB3, $03
0006CF                  	smpsLoop		$00, $03, SH_SystemMenu_Loop14, Target
0006CF F7               	dc.b	$F7
0006D0 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop14<*)
0006D2                  		rom_ptr_z80(SH_SystemMenu_Loop14+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006D2 CB86             	dc.w  (((((SH_SystemMenu_Loop14+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop14+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006D4 80B0B18001       	dc.b	nRst, nB3, nC4, nRst, $01

0006D9                  SH_SystemMenu_Jump6:
                        	;!@ dc.b	nRst, $7F, $7F, $7F, $62, nE4, $03, nRst
0006D9 807F807F807F8062 	dc.b	nRst, $7F, nRst, $7F, nRst, $7F, nRst, $62, nE4, $03, nRst
0006E1 B50380
0006E4 06B501           	dc.b	$06, nE4, $01
0006E7                  	smpsFMvoice		$05
                        	;if song<>""
                        	if 1==2
                        	else
0006E7 EF05             		dc.b $EF,$05
                        	endif
0006E9 E7028006B5038009 	dc.b	smpsNoAttack, $02, nRst, $06, nE4, $03, nRst, $09
0006F1 B5038006B503BCB5 	dc.b	nE4, $03, nRst, $06, nE4, $03, nB4, nE4
0006F9 B0068003B0       	dc.b	nB3, $06, nRst, $03, nB3

0006FE                  SH_SystemMenu_Loop15:
0006FE 8006B003         	dc.b	nRst, $06, nB3, $03
000702                  	smpsLoop		$00, $03, SH_SystemMenu_Loop15, Target
000702 F7               	dc.b	$F7
000703 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop15<*)
000705                  		rom_ptr_z80(SH_SystemMenu_Loop15+Target)
                        	;dc.w z80_ptr(ptr,addr)
000705 FE86             	dc.w  (((((SH_SystemMenu_Loop15+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop15+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000707 80B0B1B5068003B5 	dc.b	nRst, nB3, nC4, nE4, $06, nRst, $03, nE4
00070F 8006B5038009B503 	dc.b	nRst, $06, nE4, $03, nRst, $09, nE4, $03
000717 8006B58003B00680 	dc.b	nRst, $06, nE4, nRst, $03, nB3, $06, nRst
00071F 03B08006B0038009 	dc.b	$03, nB3, nRst, $06, nB3, $03, nRst, $09
000727 B00380B080B0B1B5 	dc.b	nB3, $03, nRst, nB3, nRst, nB3, nC4, nE4
00072F 8006B5038006B503 	dc.b	nRst, $06, nE4, $03, nRst, $06, nE4, $03
000737 8009B5038006B503 	dc.b	nRst, $09, nE4, $03, nRst, $06, nE4, $03
00073F BCB5B0068003B0   	dc.b	nB4, nE4, nB3, $06, nRst, $03, nB3

000746                  SH_SystemMenu_Loop16:
000746 8006B003         	dc.b	nRst, $06, nB3, $03
00074A                  	smpsLoop		$00, $03, SH_SystemMenu_Loop16, Target
00074A F7               	dc.b	$F7
00074B 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop16<*)
00074D                  		rom_ptr_z80(SH_SystemMenu_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
00074D 4687             	dc.w  (((((SH_SystemMenu_Loop16+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00074F 80B0B1           	dc.b	nRst, nB3, nC4
000752                  	smpsAlterNote	$00
000752 E100             	dc.b	$E1,$00
000754 8001             	dc.b	nRst, $01
000756                  	smpsJump		SH_SystemMenu_Jump6, Target
000756 F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump6<*)
000757                  		rom_ptr_z80(SH_SystemMenu_Jump6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000757 D986             	dc.w  (((((SH_SystemMenu_Jump6+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000759                  SH_SystemMenu_PSG1:
000759 8005             	dc.b	nRst, $05

00075B                  SH_SystemMenu_Loop18:
00075B 88               	dc.b	nG0
                        	;smpsPSGvoice	PSGVoi1

00075C                  SH_SystemMenu_Loop17:
00075C 068D0380940C     	dc.b	$06, nC1, $03, nRst, nG1, $0C
                        	;dc.b	nG1, $06, nC1, $03, nRst, nG1, $0C
000762                  	smpsLoop		$00, $02, SH_SystemMenu_Loop17, Target
000762 F7               	dc.b	$F7
000763 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop17<*)
000765                  		rom_ptr_z80(SH_SystemMenu_Loop17+Target)
                        	;dc.w z80_ptr(ptr,addr)
000765 5C87             	dc.w  (((((SH_SystemMenu_Loop17+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop17+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000767 88068D8F88880380 	dc.b	nG0, $06, nC1, nD1, nG0, nG0, $03, nRst
00076F 860688188054     	dc.b	nF0, $06, nG0, $18, nRst, $54
000775                  	smpsLoop		$01, $03, SH_SystemMenu_Loop18, Target
000775 F7               	dc.b	$F7
000776 0103             	dc.b	$01,$03
                        	if (SH_SystemMenu_Loop18<*)
000778                  		rom_ptr_z80(SH_SystemMenu_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
000778 5B87             	dc.w  (((((SH_SystemMenu_Loop18+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ Issues
00077A 88               	dc.b	nG0

00077B                  SH_SystemMenu_Loop19:
00077B 068D0380940C     	dc.b	$06, nC1, $03, nRst, nG1, $0C
                        	;dc.b	nG1, $06, nC1, $03, nRst, nG1, $0C
000781                  	smpsLoop		$00, $02, SH_SystemMenu_Loop19, Target
000781 F7               	dc.b	$F7
000782 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop19<*)
000784                  		rom_ptr_z80(SH_SystemMenu_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
000784 7B87             	dc.w  (((((SH_SystemMenu_Loop19+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000786 88068D8F88880380 	dc.b	nG0, $06, nC1, nD1, nG0, nG0, $03, nRst
                        	;!@ dc.b	nF0, $06, nG0, $18, nRst, $7F, $77, nG1
00078E 86068818807F8077 	dc.b	nF0, $06, nG0, $18, nRst, $7F, nRst, $77, nG1
000796 94
                        	;!@ dc.b	$03, $03, nRst, $06, nG1, $03, $03, nRst
000797 0394038006940394 	dc.b	$03, nG1, $03, nRst, $06, nG1, $03, nG1, $03, nRst
00079F 0380
                        	;!@ dc.b	$4E, nG3, $03, $03, nRst, $06, nG3, $03
0007A1 4EAC03AC038006AC 	dc.b	$4E, nG3, $03, nG3, $03, nRst, $06, nG3, $03
0007A9 03

0007AA                  SH_SystemMenu_Loop20:
                        	;!@ dc.b	$03, nRst, $4E, nG1, $03, $03, nRst, $06
0007AA 9403804E94039403 	dc.b	nG1, $03, nRst, $4E, nG1, $03, nG1, $03, nRst, $06
0007B2 8006
0007B4 9403             	dc.b	nG1, $03
0007B6                  	smpsLoop		$00, $02, SH_SystemMenu_Loop20, Target
0007B6 F7               	dc.b	$F7
0007B7 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop20<*)
0007B9                  		rom_ptr_z80(SH_SystemMenu_Loop20+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007B9 AA87             	dc.w  (((((SH_SystemMenu_Loop20+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop20+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	$03, nRst, $07
0007BB 94038007         	dc.b	nG1, $03, nRst, $07

0007BF                  SH_SystemMenu_Jump7:
                        	;!@ dc.b	nRst, $7F, $4C, nA1, $06, nRst, nC2, nA1
0007BF 807F804C96068099 	dc.b	nRst, $7F, nRst, $4C, nA1, $06, nRst, nC2, nA1
0007C7 96
0007C8 80990C9606999699 	dc.b	nRst, nC2, $0C, nA1, $06, nC2, nA1, nC2
0007D0 80A8A7038009991E 	dc.b	nRst, nEb3, nD3, $03, nRst, $09, nC2, $1E
0007D8 A806A7038009990C 	dc.b	nEb3, $06, nD3, $03, nRst, $09, nC2, $0C
0007E0 9506990CA806A703 	dc.b	nAb1, $06, nC2, $0C, nEb3, $06, nD3, $03
0007E8 804B             	dc.b	nRst, $4B
0007EA                  	smpsSetVol	$03
0007EA EC03             	dc.b	$EC,$03
                        	;!@ dc.b	nG3, $03, $03, nRst, $09, nG3, $03, nRst
0007EC AC03AC038009AC03 	dc.b	nG3, $03, nG3, $03, nRst, $09, nG3, $03, nRst
0007F4 80
0007F5 4E               	dc.b	$4E
0007F6                  	smpsSetVol	$FD
0007F6 ECFD             	dc.b	$EC,$FD
                        	;!@ dc.b	nG3, $03, $03, nRst, $06, nG3, $03
0007F8 AC03AC038006AC03 	dc.b	nG3, $03, nG3, $03, nRst, $06, nG3, $03

000800                  SH_SystemMenu_Loop21:
                        	;!@ dc.b	$03, nRst, $4E, nG1, $03, $03, nRst, $06
000800 9403804E94039403 	dc.b	nG1, $03, nRst, $4E, nG1, $03, nG1, $03, nRst, $06
000808 8006
00080A 9403             	dc.b	nG1, $03
00080C                  	smpsLoop		$00, $02, SH_SystemMenu_Loop21, Target
00080C F7               	dc.b	$F7
00080D 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_Loop21<*)
00080F                  		rom_ptr_z80(SH_SystemMenu_Loop21+Target)
                        	;dc.w z80_ptr(ptr,addr)
00080F 0088             	dc.w  (((((SH_SystemMenu_Loop21+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop21+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	$03
000811 9403             	dc.b	nG1, $03
000813                  	smpsAlterNote	$00
000813 E100             	dc.b	$E1,$00
000815 8007             	dc.b	nRst, $07
000817                  	smpsJump		SH_SystemMenu_Jump7, Target
000817 F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump7<*)
000818                  		rom_ptr_z80(SH_SystemMenu_Jump7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000818 BF87             	dc.w  (((((SH_SystemMenu_Jump7+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00081A                  SH_SystemMenu_PSG2:
00081A 8D0B             	dc.b	nC1, $0B

00081C                  SH_SystemMenu_Loop22:
00081C 80068D800C8D808D 	dc.b	nRst, $06, nC1, nRst, $0C, nC1, nRst, nC1
000824 06800C8D06800C8D 	dc.b	$06, nRst, $0C, nC1, $06, nRst, $0C, nC1
00082C                  	smpsLoop		$00, $07, SH_SystemMenu_Loop22, Target
00082C F7               	dc.b	$F7
00082D 0007             	dc.b	$00,$07
                        	if (SH_SystemMenu_Loop22<*)
00082F                  		rom_ptr_z80(SH_SystemMenu_Loop22+Target)
                        	;dc.w z80_ptr(ptr,addr)
00082F 1C88             	dc.w  (((((SH_SystemMenu_Loop22+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop22+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000831 80068D800C8D808D 	dc.b	nRst, $06, nC1, nRst, $0C, nC1, nRst, nC1
000839 06800C8D06800C   	dc.b	$06, nRst, $0C, nC1, $06, nRst, $0C
000840                  	smpsSetVol	$00
000840 EC00             	dc.b	$EC,$00
000842 8D04             	dc.b	nC1, $04
000844                  	smpsSetVol	$FD
000844 ECFD             	dc.b	$EC,$FD
000846 E70880068D800C8D 	dc.b	smpsNoAttack, $08, nRst, $06, nC1, nRst, $0C, nC1
00084E 808D06800C8D0680 	dc.b	nRst, nC1, $06, nRst, $0C, nC1, $06, nRst
000856 0C8D80068D800C8D 	dc.b	$0C, nC1, nRst, $06, nC1, nRst, $0C, nC1
00085E 808D06800C8D0680 	dc.b	nRst, nC1, $06, nRst, $0C, nC1, $06, nRst
000866 0C               	dc.b	$0C
000867                  	smpsSetVol	$03
000867 EC03             	dc.b	$EC,$03
000869 910380068A01     	dc.b	nE1, $03, nRst, $06, nA0, $01
00086F                  	smpsPSGvoice	PSGVoi2
00086F F500             	dc.b	$F5,PSGVoi2
000871                  	smpsSetVol	$01
000871 EC01             	dc.b	$EC,$01
000873 E70280068A038009 	dc.b	smpsNoAttack, $02, nRst, $06, nA0, $03, nRst, $09
00087B 8A0380068A03918A 	dc.b	nA0, $03, nRst, $06, nA0, $03, nE1, nA0
000883 8506800385       	dc.b	nE0, $06, nRst, $03, nE0

000888                  SH_SystemMenu_Loop23:
000888 80068503         	dc.b	nRst, $06, nE0, $03
00088C                  	smpsLoop		$00, $03, SH_SystemMenu_Loop23, Target
00088C F7               	dc.b	$F7
00088D 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop23<*)
00088F                  		rom_ptr_z80(SH_SystemMenu_Loop23+Target)
                        	;dc.w z80_ptr(ptr,addr)
00088F 8888             	dc.w  (((((SH_SystemMenu_Loop23+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop23+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nRst, nE0, nF0, nA0, $06, nRst, $03, nA0
000891 800385868A068003 	dc.b	nRst, $03, nE0, nF0, nA0, $06, nRst, $03, nA0
000899 8A
00089A 80068A0380098A03 	dc.b	nRst, $06, nA0, $03, nRst, $09, nA0, $03
0008A2 80068A8003850680 	dc.b	nRst, $06, nA0, nRst, $03, nE0, $06, nRst
0008AA 0385800685038009 	dc.b	$03, nE0, nRst, $06, nE0, $03, nRst, $09
0008B2 8503808580858691 	dc.b	nE0, $03, nRst, nE0, nRst, nE0, nF0, nE1
0008BA 80068A0380068A03 	dc.b	nRst, $06, nA0, $03, nRst, $06, nA0, $03
0008C2 80098A0380068A03 	dc.b	nRst, $09, nA0, $03, nRst, $06, nA0, $03
0008CA 918A850680038580 	dc.b	nE1, nA0, nE0, $06, nRst, $03, nE0, nRst
0008D2 0685038006850380 	dc.b	$06, nE0, $03, nRst, $06, nE0, $03, nRst
0008DA 068501           	dc.b	$06, nE0, $01
0008DD                  	smpsPSGvoice	PSGVoi2
0008DD F500             	dc.b	$F5,PSGVoi2
0008DF                  	smpsSetVol	$01
0008DF EC01             	dc.b	$EC,$01
0008E1 E702800385868001 	dc.b	smpsNoAttack, $02, nRst, $03, nE0, nF0, nRst, $01

0008E9                  SH_SystemMenu_Jump8:
0008E9                  	smpsPSGvoice	PSGVoi1
0008E9 F500             	dc.b	$F5,PSGVoi1
0008EB 8006             	dc.b	nRst, $06
0008ED                  	smpsSetVol	$FE
0008ED ECFE             	dc.b	$EC,$FE
0008EF 960180029D018005 	dc.b	nA1, $01, nRst, $02, nE2, $01, nRst, $05
0008F7 AB018004B5018007 	dc.b	nFs3, $01, nRst, $04, nE4, $01, nRst, $07
                        	;!@ dc.b	nB2, $01, nRst, nRst, $05, nG3, $06, nE3
0008FF A40180018005AC06 	dc.b	nB2, $01, nRst, $01, nRst, $05, nG3, $06, nE3
000907 A9
000908 24               	dc.b	$24
000909                  	smpsSetVol	$03
000909 EC03             	dc.b	$EC,$03
00090B AC01             	dc.b	nG3, $01
00090D                  	smpsPSGvoice	PSGVoi1
00090D F500             	dc.b	$F5,PSGVoi1
00090F E705             	dc.b	smpsNoAttack, $05
000911                  	smpsSetVol	$FC
000911 ECFC             	dc.b	$EC,$FC
000913 AA06A9           	dc.b	nF3, $06, nE3
000916                  	smpsSetVol	$FD
000916 ECFD             	dc.b	$EC,$FD
000918 9E802A           	dc.b	nF2, nRst, $2A
00091B                  	smpsAlterNote	$00
00091B E100             	dc.b	$E1,$00
                        	;!@ dc.b	$7F, $7F, $23
00091D 807F807F8023     	dc.b	nRst, $7F, nRst, $7F, nRst, $23
000923                  	smpsPSGvoice	PSGVoi1
000923 F500             	dc.b	$F5,PSGVoi1
                        	;!@ dc.b	$03, nA1, $01, nRst, $02, nE2, $01, nRst
000925 8003960180029D01 	dc.b	nRst, $03, nA1, $01, nRst, $02, nE2, $01, nRst
00092D 80
00092E 02A4018002AB0180 	dc.b	$02, nB2, $01, nRst, $02, nFs3, $01, nRst
                        	;!@ dc.b	$04, nE4, $01, nRst, $07, nB2, $01, nRst
000936 04B5018007A40180 	   dc.b	$04, nE4, $01, nRst, $07, nB2, $01, nRst, $01
00093E 01
                        	;!@ dc.b	nRst, $06, nFs1, $01, nG1, nRst, nC2, nRst
00093F 8006930194018001 	dc.b	nRst, $06, nFs1, $01, nG1, $01, nRst, $01, nC2, $01, nRst
000947 990180
00094A 02A00180A48003AE 	dc.b	$02, nG2, $01, nRst, nB2, nRst, $03, nA3
000952 0180             	dc.b	$01, nRst
000954                  	smpsSetVol	$02
000954 EC02             	dc.b	$EC,$02
000956 910380068A01     	dc.b	nE1, $03, nRst, $06, nA0, $01
00095C                  	smpsPSGvoice	PSGVoi2
00095C F500             	dc.b	$F5,PSGVoi2
00095E                  	smpsSetVol	$03
00095E EC03             	dc.b	$EC,$03
000960 E70280068A038009 	dc.b	smpsNoAttack, $02, nRst, $06, nA0, $03, nRst, $09
000968 8A0380068A03918A 	dc.b	nA0, $03, nRst, $06, nA0, $03, nE1, nA0
000970 8506800385       	dc.b	nE0, $06, nRst, $03, nE0

000975                  SH_SystemMenu_Loop24:
000975 80068503         	dc.b	nRst, $06, nE0, $03
000979                  	smpsLoop		$00, $03, SH_SystemMenu_Loop24, Target
000979 F7               	dc.b	$F7
00097A 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop24<*)
00097C                  		rom_ptr_z80(SH_SystemMenu_Loop24+Target)
                        	;dc.w z80_ptr(ptr,addr)
00097C 7589             	dc.w  (((((SH_SystemMenu_Loop24+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop24+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nRst, nE0, nF0, nA0, $06, nRst, $03, nA0
00097E 800385868A068003 	dc.b	nRst, $03, nE0, nF0, nA0, $06, nRst, $03, nA0
000986 8A
000987 80068A0380098A03 	dc.b	nRst, $06, nA0, $03, nRst, $09, nA0, $03
00098F 80068A8003850680 	dc.b	nRst, $06, nA0, nRst, $03, nE0, $06, nRst
000997 0385800685038009 	dc.b	$03, nE0, nRst, $06, nE0, $03, nRst, $09
00099F 8503808580858691 	dc.b	nE0, $03, nRst, nE0, nRst, nE0, nF0, nE1
0009A7 80068A0380068A03 	dc.b	nRst, $06, nA0, $03, nRst, $06, nA0, $03
0009AF 80098A0380068A03 	dc.b	nRst, $09, nA0, $03, nRst, $06, nA0, $03
0009B7 918A8506800385   	dc.b	nE1, nA0, nE0, $06, nRst, $03, nE0

0009BE                  SH_SystemMenu_Loop25:
0009BE 80068503         	dc.b	nRst, $06, nE0, $03
0009C2                  	smpsLoop		$00, $03, SH_SystemMenu_Loop25, Target
0009C2 F7               	dc.b	$F7
0009C3 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_Loop25<*)
0009C5                  		rom_ptr_z80(SH_SystemMenu_Loop25+Target)
                        	;dc.w z80_ptr(ptr,addr)
0009C5 BE89             	dc.w  (((((SH_SystemMenu_Loop25+Target))<<8)&$FF00)|((((SH_SystemMenu_Loop25+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nRst, nE0, nF0, nRst, $01
0009C7 800385868001     	dc.b	nRst, $03, nE0, nF0, nRst, $01
0009CD                  	smpsSetVol	$01
0009CD EC01             	dc.b	$EC,$01
0009CF                  	smpsJump		SH_SystemMenu_Jump8, Target
0009CF F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump8<*)
0009D0                  		rom_ptr_z80(SH_SystemMenu_Jump8+Target)
                        	;dc.w z80_ptr(ptr,addr)
0009D0 E988             	dc.w  (((((SH_SystemMenu_Jump8+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0009D2                  SH_SystemMenu_PSG3:
0009D2 806C9401         	dc.b	nRst, $6C, nG1, $01
0009D6                  	smpsPSGvoice	PSGVoi3
0009D6 F500             	dc.b	$F5,PSGVoi3
0009D8 E70B             	dc.b	smpsNoAttack, $0B
0009DA                  	smpsSetVol	$00
0009DA EC00             	dc.b	$EC,$00
0009DC 960C             	dc.b	nA1, $0C
0009DE                  	smpsSetVol	$00
0009DE EC00             	dc.b	$EC,$00
0009E0 AC               	dc.b	nG3
0009E1                  	smpsSetVol	$00
0009E1 EC00             	dc.b	$EC,$00
0009E3 AA12             	dc.b	nF3, $12
0009E5                  	smpsSetVol	$00
0009E5 EC00             	dc.b	$EC,$00
0009E7 A9               	dc.b	nE3
0009E8                  	smpsSetVol	$00
0009E8 EC00             	dc.b	$EC,$00
0009EA 990C             	dc.b	nC2, $0C
0009EC                  	smpsSetVol	$00
0009EC EC00             	dc.b	$EC,$00
0009EE A724803C         	dc.b	nD3, $24, nRst, $3C
0009F2                  	smpsSetVol	$00
0009F2 EC00             	dc.b	$EC,$00
0009F4 AC0CAA           	dc.b	nG3, $0C, nF3
0009F7                  	smpsSetVol	$00
0009F7 EC00             	dc.b	$EC,$00
0009F9 A980AC0F940996   	dc.b	nE3, nRst, nG3, $0F, nG1, $09, nA1
000A00                  	smpsSetVol	$00
000A00 EC00             	dc.b	$EC,$00
000A02 9998069430803C94 	dc.b	nC2, nB1, $06, nG1, $30, nRst, $3C, nG1
000A0A 0C               	dc.b	$0C
000A0B                  	smpsSetVol	$00
000A0B EC00             	dc.b	$EC,$00
000A0D 96ACAA12A9990CA7 	dc.b	nA1, nG3, nF3, $12, nE3, nC2, $0C, nD3
000A15 24803C           	dc.b	$24, nRst, $3C
000A18                  	smpsSetVol	$00
000A18 EC00             	dc.b	$EC,$00
000A1A AC0CAA           	dc.b	nG3, $0C, nF3
000A1D                  	smpsSetVol	$00
000A1D EC00             	dc.b	$EC,$00
000A1F A980AC0F94099699 	dc.b	nE3, nRst, nG3, $0F, nG1, $09, nA1, nC2
                        	;!@ dc.b	nB1, $06, nG1, $30, nRst, $7F, $11, nG3
000A27 98069430807F8011 	dc.b	nB1, $06, nG1, $30, nRst, $7F, nRst, $11, nG3
000A2F AC
000A30 42A906AAA999     	dc.b	$42, nE3, $06, nF3, nE3, nC2
000A36                  	smpsSetVol	$00
000A36 EC00             	dc.b	$EC,$00
000A38 9448960699A7A9AA 	dc.b	nG1, $48, nA1, $06, nC2, nD3, nE3, nF3
000A40 AC488006         	dc.b	nG3, $48, nRst, $06
000A44                  	smpsSetVol	$00
000A44 EC00             	dc.b	$EC,$00
000A46 9699A7           	dc.b	nA1, nC2, nD3

000A49                  SH_SystemMenu_Jump9:
000A49                  	smpsSetVol	$00
000A49 EC00             	dc.b	$EC,$00
000A4B A90C             	dc.b	nE3, $0C
000A4D                  	smpsSetVol	$00
000A4D EC00             	dc.b	$EC,$00
000A4F AC06B0128006     	dc.b	nG3, $06, nB3, $12, nRst, $06
000A55                  	smpsSetVol	$00
000A55 EC00             	dc.b	$EC,$00
000A57 A9248012         	dc.b	nE3, $24, nRst, $12
000A5B                  	smpsSetVol	$00
000A5B EC00             	dc.b	$EC,$00
                        	;!@ dc.b	nB1, $06, $06
000A5D 98069806         	dc.b	nB1, $06, nB1, $06
000A61                  	smpsSetVol	$00
000A61 EC00             	dc.b	$EC,$00
000A63 A7AA0C9206969491 	dc.b	nD3, nF3, $0C, nF1, $06, nA1, nG1, nE1
000A6B 9498A7           	dc.b	nG1, nB1, nD3
000A6E                  	smpsSetVol	$00
000A6E EC00             	dc.b	$EC,$00
000A70 98               	dc.b	nB1
000A71                  	smpsSetVol	$00
000A71 EC00             	dc.b	$EC,$00
000A73 9498997FE717     	dc.b	nG1, nB1, nC2, $7F, smpsNoAttack, $17
000A79                  	smpsSetVol	$00
000A79 EC00             	dc.b	$EC,$00
000A7B 9B0C97A8         	dc.b	nD2, $0C, nBb1, nEb3
000A7F                  	smpsSetVol	$00
000A7F EC00             	dc.b	$EC,$00
000A81 06A70CA95AAC42   	dc.b	$06, nD3, $0C, nE3, $5A, nG3, $42
000A88                  	smpsSetVol	$00
000A88 EC00             	dc.b	$EC,$00
000A8A A906AAA9         	dc.b	nE3, $06, nF3, nE3
000A8E                  	smpsSetVol	$00
000A8E EC00             	dc.b	$EC,$00
000A90 99               	dc.b	nC2
000A91                  	smpsSetVol	$00
000A91 EC00             	dc.b	$EC,$00
000A93 9448             	dc.b	nG1, $48
000A95                  	smpsSetVol	$00
000A95 EC00             	dc.b	$EC,$00
000A97 960699           	dc.b	nA1, $06, nC2
000A9A                  	smpsSetVol	$00
000A9A EC00             	dc.b	$EC,$00
000A9C A7               	dc.b	nD3
000A9D                  	smpsSetVol	$00
000A9D EC00             	dc.b	$EC,$00
000A9F A9AA             	dc.b	nE3, nF3
000AA1                  	smpsSetVol	$00
000AA1 EC00             	dc.b	$EC,$00
000AA3 AC488006         	dc.b	nG3, $48, nRst, $06
000AA7                  	smpsSetVol	$00
000AA7 EC00             	dc.b	$EC,$00
000AA9 9699A7           	dc.b	nA1, nC2, nD3
000AAC                  	smpsJump		SH_SystemMenu_Jump9, Target
000AAC F6               	dc.b	$F6
                        	if (SH_SystemMenu_Jump9<*)
000AAD                  		rom_ptr_z80(SH_SystemMenu_Jump9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000AAD 498A             	dc.w  (((((SH_SystemMenu_Jump9+Target))<<8)&$FF00)|((((SH_SystemMenu_Jump9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000AAF                  SH_SystemMenu_PWM1:
000AAF                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000AAF E0C0             		dc.b $E0,panCenter
                        	endif
000AB1 8402             	dc.b	pRideBell, $02

000AB3                  SH_SystemMenu_PWM1_Loop1:
000AB3 88030384         	dc.b	pEHiHat, $03, $03, pRideBell
000AB7                  	smpsLoop		$00, $03, SH_SystemMenu_PWM1_Loop1, Target
000AB7 F7               	dc.b	$F7
000AB8 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_PWM1_Loop1<*)
000ABA                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000ABA B38A             	dc.w  (((((SH_SystemMenu_PWM1_Loop1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000ABC 888484888E9084   	dc.b	pEHiHat, pRideBell, pRideBell, pEHiHat, pFingSnap, pClickHi, pRideBell
000AC3                  	smpsLoop		$01, $0F, SH_SystemMenu_PWM1_Loop1, Target
000AC3 F7               	dc.b	$F7
000AC4 010F             	dc.b	$01,$0F
                        	if (SH_SystemMenu_PWM1_Loop1<*)
000AC6                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000AC6 B38A             	dc.w  (((((SH_SystemMenu_PWM1_Loop1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000AC8                  SH_SystemMenu_PWM1_Loop2:
000AC8 888884           	dc.b	pEHiHat, pEHiHat, pRideBell
000ACB                  	smpsLoop		$00, $03, SH_SystemMenu_PWM1_Loop2, Target
000ACB F7               	dc.b	$F7
000ACC 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_PWM1_Loop2<*)
000ACE                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000ACE C88A             	dc.w  (((((SH_SystemMenu_PWM1_Loop2+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000AD0 888484888E90     	dc.b	pEHiHat, pRideBell, pRideBell, pEHiHat, pFingSnap, pClickHi

000AD6                  SH_SystemMenu_PWM1_Loop3:
000AD6 9806998099989998 	dc.b	pClosedHH, $06, pOpenHH, nRst, pOpenHH, pClosedHH, pOpenHH, pClosedHH
000ADE 99               	dc.b	pOpenHH
000ADF                  	smpsLoop		$00, $04, SH_SystemMenu_PWM1_Loop3, Target
000ADF F7               	dc.b	$F7
000AE0 0004             	dc.b	$00,$04
                        	if (SH_SystemMenu_PWM1_Loop3<*)
000AE2                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000AE2 D68A             	dc.w  (((((SH_SystemMenu_PWM1_Loop3+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000AE4                  SH_SystemMenu_PWM1_Loop4:
000AE4 84038888         	dc.b	pRideBell, $03, pEHiHat, pEHiHat
000AE8                  	smpsLoop		$00, $03, SH_SystemMenu_PWM1_Loop4, Target
000AE8 F7               	dc.b	$F7
000AE9 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_PWM1_Loop4<*)
000AEB                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000AEB E48A             	dc.w  (((((SH_SystemMenu_PWM1_Loop4+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000AED 84888484888E90   	dc.b	pRideBell, pEHiHat, pRideBell, pRideBell, pEHiHat, pFingSnap, pClickHi
000AF4                  	smpsLoop		$01, $06, SH_SystemMenu_PWM1_Loop4, Target
000AF4 F7               	dc.b	$F7
000AF5 0106             	dc.b	$01,$06
                        	if (SH_SystemMenu_PWM1_Loop4<*)
000AF7                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000AF7 E48A             	dc.w  (((((SH_SystemMenu_PWM1_Loop4+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000AF9 8401             	dc.b	pRideBell, $01

000AFB                  SH_SystemMenu_PWM1_Jump1:
000AFB 8002             	dc.b	nRst, $02

000AFD                  SH_SystemMenu_PWM1_Loop5:
000AFD 88030384         	dc.b	pEHiHat, $03, $03, pRideBell
000B01                  	smpsLoop		$00, $03, SH_SystemMenu_PWM1_Loop5, Target
000B01 F7               	dc.b	$F7
000B02 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_PWM1_Loop5<*)
000B04                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B04 FD8A             	dc.w  (((((SH_SystemMenu_PWM1_Loop5+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B06 888484888E9084   	dc.b	pEHiHat, pRideBell, pRideBell, pEHiHat, pFingSnap, pClickHi, pRideBell
000B0D                  	smpsLoop		$01, $0F, SH_SystemMenu_PWM1_Loop5, Target
000B0D F7               	dc.b	$F7
000B0E 010F             	dc.b	$01,$0F
                        	if (SH_SystemMenu_PWM1_Loop5<*)
000B10                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B10 FD8A             	dc.w  (((((SH_SystemMenu_PWM1_Loop5+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B12                  SH_SystemMenu_PWM1_Loop6:
000B12 888884           	dc.b	pEHiHat, pEHiHat, pRideBell
000B15                  	smpsLoop		$00, $03, SH_SystemMenu_PWM1_Loop6, Target
000B15 F7               	dc.b	$F7
000B16 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_PWM1_Loop6<*)
000B18                  		rom_ptr_z80(SH_SystemMenu_PWM1_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B18 128B             	dc.w  (((((SH_SystemMenu_PWM1_Loop6+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B1A 888484888E908401 	dc.b	pEHiHat, pRideBell, pRideBell, pEHiHat, pFingSnap, pClickHi, pRideBell, $01
000B22                  	smpsJump		SH_SystemMenu_PWM1_Jump1, Target
000B22 F6               	dc.b	$F6
                        	if (SH_SystemMenu_PWM1_Jump1<*)
000B23                  		rom_ptr_z80(SH_SystemMenu_PWM1_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B23 FB8A             	dc.w  (((((SH_SystemMenu_PWM1_Jump1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM1_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000B25                  SH_SystemMenu_PWM2:
000B25 8F02             	dc.b	pCowbell, $02

000B27                  SH_SystemMenu_PWM2_Loop1:
000B27 038E90828F8E908F 	dc.b	$03, pFingSnap, pClickHi, pESnare, pCowbell, pFingSnap, pClickHi, pCowbell
000B2F 928E90828F92888F 	dc.b	pBongoHi, pFingSnap, pClickHi, pESnare, pCowbell, pBongoHi, pEHiHat, pCowbell
000B37                  	smpsLoop		$00, $0F, SH_SystemMenu_PWM2_Loop1, Target
000B37 F7               	dc.b	$F7
000B38 000F             	dc.b	$00,$0F
                        	if (SH_SystemMenu_PWM2_Loop1<*)
000B3A                  		rom_ptr_z80(SH_SystemMenu_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B3A 278B             	dc.w  (((((SH_SystemMenu_PWM2_Loop1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B3C 8F8E90828F8E908F 	dc.b	pCowbell, pFingSnap, pClickHi, pESnare, pCowbell, pFingSnap, pClickHi, pCowbell
000B44 928E90828F9288   	dc.b	pBongoHi, pFingSnap, pClickHi, pESnare, pCowbell, pBongoHi, pEHiHat

000B4B                  SH_SystemMenu_PWM2_Loop3:
000B4B 8B888F           	dc.b	pAKick, pEHiHat, pCowbell

000B4E                  SH_SystemMenu_PWM2_Loop2:
000B4E 8F8B068F03       	dc.b	pCowbell, pAKick, $06, pCowbell, $03
000B53                  	smpsLoop		$00, $03, SH_SystemMenu_PWM2_Loop2, Target
000B53 F7               	dc.b	$F7
000B54 0003             	dc.b	$00,$03
                        	if (SH_SystemMenu_PWM2_Loop2<*)
000B56                  		rom_ptr_z80(SH_SystemMenu_PWM2_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B56 4E8B             	dc.w  (((((SH_SystemMenu_PWM2_Loop2+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B58 038B888F8F8A068F 	dc.b	$03, pAKick, pEHiHat, pCowbell, pCowbell, pClap, $06, pCowbell
000B60 03038B068F03038B 	dc.b	$03, $03, pAKick, $06, pCowbell, $03, $03, pAKick
000B68 068F0303         	dc.b	$06, pCowbell, $03, $03
000B6C                  	smpsLoop		$01, $02, SH_SystemMenu_PWM2_Loop3, Target
000B6C F7               	dc.b	$F7
000B6D 0102             	dc.b	$01,$02
                        	if (SH_SystemMenu_PWM2_Loop3<*)
000B6F                  		rom_ptr_z80(SH_SystemMenu_PWM2_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B6F 4B8B             	dc.w  (((((SH_SystemMenu_PWM2_Loop3+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B71 03               	dc.b	$03

000B72                  SH_SystemMenu_PWM2_Loop4:
000B72 038E90828F8E908F 	dc.b	$03, pFingSnap, pClickHi, pESnare, pCowbell, pFingSnap, pClickHi, pCowbell
000B7A 928E90828F92888F 	dc.b	pBongoHi, pFingSnap, pClickHi, pESnare, pCowbell, pBongoHi, pEHiHat, pCowbell
000B82                  	smpsLoop		$00, $05, SH_SystemMenu_PWM2_Loop4, Target
000B82 F7               	dc.b	$F7
000B83 0005             	dc.b	$00,$05
                        	if (SH_SystemMenu_PWM2_Loop4<*)
000B85                  		rom_ptr_z80(SH_SystemMenu_PWM2_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B85 728B             	dc.w  (((((SH_SystemMenu_PWM2_Loop4+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B87 8F8E90828F8E908F 	dc.b	pCowbell, pFingSnap, pClickHi, pESnare, pCowbell, pFingSnap, pClickHi, pCowbell
000B8F 928E90828F92888F 	dc.b	pBongoHi, pFingSnap, pClickHi, pESnare, pCowbell, pBongoHi, pEHiHat, pCowbell
000B97 01               	dc.b	$01

000B98                  SH_SystemMenu_PWM2_Jump1:
000B98 80028F           	dc.b	nRst, $02, pCowbell

000B9B                  SH_SystemMenu_PWM2_Loop5:
000B9B 038E90828F8E908F 	dc.b	$03, pFingSnap, pClickHi, pESnare, pCowbell, pFingSnap, pClickHi, pCowbell
000BA3 928E90828F92888F 	dc.b	pBongoHi, pFingSnap, pClickHi, pESnare, pCowbell, pBongoHi, pEHiHat, pCowbell
000BAB                  	smpsLoop		$00, $09, SH_SystemMenu_PWM2_Loop5, Target
000BAB F7               	dc.b	$F7
000BAC 0009             	dc.b	$00,$09
                        	if (SH_SystemMenu_PWM2_Loop5<*)
000BAE                  		rom_ptr_z80(SH_SystemMenu_PWM2_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BAE 9B8B             	dc.w  (((((SH_SystemMenu_PWM2_Loop5+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BB0 8F8E908F8F8E908F 	dc.b	pCowbell, pFingSnap, pClickHi, pCowbell, pCowbell, pFingSnap, pClickHi, pCowbell
000BB8 928E908F         	dc.b	pBongoHi, pFingSnap, pClickHi, pCowbell

000BBC                  SH_SystemMenu_PWM2_Loop6:
000BBC 8F92888F8F8E9082 	dc.b	pCowbell, pBongoHi, pEHiHat, pCowbell, pCowbell, pFingSnap, pClickHi, pESnare
000BC4 8F8E908F928E9082 	dc.b	pCowbell, pFingSnap, pClickHi, pCowbell, pBongoHi, pFingSnap, pClickHi, pESnare
000BCC                  	smpsLoop		$00, $06, SH_SystemMenu_PWM2_Loop6, Target
000BCC F7               	dc.b	$F7
000BCD 0006             	dc.b	$00,$06
                        	if (SH_SystemMenu_PWM2_Loop6<*)
000BCF                  		rom_ptr_z80(SH_SystemMenu_PWM2_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BCF BC8B             	dc.w  (((((SH_SystemMenu_PWM2_Loop6+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BD1 8F92888F01       	dc.b	pCowbell, pBongoHi, pEHiHat, pCowbell, $01
000BD6                  	smpsJump		SH_SystemMenu_PWM2_Jump1, Target
000BD6 F6               	dc.b	$F6
                        	if (SH_SystemMenu_PWM2_Jump1<*)
000BD7                  		rom_ptr_z80(SH_SystemMenu_PWM2_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BD7 988B             	dc.w  (((((SH_SystemMenu_PWM2_Jump1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM2_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000BD9                  SH_SystemMenu_PWM3:
000BD9 8B02             	dc.b	pAKick, $02

000BDB                  SH_SystemMenu_PWM3_Loop1:
000BDB 92038F8F8F88928F 	dc.b	pBongoHi, $03, pCowbell, pCowbell, pCowbell, pEHiHat, pBongoHi, pCowbell
000BE3 8B068F0303038884 	dc.b	pAKick, $06, pCowbell, $03, $03, $03, pEHiHat, pRideBell
000BEB 8F8B             	dc.b	pCowbell, pAKick
000BED                  	smpsLoop		$00, $0F, SH_SystemMenu_PWM3_Loop1, Target
000BED F7               	dc.b	$F7
000BEE 000F             	dc.b	$00,$0F
                        	if (SH_SystemMenu_PWM3_Loop1<*)
000BF0                  		rom_ptr_z80(SH_SystemMenu_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BF0 DB8B             	dc.w  (((((SH_SystemMenu_PWM3_Loop1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BF2 928F8F8F88928F8B 	dc.b	pBongoHi, pCowbell, pCowbell, pCowbell, pEHiHat, pBongoHi, pCowbell, pAKick
000BFA 068F03030388848F 	dc.b	$06, pCowbell, $03, $03, $03, pEHiHat, pRideBell, pCowbell

000C02                  SH_SystemMenu_PWM3_Loop2:
000C02 8F928E908F889290 	dc.b	pCowbell, pBongoHi, pFingSnap, pClickHi, pCowbell, pEHiHat, pBongoHi, pClickHi
000C0A 8F888E908F888488 	dc.b	pCowbell, pEHiHat, pFingSnap, pClickHi, pCowbell, pEHiHat, pRideBell, pEHiHat
000C12 8F928E908B069203 	dc.b	pCowbell, pBongoHi, pFingSnap, pClickHi, pAKick, $06, pBongoHi, $03
000C1A 908F888E908F8884 	dc.b	pClickHi, pCowbell, pEHiHat, pFingSnap, pClickHi, pCowbell, pEHiHat, pRideBell
000C22 88               	dc.b	pEHiHat
000C23                  	smpsLoop		$00, $02, SH_SystemMenu_PWM3_Loop2, Target
000C23 F7               	dc.b	$F7
000C24 0002             	dc.b	$00,$02
                        	if (SH_SystemMenu_PWM3_Loop2<*)
000C26                  		rom_ptr_z80(SH_SystemMenu_PWM3_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C26 028C             	dc.w  (((((SH_SystemMenu_PWM3_Loop2+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000C28                  SH_SystemMenu_PWM3_Loop3:
000C28 8B928F8F8F88928F 	dc.b	pAKick, pBongoHi, pCowbell, pCowbell, pCowbell, pEHiHat, pBongoHi, pCowbell
000C30 8B068F0303038884 	dc.b	pAKick, $06, pCowbell, $03, $03, $03, pEHiHat, pRideBell
000C38 8F               	dc.b	pCowbell
000C39                  	smpsLoop		$00, $06, SH_SystemMenu_PWM3_Loop3, Target
000C39 F7               	dc.b	$F7
000C3A 0006             	dc.b	$00,$06
                        	if (SH_SystemMenu_PWM3_Loop3<*)
000C3C                  		rom_ptr_z80(SH_SystemMenu_PWM3_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C3C 288C             	dc.w  (((((SH_SystemMenu_PWM3_Loop3+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C3E 8B01             	dc.b	pAKick, $01

000C40                  SH_SystemMenu_PWM3_Jump1:
000C40 8002             	dc.b	nRst, $02

000C42                  SH_SystemMenu_PWM3_Loop4:
000C42 92038F8F8F88928F 	dc.b	pBongoHi, $03, pCowbell, pCowbell, pCowbell, pEHiHat, pBongoHi, pCowbell
000C4A 8B068F0303038884 	dc.b	pAKick, $06, pCowbell, $03, $03, $03, pEHiHat, pRideBell
000C52 8F8B             	dc.b	pCowbell, pAKick
000C54                  	smpsLoop		$00, $09, SH_SystemMenu_PWM3_Loop4, Target
000C54 F7               	dc.b	$F7
000C55 0009             	dc.b	$00,$09
                        	if (SH_SystemMenu_PWM3_Loop4<*)
000C57                  		rom_ptr_z80(SH_SystemMenu_PWM3_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C57 428C             	dc.w  (((((SH_SystemMenu_PWM3_Loop4+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C59 928F8F8B0692038F 	dc.b	pBongoHi, pCowbell, pCowbell, pAKick, $06, pBongoHi, $03, pCowbell
000C61 8B068F03038B06   	dc.b	pAKick, $06, pCowbell, $03, $03, pAKick, $06

000C68                  SH_SystemMenu_PWM3_Loop5:
000C68 84038F8B928F8F8F 	dc.b	pRideBell, $03, pCowbell, pAKick, pBongoHi, pCowbell, pCowbell, pCowbell
000C70 88928F8B068F0303 	dc.b	pEHiHat, pBongoHi, pCowbell, pAKick, $06, pCowbell, $03, $03
000C78 0388             	dc.b	$03, pEHiHat
000C7A                  	smpsLoop		$00, $06, SH_SystemMenu_PWM3_Loop5, Target
000C7A F7               	dc.b	$F7
000C7B 0006             	dc.b	$00,$06
                        	if (SH_SystemMenu_PWM3_Loop5<*)
000C7D                  		rom_ptr_z80(SH_SystemMenu_PWM3_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C7D 688C             	dc.w  (((((SH_SystemMenu_PWM3_Loop5+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C7F 848F8B01         	dc.b	pRideBell, pCowbell, pAKick, $01
000C83                  	smpsJump		SH_SystemMenu_PWM3_Jump1, Target
000C83 F6               	dc.b	$F6
                        	if (SH_SystemMenu_PWM3_Jump1<*)
000C84                  		rom_ptr_z80(SH_SystemMenu_PWM3_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C84 408C             	dc.w  (((((SH_SystemMenu_PWM3_Jump1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM3_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000C86                  SH_SystemMenu_PWM4:
000C86 8002             	dc.b	nRst, $02

000C88                  SH_SystemMenu_PWM4_Loop1:
000C88 88098A0699098F8A 	dc.b	pEHiHat, $09, pClap, $06, pOpenHH, $09, pCowbell, pClap
000C90 069909           	dc.b	$06, pOpenHH, $09
000C93                  	smpsLoop		$00, $0F, SH_SystemMenu_PWM4_Loop1, Target
000C93 F7               	dc.b	$F7
000C94 000F             	dc.b	$00,$0F
                        	if (SH_SystemMenu_PWM4_Loop1<*)
000C96                  		rom_ptr_z80(SH_SystemMenu_PWM4_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C96 888C             	dc.w  (((((SH_SystemMenu_PWM4_Loop1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM4_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C98 888A0699098F8A06 	dc.b	pEHiHat, pClap, $06, pOpenHH, $09, pCowbell, pClap, $06
000CA0 998A098206880384 	dc.b	pOpenHH, pClap, $09, pESnare, $06, pEHiHat, $03, pRideBell
000CA8 09928A03888E0988 	dc.b	$09, pBongoHi, pClap, $03, pEHiHat, pFingSnap, $09, pEHiHat
000CB0 82038F840992038A 	dc.b	pESnare, $03, pCowbell, pRideBell, $09, pBongoHi, $03, pClap
000CB8 0988038E068A8209 	dc.b	$09, pEHiHat, $03, pFingSnap, $06, pClap, pESnare, $09
000CC0 8803840992068D03 	dc.b	pEHiHat, $03, pRideBell, $09, pBongoHi, $06, pBell, $03
000CC8 8A888E0988069103 	dc.b	pClap, pEHiHat, pFingSnap, $09, pEHiHat, $06, pClickLo, $03
000CD0 828F84069003928A 	dc.b	pESnare, pCowbell, pRideBell, $06, pClickHi, $03, pBongoHi, pClap
000CD8 0988038E09       	dc.b	$09, pEHiHat, $03, pFingSnap, $09

000CDD                  SH_SystemMenu_PWM4_Loop2:
000CDD 888A0699098F8A06 	dc.b	pEHiHat, pClap, $06, pOpenHH, $09, pCowbell, pClap, $06
000CE5 9909             	dc.b	pOpenHH, $09
000CE7                  	smpsLoop		$00, $05, SH_SystemMenu_PWM4_Loop2, Target
000CE7 F7               	dc.b	$F7
000CE8 0005             	dc.b	$00,$05
                        	if (SH_SystemMenu_PWM4_Loop2<*)
000CEA                  		rom_ptr_z80(SH_SystemMenu_PWM4_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000CEA DD8C             	dc.w  (((((SH_SystemMenu_PWM4_Loop2+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM4_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000CEC 888A0699098F8A06 	dc.b	pEHiHat, pClap, $06, pOpenHH, $09, pCowbell, pClap, $06
000CF4 9907             	dc.b	pOpenHH, $07

000CF6                  SH_SystemMenu_PWM4_Jump1:
000CF6 8002             	dc.b	nRst, $02

000CF8                  SH_SystemMenu_PWM4_Loop3:
000CF8 88098A0699098F8A 	dc.b	pEHiHat, $09, pClap, $06, pOpenHH, $09, pCowbell, pClap
000D00 069909           	dc.b	$06, pOpenHH, $09
000D03                  	smpsLoop		$00, $09, SH_SystemMenu_PWM4_Loop3, Target
000D03 F7               	dc.b	$F7
000D04 0009             	dc.b	$00,$09
                        	if (SH_SystemMenu_PWM4_Loop3<*)
000D06                  		rom_ptr_z80(SH_SystemMenu_PWM4_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D06 F88C             	dc.w  (((((SH_SystemMenu_PWM4_Loop3+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM4_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D08 880382060699098F 	dc.b	pEHiHat, $03, pESnare, $06, $06, pOpenHH, $09, pCowbell
000D10 0382060388       	dc.b	$03, pESnare, $06, $03, pEHiHat

000D15                  SH_SystemMenu_PWM4_Loop4:
000D15 9909888A0699098F 	dc.b	pOpenHH, $09, pEHiHat, pClap, $06, pOpenHH, $09, pCowbell
000D1D 8A06             	dc.b	pClap, $06
000D1F                  	smpsLoop		$00, $06, SH_SystemMenu_PWM4_Loop4, Target
000D1F F7               	dc.b	$F7
000D20 0006             	dc.b	$00,$06
                        	if (SH_SystemMenu_PWM4_Loop4<*)
000D22                  		rom_ptr_z80(SH_SystemMenu_PWM4_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D22 158D             	dc.w  (((((SH_SystemMenu_PWM4_Loop4+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM4_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D24 9907             	dc.b	pOpenHH, $07
000D26                  	smpsJump		SH_SystemMenu_PWM4_Jump1, Target
000D26 F6               	dc.b	$F6
                        	if (SH_SystemMenu_PWM4_Jump1<*)
000D27                  		rom_ptr_z80(SH_SystemMenu_PWM4_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D27 F68C             	dc.w  (((((SH_SystemMenu_PWM4_Jump1+Target))<<8)&$FF00)|((((SH_SystemMenu_PWM4_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000D29                  SH_Sneep:
000D29                  	smpsStop
000D29 F2               	dc.b	$F2

000D2A                  SH_SystemMenu_Patches:	
                        	;Synth Bass 2
000D2A 3A               	dc.b	$3A
000D2B 020E02028E8F8D53 	dc.b	$02, $0E, $02, $02,	$8E, $8F, $8D, $53
000D33 0E100E0D00000000 	dc.b	$0E, $10, $0E, $0D,	$00, $00, $00, $00
000D3B 13681308192A2315 	dc.b	$13, $68, $13, $08,	$19, $2A, $23, $08+$0D
                        	
                        	;SynthString1
000D43 3B               	dc.b	$3B
000D44 020204025959594C 	dc.b	$02, $02, $04, $02,	$59, $59, $59, $4C
000D4C 0307030500000000 	dc.b	$03, $07, $03, $05,	$00, $00, $00, $00
000D54 222222274018240F 	dc.b	$22, $22, $22, $27,	$40, $18, $24, $08+$07
                        	
                        	;S1_7
000D5C 05               	dc.b	$05
000D5D 36327C721F5F1F1F 	dc.b	$36, $32, $7C, $72,	$1F, $5F, $1F, $1F
000D65 070B0A0B00070707 	dc.b	$07, $0B, $0A, $0B,	$00, $07, $07, $07
000D6D 594E594E23102317 	dc.b	$59, $4E, $59, $4E,	$23, $10, $23, $08+$0F
                        	
                        	; FM3 ElectricPiano1
000D75 2C               	dc.b	$2C
000D76 313171715F545F5F 	dc.b	$31, $31, $71, $71,	$5F, $54, $5F, $5F
000D7E 050A030C00030303 	dc.b	$05, $0A, $03, $0C,	$00, $03, $03, $03
000D86 008700A717121D0C 	dc.b	$00, $87, $00, $A7,	$17, $0E+$04, $19+$04, $08+$04
                        	
                        	;FM 4 String Ensemble 1
000D8E 3A               	dc.b	$3A
000D8F 3105710159595C4E 	dc.b	$31, $05, $71, $01,	$59, $59, $5C, $4E
000D97 0A0B0D0401010101 	dc.b	$0A, $0B, $0D, $04,	$01, $01, $01, $01
000D9F 15582616230D2D10 	dc.b	$15, $58, $26, $16,	$23, $0D, $2D, $06+$0A
                        	
                        	;Drawbar Organ
000DA7 3D               	dc.b	$3D
000DA8 003070001F1F1F11 	dc.b	$00, $30, $70, $00,	$1F, $1F, $1F, $11
000DB0 0B09001F00000000 	dc.b	$0B, $09, $00, $1F,	$00, $00, $00, $00
000DB8 FFF90F072324320F 	dc.b	$FF, $F9, $0F, $07,	$1E+$05, $1F+$05, $2D+$05, $0A+$05
                        	
                        	;Shit
000DC0 07               	dc.b	$07
000DC1 01337408DFDFDFDF 	dc.b	$01, $33, $74, $08,	$DF, $DF, $DF, $DF
000DC9 0305050500000000 	dc.b	$03, $05, $05, $05,	$00, $00, $00, $00
000DD1 2A2A2A2A101C2310 	dc.b	$2A, $2A, $2A, $2A,	$0C+$04, $18+$04, $1F+$04, $0C+$04
                        	
                        	;EGuitar (Clean)
000DD9 3B               	dc.b	$3B
000DDA 0D0100009F1F1F1F 	dc.b	$0D, $01, $00, $00,	$9F, $1F, $1F, $1F
000DE2 0E0D090900000000 	dc.b	$0E, $0D, $09, $09,	$00, $00, $00, $00
000DEA D6D6D6D73321220D 	dc.b	$D6, $D6, $D6, $D7,	$33, $21, $22, $06+$07
                        	
000DF2 3A               	dc.b	$3A
000DF3 710633019C965D92 	dc.b	$71, $06, $33, $01,	$9C, $96, $5D, $92
000DFB 0409040700010300 	dc.b	$04, $09, $04, $07,	$00, $01, $03, $00
000E03 151216B525342508 	dc.b	$15, $12, $16, $B5,	$25, $34, $25, $08
000E0B  (000001)        	even

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PEHIHAT            00000088 E  PEKICK             00000081 E  PESNARE            00000082 E
PFINGSNAP          0000008E E  POPENHH            00000099 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSGFOFF            0000000C E  PSGVOI1            00000000 E
PSGVOI2            00000000 E  PSGVOI3            00000000 E  PSGVOL1            00000003 E
PSGVOL2            00000006 E  PSGVOL3            00000004 E  PSILENCE           00000096 E
PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E
PTOMHI             00000085 E  PTOMLOW            00000087 E  PTOMLOWER          0000009A E
PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E  PTOMMID            00000086 E
PWMVOL1            00000022 E  PWMVOL2            00000010 E  SH_SNEEP           00000D29
SH_SYSTEMMENU_FM1  00000040    SH_SYSTEMMENU_FM2  000000EF    SH_SYSTEMMENU_FM3  0000031F
SH_SYSTEMMENU_FM4  0000043F    SH_SYSTEMMENU_FM5  00000543    SH_SYSTEMMENU_FM6  00000659
SH_SYSTEMMENU_JUMP1                           0000009E    
SH_SYSTEMMENU_JUMP2                           000001FC    
SH_SYSTEMMENU_JUMP3                           000003C0    
SH_SYSTEMMENU_JUMP4                           000004C5    
SH_SYSTEMMENU_JUMP5                           000005BF    
SH_SYSTEMMENU_JUMP6                           000006D9    
SH_SYSTEMMENU_JUMP7                           000007BF    
SH_SYSTEMMENU_JUMP8                           000008E9    
SH_SYSTEMMENU_JUMP9                           00000A49    
SH_SYSTEMMENU_LOOP1                           00000047    
SH_SYSTEMMENU_LOOP10                          0000055F    
SH_SYSTEMMENU_LOOP11                          00000574    
SH_SYSTEMMENU_LOOP12                          0000065D    
SH_SYSTEMMENU_LOOP13                          00000683    
SH_SYSTEMMENU_LOOP14                          000006CB    
SH_SYSTEMMENU_LOOP15                          000006FE    
SH_SYSTEMMENU_LOOP16                          00000746    
SH_SYSTEMMENU_LOOP17                          0000075C    
SH_SYSTEMMENU_LOOP18                          0000075B    
SH_SYSTEMMENU_LOOP19                          0000077B    
SH_SYSTEMMENU_LOOP2                           00000046    
SH_SYSTEMMENU_LOOP20                          000007AA    
SH_SYSTEMMENU_LOOP21                          00000800    
SH_SYSTEMMENU_LOOP22                          0000081C    
SH_SYSTEMMENU_LOOP23                          00000888    
SH_SYSTEMMENU_LOOP24                          00000975    
SH_SYSTEMMENU_LOOP25                          000009BE    
SH_SYSTEMMENU_LOOP3                           00000066    
SH_SYSTEMMENU_LOOP4                           00000081    
SH_SYSTEMMENU_LOOP5                           000000CD    
SH_SYSTEMMENU_LOOP6                           000000F3    
SH_SYSTEMMENU_LOOP7                           00000346    
SH_SYSTEMMENU_LOOP8                           00000325    
SH_SYSTEMMENU_LOOP9                           00000549    
SH_SYSTEMMENU_PATCHES                         00000D2A    SH_SYSTEMMENU_PSG1 00000759
SH_SYSTEMMENU_PSG2 0000081A    SH_SYSTEMMENU_PSG3 000009D2    SH_SYSTEMMENU_PWM1 00000AAF
SH_SYSTEMMENU_PWM1_JUMP1                      00000AFB    
SH_SYSTEMMENU_PWM1_LOOP1                      00000AB3    
SH_SYSTEMMENU_PWM1_LOOP2                      00000AC8    
SH_SYSTEMMENU_PWM1_LOOP3                      00000AD6    
SH_SYSTEMMENU_PWM1_LOOP4                      00000AE4    
SH_SYSTEMMENU_PWM1_LOOP5                      00000AFD    
SH_SYSTEMMENU_PWM1_LOOP6                      00000B12    SH_SYSTEMMENU_PWM2 00000B25
SH_SYSTEMMENU_PWM2_JUMP1                      00000B98    
SH_SYSTEMMENU_PWM2_LOOP1                      00000B27    
SH_SYSTEMMENU_PWM2_LOOP2                      00000B4E    
SH_SYSTEMMENU_PWM2_LOOP3                      00000B4B    
SH_SYSTEMMENU_PWM2_LOOP4                      00000B72    
SH_SYSTEMMENU_PWM2_LOOP5                      00000B9B    
SH_SYSTEMMENU_PWM2_LOOP6                      00000BBC    SH_SYSTEMMENU_PWM3 00000BD9
SH_SYSTEMMENU_PWM3_JUMP1                      00000C40    
SH_SYSTEMMENU_PWM3_LOOP1                      00000BDB    
SH_SYSTEMMENU_PWM3_LOOP2                      00000C02    
SH_SYSTEMMENU_PWM3_LOOP3                      00000C28    
SH_SYSTEMMENU_PWM3_LOOP4                      00000C42    
SH_SYSTEMMENU_PWM3_LOOP5                      00000C68    SH_SYSTEMMENU_PWM4 00000C86
SH_SYSTEMMENU_PWM4_JUMP1                      00000CF6    
SH_SYSTEMMENU_PWM4_LOOP1                      00000C88    
SH_SYSTEMMENU_PWM4_LOOP2                      00000CDD    
SH_SYSTEMMENU_PWM4_LOOP3                      00000CF8    
SH_SYSTEMMENU_PWM4_LOOP4                      00000D15    SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  TARGET             00040000 E
TEMPDIV            00000002 S
