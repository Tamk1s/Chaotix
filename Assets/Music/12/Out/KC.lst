                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E
       = 00009F         pOrchHitHi		EQU	$9F
       = 0000A0         pOrchHitMed		EQU	$A0
       = 0000A1         pOrchHitLo		EQU	$A1
       = 0000A2         pOrchHitLower	EQU	$A2

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	if \0==4
                        		dc.b	volL
                        	else
                        		dc.b	(volL<<4)+volR
                        	endif	
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000000         FMPitch1	EQU	$00
       = 0000F4         FMPitch2	EQU	$F4
       = 000010         FMVol1	EQU	$10
       = 00000F         FMVol2	EQU	$0F
       = 00000B         FMVol3	EQU	$0B
       = 000000         FMVoi1	EQU	$00	;Lead 1 Square
       = 000001         FMVoi2	EQU	$01	;Synth 1 Bass
       = 000002         FMVoi3	EQU	$02	;Overdriven Guitar
       = 000003         FMVoi4	EQU	$03	;Choir Aahs (addendum)

       = 00000C         PSGPitch1	EQU	PSGDelta
       = 000000         PSGPitch2	EQU	$00
       = 000005         PSGVol1	EQU	$05
       = 000003         PSGVol2	EQU	$03
       = 000000         PSGVoi1	EQU	$00
       = 000004         PSGVoi2	EQU	$04
       = 000006         PSGVoi3	EQU	$06

       = 000000         PWMPitch	EQU	$00
       = 000099         PWMVol		EQU	$99

000000                  	smpsHeaderVoice	SRB2_INV_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SRB2_INV_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 C682             	dc.w  (((((SRB2_INV_Patches+Target))<<8)&$FF00)|((((SRB2_INV_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan      $06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempo		$03, $33
000004 0333             	dc.b	$03,$33
000006                  	smpsHeaderFM	SRB2_INV_FM1, Target, FMPitch1, FMVol1
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SRB2_INV_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SRB2_INV_FM1+Target))<<8)&$FF00)|((((SRB2_INV_FM1+Target))>>8)&$7F)|$80)
000008 0010             	dc.b	FMPitch1,FMVol1
00000A                  	smpsHeaderFM	SRB2_INV_FM2, Target, FMPitch1, FMVol2
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SRB2_INV_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A 7F80             	dc.w  (((((SRB2_INV_FM2+Target))<<8)&$FF00)|((((SRB2_INV_FM2+Target))>>8)&$7F)|$80)
00000C 000F             	dc.b	FMPitch1,FMVol2
00000E                  	smpsHeaderFM	SRB2_INV_FM3, Target, FMPitch2, FMVol3
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SRB2_INV_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E C480             	dc.w  (((((SRB2_INV_FM3+Target))<<8)&$FF00)|((((SRB2_INV_FM3+Target))>>8)&$7F)|$80)
000010 F40B             	dc.b	FMPitch2,FMVol3
000012                  	smpsHeaderFM	SRB2_INV_FM4, Target, FMPitch2, FMVol3
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SRB2_INV_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 E580             	dc.w  (((((SRB2_INV_FM4+Target))<<8)&$FF00)|((((SRB2_INV_FM4+Target))>>8)&$7F)|$80)
000014 F40B             	dc.b	FMPitch2,FMVol3
000016                  	smpsHeaderFM	SRB2_INV_FM5, Target, FMPitch1, FMVol3
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SRB2_INV_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 FE80             	dc.w  (((((SRB2_INV_FM5+Target))<<8)&$FF00)|((((SRB2_INV_FM5+Target))>>8)&$7F)|$80)
000018 000B             	dc.b	FMPitch1,FMVol3
00001A                  	smpsHeaderFM	SRB2_INV_FM6, Target, FMPitch1, FMVol3
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SRB2_INV_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 2881             	dc.w  (((((SRB2_INV_FM6+Target))<<8)&$FF00)|((((SRB2_INV_FM6+Target))>>8)&$7F)|$80)
00001C 000B             	dc.b	FMPitch1,FMVol3
00001E                  	smpsHeaderPSG	SRB2_INV_PSG1, Target, PSGPitch1, PSGVol1, $00, PSGVoi1
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SRB2_INV_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E 6E81             	dc.w  (((((SRB2_INV_PSG1+Target))<<8)&$FF00)|((((SRB2_INV_PSG1+Target))>>8)&$7F)|$80)
000020 0C05             	dc.b	PSGPitch1,PSGVol1
                        	;dc.w	voice
000022 0000             	dc.b	$00,PSGVoi1
000024                  	smpsHeaderPSG	SRB2_INV_PSG2, Target, PSGPitch2, PSGVol2, $00, PSGVoi2
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SRB2_INV_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 8F81             	dc.w  (((((SRB2_INV_PSG2+Target))<<8)&$FF00)|((((SRB2_INV_PSG2+Target))>>8)&$7F)|$80)
000026 0003             	dc.b	PSGPitch2,PSGVol2
                        	;dc.w	voice
000028 0004             	dc.b	$00,PSGVoi2
00002A                  	smpsHeaderPSG	SRB2_INV_PSG3, Target, PSGPitch1, PSGVol2, $00, PSGVoi3
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SRB2_INV_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A A881             	dc.w  (((((SRB2_INV_PSG3+Target))<<8)&$FF00)|((((SRB2_INV_PSG3+Target))>>8)&$7F)|$80)
00002C 0C03             	dc.b	PSGPitch1,PSGVol2
                        	;dc.w	voice
00002E 0006             	dc.b	$00,PSGVoi3
000030                  	smpsHeaderPWM	SRB2_INV_PWM1, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SRB2_INV_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 CE81             	dc.w  (((((SRB2_INV_PWM1+Target))<<8)&$FF00)|((((SRB2_INV_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
                        	if 4==4
000033 99               		dc.b	PWMVol
                        	else
                        	endif	
000034                  	smpsHeaderPWM	SRB2_INV_PWM2, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SRB2_INV_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 5C82             	dc.w  (((((SRB2_INV_PWM2+Target))<<8)&$FF00)|((((SRB2_INV_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
                        	if 4==4
000037 99               		dc.b	PWMVol
                        	else
                        	endif	
000038                  	smpsHeaderPWM	SRB2_INV_PWM3, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SRB2_INV_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 7582             	dc.w  (((((SRB2_INV_PWM3+Target))<<8)&$FF00)|((((SRB2_INV_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
                        	if 4==4
00003B 99               		dc.b	PWMVol
                        	else
                        	endif	
00003C                  	smpsHeaderPWM	SRB2_INV_PWM4, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SRB2_INV_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 8482             	dc.w  (((((SRB2_INV_PWM4+Target))<<8)&$FF00)|((((SRB2_INV_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
                        	if 4==4
00003F 99               		dc.b	PWMVol
                        	else
                        	endif	

000040                  SRB2_INV_FM1:
000040                  	smpsFMvoice		FMVoi1
                        	;if song<>""
                        	if 1==2
                        	else
000040 EF00             		dc.b $EF,FMVoi1
                        	endif

000042                  SRB2_INV_Loop1:
000042                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000042 E040             		dc.b $E0,panRight
                        	endif
000044 BE0180           	dc.b	nCs5, $01, nRst
000047                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000047 E080             		dc.b $E0,panLeft
                        	endif
000049 CAC580           	dc.b	nCs6, nAb5, nRst
00004C                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00004C E040             		dc.b $E0,panRight
                        	endif
00004E C1               	dc.b	nE5
00004F                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00004F E080             		dc.b $E0,panLeft
                        	endif
000051 BE80             	dc.b	nCs5, nRst
000053                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000053 E040             		dc.b $E0,panRight
                        	endif
000055 C3C180           	dc.b	nFs5, nE5, nRst
000058                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000058 E080             		dc.b $E0,panLeft
                        	endif
00005A C5               	dc.b	nAb5
00005B                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00005B E040             		dc.b $E0,panRight
                        	endif
00005D C880             	dc.b	nB5, nRst
00005F                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00005F E080             		dc.b $E0,panLeft
                        	endif
000061 CAC580           	dc.b	nCs6, nAb5, nRst
000064                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000064 E040             		dc.b $E0,panRight
                        	endif
000066 BE               	dc.b	nCs5
000067                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000067 E080             		dc.b $E0,panLeft
                        	endif
000069 B980             	dc.b	nAb4, nRst
00006B                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00006B E040             		dc.b $E0,panRight
                        	endif
00006D C3C180           	dc.b	nFs5, nE5, nRst
000070                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000070 E080             		dc.b $E0,panLeft
                        	endif
000072 BC               	dc.b	nB4
000073                  	smpsLoop		$00, $0D, SRB2_INV_Loop1, Target
000073 F7               	dc.b	$F7
000074 000D             	dc.b	$00,$0D
                        	if (SRB2_INV_Loop1<*)
000076                  		rom_ptr_z80(SRB2_INV_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000076 4280             	dc.w  (((((SRB2_INV_Loop1+Target))<<8)&$FF00)|((((SRB2_INV_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000078                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000078 E0C0             		dc.b $E0,panCenter
                        	endif
00007A                  	smpsAlterVol		$04
00007A E604             	dc.b	$E6,$04
00007C BE03             	dc.b	nCs5, $03
00007E                  	smpsStop
00007E F2               	dc.b	$F2

00007F                  SRB2_INV_FM2:
00007F                  	smpsFMvoice		FMVoi2
                        	;if song<>""
                        	if 1==2
                        	else
00007F EF01             		dc.b $EF,FMVoi2
                        	endif
000081                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000081 E0C0             		dc.b $E0,panCenter
                        	endif
000083 8018             	dc.b	nRst, $18

000085                  SRB2_INV_Loop3:
000085 A6018002         	dc.b	nCs3, $01, nRst, $02

000089                  SRB2_INV_Loop2:
000089 A6058001         	dc.b	nCs3, $05, nRst, $01
00008D                  	smpsLoop		$00, $03, SRB2_INV_Loop2, Target
00008D F7               	dc.b	$F7
00008E 0003             	dc.b	$00,$03
                        	if (SRB2_INV_Loop2<*)
000090                  		rom_ptr_z80(SRB2_INV_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000090 8980             	dc.w  (((((SRB2_INV_Loop2+Target))<<8)&$FF00)|((((SRB2_INV_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000092 AB06058001A90580 	dc.b	nFs3, $06, $05, nRst, $01, nE3, $05, nRst
00009A 01A9058001A903   	dc.b	$01, nE3, $05, nRst, $01, nE3, $03
0000A1                  	smpsLoop		$01, $05, SRB2_INV_Loop3, Target
0000A1 F7               	dc.b	$F7
0000A2 0105             	dc.b	$01,$05
                        	if (SRB2_INV_Loop3<*)
0000A4                  		rom_ptr_z80(SRB2_INV_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000A4 8580             	dc.w  (((((SRB2_INV_Loop3+Target))<<8)&$FF00)|((((SRB2_INV_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000A6 A6018002A6058001 	dc.b	nCs3, $01, nRst, $02, nCs3, $05, nRst, $01
0000AE A6058001A603A9AB 	dc.b	nCs3, $05, nRst, $01, nCs3, $03, nE3, nFs3
0000B6 0603ADAE058001AD 	dc.b	$06, $03, nAb3, nA3, $05, nRst, $01, nAb3
0000BE 088001A605       	dc.b	$08, nRst, $01, nCs3, $05
0000C3                  	smpsStop
0000C3 F2               	dc.b	$F2

0000C4                  SRB2_INV_FM3:
0000C4                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000C4 E080             		dc.b $E0,panLeft
                        	endif
                        	;!@ smpsFMvoice		FMVoi1
0000C6                  	smpsFMvoice		FMVoi4
                        	;if song<>""
                        	if 1==2
                        	else
0000C6 EF03             		dc.b $EF,FMVoi4
                        	endif
0000C8 C8178001BE55E70A 	dc.b	nB5, $17, nRst, $01, nCs5, $55, smpsNoAttack, $0A
0000D0 8001C555E70A8001 	dc.b	nRst, $01, nAb5, $55, smpsNoAttack, $0A, nRst, $01
0000D8 C845C30B8001C10E 	dc.b	nB5, $45, nFs5, $0B, nRst, $01, nE5, $0E
0000E0 8001BE05         	dc.b	nRst, $01, nCs5, $05
0000E4                  	smpsStop
0000E4 F2               	dc.b	$F2

0000E5                  SRB2_INV_FM4:
0000E5                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000E5 E040             		dc.b $E0,panRight
                        	endif
                        	;!@ smpsFMvoice		FMVoi1
0000E7                  	smpsFMvoice		FMVoi4
                        	;if song<>""
                        	if 1==2
                        	else
0000E7 EF03             		dc.b $EF,FMVoi4
                        	endif
0000E9 C1178055800CBE55 	dc.b	nE5, $17, nRst, $55, nRst, $0C, nCs5, $55
0000F1 E70A8001C545BE0B 	dc.b	smpsNoAttack, $0A, nRst, $01, nAb5, $45, nCs5, $0B
0000F9 8001BC0E         	dc.b	nRst, $01, nB4, $0E
0000FD                  	smpsStop
0000FD F2               	dc.b	$F2

0000FE                  SRB2_INV_FM5:
0000FE                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000FE E080             		dc.b $E0,panLeft
                        	endif
000100                  	smpsFMvoice		FMVoi3
                        	;if song<>""
                        	if 1==2
                        	else
000100 EF02             		dc.b $EF,FMVoi3
                        	endif
000102 8018             	dc.b	nRst, $18

000104                  SRB2_INV_Loop5:
000104 A6018002         	dc.b	nCs3, $01, nRst, $02

000108                  SRB2_INV_Loop4:
000108 A6058001         	dc.b	nCs3, $05, nRst, $01
00010C                  	smpsLoop		$00, $03, SRB2_INV_Loop4, Target
00010C F7               	dc.b	$F7
00010D 0003             	dc.b	$00,$03
                        	if (SRB2_INV_Loop4<*)
00010F                  		rom_ptr_z80(SRB2_INV_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00010F 0881             	dc.w  (((((SRB2_INV_Loop4+Target))<<8)&$FF00)|((((SRB2_INV_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000111 A606058001A40580 	dc.b	nCs3, $06, $05, nRst, $01, nB2, $05, nRst
000119 01A4058001A403   	dc.b	$01, nB2, $05, nRst, $01, nB2, $03
000120                  	smpsLoop		$01, $06, SRB2_INV_Loop5, Target
000120 F7               	dc.b	$F7
000121 0106             	dc.b	$01,$06
                        	if (SRB2_INV_Loop5<*)
000123                  		rom_ptr_z80(SRB2_INV_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000123 0481             	dc.w  (((((SRB2_INV_Loop5+Target))<<8)&$FF00)|((((SRB2_INV_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000125 A605             	dc.b	nCs3, $05
000127                  	smpsStop
000127 F2               	dc.b	$F2

000128                  SRB2_INV_FM6:
000128                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000128 E040             		dc.b $E0,panRight
                        	endif
00012A                  	smpsFMvoice		FMVoi3
                        	;if song<>""
                        	if 1==2
                        	else
00012A EF02             		dc.b $EF,FMVoi3
                        	endif
00012C 8018             	dc.b	nRst, $18

00012E                  SRB2_INV_Loop7:
00012E A1018002         	dc.b	nAb2, $01, nRst, $02

000132                  SRB2_INV_Loop6:
000132 A1058001         	dc.b	nAb2, $05, nRst, $01
000136                  	smpsLoop		$00, $03, SRB2_INV_Loop6, Target
000136 F7               	dc.b	$F7
000137 0003             	dc.b	$00,$03
                        	if (SRB2_INV_Loop6<*)
000139                  		rom_ptr_z80(SRB2_INV_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000139 3281             	dc.w  (((((SRB2_INV_Loop6+Target))<<8)&$FF00)|((((SRB2_INV_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00013B A1060580019F0580 	dc.b	nAb2, $06, $05, nRst, $01, nFs2, $05, nRst
000143 019F0580019F03   	dc.b	$01, nFs2, $05, nRst, $01, nFs2, $03
00014A                  	smpsLoop		$01, $05, SRB2_INV_Loop7, Target
00014A F7               	dc.b	$F7
00014B 0105             	dc.b	$01,$05
                        	if (SRB2_INV_Loop7<*)
00014D                  		rom_ptr_z80(SRB2_INV_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
00014D 2E81             	dc.w  (((((SRB2_INV_Loop7+Target))<<8)&$FF00)|((((SRB2_INV_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00014F A1018002         	dc.b	nAb2, $01, nRst, $02

000153                  SRB2_INV_Loop8:
000153 A1058001         	dc.b	nAb2, $05, nRst, $01
000157                  	smpsLoop		$00, $03, SRB2_INV_Loop8, Target
000157 F7               	dc.b	$F7
000158 0003             	dc.b	$00,$03
                        	if (SRB2_INV_Loop8<*)
00015A                  		rom_ptr_z80(SRB2_INV_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
00015A 5381             	dc.w  (((((SRB2_INV_Loop8+Target))<<8)&$FF00)|((((SRB2_INV_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00015C 9F060580019D0580 	dc.b	nFs2, $06, $05, nRst, $01, nE2, $05, nRst
000164 019D0580019D03A1 	dc.b	$01, nE2, $05, nRst, $01, nE2, $03, nAb2
00016C 05               	dc.b	$05
00016D                  	smpsStop
00016D F2               	dc.b	$F2

00016E                  SRB2_INV_PSG1:
00016E 9A0180A6A1809D9A 	dc.b	nCs2, $01, nRst, nCs3, nAb2, nRst, nE2, nCs2
000176 809F9D80A1A480A6 	dc.b	nRst, nFs2, nE2, nRst, nAb2, nB2, nRst, nCs3
00017E A1809A95809F9D80 	dc.b	nAb2, nRst, nCs2, nAb1, nRst, nFs2, nE2, nRst
000186 98               	dc.b	nB1
000187                  	smpsLoop		$00, $0D, SRB2_INV_PSG1, Target
000187 F7               	dc.b	$F7
000188 000D             	dc.b	$00,$0D
                        	if (SRB2_INV_PSG1<*)
00018A                  		rom_ptr_z80(SRB2_INV_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00018A 6E81             	dc.w  (((((SRB2_INV_PSG1+Target))<<8)&$FF00)|((((SRB2_INV_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00018C 9A03             	dc.b	nCs2, $03
00018E                  	smpsStop
00018E F2               	dc.b	$F2

00018F                  SRB2_INV_PSG2:
00018F A41780019A55E70A 	dc.b	nB2, $17, nRst, $01, nCs2, $55, smpsNoAttack, $0A
000197 8001A155E70A8001 	dc.b	nRst, $01, nAb2, $55, smpsNoAttack, $0A, nRst, $01
00019F A4459F0B80019D0E 	dc.b	nB2, $45, nFs2, $0B, nRst, $01, nE2, $0E
0001A7                  	smpsStop
0001A7 F2               	dc.b	$F2

0001A8                  SRB2_INV_PSG3:
0001A8 8018             	dc.b	nRst, $18

0001AA                  SRB2_INV_Loop10:
0001AA 82018002         	dc.b	nCs0, $01, nRst, $02

0001AE                  SRB2_INV_Loop9:
0001AE 82058001         	dc.b	nCs0, $05, nRst, $01
0001B2                  	smpsLoop		$00, $03, SRB2_INV_Loop9, Target
0001B2 F7               	dc.b	$F7
0001B3 0003             	dc.b	$00,$03
                        	if (SRB2_INV_Loop9<*)
0001B5                  		rom_ptr_z80(SRB2_INV_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001B5 AE81             	dc.w  (((((SRB2_INV_Loop9+Target))<<8)&$FF00)|((((SRB2_INV_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001B7 8206058001810580 	dc.b	nCs0, $06, $05, nRst, $01, nC0, $05, nRst
0001BF 01810580018103   	dc.b	$01, nC0, $05, nRst, $01, nC0, $03
0001C6                  	smpsLoop		$01, $06, SRB2_INV_Loop10, Target
0001C6 F7               	dc.b	$F7
0001C7 0106             	dc.b	$01,$06
                        	if (SRB2_INV_Loop10<*)
0001C9                  		rom_ptr_z80(SRB2_INV_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001C9 AA81             	dc.w  (((((SRB2_INV_Loop10+Target))<<8)&$FF00)|((((SRB2_INV_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001CB 8205             	dc.b	nCs0, $05
0001CD                  	smpsStop
0001CD F2               	dc.b	$F2

0001CE                  SRB2_INV_PWM1:
0001CE 800C82           	dc.b	nRst, $0C, pESnare

0001D1                  SRB2_INV_PWM1_Loop1:
0001D1 018082           	dc.b	$01, nRst, pESnare
0001D4                  	smpsLoop		$00, $04, SRB2_INV_PWM1_Loop1, Target
0001D4 F7               	dc.b	$F7
0001D5 0004             	dc.b	$00,$04
                        	if (SRB2_INV_PWM1_Loop1<*)
0001D7                  		rom_ptr_z80(SRB2_INV_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001D7 D181             	dc.w  (((((SRB2_INV_PWM1_Loop1+Target))<<8)&$FF00)|((((SRB2_INV_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001D9                  SRB2_INV_PWM1_Loop2:
0001D9 8104800181820580 	dc.b	pEKick, $04, nRst, $01, pEKick, pESnare, $05, nRst
0001E1 0381010382058001 	dc.b	$03, pEKick, $01, $03, pESnare, $05, nRst, $01
0001E9                  	smpsLoop		$00, $03, SRB2_INV_PWM1_Loop2, Target
0001E9 F7               	dc.b	$F7
0001EA 0003             	dc.b	$00,$03
                        	if (SRB2_INV_PWM1_Loop2<*)
0001EC                  		rom_ptr_z80(SRB2_INV_PWM1_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001EC D981             	dc.w  (((((SRB2_INV_PWM1_Loop2+Target))<<8)&$FF00)|((((SRB2_INV_PWM1_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001EE 8104800181820580 	dc.b	pEKick, $04, nRst, $01, pEKick, pESnare, $05, nRst
0001F6 0381010382820180 	dc.b	$03, pEKick, $01, $03, pESnare, pESnare, $01, nRst
0001FE 82               	dc.b	pESnare

0001FF                  SRB2_INV_PWM1_Loop3:
0001FF 8104800181820580 	dc.b	pEKick, $04, nRst, $01, pEKick, pESnare, $05, nRst
000207 0381010382058001 	dc.b	$03, pEKick, $01, $03, pESnare, $05, nRst, $01
00020F                  	smpsLoop		$00, $03, SRB2_INV_PWM1_Loop3, Target
00020F F7               	dc.b	$F7
000210 0003             	dc.b	$00,$03
                        	if (SRB2_INV_PWM1_Loop3<*)
000212                  		rom_ptr_z80(SRB2_INV_PWM1_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000212 FF81             	dc.w  (((((SRB2_INV_PWM1_Loop3+Target))<<8)&$FF00)|((((SRB2_INV_PWM1_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000214 8104800181820580 	dc.b	pEKick, $04, nRst, $01, pEKick, pESnare, $05, nRst
00021C 0381010382018082 	dc.b	$03, pEKick, $01, $03, pESnare, $01, nRst, pESnare
000224 828082           	dc.b	pESnare, nRst, pESnare

000227                  SRB2_INV_PWM1_Loop4:
000227 8104800181820580 	dc.b	pEKick, $04, nRst, $01, pEKick, pESnare, $05, nRst
00022F 0381010382058001 	dc.b	$03, pEKick, $01, $03, pESnare, $05, nRst, $01
000237                  	smpsLoop		$00, $02, SRB2_INV_PWM1_Loop4, Target
000237 F7               	dc.b	$F7
000238 0002             	dc.b	$00,$02
                        	if (SRB2_INV_PWM1_Loop4<*)
00023A                  		rom_ptr_z80(SRB2_INV_PWM1_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00023A 2782             	dc.w  (((((SRB2_INV_PWM1_Loop4+Target))<<8)&$FF00)|((((SRB2_INV_PWM1_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00023C 8104800181820880 	dc.b	pEKick, $04, nRst, $01, pEKick, pESnare, $08, nRst
000244 0185808687038280 	dc.b	$01, pTomHi, nRst, pTomMid, pTomLow, $03, pESnare, nRst
00024C 8181820580018103 	dc.b	pEKick, pEKick, pESnare, $05, nRst, $01, pEKick, $03
000254 82018082828082   	dc.b	pESnare, $01, nRst, pESnare, pESnare, nRst, pESnare
00025B                  	smpsStop
00025B F2               	dc.b	$F2
                        	
00025C                  SRB2_INV_PWM2:
00025C 8018891780498917 	dc.b	nRst, $18, pCrashCymb, $17, nRst, $49, pCrashCymb, $17
000264 80498917802E8903 	dc.b	nRst, $49, pCrashCymb, $17, nRst, $2E, pCrashCymb, $03
00026C 80098903800C8305 	dc.b	nRst, $09, pCrashCymb, $03, nRst, $0C, pSplashCymb, $05
000274                  	smpsStop
000274 F2               	dc.b	$F2
                        	
000275                  SRB2_INV_PWM3:
000275 80188355800B8355 	dc.b	nRst, $18, pSplashCymb, $55, nRst, $0B, pSplashCymb, $55
00027D 800B83450C03     	dc.b	nRst, $0B, pSplashCymb, $45, $0C, $03
000283                  	smpsStop
000283 F2               	dc.b	$F2
                        	
000284                  SRB2_INV_PWM4:
                        	;smpsPan		panCenter
000284 8018             	dc.b	nRst, $18

000286                  SRB2_INV_PWM4_Loop3:
000286 9802010201       	dc.b	pClosedHH, $02, $01, $02, $01

00028B                  SRB2_INV_PWM4_Loop2:
00028B 99               	dc.b	pOpenHH

00028C                  SRB2_INV_PWM4_Loop1:
00028C 029801           	dc.b	$02, pClosedHH, $01
00028F                  	smpsLoop		$00, $04, SRB2_INV_PWM4_Loop1, Target
00028F F7               	dc.b	$F7
000290 0004             	dc.b	$00,$04
                        	if (SRB2_INV_PWM4_Loop1<*)
000292                  		rom_ptr_z80(SRB2_INV_PWM4_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000292 8C82             	dc.w  (((((SRB2_INV_PWM4_Loop1+Target))<<8)&$FF00)|((((SRB2_INV_PWM4_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000294                  	smpsLoop		$01, $07, SRB2_INV_PWM4_Loop2, Target
000294 F7               	dc.b	$F7
000295 0107             	dc.b	$01,$07
                        	if (SRB2_INV_PWM4_Loop2<*)
000297                  		rom_ptr_z80(SRB2_INV_PWM4_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000297 8B82             	dc.w  (((((SRB2_INV_PWM4_Loop2+Target))<<8)&$FF00)|((((SRB2_INV_PWM4_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000299 9902010201       	dc.b	pOpenHH, $02, $01, $02, $01
00029E                  	smpsLoop		$02, $02, SRB2_INV_PWM4_Loop3, Target
00029E F7               	dc.b	$F7
00029F 0202             	dc.b	$02,$02
                        	if (SRB2_INV_PWM4_Loop3<*)
0002A1                  		rom_ptr_z80(SRB2_INV_PWM4_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002A1 8682             	dc.w  (((((SRB2_INV_PWM4_Loop3+Target))<<8)&$FF00)|((((SRB2_INV_PWM4_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002A3 9802010201       	dc.b	pClosedHH, $02, $01, $02, $01

0002A8                  SRB2_INV_PWM4_Loop5:
0002A8 99               	dc.b	pOpenHH

0002A9                  SRB2_INV_PWM4_Loop4:
0002A9 029801           	dc.b	$02, pClosedHH, $01
0002AC                  	smpsLoop		$00, $04, SRB2_INV_PWM4_Loop4, Target
0002AC F7               	dc.b	$F7
0002AD 0004             	dc.b	$00,$04
                        	if (SRB2_INV_PWM4_Loop4<*)
0002AF                  		rom_ptr_z80(SRB2_INV_PWM4_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002AF A982             	dc.w  (((((SRB2_INV_PWM4_Loop4+Target))<<8)&$FF00)|((((SRB2_INV_PWM4_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002B1                  	smpsLoop		$01, $06, SRB2_INV_PWM4_Loop5, Target
0002B1 F7               	dc.b	$F7
0002B2 0106             	dc.b	$01,$06
                        	if (SRB2_INV_PWM4_Loop5<*)
0002B4                  		rom_ptr_z80(SRB2_INV_PWM4_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002B4 A882             	dc.w  (((((SRB2_INV_PWM4_Loop5+Target))<<8)&$FF00)|((((SRB2_INV_PWM4_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002B6 0201990298010201 	dc.b	$02, $01, pOpenHH, $02, pClosedHH, $01, $02, $01
0002BE 02019902010201   	dc.b	$02, $01, pOpenHH, $02, $01, $02, $01
0002C5                  	smpsStop
0002C5 F2               	dc.b	$F2

0002C6                  SRB2_INV_Patches:
                        	;Voice $00 Lead 1 Square
0002C6 2E               	dc.b	$2E
0002C7 020171311F1F1F1F 	dc.b	$02, $01, $71, $31,	$1F, $1F, $1F, $1F
0002CF 0000000000000000 	dc.b	$00, $00, $00, $00,	$00, $00, $00, $00
0002D7 000A0A0A1C848484 	dc.b	$00, $0A, $0A, $0A,	$1C, $84, $84, $84
                        	
                        	;Voice $01 Synth 1 Bass
0002DF 3D               	dc.b	$3D
0002E0 003070001F1F1F11 	dc.b	$00, $30, $70, $00,	$1F, $1F, $1F, $11
0002E8 0B09001F00000000 	dc.b	$0B, $09, $00, $1F,	$00, $00, $00, $00
0002F0 FFF90F071A809080 	dc.b	$FF, $F9, $0F, $07,	$1A, $80, $90, $80
                        	
                        	;Voice $02 Overdriven Guitar
0002F8 39               	dc.b	$39
0002F9 032261211F121F1F 	dc.b	$03, $22, $61, $21,	$1F, $12, $1F, $1F
000301 0505050B00000000 	dc.b	$05, $05, $05, $0B,	$00, $00, $00, $00
000309 101810181E121D80 	dc.b	$10, $18, $10, $18,	$1E, $12, $1D, $80
                        	
                        	;ADDENDUM!
                        	;Voice $03 Choir Aahs
                        	; $06
000311 06               	dc.b 	$06
000312 343474744E4E4E4E 	dc.b	$34, $34, $74, $74, $4E, $4E, $4E, $4E
00031A 0808080801010101 	dc.b	$08, $08, $08, $08, $01, $01, $01, $01
000322 1B1D1B1D20849084 	dc.b	$1B, $1D, $1B, $1D, $20, $84, $90, $84
                        	;spAlgorithm	$06
                        	;spFeedback	$00
                        	;spDetune	$03, $07, $03, $07
                        	;spMultiple	$04, $04, $04, $04
                        	;spRateScale	$01, $01, $01, $01
                        	;spAttackRt	$0E, $0E, $0E, $0E
                        	;spAmpMod	$00, $00, $00, $00
                        	;spSustainRt	$08, $08, $08, $08
                        	;spSustainLv	$01, $01, $01, $01
                        	;spDecayRt	$01, $01, $01, $01
                        	;spReleaseRt	$0B, $0B, $0D, $0D
                        	;spTotalLv	$20, $10, $04, $04

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  FMPITCH1           00000000 E
FMPITCH2           000000F4 E  FMVOI1             00000000 E  FMVOI2             00000001 E
FMVOI3             00000002 E  FMVOI4             00000003 E  FMVOL1             00000010 E
FMVOL2             0000000F E  FMVOL3             0000000B E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PCRA_D81           00000081 E  PCRA_D82           0000008C E  PCRA_D83           00000085 E
PCRA_D84           00000086 E  PCRA_D85           00000087 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
PFINGSNAPHI        0000008E E  PFINGSNAPLO        0000009E E  PNEPDADA           0000009D E
POPENHH            00000099 E  PORCHHITHI         0000009F E  PORCHHITLO         000000A1 E
PORCHHITLOWER      000000A2 E  PORCHHITMED        000000A0 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSGDELTA           0000000C E  PSGPITCH1          0000000C E
PSGPITCH2          00000000 E  PSGVOI1            00000000 E  PSGVOI2            00000004 E
PSGVOI3            00000006 E  PSGVOL1            00000005 E  PSGVOL2            00000003 E
PSILENCE           00000096 E  PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E
PTIMPANILO         00000095 E  PTOMHI             00000085 E  PTOMLOW            00000087 E
PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E
PTOMMID            00000086 E  PWMPITCH           00000000 E  PWMVOL             00000099 E
SMPSED             000000ED E  SMPSEE             000000EE E  SMPSF9             000000F9 E
SMPSMODOFF         000000F4 E  SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E
SMPSPITCH00        00000000 E  SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E
SMPSPITCH02HI      00000018 E  SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E
SMPSPITCH03LO      000000DC E  SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E
SMPSPITCH05HI      0000003C E  SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E
SMPSPITCH06LO      000000B8 E  SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E
SMPSPITCH08HI      00000060 E  SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E
SMPSPITCH09LO      00000094 E  SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E
SRB2_INV_FM1       00000040    SRB2_INV_FM2       0000007F    SRB2_INV_FM3       000000C4
SRB2_INV_FM4       000000E5    SRB2_INV_FM5       000000FE    SRB2_INV_FM6       00000128
SRB2_INV_LOOP1     00000042    SRB2_INV_LOOP10    000001AA    SRB2_INV_LOOP2     00000089
SRB2_INV_LOOP3     00000085    SRB2_INV_LOOP4     00000108    SRB2_INV_LOOP5     00000104
SRB2_INV_LOOP6     00000132    SRB2_INV_LOOP7     0000012E    SRB2_INV_LOOP8     00000153
SRB2_INV_LOOP9     000001AE    SRB2_INV_PATCHES   000002C6    SRB2_INV_PSG1      0000016E
SRB2_INV_PSG2      0000018F    SRB2_INV_PSG3      000001A8    SRB2_INV_PWM1      000001CE
SRB2_INV_PWM1_LOOP1                           000001D1    
SRB2_INV_PWM1_LOOP2                           000001D9    
SRB2_INV_PWM1_LOOP3                           000001FF    
SRB2_INV_PWM1_LOOP4                           00000227    SRB2_INV_PWM2      0000025C
SRB2_INV_PWM3      00000275    SRB2_INV_PWM4      00000284    
SRB2_INV_PWM4_LOOP1                           0000028C    
SRB2_INV_PWM4_LOOP2                           0000028B    
SRB2_INV_PWM4_LOOP3                           00000286    
SRB2_INV_PWM4_LOOP4                           000002A9    
SRB2_INV_PWM4_LOOP5                           000002A8    TARGET             00040000 E
