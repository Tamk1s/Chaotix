                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
       = 00008E         pFingSnap	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm

                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000
       = 000003         PSGVol	EQU	$03
       = 000000         PSGv1	EQU	$00
       = 000000         PSGv2	EQU	$00
000000                  	smpsHeaderVoice	VOR_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(VOR_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 9083             	dc.w  (((((VOR_Patches+Target))<<8)&$FF00)|((((VOR_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $0A
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($0A)
                        		if ($0A)==0
                        		else
000005 1A               			dc.b	((256 - ((((($0A))-1)*256 + ((($0A))/2)) / (($0A)))) % 256)
                        		endif
000006                  	smpsHeaderFM	VOR_FM1, Target, $00, $0E
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(VOR_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((VOR_FM1+Target))<<8)&$FF00)|((((VOR_FM1+Target))>>8)&$7F)|$80)
000008 000E             	dc.b	$00,$0E
00000A                  	smpsHeaderFM	VOR_FM2, Target, $00, $0E
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(VOR_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A 7F80             	dc.w  (((((VOR_FM2+Target))<<8)&$FF00)|((((VOR_FM2+Target))>>8)&$7F)|$80)
00000C 000E             	dc.b	$00,$0E
00000E                  	smpsHeaderFM	VOR_FM3, Target, $00, $0E
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(VOR_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E BE80             	dc.w  (((((VOR_FM3+Target))<<8)&$FF00)|((((VOR_FM3+Target))>>8)&$7F)|$80)
000010 000E             	dc.b	$00,$0E
000012                  	smpsHeaderFM	VOR_FM4, Target, $00, $0E
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(VOR_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 F580             	dc.w  (((((VOR_FM4+Target))<<8)&$FF00)|((((VOR_FM4+Target))>>8)&$7F)|$80)
000014 000E             	dc.b	$00,$0E
000016                  	smpsHeaderFM	VOR_FM5, Target, $00, $10
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(VOR_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 9281             	dc.w  (((((VOR_FM5+Target))<<8)&$FF00)|((((VOR_FM5+Target))>>8)&$7F)|$80)
000018 0010             	dc.b	$00,$10
00001A                  	smpsHeaderFM	VOR_NOP, Target, $00, $00
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(VOR_NOP+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 3F82             	dc.w  (((((VOR_NOP+Target))<<8)&$FF00)|((((VOR_NOP+Target))>>8)&$7F)|$80)
00001C 0000             	dc.b	$00,$00
00001E                  	smpsHeaderPSG	VOR_PSG1, Target, $00, $02, $00, PSGv1
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(VOR_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E C581             	dc.w  (((((VOR_PSG1+Target))<<8)&$FF00)|((((VOR_PSG1+Target))>>8)&$7F)|$80)
000020 0002             	dc.b	$00,$02
                        	;dc.w	voice
000022 0000             	dc.b	$00,PSGv1
000024                  	smpsHeaderPSG	VOR_PSG2, Target, $00, $02, $00, PSGv2
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(VOR_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 0282             	dc.w  (((((VOR_PSG2+Target))<<8)&$FF00)|((((VOR_PSG2+Target))>>8)&$7F)|$80)
000026 0002             	dc.b	$00,$02
                        	;dc.w	voice
000028 0000             	dc.b	$00,PSGv2
00002A                  	smpsHeaderPSG	VOR_NOP, Target, $02, $03, $00, PSGv2
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(VOR_NOP+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 3F82             	dc.w  (((((VOR_NOP+Target))<<8)&$FF00)|((((VOR_NOP+Target))>>8)&$7F)|$80)
00002C 0203             	dc.b	$02,$03
                        	;dc.w	voice
00002E 0000             	dc.b	$00,PSGv2
000030                  	smpsHeaderPWM	VOR_PWM1, Target, $00, $9F
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(VOR_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 4082             	dc.w  (((((VOR_PWM1+Target))<<8)&$FF00)|((((VOR_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	$00
000033 9F               	dc.b	$9F
000034                  	smpsHeaderPWM	VOR_PWM2, Target, $00, $9F
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(VOR_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 BC82             	dc.w  (((((VOR_PWM2+Target))<<8)&$FF00)|((((VOR_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	$00
000037 9F               	dc.b	$9F
000038                  	smpsHeaderPWM	VOR_PWM3, Target, $00, $9F
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(VOR_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 FF82             	dc.w  (((((VOR_PWM3+Target))<<8)&$FF00)|((((VOR_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	$00
00003B 9F               	dc.b	$9F
00003C                  	smpsHeaderPWM	VOR_PWM4, Target, $00, $9F
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(VOR_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 4E83             	dc.w  (((((VOR_PWM4+Target))<<8)&$FF00)|((((VOR_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	$00
00003F 9F               	dc.b	$9F

000040                  VOR_FM1:	
000040                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E0C0             		dc.b $E0,panCenter
                        	endif
000042                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,$00
                        	endif

000044                  VOR_Loop1:
000044 BF038006BD038006 	dc.b	nD5, $03, nRst, $06, nC5, $03, nRst, $06
00004C BC038006BA038006 	dc.b	nB4, $03, nRst, $06, nA4, $03, nRst, $06
000054 BC0380BD80       	dc.b	nB4, $03, nRst, nC5, nRst
000059                  	smpsLoop		$00, $02, VOR_Loop1, Target
000059 F7               	dc.b	$F7
00005A 0002             	dc.b	$00,$02
                        	if (VOR_Loop1<*)
00005C                  		rom_ptr_z80(VOR_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00005C 4480             	dc.w  (((((VOR_Loop1+Target))<<8)&$FF00)|((((VOR_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00005E                  VOR_Loop2:
00005E C08006BE038006BD 	dc.b	nEb5, nRst, $06, nCs5, $03, nRst, $06, nC5
000066 038006BB038006BD 	dc.b	$03, nRst, $06, nBb4, $03, nRst, $06, nC5
00006E 0380BE80         	dc.b	$03, nRst, nCs5, nRst
000072                  	smpsLoop		$00, $02, VOR_Loop2, Target
000072 F7               	dc.b	$F7
000073 0002             	dc.b	$00,$02
                        	if (VOR_Loop2<*)
000075                  		rom_ptr_z80(VOR_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000075 5E80             	dc.w  (((((VOR_Loop2+Target))<<8)&$FF00)|((((VOR_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000077                  	smpsLoop		$01, $04, VOR_Loop1, Target
000077 F7               	dc.b	$F7
000078 0104             	dc.b	$01,$04
                        	if (VOR_Loop1<*)
00007A                  		rom_ptr_z80(VOR_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00007A 4480             	dc.w  (((((VOR_Loop1+Target))<<8)&$FF00)|((((VOR_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00007C                  	smpsJump		VOR_FM1, Target
00007C F6               	dc.b	$F6
                        	if (VOR_FM1<*)
00007D                  		rom_ptr_z80(VOR_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00007D 4080             	dc.w  (((((VOR_FM1+Target))<<8)&$FF00)|((((VOR_FM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00007F                  VOR_FM2:
00007F                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00007F E0C0             		dc.b $E0,panCenter
                        	endif
000081                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000081 EF01             		dc.b $EF,$01
                        	endif

000083                  VOR_Loop3:
000083 B3038006B1038006 	dc.b	nD4, $03, nRst, $06, nC4, $03, nRst, $06
00008B B0038006AE038006 	dc.b	nB3, $03, nRst, $06, nA3, $03, nRst, $06
000093 B00380B180       	dc.b	nB3, $03, nRst, nC4, nRst
000098                  	smpsLoop		$00, $02, VOR_Loop3, Target
000098 F7               	dc.b	$F7
000099 0002             	dc.b	$00,$02
                        	if (VOR_Loop3<*)
00009B                  		rom_ptr_z80(VOR_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00009B 8380             	dc.w  (((((VOR_Loop3+Target))<<8)&$FF00)|((((VOR_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00009D                  VOR_Loop4:
00009D B48006B2038006B1 	dc.b	nEb4, nRst, $06, nCs4, $03, nRst, $06, nC4
0000A5 038006AF038006B1 	dc.b	$03, nRst, $06, nBb3, $03, nRst, $06, nC4
0000AD 0380B280         	dc.b	$03, nRst, nCs4, nRst
0000B1                  	smpsLoop		$00, $02, VOR_Loop4, Target
0000B1 F7               	dc.b	$F7
0000B2 0002             	dc.b	$00,$02
                        	if (VOR_Loop4<*)
0000B4                  		rom_ptr_z80(VOR_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000B4 9D80             	dc.w  (((((VOR_Loop4+Target))<<8)&$FF00)|((((VOR_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000B6                  	smpsLoop		$01, $04, VOR_Loop3, Target
0000B6 F7               	dc.b	$F7
0000B7 0104             	dc.b	$01,$04
                        	if (VOR_Loop3<*)
0000B9                  		rom_ptr_z80(VOR_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000B9 8380             	dc.w  (((((VOR_Loop3+Target))<<8)&$FF00)|((((VOR_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000BB                  	smpsJump		VOR_FM2, Target
0000BB F6               	dc.b	$F6
                        	if (VOR_FM2<*)
0000BC                  		rom_ptr_z80(VOR_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000BC 7F80             	dc.w  (((((VOR_FM2+Target))<<8)&$FF00)|((((VOR_FM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000BE                  VOR_FM3:
0000BE                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000BE E0C0             		dc.b $E0,panCenter
                        	endif
0000C0                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
0000C0 EF02             		dc.b $EF,$02
                        	endif

0000C2                  VOR_Loop5:
0000C2 A70380A580A7A580 	dc.b	nD3, $03, nRst, nC3, nRst, nD3, nC3, nRst
0000CA A780AE80AEB080AA 	dc.b	nD3, nRst, nA3, nRst, nA3, nB3, nRst, nF3
0000D2 80               	dc.b	nRst
0000D3                  	smpsLoop		$00, $02, VOR_Loop5, Target
0000D3 F7               	dc.b	$F7
0000D4 0002             	dc.b	$00,$02
                        	if (VOR_Loop5<*)
0000D6                  		rom_ptr_z80(VOR_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000D6 C280             	dc.w  (((((VOR_Loop5+Target))<<8)&$FF00)|((((VOR_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000D8                  VOR_Loop6:
0000D8 A880B480A8A680A8 	dc.b	nEb3, nRst, nEb4, nRst, nEb3, nCs3, nRst, nEb3
0000E0 80AF80AFA880AB80 	dc.b	nRst, nBb3, nRst, nBb3, nEb3, nRst, nFs3, nRst
0000E8                  	smpsLoop		$00, $02, VOR_Loop6, Target
0000E8 F7               	dc.b	$F7
0000E9 0002             	dc.b	$00,$02
                        	if (VOR_Loop6<*)
0000EB                  		rom_ptr_z80(VOR_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000EB D880             	dc.w  (((((VOR_Loop6+Target))<<8)&$FF00)|((((VOR_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000ED                  	smpsLoop		$01, $04, VOR_Loop5, Target
0000ED F7               	dc.b	$F7
0000EE 0104             	dc.b	$01,$04
                        	if (VOR_Loop5<*)
0000F0                  		rom_ptr_z80(VOR_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000F0 C280             	dc.w  (((((VOR_Loop5+Target))<<8)&$FF00)|((((VOR_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000F2                  	smpsJump		VOR_FM3, Target
0000F2 F6               	dc.b	$F6
                        	if (VOR_FM3<*)
0000F3                  		rom_ptr_z80(VOR_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000F3 BE80             	dc.w  (((((VOR_FM3+Target))<<8)&$FF00)|((((VOR_FM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000F5                  VOR_FM4:
0000F5                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
0000F5 EF02             		dc.b $EF,$02
                        	endif
0000F7                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000F7 E0C0             		dc.b $E0,panCenter
                        	endif

0000F9                  VOR_Loop7:
0000F9 B30380B380B38006 	dc.b	nD4, $03, nRst, nD4, nRst, nD4, nRst, $06
000101 B30380A580A5A780 	dc.b	nD4, $03, nRst, nC3, nRst, nC3, nD3, nRst
000109 B180             	dc.b	nC4, nRst
00010B                  	smpsLoop		$00, $02, VOR_Loop7, Target
00010B F7               	dc.b	$F7
00010C 0002             	dc.b	$00,$02
                        	if (VOR_Loop7<*)
00010E                  		rom_ptr_z80(VOR_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
00010E F980             	dc.w  (((((VOR_Loop7+Target))<<8)&$FF00)|((((VOR_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000110                  VOR_Loop8:
000110 B480A680B48006B4 	dc.b	nEb4, nRst, nCs3, nRst, nEb4, nRst, $06, nEb4
000118 0380A680A6B180B2 	dc.b	$03, nRst, nCs3, nRst, nCs3, nC4, nRst, nCs4
000120 80               	dc.b	nRst
000121                  	smpsLoop		$00, $02, VOR_Loop8, Target
000121 F7               	dc.b	$F7
000122 0002             	dc.b	$00,$02
                        	if (VOR_Loop8<*)
000124                  		rom_ptr_z80(VOR_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000124 1081             	dc.w  (((((VOR_Loop8+Target))<<8)&$FF00)|((((VOR_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000126                  VOR_Loop9:
000126 B380B380B38006B3 	dc.b	nD4, nRst, nD4, nRst, nD4, nRst, $06, nD4
00012E 0380A580A5A780B1 	dc.b	$03, nRst, nC3, nRst, nC3, nD3, nRst, nC4
000136 80               	dc.b	nRst
000137                  	smpsLoop		$00, $02, VOR_Loop9, Target
000137 F7               	dc.b	$F7
000138 0002             	dc.b	$00,$02
                        	if (VOR_Loop9<*)
00013A                  		rom_ptr_z80(VOR_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
00013A 2681             	dc.w  (((((VOR_Loop9+Target))<<8)&$FF00)|((((VOR_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00013C B480A680B48006B4 	dc.b	nEb4, nRst, nCs3, nRst, nEb4, nRst, $06, nEb4
000144 0380A680A6B180B2 	dc.b	$03, nRst, nCs3, nRst, nCs3, nC4, nRst, nCs4
00014C 80B480A680B48006 	dc.b	nRst, nEb4, nRst, nCs3, nRst, nEb4, nRst, $06
000154 B4038009A603B180 	dc.b	nEb4, $03, nRst, $09, nCs3, $03, nC4, nRst
00015C B2               	dc.b	nCs4

00015D                  VOR_Loop10:
00015D 80B380B380B38006 	dc.b	nRst, nD4, nRst, nD4, nRst, nD4, nRst, $06
000165 B30380A580A5A780 	dc.b	nD4, $03, nRst, nC3, nRst, nC3, nD3, nRst
00016D B1               	dc.b	nC4
00016E                  	smpsLoop		$00, $02, VOR_Loop10, Target
00016E F7               	dc.b	$F7
00016F 0002             	dc.b	$00,$02
                        	if (VOR_Loop10<*)
000171                  		rom_ptr_z80(VOR_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
000171 5D81             	dc.w  (((((VOR_Loop10+Target))<<8)&$FF00)|((((VOR_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000173                  VOR_Loop11:
000173 80B480A680B48006 	dc.b	nRst, nEb4, nRst, nCs3, nRst, nEb4, nRst, $06
00017B B40380A680A6B180 	dc.b	nEb4, $03, nRst, nCs3, nRst, nCs3, nC4, nRst
000183 B2               	dc.b	nCs4
000184                  	smpsLoop		$00, $02, VOR_Loop11, Target
000184 F7               	dc.b	$F7
000185 0002             	dc.b	$00,$02
                        	if (VOR_Loop11<*)
000187                  		rom_ptr_z80(VOR_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
000187 7381             	dc.w  (((((VOR_Loop11+Target))<<8)&$FF00)|((((VOR_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000189                  	smpsLoop		$01, $02, VOR_Loop10, Target
000189 F7               	dc.b	$F7
00018A 0102             	dc.b	$01,$02
                        	if (VOR_Loop10<*)
00018C                  		rom_ptr_z80(VOR_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
00018C 5D81             	dc.w  (((((VOR_Loop10+Target))<<8)&$FF00)|((((VOR_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00018E 80               	dc.b	nRst
00018F                  	smpsJump		VOR_FM4, Target
00018F F6               	dc.b	$F6
                        	if (VOR_FM4<*)
000190                  		rom_ptr_z80(VOR_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000190 F580             	dc.w  (((((VOR_FM4+Target))<<8)&$FF00)|((((VOR_FM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000192                  VOR_FM5:
000192                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
000192 EF03             		dc.b $EF,$03
                        	endif
000194                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000194 E0C0             		dc.b $E0,panCenter
                        	endif

000196                  VOR_Loop12:
000196 A7028001         	dc.b	nD3, $02, nRst, $01
00019A                  	smpsLoop		$00, $20, VOR_Loop12, Target
00019A F7               	dc.b	$F7
00019B 0020             	dc.b	$00,$20
                        	if (VOR_Loop12<*)
00019D                  		rom_ptr_z80(VOR_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
00019D 9681             	dc.w  (((((VOR_Loop12+Target))<<8)&$FF00)|((((VOR_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00019F                  VOR_Loop13:
00019F A8028001         	dc.b	nEb3, $02, nRst, $01
0001A3                  	smpsLoop		$00, $20, VOR_Loop13, Target
0001A3 F7               	dc.b	$F7
0001A4 0020             	dc.b	$00,$20
                        	if (VOR_Loop13<*)
0001A6                  		rom_ptr_z80(VOR_Loop13+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001A6 9F81             	dc.w  (((((VOR_Loop13+Target))<<8)&$FF00)|((((VOR_Loop13+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001A8                  	smpsLoop		$01, $03, VOR_Loop12, Target
0001A8 F7               	dc.b	$F7
0001A9 0103             	dc.b	$01,$03
                        	if (VOR_Loop12<*)
0001AB                  		rom_ptr_z80(VOR_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001AB 9681             	dc.w  (((((VOR_Loop12+Target))<<8)&$FF00)|((((VOR_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001AD                  VOR_Loop14:
0001AD A7028001         	dc.b	nD3, $02, nRst, $01
0001B1                  	smpsLoop		$00, $20, VOR_Loop14, Target
0001B1 F7               	dc.b	$F7
0001B2 0020             	dc.b	$00,$20
                        	if (VOR_Loop14<*)
0001B4                  		rom_ptr_z80(VOR_Loop14+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001B4 AD81             	dc.w  (((((VOR_Loop14+Target))<<8)&$FF00)|((((VOR_Loop14+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001B6                  VOR_Loop15:
0001B6 A8028001         	dc.b	nEb3, $02, nRst, $01
0001BA                  	smpsLoop		$00, $1F, VOR_Loop15, Target
0001BA F7               	dc.b	$F7
0001BB 001F             	dc.b	$00,$1F
                        	if (VOR_Loop15<*)
0001BD                  		rom_ptr_z80(VOR_Loop15+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001BD B681             	dc.w  (((((VOR_Loop15+Target))<<8)&$FF00)|((((VOR_Loop15+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001BF A88002           	dc.b	nEb3, nRst, $02
0001C2                  	smpsJump		VOR_FM5, Target
0001C2 F6               	dc.b	$F6
                        	if (VOR_FM5<*)
0001C3                  		rom_ptr_z80(VOR_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001C3 9281             	dc.w  (((((VOR_FM5+Target))<<8)&$FF00)|((((VOR_FM5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001C5                  VOR_PSG1:
0001C5                  	smpsPSGvoice	PSGv1
0001C5 F500             	dc.b	$F5,PSGv1

0001C7                  VOR_Loop16:
0001C7 9603800694038006 	dc.b	nA1, $03, nRst, $06, nG1, $03, nRst, $06
0001CF 9403800691038006 	dc.b	nG1, $03, nRst, $06, nE1, $03, nRst, $06
0001D7 9403809480       	dc.b	nG1, $03, nRst, nG1, nRst
0001DC                  	smpsLoop		$00, $02, VOR_Loop16, Target
0001DC F7               	dc.b	$F7
0001DD 0002             	dc.b	$00,$02
                        	if (VOR_Loop16<*)
0001DF                  		rom_ptr_z80(VOR_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001DF C781             	dc.w  (((((VOR_Loop16+Target))<<8)&$FF00)|((((VOR_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001E1                  VOR_Loop17:
0001E1 9780069503800695 	dc.b	nBb1, nRst, $06, nAb1, $03, nRst, $06, nAb1
0001E9 0380069203800695 	dc.b	$03, nRst, $06, nF1, $03, nRst, $06, nAb1
0001F1 03809580         	dc.b	$03, nRst, nAb1, nRst
0001F5                  	smpsLoop		$00, $02, VOR_Loop17, Target
0001F5 F7               	dc.b	$F7
0001F6 0002             	dc.b	$00,$02
                        	if (VOR_Loop17<*)
0001F8                  		rom_ptr_z80(VOR_Loop17+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001F8 E181             	dc.w  (((((VOR_Loop17+Target))<<8)&$FF00)|((((VOR_Loop17+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001FA                  	smpsLoop		$01, $04, VOR_Loop16, Target
0001FA F7               	dc.b	$F7
0001FB 0104             	dc.b	$01,$04
                        	if (VOR_Loop16<*)
0001FD                  		rom_ptr_z80(VOR_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001FD C781             	dc.w  (((((VOR_Loop16+Target))<<8)&$FF00)|((((VOR_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001FF                  	smpsJump		VOR_PSG1, Target
0001FF F6               	dc.b	$F6
                        	if (VOR_PSG1<*)
000200                  		rom_ptr_z80(VOR_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000200 C581             	dc.w  (((((VOR_PSG1+Target))<<8)&$FF00)|((((VOR_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000202                  VOR_PSG2:
000202                  	smpsPSGvoice	PSGv2
000202 F500             	dc.b	$F5,PSGv2

000204                  VOR_Loop18:
000204 9603800694038006 	dc.b	nA1, $03, nRst, $06, nG1, $03, nRst, $06
00020C 9403800691038006 	dc.b	nG1, $03, nRst, $06, nE1, $03, nRst, $06
000214 9403809480       	dc.b	nG1, $03, nRst, nG1, nRst
000219                  	smpsLoop		$00, $02, VOR_Loop18, Target
000219 F7               	dc.b	$F7
00021A 0002             	dc.b	$00,$02
                        	if (VOR_Loop18<*)
00021C                  		rom_ptr_z80(VOR_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
00021C 0482             	dc.w  (((((VOR_Loop18+Target))<<8)&$FF00)|((((VOR_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00021E                  VOR_Loop19:
00021E 9780069503800695 	dc.b	nBb1, nRst, $06, nAb1, $03, nRst, $06, nAb1
000226 0380069203800695 	dc.b	$03, nRst, $06, nF1, $03, nRst, $06, nAb1
00022E 03809580         	dc.b	$03, nRst, nAb1, nRst
000232                  	smpsLoop		$00, $02, VOR_Loop19, Target
000232 F7               	dc.b	$F7
000233 0002             	dc.b	$00,$02
                        	if (VOR_Loop19<*)
000235                  		rom_ptr_z80(VOR_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
000235 1E82             	dc.w  (((((VOR_Loop19+Target))<<8)&$FF00)|((((VOR_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000237                  	smpsLoop		$01, $04, VOR_Loop18, Target
000237 F7               	dc.b	$F7
000238 0104             	dc.b	$01,$04
                        	if (VOR_Loop18<*)
00023A                  		rom_ptr_z80(VOR_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
00023A 0482             	dc.w  (((((VOR_Loop18+Target))<<8)&$FF00)|((((VOR_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00023C                  	smpsJump		VOR_PSG2, Target
00023C F6               	dc.b	$F6
                        	if (VOR_PSG2<*)
00023D                  		rom_ptr_z80(VOR_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00023D 0282             	dc.w  (((((VOR_PSG2+Target))<<8)&$FF00)|((((VOR_PSG2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00023F                  VOR_NOP:
00023F                  	smpsStop
00023F F2               	dc.b	$F2

000240                  VOR_PWM1:
000240 8B0398989882098B 	dc.b	pAKick, $03, pClosedHH, pClosedHH, pClosedHH, pESnare, $09, pAKick
000248 0698038B06829803 	dc.b	$06, pClosedHH, $03, pAKick, $06, pESnare, pClosedHH, $03
000250 038B989898820906 	dc.b	$03, pAKick, pClosedHH, pClosedHH, pClosedHH, pESnare, $09, $06
000258 098B039898988B98 	dc.b	$09, pAKick, $03, pClosedHH, pClosedHH, pClosedHH, pAKick, pClosedHH
000260 989882098B069803 	dc.b	pClosedHH, pClosedHH, pESnare, $09, pAKick, $06, pClosedHH, $03
000268 8B06829803038B98 	dc.b	pAKick, $06, pESnare, pClosedHH, $03, $03, pAKick, pClosedHH
000270 9898820906098B03 	dc.b	pClosedHH, pClosedHH, pESnare, $09, $06, $09, pAKick, $03
000278 988282           	dc.b	pClosedHH, pESnare, pESnare
00027B                  	smpsLoop		$00, $03, VOR_PWM1, Target
00027B F7               	dc.b	$F7
00027C 0003             	dc.b	$00,$03
                        	if (VOR_PWM1<*)
00027E                  		rom_ptr_z80(VOR_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00027E 4082             	dc.w  (((((VOR_PWM1+Target))<<8)&$FF00)|((((VOR_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000280 8B98989882098B06 	dc.b	pAKick, pClosedHH, pClosedHH, pClosedHH, pESnare, $09, pAKick, $06
000288 98038B0682980303 	dc.b	pClosedHH, $03, pAKick, $06, pESnare, pClosedHH, $03, $03
000290 8B98989882090609 	dc.b	pAKick, pClosedHH, pClosedHH, pClosedHH, pESnare, $09, $06, $09
000298 8B039898988B9898 	dc.b	pAKick, $03, pClosedHH, pClosedHH, pClosedHH, pAKick, pClosedHH, pClosedHH
0002A0 9882098B0698038B 	dc.b	pClosedHH, pESnare, $09, pAKick, $06, pClosedHH, $03, pAKick
0002A8 06829803038B9898 	dc.b	$06, pESnare, pClosedHH, $03, $03, pAKick, pClosedHH, pClosedHH
0002B0 98820906098B0398 	dc.b	pClosedHH, pESnare, $09, $06, $09, pAKick, $03, pClosedHH
0002B8 82               	dc.b	pESnare
0002B9                  	smpsJump		VOR_PWM1, Target
0002B9 F6               	dc.b	$F6
                        	if (VOR_PWM1<*)
0002BA                  		rom_ptr_z80(VOR_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002BA 4082             	dc.w  (((((VOR_PWM1+Target))<<8)&$FF00)|((((VOR_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
0002BC                  VOR_PWM2:
0002BC 9806848B98038206 	dc.b	pClosedHH, $06, pRideBell, pAKick, pClosedHH, $03, pESnare, $06
0002C4 920398988B988406 	dc.b	pBongoHi, $03, pClosedHH, pClosedHH, pAKick, pClosedHH, pRideBell, $06
0002CC 98848B98038B0606 	dc.b	pClosedHH, pRideBell, pAKick, pClosedHH, $03, pAKick, $06, $06
0002D4 980382068498848B 	dc.b	pClosedHH, $03, pESnare, $06, pRideBell, pClosedHH, pRideBell, pAKick
0002DC 9803820692039898 	dc.b	pClosedHH, $03, pESnare, $06, pBongoHi, $03, pClosedHH, pClosedHH
0002E4 8B98840698848B98 	dc.b	pAKick, pClosedHH, pRideBell, $06, pClosedHH, pRideBell, pAKick, pClosedHH
0002EC 038B060698038206 	dc.b	$03, pAKick, $06, $06, pClosedHH, $03, pESnare, $06
0002F4 8B0303           	dc.b	pAKick, $03, $03
0002F7                  	smpsLoop		$00, $04, VOR_PWM2, Target
0002F7 F7               	dc.b	$F7
0002F8 0004             	dc.b	$00,$04
                        	if (VOR_PWM2<*)
0002FA                  		rom_ptr_z80(VOR_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002FA BC82             	dc.w  (((((VOR_PWM2+Target))<<8)&$FF00)|((((VOR_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002FC                  	smpsJump		VOR_PWM2, Target
0002FC F6               	dc.b	$F6
                        	if (VOR_PWM2<*)
0002FD                  		rom_ptr_z80(VOR_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002FD BC82             	dc.w  (((((VOR_PWM2+Target))<<8)&$FF00)|((((VOR_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
0002FF                  VOR_PWM3:
0002FF 800C             	dc.b	nRst, $0C

000301                  VOR_PWM3_Loop1:
000301 9909980306929918 	dc.b	pOpenHH, $09, pClosedHH, $03, $06, pBongoHi, pOpenHH, $18
000309 099803038C099918 	dc.b	$09, pClosedHH, $03, $03, pASnare, $09, pOpenHH, $18
000311 0998030692991809 	dc.b	$09, pClosedHH, $03, $06, pBongoHi, pOpenHH, $18, $09
000319 9803038C09990698 	dc.b	pClosedHH, $03, $03, pASnare, $09, pOpenHH, $06, pClosedHH
000321 038C0F           	dc.b	$03, pASnare, $0F
000324                  	smpsLoop		$00, $03, VOR_PWM3_Loop1, Target
000324 F7               	dc.b	$F7
000325 0003             	dc.b	$00,$03
                        	if (VOR_PWM3_Loop1<*)
000327                  		rom_ptr_z80(VOR_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000327 0183             	dc.w  (((((VOR_PWM3_Loop1+Target))<<8)&$FF00)|((((VOR_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000329 9909980306929918 	dc.b	pOpenHH, $09, pClosedHH, $03, $06, pBongoHi, pOpenHH, $18
000331 099803038C099918 	dc.b	$09, pClosedHH, $03, $03, pASnare, $09, pOpenHH, $18
000339 0998030692991809 	dc.b	$09, pClosedHH, $03, $06, pBongoHi, pOpenHH, $18, $09
000341 9803038C09990698 	dc.b	pClosedHH, $03, $03, pASnare, $09, pOpenHH, $06, pClosedHH
000349 038C             	dc.b	$03, pASnare
00034B                  	smpsJump		VOR_PWM3, Target
00034B F6               	dc.b	$F6
                        	if (VOR_PWM3<*)
00034C                  		rom_ptr_z80(VOR_PWM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00034C FF82             	dc.w  (((((VOR_PWM3+Target))<<8)&$FF00)|((((VOR_PWM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
00034E                  VOR_PWM4:
00034E 990C980303849292 	dc.b	pOpenHH, $0C, pClosedHH, $03, $03, pRideBell, pBongoHi, pBongoHi
000356 068498039309990C 	dc.b	$06, pRideBell, pClosedHH, $03, pBongoLo, $09, pOpenHH, $0C
00035E 9803038492929898 	dc.b	pClosedHH, $03, $03, pRideBell, pBongoHi, pBongoHi, pClosedHH, pClosedHH
000366 06039309990C9803 	dc.b	$06, $03, pBongoLo, $09, pOpenHH, $0C, pClosedHH, $03
00036E 0384929206849803 	dc.b	$03, pRideBell, pBongoHi, pBongoHi, $06, pRideBell, pClosedHH, $03
000376 9309990C98030384 	dc.b	pBongoLo, $09, pOpenHH, $0C, pClosedHH, $03, $03, pRideBell
00037E 9292989806039306 	dc.b	pBongoHi, pBongoHi, pClosedHH, pClosedHH, $06, $03, pBongoLo, $06
000386 9803             	dc.b	pClosedHH, $03
000388                  	smpsLoop		$00, $04, VOR_PWM4, Target
000388 F7               	dc.b	$F7
000389 0004             	dc.b	$00,$04
                        	if (VOR_PWM4<*)
00038B                  		rom_ptr_z80(VOR_PWM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00038B 4E83             	dc.w  (((((VOR_PWM4+Target))<<8)&$FF00)|((((VOR_PWM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00038D                  	smpsJump		VOR_PWM4, Target
00038D F6               	dc.b	$F6
                        	if (VOR_PWM4<*)
00038E                  		rom_ptr_z80(VOR_PWM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00038E 4E83             	dc.w  (((((VOR_PWM4+Target))<<8)&$FF00)|((((VOR_PWM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000390                  VOR_Patches:	
                        	;Electric Guitar (Jazz)
000390 10               	dc.b	$10
000391 35767030DFDF5F5F 	dc.b	$35, $76, $70, $30,	$DF, $DF, $5F, $5F
000399 0608090906030301 	dc.b	$06, $08, $09, $09,	$06, $03, $03, $01
                        ;!@ dc.b	$26, $16, $06, $26,	$21, $34, $19, $00
0003A1 2616062621341906 	dc.b	$26, $16, $06, $26,	$21, $34, $19, $06
                        	
                        	;Electric Piano
0003A9 04               	dc.b	$04
0003AA 7141313112121212 	dc.b	$71, $41, $31, $31,	$12, $12, $12, $12
0003B2 0000000000000000 	dc.b	$00, $00, $00, $00,	$00, $00, $00, $00
                        ;!@ dc.b	$0F, $0F, $0F, $0F,	$23, $00, $23, $00
0003BA 0F0F0F0F28002800 	dc.b	$0F, $0F, $0F, $0F,	$28, $00, $28, $00
                        	
                        	;Synth Bass 1
0003C2 2C               	dc.b	$2C
0003C3 704021609F1F1F5F 	dc.b	$70, $40, $21, $60,	$9F, $1F, $1F, $5F
0003CB 0C090C1504040606 	dc.b	$0C, $09, $0C, $15,	$04, $04, $06, $06
                        ;!@ dc.b	$56, $46, $46, $4F,	$0C, $00, $10, $00
0003D3 5646464F0C081008 	dc.b	$56, $46, $46, $4F,	$0C, $08, $10, $08
                        	
                        	;Contrabass
0003DB 38               	dc.b	$38
0003DC 0A0801021414100E 	dc.b	$0A, $08, $01, $02,	$14, $14, $10, $0E
0003E4 0508020800000000 	dc.b	$05, $08, $02, $08,	$00, $00, $00, $00
                        ;!@ dc.b	$99, $09, $09, $19,	$28, $23, $24, $06
0003EC 9909091928232412 	dc.b	$99, $09, $09, $19,	$28, $23, $24, $12

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PEHIHAT            00000088 E  PEKICK             00000081 E  PESNARE            00000082 E
PFINGSNAP          0000008E E  POPENHH            00000099 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSGV1              00000000 E  PSGV2              00000000 E
PSGVOL             00000003 E  PSILENCE           00000096 E  PSPLASHCYMB        00000083 E
PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E  PTOMHI             00000085 E
PTOMLOW            00000087 E  PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E
PTOMLOWEREST       0000009C E  PTOMMID            00000086 E  SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  TARGET             00040000 E
TEMPDIV            00000002 S  VOR_FM1            00000040    VOR_FM2            0000007F
VOR_FM3            000000BE    VOR_FM4            000000F5    VOR_FM5            00000192
VOR_LOOP1          00000044    VOR_LOOP10         0000015D    VOR_LOOP11         00000173
VOR_LOOP12         00000196    VOR_LOOP13         0000019F    VOR_LOOP14         000001AD
VOR_LOOP15         000001B6    VOR_LOOP16         000001C7    VOR_LOOP17         000001E1
VOR_LOOP18         00000204    VOR_LOOP19         0000021E    VOR_LOOP2          0000005E
VOR_LOOP3          00000083    VOR_LOOP4          0000009D    VOR_LOOP5          000000C2
VOR_LOOP6          000000D8    VOR_LOOP7          000000F9    VOR_LOOP8          00000110
VOR_LOOP9          00000126    VOR_NOP            0000023F    VOR_PATCHES        00000390
VOR_PSG1           000001C5    VOR_PSG2           00000202    VOR_PWM1           00000240
VOR_PWM2           000002BC    VOR_PWM3           000002FF    VOR_PWM3_LOOP1     00000301
VOR_PWM4           0000034E
