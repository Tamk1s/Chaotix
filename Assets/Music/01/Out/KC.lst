                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E
       = 00009F         pOrchHitHi		EQU	$9F
       = 0000A0         pOrchHitMed		EQU	$A0
       = 0000A1         pOrchHitLo		EQU	$A1
       = 0000A2         pOrchHitLower	EQU	$A2

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	if \0==4
                        		dc.b	volL
                        	else
                        		dc.b	(volL<<4)+volR
                        	endif	
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000000         FMPitch		EQU	$00
       = 000000         FMVoi0_SopSax	EQU	$00
       = 000001         FMVoi1_RevCymb	EQU	$01
       = 000002         FMVoi2_Lead2Saw	EQU	$02
       = 000003         FMVoi3_EGitCln	EQU	$03

       = 000005         PSGVol	EQU	$05
       = 000007         PSGVol2	EQU	$07				;!@
       = 000000         PSGMod	EQU	$00
       = 000008         PSGVoi1	EQU	$08	;!@ $2F
       = 000000         PSGVoi2	EQU	$00
       = 000000         PWMPitch	EQU	$00
       = 000055         PWMVol	EQU	$55

       = 010405         Mod1	EQU	$01010405
       = 020206         Mod2	EQU	$01020206

000000                  	smpsHeaderVoice	SOVA_SA_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SOVA_SA_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 0A8F             	dc.w  (((((SOVA_SA_Patches+Target))<<8)&$FF00)|((((SOVA_SA_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan	$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempo	$03, $11
000004 0311             	dc.b	$03,$11
000006                  	smpsHeaderFM	SOVA_SA_FM1, Target, FMPitch, $10
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SOVA_SA_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SOVA_SA_FM1+Target))<<8)&$FF00)|((((SOVA_SA_FM1+Target))>>8)&$7F)|$80)
000008 0010             	dc.b	FMPitch,$10
00000A                  	smpsHeaderFM	SOVA_SA_FM2, Target, FMPitch, $20
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SOVA_SA_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A D080             	dc.w  (((((SOVA_SA_FM2+Target))<<8)&$FF00)|((((SOVA_SA_FM2+Target))>>8)&$7F)|$80)
00000C 0020             	dc.b	FMPitch,$20
00000E                  	smpsHeaderFM	SOVA_SA_FM3, Target, FMPitch, $0F
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SOVA_SA_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 7781             	dc.w  (((((SOVA_SA_FM3+Target))<<8)&$FF00)|((((SOVA_SA_FM3+Target))>>8)&$7F)|$80)
000010 000F             	dc.b	FMPitch,$0F
000012                  	smpsHeaderFM	SOVA_SA_FM4, Target, FMPitch, $1D
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SOVA_SA_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 D881             	dc.w  (((((SOVA_SA_FM4+Target))<<8)&$FF00)|((((SOVA_SA_FM4+Target))>>8)&$7F)|$80)
000014 001D             	dc.b	FMPitch,$1D
000016                  	smpsHeaderFM	SOVA_SA_FM5, Target, FMPitch, $0E
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SOVA_SA_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 5782             	dc.w  (((((SOVA_SA_FM5+Target))<<8)&$FF00)|((((SOVA_SA_FM5+Target))>>8)&$7F)|$80)
000018 000E             	dc.b	FMPitch,$0E
00001A                  	smpsHeaderFM	SOVA_SA_FM6, Target, FMPitch, $1B
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SOVA_SA_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 9182             	dc.w  (((((SOVA_SA_FM6+Target))<<8)&$FF00)|((((SOVA_SA_FM6+Target))>>8)&$7F)|$80)
00001C 001B             	dc.b	FMPitch,$1B
00001E                  	smpsHeaderPSG	SOVA_SA_PSG1, Target, PSGDelta, PSGVol, PSGMod, PSGVoi1
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SOVA_SA_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E CB82             	dc.w  (((((SOVA_SA_PSG1+Target))<<8)&$FF00)|((((SOVA_SA_PSG1+Target))>>8)&$7F)|$80)
000020 0C05             	dc.b	PSGDelta,PSGVol
                        	;dc.w	voice
000022 0008             	dc.b	PSGMod,PSGVoi1
000024                  	smpsHeaderPSG	SOVA_SA_PSG2, Target, PSGDelta, PSGVol2, PSGMod, PSGVoi2
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SOVA_SA_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 1783             	dc.w  (((((SOVA_SA_PSG2+Target))<<8)&$FF00)|((((SOVA_SA_PSG2+Target))>>8)&$7F)|$80)
000026 0C07             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
000028 0000             	dc.b	PSGMod,PSGVoi2
00002A                  	smpsHeaderPSG	SOVA_SA_PSG3, Target, PSGDelta, PSGVol2, PSGMod, PSGVoi2
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SOVA_SA_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A A383             	dc.w  (((((SOVA_SA_PSG3+Target))<<8)&$FF00)|((((SOVA_SA_PSG3+Target))>>8)&$7F)|$80)
00002C 0C07             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
00002E 0000             	dc.b	PSGMod,PSGVoi2
000030                  	smpsHeaderPWM	SOVA_SA_PWM1, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SOVA_SA_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 1E84             	dc.w  (((((SOVA_SA_PWM1+Target))<<8)&$FF00)|((((SOVA_SA_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
                        	if 4==4
000033 55               		dc.b	PWMVol
                        	else
                        	endif	
000034                  	smpsHeaderPWM	SOVA_SA_PWM2, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SOVA_SA_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 BF88             	dc.w  (((((SOVA_SA_PWM2+Target))<<8)&$FF00)|((((SOVA_SA_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
                        	if 4==4
000037 55               		dc.b	PWMVol
                        	else
                        	endif	
000038                  	smpsHeaderPWM	SOVA_SA_PWM3, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SOVA_SA_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 608C             	dc.w  (((((SOVA_SA_PWM3+Target))<<8)&$FF00)|((((SOVA_SA_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
                        	if 4==4
00003B 55               		dc.b	PWMVol
                        	else
                        	endif	
00003C                  	smpsHeaderPWM	SOVA_SA_PWM4, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SOVA_SA_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C A78D             	dc.w  (((((SOVA_SA_PWM4+Target))<<8)&$FF00)|((((SOVA_SA_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
                        	if 4==4
00003F 55               		dc.b	PWMVol
                        	else
                        	endif	

000040                  SOVA_SA_FM1:
000040                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E080             		dc.b $E0,panLeft
                        	endif
000042                  	smpsFMvoice	FMVoi0_SopSax
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,FMVoi0_SopSax
                        	endif
000044 8010             	dc.b	nRst, $10

000046                  SOVA_SA_Loop1:
000046 B502             	dc.b	nE4, $02

000048                  SOVA_SA_Loop2:
000048 80BA80B880BCBA80 	dc.b	nRst, nA4, nRst, nG4, nRst, nB4, nA4, nRst
000050 30               	dc.b	$30
000051                  	smpsLoop		$00, $04, SOVA_SA_Loop1, Target
000051 F7               	dc.b	$F7
000052 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop1<*)
000054                  		rom_ptr_z80(SOVA_SA_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000054 4680             	dc.w  (((((SOVA_SA_Loop1+Target))<<8)&$FF00)|((((SOVA_SA_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000056                  SOVA_SA_Jump1:
000056 B502             	dc.b	nE4, $02
000058                  	smpsLoop		$01, $03, SOVA_SA_Loop2, Target
000058 F7               	dc.b	$F7
000059 0103             	dc.b	$01,$03
                        	if (SOVA_SA_Loop2<*)
00005B                  		rom_ptr_z80(SOVA_SA_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00005B 4880             	dc.w  (((((SOVA_SA_Loop2+Target))<<8)&$FF00)|((((SOVA_SA_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00005D                  SOVA_SA_Loop3:
00005D 80BA80B880BCBA80 	dc.b	nRst, nA4, nRst, nG4, nRst, nB4, nA4, nRst
000065 BA80B5B880BA80B5 	dc.b	nA4, nRst, nE4, nG4, nRst, nA4, nRst, nE4
00006D                  	smpsLoop		$00, $02, SOVA_SA_Loop3, Target
00006D F7               	dc.b	$F7
00006E 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop3<*)
000070                  		rom_ptr_z80(SOVA_SA_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000070 5D80             	dc.w  (((((SOVA_SA_Loop3+Target))<<8)&$FF00)|((((SOVA_SA_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000072 80BA80B880BCBA80 	dc.b	nRst, nA4, nRst, nG4, nRst, nB4, nA4, nRst
00007A B880B5BF80BC80BA 	dc.b	nG4, nRst, nE4, nD5, nRst, nB4, nRst, nA4
000082 80B8BA80B880B7B8 	dc.b	nRst, nG4, nA4, nRst, nG4, nRst, nFs4, nG4
00008A B7B5B7B580B380B5 	dc.b	nFs4, nE4, nFs4, nE4, nRst, nD4, nRst, nE4
000092                  	smpsLoop		$01, $03, SOVA_SA_Loop3, Target
000092 F7               	dc.b	$F7
000093 0103             	dc.b	$01,$03
                        	if (SOVA_SA_Loop3<*)
000095                  		rom_ptr_z80(SOVA_SA_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000095 5D80             	dc.w  (((((SOVA_SA_Loop3+Target))<<8)&$FF00)|((((SOVA_SA_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000097                  SOVA_SA_Loop4:
000097 80BA80B880BCBA80 	dc.b	nRst, nA4, nRst, nG4, nRst, nB4, nA4, nRst
00009F BA80B5B880BA80B5 	dc.b	nA4, nRst, nE4, nG4, nRst, nA4, nRst, nE4
0000A7                  	smpsLoop		$00, $02, SOVA_SA_Loop4, Target
0000A7 F7               	dc.b	$F7
0000A8 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop4<*)
0000AA                  		rom_ptr_z80(SOVA_SA_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000AA 9780             	dc.w  (((((SOVA_SA_Loop4+Target))<<8)&$FF00)|((((SOVA_SA_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000AC 80BA80B880BCBA80 	dc.b	nRst, nA4, nRst, nG4, nRst, nB4, nA4, nRst
0000B4 B880B5BF80BC80BA 	dc.b	nG4, nRst, nE4, nD5, nRst, nB4, nRst, nA4
0000BC 80B8BA80B880B7B8 	dc.b	nRst, nG4, nA4, nRst, nG4, nRst, nFs4, nG4
0000C4 B7B5B7B580B3     	dc.b	nFs4, nE4, nFs4, nE4, nRst, nD4
0000CA                  	smpsAlterNote	$00
0000CA E100             	dc.b	$E1,$00
0000CC 80               	dc.b	nRst
0000CD                  	smpsJump		SOVA_SA_Jump1, Target
0000CD F6               	dc.b	$F6
                        	if (SOVA_SA_Jump1<*)
0000CE                  		rom_ptr_z80(SOVA_SA_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000CE 5680             	dc.w  (((((SOVA_SA_Jump1+Target))<<8)&$FF00)|((((SOVA_SA_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000D0                  SOVA_SA_FM2:
0000D0                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000D0 E040             		dc.b $E0,panRight
                        	endif
0000D2                  	smpsFMvoice		FMVoi0_SopSax
                        	;if song<>""
                        	if 1==2
                        	else
0000D2 EF00             		dc.b $EF,FMVoi0_SopSax
                        	endif
0000D4 8013             	dc.b	nRst, $13

0000D6                  SOVA_SA_Loop5:
0000D6 B50280BA80B880BC 	dc.b	nE4, $02, nRst, nA4, nRst, nG4, nRst, nB4
0000DE BA8030           	dc.b	nA4, nRst, $30
0000E1                  	smpsLoop		$00, $03, SOVA_SA_Loop5, Target
0000E1 F7               	dc.b	$F7
0000E2 0003             	dc.b	$00,$03
                        	if (SOVA_SA_Loop5<*)
0000E4                  		rom_ptr_z80(SOVA_SA_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000E4 D680             	dc.w  (((((SOVA_SA_Loop5+Target))<<8)&$FF00)|((((SOVA_SA_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000E6 B50280BA80B880BC 	dc.b	nE4, $02, nRst, nA4, nRst, nG4, nRst, nB4
0000EE BA802D           	dc.b	nA4, nRst, $2D

0000F1                  SOVA_SA_Jump2:
0000F1 8003             	dc.b	nRst, $03

0000F3                  SOVA_SA_Loop6:
0000F3 B50280BA80B880BC 	dc.b	nE4, $02, nRst, nA4, nRst, nG4, nRst, nB4
0000FB BA8030           	dc.b	nA4, nRst, $30
0000FE                  	smpsLoop		$00, $08, SOVA_SA_Loop6, Target
0000FE F7               	dc.b	$F7
0000FF 0008             	dc.b	$00,$08
                        	if (SOVA_SA_Loop6<*)
000101                  		rom_ptr_z80(SOVA_SA_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000101 F380             	dc.w  (((((SOVA_SA_Loop6+Target))<<8)&$FF00)|((((SOVA_SA_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000103                  SOVA_SA_Loop7:
000103 B50280BA80B880BC 	dc.b	nE4, $02, nRst, nA4, nRst, nG4, nRst, nB4
00010B BA80BA80B5B880BA 	dc.b	nA4, nRst, nA4, nRst, nE4, nG4, nRst, nA4
000113 80               	dc.b	nRst
000114                  	smpsLoop		$00, $02, SOVA_SA_Loop7, Target
000114 F7               	dc.b	$F7
000115 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop7<*)
000117                  		rom_ptr_z80(SOVA_SA_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000117 0381             	dc.w  (((((SOVA_SA_Loop7+Target))<<8)&$FF00)|((((SOVA_SA_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000119 B580BA80B880BCBA 	dc.b	nE4, nRst, nA4, nRst, nG4, nRst, nB4, nA4
000121 80B880B5BF80BC80 	dc.b	nRst, nG4, nRst, nE4, nD5, nRst, nB4, nRst
000129 BA80B8BA80B880B7 	dc.b	nA4, nRst, nG4, nA4, nRst, nG4, nRst, nFs4
000131 B8B7B5B7B580B380 	dc.b	nG4, nFs4, nE4, nFs4, nE4, nRst, nD4, nRst
000139                  	smpsLoop		$01, $03, SOVA_SA_Loop7, Target
000139 F7               	dc.b	$F7
00013A 0103             	dc.b	$01,$03
                        	if (SOVA_SA_Loop7<*)
00013C                  		rom_ptr_z80(SOVA_SA_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
00013C 0381             	dc.w  (((((SOVA_SA_Loop7+Target))<<8)&$FF00)|((((SOVA_SA_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00013E                  SOVA_SA_Loop8:
00013E B580BA80B880BCBA 	dc.b	nE4, nRst, nA4, nRst, nG4, nRst, nB4, nA4
000146 80BA80B5B880BA80 	dc.b	nRst, nA4, nRst, nE4, nG4, nRst, nA4, nRst
00014E                  	smpsLoop		$00, $02, SOVA_SA_Loop8, Target
00014E F7               	dc.b	$F7
00014F 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop8<*)
000151                  		rom_ptr_z80(SOVA_SA_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000151 3E81             	dc.w  (((((SOVA_SA_Loop8+Target))<<8)&$FF00)|((((SOVA_SA_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000153 B580BA80B880BCBA 	dc.b	nE4, nRst, nA4, nRst, nG4, nRst, nB4, nA4
00015B 80B880B5BF80BC80 	dc.b	nRst, nG4, nRst, nE4, nD5, nRst, nB4, nRst
000163 BA80B8BA80B880B7 	dc.b	nA4, nRst, nG4, nA4, nRst, nG4, nRst, nFs4
00016B B8B7B5B7B580     	dc.b	nG4, nFs4, nE4, nFs4, nE4, nRst
000171                  	smpsAlterNote	$00
000171 E100             	dc.b	$E1,$00
000173 01               	dc.b	$01
000174                  	smpsJump		SOVA_SA_Jump2, Target
000174 F6               	dc.b	$F6
                        	if (SOVA_SA_Jump2<*)
000175                  		rom_ptr_z80(SOVA_SA_Jump2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000175 F180             	dc.w  (((((SOVA_SA_Jump2+Target))<<8)&$FF00)|((((SOVA_SA_Jump2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000177                  SOVA_SA_FM3:
                        	;!@ smpsPan		panLeft
000177                  	smpsPan			panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000177 E0C0             		dc.b $E0,panCenter
                        	endif
000179                  	smpsFMvoice		FMVoi1_RevCymb
                        	;if song<>""
                        	if 1==2
                        	else
000179 EF01             		dc.b $EF,FMVoi1_RevCymb
                        	endif
00017B                  	smpsModSet2		Mod1
00017B                  	smpsModSet	((Mod1&$FF000000)>>24),((Mod1&$00FF0000)>>16),((Mod1&$0000FF00)>>8),(Mod1&$000000FF)
00017B F001010405       	dc.b	$F0,((Mod1&$FF000000)>>24),((Mod1&$00FF0000)>>16),((Mod1&$0000FF00)>>8),(Mod1&$000000FF)
                        	;sModOn
                        	;sModOn
000180 BD10805580558026 	dc.b	nC5, $10, nRst, $55, nRst, $55, nRst, $26

000188                  SOVA_SA_Loop9:
                        	;!@
000188                  	smpsPan			panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000188 E0C0             		dc.b $E0,panCenter
                        	endif
00018A BD1080BD         	dc.b	nC5, $10, nRst, nC5

00018E                  SOVA_SA_Jump3:
                        	;!@
00018E                  	smpsPan			panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00018E E080             		dc.b $E0,panLeft
                        	endif
000190                  	smpsFMvoice		FMVoi2_Lead2Saw
                        	;if song<>""
                        	if 1==2
                        	else
000190 EF02             		dc.b $EF,FMVoi2_Lead2Saw
                        	endif
000192 C134BA08B804BC20 	dc.b	nE5, $34, nA4, $08, nG4, $04, nB4, $20
00019A B514B804BABCC134 	dc.b	nE4, $14, nG4, $04, nA4, nB4, nE5, $34
0001A2 C608C104C820C114 	dc.b	nA5, $08, nE5, $04, nB5, $20, nE5, $14
0001AA B804BABCC134BA08 	dc.b	nG4, $04, nA4, nB4, nE5, $34, nA4, $08
0001B2 B804BC20B514B804 	dc.b	nG4, $04, nB4, $20, nE4, $14, nG4, $04
0001BA BABCC134C608C104 	dc.b	nA4, nB4, nE5, $34, nA5, $08, nE5, $04
0001C2 C80C8004         	dc.b	nB5, $0C, nRst, $04
                        	
0001C6                  	smpsFMvoice		FMVoi1_RevCymb
                        	;if song<>""
                        	if 1==2
                        	else
0001C6 EF01             		dc.b $EF,FMVoi1_RevCymb
                        	endif
0001C8                  	smpsLoop		$00, $02, SOVA_SA_Loop9, Target
0001C8 F7               	dc.b	$F7
0001C9 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop9<*)
0001CB                  		rom_ptr_z80(SOVA_SA_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001CB 8881             	dc.w  (((((SOVA_SA_Loop9+Target))<<8)&$FF00)|((((SOVA_SA_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
                        	;!@
0001CD                  	smpsPan			panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001CD E0C0             		dc.b $E0,panCenter
                        	endif
0001CF BD10             	dc.b	nC5, $10
0001D1                  	smpsAlterNote	$00
0001D1 E100             	dc.b	$E1,$00
0001D3 80BD             	dc.b	nRst, nC5
0001D5                  	smpsJump		SOVA_SA_Jump3, Target
0001D5 F6               	dc.b	$F6
                        	if (SOVA_SA_Jump3<*)
0001D6                  		rom_ptr_z80(SOVA_SA_Jump3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001D6 8E81             	dc.w  (((((SOVA_SA_Jump3+Target))<<8)&$FF00)|((((SOVA_SA_Jump3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001D8                  SOVA_SA_FM4:
0001D8                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001D8 E040             		dc.b $E0,panRight
                        	endif
0001DA                  	smpsFMvoice		FMVoi2_Lead2Saw
                        	;if song<>""
                        	if 1==2
                        	else
0001DA EF02             		dc.b $EF,FMVoi2_Lead2Saw
                        	endif
0001DC                  	smpsModSet2	Mod1
0001DC                  	smpsModSet	((Mod1&$FF000000)>>24),((Mod1&$00FF0000)>>16),((Mod1&$0000FF00)>>8),(Mod1&$000000FF)
0001DC F001010405       	dc.b	$F0,((Mod1&$FF000000)>>24),((Mod1&$00FF0000)>>16),((Mod1&$0000FF00)>>8),(Mod1&$000000FF)
                        	;sModOn
                        	;sModOn
0001E1 8055805580558011 	dc.b	nRst, $55, nRst, $55, nRst, $55, nRst, $11

0001E9                  SOVA_SA_Jump4:
0001E9 8003C134BA08B804 	dc.b	nRst, $03, nE5, $34, nA4, $08, nG4, $04
0001F1 BC20B514B804BABC 	dc.b	nB4, $20, nE4, $14, nG4, $04, nA4, nB4
0001F9 C134C608C104C820 	dc.b	nE5, $34, nA5, $08, nE5, $04, nB5, $20
000201 C114B804BABCC134 	dc.b	nE5, $14, nG4, $04, nA4, nB4, nE5, $34
000209 BA08B804BC20B514 	dc.b	nA4, $08, nG4, $04, nB4, $20, nE4, $14
000211 B804BABCC134C608 	dc.b	nG4, $04, nA4, nB4, nE5, $34, nA5, $08
000219 C104C82080C134BA 	dc.b	nE5, $04, nB5, $20, nRst, nE5, $34, nA4
000221 08B804BC20B514B8 	dc.b	$08, nG4, $04, nB4, $20, nE4, $14, nG4
000229 04BABCC134C608C1 	dc.b	$04, nA4, nB4, nE5, $34, nA5, $08, nE5
000231 04C820C114B804BA 	dc.b	$04, nB5, $20, nE5, $14, nG4, $04, nA4
000239 BCC134BA08B804BC 	dc.b	nB4, nE5, $34, nA4, $08, nG4, $04, nB4
000241 20B514B804BABCC1 	dc.b	$20, nE4, $14, nG4, $04, nA4, nB4, nE5
000249 34C608C104C820   	dc.b	$34, nA5, $08, nE5, $04, nB5, $20
000250                  	smpsAlterNote	$00
000250 E100             	dc.b	$E1,$00
000252 801D             	dc.b	nRst, $1D
000254                  	smpsJump		SOVA_SA_Jump4, Target
000254 F6               	dc.b	$F6
                        	if (SOVA_SA_Jump4<*)
000255                  		rom_ptr_z80(SOVA_SA_Jump4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000255 E981             	dc.w  (((((SOVA_SA_Jump4+Target))<<8)&$FF00)|((((SOVA_SA_Jump4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000257                  SOVA_SA_FM5:
000257                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000257 E080             		dc.b $E0,panLeft
                        	endif
000259                  	smpsFMvoice		FMVoi3_EGitCln
                        	;if song<>""
                        	if 1==2
                        	else
000259 EF03             		dc.b $EF,FMVoi3_EGitCln
                        	endif
00025B 8010A920         	dc.b	nRst, $10, nE3, $20

00025F                  SOVA_SA_Loop10:
00025F 06B3AE14B020A9A9 	dc.b	$06, nD4, nA3, $14, nB3, $20, nE3, nE3
000267 A906B3AE14B020A9 	dc.b	nE3, $06, nD4, nA3, $14, nB3, $20, nE3
00026F 1404ACAE         	dc.b	$14, $04, nG3, nA3

000273                  SOVA_SA_Jump5:
000273 A920             	dc.b	nE3, $20
000275                  	smpsLoop		$00, $04, SOVA_SA_Loop10, Target
000275 F7               	dc.b	$F7
000276 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop10<*)
000278                  		rom_ptr_z80(SOVA_SA_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
000278 5F82             	dc.w  (((((SOVA_SA_Loop10+Target))<<8)&$FF00)|((((SOVA_SA_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00027A 06B3AE14B020A9A9 	dc.b	$06, nD4, nA3, $14, nB3, $20, nE3, nE3
000282 A906B3AE14B020A9 	dc.b	nE3, $06, nD4, nA3, $14, nB3, $20, nE3
00028A 1404ACAE         	dc.b	$14, $04, nG3, nA3
00028E                  	smpsJump		SOVA_SA_Jump5, Target
00028E F6               	dc.b	$F6
                        	if (SOVA_SA_Jump5<*)
00028F                  		rom_ptr_z80(SOVA_SA_Jump5+Target)
                        	;dc.w z80_ptr(ptr,addr)
00028F 7382             	dc.w  (((((SOVA_SA_Jump5+Target))<<8)&$FF00)|((((SOVA_SA_Jump5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000291                  SOVA_SA_FM6:
000291                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000291 E040             		dc.b $E0,panRight
                        	endif
000293                  	smpsFMvoice		FMVoi3_EGitCln
                        	;if song<>""
                        	if 1==2
                        	else
000293 EF03             		dc.b $EF,FMVoi3_EGitCln
                        	endif
000295 8014             	dc.b	nRst, $14

000297                  SOVA_SA_Loop11:
000297 A92006B3AE14B020 	dc.b	nE3, $20, $06, nD4, nA3, $14, nB3, $20
00029F A9A9A906B3AE14B0 	dc.b	nE3, nE3, nE3, $06, nD4, nA3, $14, nB3
0002A7 20A91404AC       	dc.b	$20, nE3, $14, $04, nG3

0002AC                  SOVA_SA_Jump6:
0002AC AE04             	dc.b	nA3, $04
0002AE                  	smpsLoop		$00, $04, SOVA_SA_Loop11, Target
0002AE F7               	dc.b	$F7
0002AF 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop11<*)
0002B1                  		rom_ptr_z80(SOVA_SA_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002B1 9782             	dc.w  (((((SOVA_SA_Loop11+Target))<<8)&$FF00)|((((SOVA_SA_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002B3 A92006B3AE14B020 	dc.b	nE3, $20, $06, nD4, nA3, $14, nB3, $20
0002BB A9A9A906B3AE14B0 	dc.b	nE3, nE3, nE3, $06, nD4, nA3, $14, nB3
0002C3 20A91404AC       	dc.b	$20, nE3, $14, $04, nG3
0002C8                  	smpsJump		SOVA_SA_Jump6, Target
0002C8 F6               	dc.b	$F6
                        	if (SOVA_SA_Jump6<*)
0002C9                  		rom_ptr_z80(SOVA_SA_Jump6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002C9 AC82             	dc.w  (((((SOVA_SA_Jump6+Target))<<8)&$FF00)|((((SOVA_SA_Jump6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002CB                  SOVA_SA_PSG1:
0002CB 80108D208F88858D 	dc.b	nRst, $10, nC1, $20, nD1, nG0, nE0, nC1
0002D3 8F8885           	dc.b	nD1, nG0, nE0

0002D6                  SOVA_SA_Loop12:
0002D6 8D0499           	dc.b	nC1, $04, nC2
0002D9                  	smpsLoop		$00, $04, SOVA_SA_Loop12, Target
0002D9 F7               	dc.b	$F7
0002DA 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop12<*)
0002DC                  		rom_ptr_z80(SOVA_SA_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002DC D682             	dc.w  (((((SOVA_SA_Loop12+Target))<<8)&$FF00)|((((SOVA_SA_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002DE                  SOVA_SA_Loop13:
0002DE 8F9B             	dc.b	nD1, nD2
0002E0                  	smpsLoop		$00, $04, SOVA_SA_Loop13, Target
0002E0 F7               	dc.b	$F7
0002E1 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop13<*)
0002E3                  		rom_ptr_z80(SOVA_SA_Loop13+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002E3 DE82             	dc.w  (((((SOVA_SA_Loop13+Target))<<8)&$FF00)|((((SOVA_SA_Loop13+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002E5                  SOVA_SA_Loop14:
0002E5 8894             	dc.b	nG0, nG1
0002E7                  	smpsLoop		$00, $04, SOVA_SA_Loop14, Target
0002E7 F7               	dc.b	$F7
0002E8 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop14<*)
0002EA                  		rom_ptr_z80(SOVA_SA_Loop14+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002EA E582             	dc.w  (((((SOVA_SA_Loop14+Target))<<8)&$FF00)|((((SOVA_SA_Loop14+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002EC                  SOVA_SA_Loop15:
0002EC 8591             	dc.b	nE0, nE1
0002EE                  	smpsLoop		$00, $04, SOVA_SA_Loop15, Target
0002EE F7               	dc.b	$F7
0002EF 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop15<*)
0002F1                  		rom_ptr_z80(SOVA_SA_Loop15+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002F1 EC82             	dc.w  (((((SOVA_SA_Loop15+Target))<<8)&$FF00)|((((SOVA_SA_Loop15+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002F3                  	smpsLoop		$01, $03, SOVA_SA_Loop12, Target
0002F3 F7               	dc.b	$F7
0002F4 0103             	dc.b	$01,$03
                        	if (SOVA_SA_Loop12<*)
0002F6                  		rom_ptr_z80(SOVA_SA_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002F6 D682             	dc.w  (((((SOVA_SA_Loop12+Target))<<8)&$FF00)|((((SOVA_SA_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002F8                  SOVA_SA_Loop16:
0002F8 8D99             	dc.b	nC1, nC2
0002FA                  	smpsLoop		$00, $04, SOVA_SA_Loop16, Target
0002FA F7               	dc.b	$F7
0002FB 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop16<*)
0002FD                  		rom_ptr_z80(SOVA_SA_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002FD F882             	dc.w  (((((SOVA_SA_Loop16+Target))<<8)&$FF00)|((((SOVA_SA_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002FF                  SOVA_SA_Loop17:
0002FF 8F9B             	dc.b	nD1, nD2
000301                  	smpsLoop		$00, $04, SOVA_SA_Loop17, Target
000301 F7               	dc.b	$F7
000302 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop17<*)
000304                  		rom_ptr_z80(SOVA_SA_Loop17+Target)
                        	;dc.w z80_ptr(ptr,addr)
000304 FF82             	dc.w  (((((SOVA_SA_Loop17+Target))<<8)&$FF00)|((((SOVA_SA_Loop17+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000306                  SOVA_SA_Loop18:
000306 8894             	dc.b	nG0, nG1
000308                  	smpsLoop		$00, $04, SOVA_SA_Loop18, Target
000308 F7               	dc.b	$F7
000309 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop18<*)
00030B                  		rom_ptr_z80(SOVA_SA_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
00030B 0683             	dc.w  (((((SOVA_SA_Loop18+Target))<<8)&$FF00)|((((SOVA_SA_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00030D 8520             	dc.b	nE0, $20
00030F                  	smpsLoop		$02, $02, SOVA_SA_Loop12, Target
00030F F7               	dc.b	$F7
000310 0202             	dc.b	$02,$02
                        	if (SOVA_SA_Loop12<*)
000312                  		rom_ptr_z80(SOVA_SA_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
000312 D682             	dc.w  (((((SOVA_SA_Loop12+Target))<<8)&$FF00)|((((SOVA_SA_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000314                  	smpsJump		SOVA_SA_Loop12, Target
000314 F6               	dc.b	$F6
                        	if (SOVA_SA_Loop12<*)
000315                  		rom_ptr_z80(SOVA_SA_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
000315 D682             	dc.w  (((((SOVA_SA_Loop12+Target))<<8)&$FF00)|((((SOVA_SA_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000317                  SOVA_SA_PSG2:
000317 8010             	dc.b	nRst, $10

000319                  SOVA_SA_Loop19:
000319 9102             	dc.b	nE1, $02

00031B                  SOVA_SA_Loop20:
00031B 8096809480989680 	dc.b	nRst, nA1, nRst, nG1, nRst, nB1, nA1, nRst
000323 30               	dc.b	$30
000324                  	smpsLoop		$00, $04, SOVA_SA_Loop19, Target
000324 F7               	dc.b	$F7
000325 0004             	dc.b	$00,$04
                        	if (SOVA_SA_Loop19<*)
000327                  		rom_ptr_z80(SOVA_SA_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
000327 1983             	dc.w  (((((SOVA_SA_Loop19+Target))<<8)&$FF00)|((((SOVA_SA_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000329                  SOVA_SA_Jump7:
000329 9102             	dc.b	nE1, $02
00032B                  	smpsLoop		$01, $03, SOVA_SA_Loop20, Target
00032B F7               	dc.b	$F7
00032C 0103             	dc.b	$01,$03
                        	if (SOVA_SA_Loop20<*)
00032E                  		rom_ptr_z80(SOVA_SA_Loop20+Target)
                        	;dc.w z80_ptr(ptr,addr)
00032E 1B83             	dc.w  (((((SOVA_SA_Loop20+Target))<<8)&$FF00)|((((SOVA_SA_Loop20+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000330                  SOVA_SA_Loop21:
000330 8096809480989680 	dc.b	nRst, nA1, nRst, nG1, nRst, nB1, nA1, nRst
000338 9680919480968091 	dc.b	nA1, nRst, nE1, nG1, nRst, nA1, nRst, nE1
000340                  	smpsLoop		$00, $02, SOVA_SA_Loop21, Target
000340 F7               	dc.b	$F7
000341 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop21<*)
000343                  		rom_ptr_z80(SOVA_SA_Loop21+Target)
                        	;dc.w z80_ptr(ptr,addr)
000343 3083             	dc.w  (((((SOVA_SA_Loop21+Target))<<8)&$FF00)|((((SOVA_SA_Loop21+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000345 8096809480989680 	dc.b	nRst, nA1, nRst, nG1, nRst, nB1, nA1, nRst
00034D 9480919B80988096 	dc.b	nG1, nRst, nE1, nD2, nRst, nB1, nRst, nA1
000355 8094968094809394 	dc.b	nRst, nG1, nA1, nRst, nG1, nRst, nFs1, nG1
00035D 93919391808F8091 	dc.b	nFs1, nE1, nFs1, nE1, nRst, nD1, nRst, nE1
000365                  	smpsLoop		$01, $03, SOVA_SA_Loop21, Target
000365 F7               	dc.b	$F7
000366 0103             	dc.b	$01,$03
                        	if (SOVA_SA_Loop21<*)
000368                  		rom_ptr_z80(SOVA_SA_Loop21+Target)
                        	;dc.w z80_ptr(ptr,addr)
000368 3083             	dc.w  (((((SOVA_SA_Loop21+Target))<<8)&$FF00)|((((SOVA_SA_Loop21+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00036A                  SOVA_SA_Loop22:
00036A 8096809480989680 	dc.b	nRst, nA1, nRst, nG1, nRst, nB1, nA1, nRst
000372 9680919480968091 	dc.b	nA1, nRst, nE1, nG1, nRst, nA1, nRst, nE1
00037A                  	smpsLoop		$00, $02, SOVA_SA_Loop22, Target
00037A F7               	dc.b	$F7
00037B 0002             	dc.b	$00,$02
                        	if (SOVA_SA_Loop22<*)
00037D                  		rom_ptr_z80(SOVA_SA_Loop22+Target)
                        	;dc.w z80_ptr(ptr,addr)
00037D 6A83             	dc.w  (((((SOVA_SA_Loop22+Target))<<8)&$FF00)|((((SOVA_SA_Loop22+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00037F 8096809480989680 	dc.b	nRst, nA1, nRst, nG1, nRst, nB1, nA1, nRst
000387 9480919B80988096 	dc.b	nG1, nRst, nE1, nD2, nRst, nB1, nRst, nA1
00038F 8094968094809394 	dc.b	nRst, nG1, nA1, nRst, nG1, nRst, nFs1, nG1
000397 93919391808F     	dc.b	nFs1, nE1, nFs1, nE1, nRst, nD1
00039D                  	smpsAlterNote	$00
00039D E100             	dc.b	$E1,$00
00039F 80               	dc.b	nRst
0003A0                  	smpsJump		SOVA_SA_Jump7, Target
0003A0 F6               	dc.b	$F6
                        	if (SOVA_SA_Jump7<*)
0003A1                  		rom_ptr_z80(SOVA_SA_Jump7+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003A1 2983             	dc.w  (((((SOVA_SA_Jump7+Target))<<8)&$FF00)|((((SOVA_SA_Jump7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0003A3                  SOVA_SA_PSG3:
0003A3                  	smpsModSet2	Mod2
0003A3                  	smpsModSet	((Mod2&$FF000000)>>24),((Mod2&$00FF0000)>>16),((Mod2&$0000FF00)>>8),(Mod2&$000000FF)
0003A3 F001020206       	dc.b	$F0,((Mod2&$FF000000)>>24),((Mod2&$00FF0000)>>16),((Mod2&$0000FF00)>>8),(Mod2&$000000FF)
                        	;sModOn
                        	;sModOn
0003A8 8055805580558011 	dc.b	nRst, $55, nRst, $55, nRst, $55, nRst, $11

0003B0                  SOVA_SA_Jump8:
0003B0 9D34960894049820 	dc.b	nE2, $34, nA1, $08, nG1, $04, nB1, $20
0003B8 9114940496989D34 	dc.b	nE1, $14, nG1, $04, nA1, nB1, nE2, $34
0003C0 A2089D04A4209D14 	dc.b	nA2, $08, nE2, $04, nB2, $20, nE2, $14
0003C8 940496989D349608 	dc.b	nG1, $04, nA1, nB1, nE2, $34, nA1, $08
0003D0 9404982091149404 	dc.b	nG1, $04, nB1, $20, nE1, $14, nG1, $04
0003D8 96989D34A2089D04 	dc.b	nA1, nB1, nE2, $34, nA2, $08, nE2, $04
0003E0 A40C80349D960894 	dc.b	nB2, $0C, nRst, $34, nE2, nA1, $08, nG1
0003E8 0498209114940496 	dc.b	$04, nB1, $20, nE1, $14, nG1, $04, nA1
0003F0 989D34A2089D04A4 	dc.b	nB1, nE2, $34, nA2, $08, nE2, $04, nB2
0003F8 209D14940496989D 	dc.b	$20, nE2, $14, nG1, $04, nA1, nB1, nE2
000400 3496089404982091 	dc.b	$34, nA1, $08, nG1, $04, nB1, $20, nE1
000408 14940496989D34A2 	dc.b	$14, nG1, $04, nA1, nB1, nE2, $34, nA2
000410 089D04A40C8014   	dc.b	$08, nE2, $04, nB2, $0C, nRst, $14
000417                  	smpsAlterNote	$00
000417 E100             	dc.b	$E1,$00
000419 8020             	dc.b	nRst, $20
00041B                  	smpsJump		SOVA_SA_Jump8, Target
00041B F6               	dc.b	$F6
                        	if (SOVA_SA_Jump8<*)
00041C                  		rom_ptr_z80(SOVA_SA_Jump8+Target)
                        	;dc.w z80_ptr(ptr,addr)
00041C B083             	dc.w  (((((SOVA_SA_Jump8+Target))<<8)&$FF00)|((((SOVA_SA_Jump8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
00041E                  SOVA_SA_PWM1:
00041E                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00041E E0C0             		dc.b $E0,panCenter
                        	endif
000420 80109802029993   	dc.b	nRst, $10, pClosedHH, $02, $02, pOpenHH, pBongoLo
000427                  	smpsAlterVol		$F7
000427 E6F7             	dc.b	$E6,$F7
000429 8A               	dc.b	pClap
00042A                  	smpsAlterVol		$09
00042A E609             	dc.b	$E6,$09
00042C 9893             	dc.b	pClosedHH, pBongoLo

00042E                  SOVA_SA_PWM1_Loop1:
00042E 8098989980       	dc.b	nRst, pClosedHH, pClosedHH, pOpenHH, nRst
000433                  	smpsAlterVol		$F7
000433 E6F7             	dc.b	$E6,$F7
000435 8A               	dc.b	pClap
000436                  	smpsAlterVol		$09
000436 E609             	dc.b	$E6,$09
000438 98998098989993   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, pBongoLo
00043F                  	smpsAlterVol		$F7
00043F E6F7             	dc.b	$E6,$F7
000441 8A               	dc.b	pClap
000442                  	smpsAlterVol		$09
000442 E609             	dc.b	$E6,$09
000444 9899             	dc.b	pClosedHH, pOpenHH
000446                  	smpsLoop		$00, $02, SOVA_SA_PWM1_Loop1, Target
000446 F7               	dc.b	$F7
000447 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM1_Loop1<*)
000449                  		rom_ptr_z80(SOVA_SA_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000449 2E84             	dc.w  (((((SOVA_SA_PWM1_Loop1+Target))<<8)&$FF00)|((((SOVA_SA_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00044B 8098989980       	dc.b	nRst, pClosedHH, pClosedHH, pOpenHH, nRst
000450                  	smpsAlterVol		$F7
000450 E6F7             	dc.b	$E6,$F7
000452 8A               	dc.b	pClap
000453                  	smpsAlterVol		$09
000453 E609             	dc.b	$E6,$09
000455 989980           	dc.b	pClosedHH, pOpenHH, nRst
000458                  	smpsAlterVol		$F2
000458 E6F2             	dc.b	$E6,$F2
00045A 8B               	dc.b	pAKick
00045B                  	smpsAlterVol		$0E
00045B E60E             	dc.b	$E6,$0E
00045D 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
000460                  	smpsAlterVol		$F7
000460 E6F7             	dc.b	$E6,$F7
000462 8A               	dc.b	pClap
000463                  	smpsAlterVol		$09
000463 E609             	dc.b	$E6,$09
000465 98938098989980   	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH, nRst
00046C                  	smpsAlterVol		$F7
00046C E6F7             	dc.b	$E6,$F7
00046E 8A               	dc.b	pClap
00046F                  	smpsAlterVol		$09
00046F E609             	dc.b	$E6,$09
000471 989980           	dc.b	pClosedHH, pOpenHH, nRst
000474                  	smpsAlterVol		$F2
000474 E6F2             	dc.b	$E6,$F2
000476 8B               	dc.b	pAKick
000477                  	smpsAlterVol		$0E
000477 E60E             	dc.b	$E6,$0E
000479 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
00047C                  	smpsAlterVol		$F7
00047C E6F7             	dc.b	$E6,$F7
00047E 8A               	dc.b	pClap
00047F                  	smpsAlterVol		$09
00047F E609             	dc.b	$E6,$09
000481 98998098989980   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, nRst
000488                  	smpsAlterVol		$F7
000488 E6F7             	dc.b	$E6,$F7
00048A 8A               	dc.b	pClap
00048B                  	smpsAlterVol		$09
00048B E609             	dc.b	$E6,$09
00048D 98998098989993   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, pBongoLo
000494                  	smpsAlterVol		$F7
000494 E6F7             	dc.b	$E6,$F7
000496 8A               	dc.b	pClap
000497                  	smpsAlterVol		$09
000497 E609             	dc.b	$E6,$09
000499 98938098989980   	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH, nRst
0004A0                  	smpsAlterVol		$F7
0004A0 E6F7             	dc.b	$E6,$F7
0004A2 8A               	dc.b	pClap
0004A3                  	smpsAlterVol		$09
0004A3 E609             	dc.b	$E6,$09
0004A5 989980           	dc.b	pClosedHH, pOpenHH, nRst
0004A8                  	smpsAlterVol		$F2
0004A8 E6F2             	dc.b	$E6,$F2
0004AA 8B               	dc.b	pAKick
0004AB                  	smpsAlterVol		$0E
0004AB E60E             	dc.b	$E6,$0E
0004AD 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
0004B0                  	smpsAlterVol		$F7
0004B0 E6F7             	dc.b	$E6,$F7
0004B2 8A               	dc.b	pClap
0004B3                  	smpsAlterVol		$09
0004B3 E609             	dc.b	$E6,$09
0004B5 989980           	dc.b	pClosedHH, pOpenHH, nRst
0004B8                  	smpsAlterVol		$F2
0004B8 E6F2             	dc.b	$E6,$F2
0004BA 8B               	dc.b	pAKick
0004BB                  	smpsAlterVol		$0E
0004BB E60E             	dc.b	$E6,$0E
0004BD 989980           	dc.b	pClosedHH, pOpenHH, nRst
0004C0                  	smpsAlterVol		$F7
0004C0 E6F7             	dc.b	$E6,$F7
0004C2 8A               	dc.b	pClap
0004C3                  	smpsAlterVol		$09
0004C3 E609             	dc.b	$E6,$09
0004C5 9899             	dc.b	pClosedHH, pOpenHH
0004C7                  	smpsAlterVol		$F5
0004C7 E6F5             	dc.b	$E6,$F5
0004C9 8501018902850180 	dc.b	pTomHi, $01, $01, pCrashCymb, $02, pTomHi, $01, nRst
0004D1 03850180858005   	dc.b	$03, pTomHi, $01, nRst, pTomHi, nRst, $05

0004D8                  SOVA_SA_PWM1_Loop2:
0004D8 85018003         	dc.b	pTomHi, $01, nRst, $03
0004DC                  	smpsLoop		$00, $03, SOVA_SA_PWM1_Loop2, Target
0004DC F7               	dc.b	$F7
0004DD 0003             	dc.b	$00,$03
                        	if (SOVA_SA_PWM1_Loop2<*)
0004DF                  		rom_ptr_z80(SOVA_SA_PWM1_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004DF D884             	dc.w  (((((SOVA_SA_PWM1_Loop2+Target))<<8)&$FF00)|((((SOVA_SA_PWM1_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004E1 85018085808580   	dc.b	pTomHi, $01, nRst, pTomHi, nRst, pTomHi, nRst

0004E8                  SOVA_SA_PWM1_Jump1:
0004E8                  	smpsAlterVol		$0B
0004E8 E60B             	dc.b	$E6,$0B
0004EA 9802029993       	dc.b	pClosedHH, $02, $02, pOpenHH, pBongoLo
0004EF                  	smpsAlterVol		$F7
0004EF E6F7             	dc.b	$E6,$F7
0004F1 8A               	dc.b	pClap
0004F2                  	smpsAlterVol		$09
0004F2 E609             	dc.b	$E6,$09
0004F4 989380989899     	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH
0004FA                  	smpsAlterVol		$F5
0004FA E6F5             	dc.b	$E6,$F5
0004FC 85               	dc.b	pTomHi
0004FD                  	smpsAlterVol		$02
0004FD E602             	dc.b	$E6,$02
0004FF 8A               	dc.b	pClap
000500                  	smpsAlterVol		$09
000500 E609             	dc.b	$E6,$09
000502 98               	dc.b	pClosedHH
000503                  	smpsAlterVol		$F5
000503 E6F5             	dc.b	$E6,$F5
000505 8580             	dc.b	pTomHi, nRst
000507                  	smpsAlterVol		$0B
000507 E60B             	dc.b	$E6,$0B
000509 98989393         	dc.b	pClosedHH, pClosedHH, pBongoLo, pBongoLo
00050D                  	smpsAlterVol		$F7
00050D E6F7             	dc.b	$E6,$F7
00050F 8A               	dc.b	pClap
000510                  	smpsAlterVol		$09
000510 E609             	dc.b	$E6,$09
000512 989980           	dc.b	pClosedHH, pOpenHH, nRst
000515                  	smpsAlterVol		$F2
000515 E6F2             	dc.b	$E6,$F2
000517 8B               	dc.b	pAKick
000518                  	smpsAlterVol		$0E
000518 E60E             	dc.b	$E6,$0E
00051A 9899             	dc.b	pClosedHH, pOpenHH
00051C                  	smpsAlterVol		$F5
00051C E6F5             	dc.b	$E6,$F5
00051E 85               	dc.b	pTomHi
00051F                  	smpsAlterVol		$02
00051F E602             	dc.b	$E6,$02
000521 8A               	dc.b	pClap
000522                  	smpsAlterVol		$09
000522 E609             	dc.b	$E6,$09
000524 98998098989993   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, pBongoLo
00052B                  	smpsAlterVol		$F7
00052B E6F7             	dc.b	$E6,$F7
00052D 8A               	dc.b	pClap
00052E                  	smpsAlterVol		$09
00052E E609             	dc.b	$E6,$09
000530 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
000536                  	smpsAlterVol		$F5
000536 E6F5             	dc.b	$E6,$F5
000538 85               	dc.b	pTomHi
000539                  	smpsAlterVol		$02
000539 E602             	dc.b	$E6,$02
00053B 8A               	dc.b	pClap
00053C                  	smpsAlterVol		$09
00053C E609             	dc.b	$E6,$09
00053E 98               	dc.b	pClosedHH
00053F                  	smpsAlterVol		$F5
00053F E6F5             	dc.b	$E6,$F5
000541 8580             	dc.b	pTomHi, nRst
000543                  	smpsAlterVol		$FD
000543 E6FD             	dc.b	$E6,$FD
000545 8B               	dc.b	pAKick
000546                  	smpsAlterVol		$0E
000546 E60E             	dc.b	$E6,$0E
000548 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
00054B                  	smpsAlterVol		$F7
00054B E6F7             	dc.b	$E6,$F7
00054D 8A               	dc.b	pClap
00054E                  	smpsAlterVol		$09
00054E E609             	dc.b	$E6,$09
000550 989980           	dc.b	pClosedHH, pOpenHH, nRst
000553                  	smpsAlterVol		$F2
000553 E6F2             	dc.b	$E6,$F2
000555 8B               	dc.b	pAKick
000556                  	smpsAlterVol		$0E
000556 E60E             	dc.b	$E6,$0E
000558 9899             	dc.b	pClosedHH, pOpenHH
00055A                  	smpsAlterVol		$F5
00055A E6F5             	dc.b	$E6,$F5
00055C 85               	dc.b	pTomHi
00055D                  	smpsAlterVol		$02
00055D E602             	dc.b	$E6,$02
00055F 8A               	dc.b	pClap
000560                  	smpsAlterVol		$09
000560 E609             	dc.b	$E6,$09
000562 98998098989393   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pBongoLo, pBongoLo
000569                  	smpsAlterVol		$F7
000569 E6F7             	dc.b	$E6,$F7
00056B 8A               	dc.b	pClap
00056C                  	smpsAlterVol		$09
00056C E609             	dc.b	$E6,$09
00056E 989380           	dc.b	pClosedHH, pBongoLo, nRst
000571                  	smpsAlterVol		$F2
000571 E6F2             	dc.b	$E6,$F2
000573 8B               	dc.b	pAKick
000574                  	smpsAlterVol		$0E
000574 E60E             	dc.b	$E6,$0E
000576 9899             	dc.b	pClosedHH, pOpenHH
000578                  	smpsAlterVol		$F5
000578 E6F5             	dc.b	$E6,$F5
00057A 85               	dc.b	pTomHi
00057B                  	smpsAlterVol		$02
00057B E602             	dc.b	$E6,$02
00057D 8A               	dc.b	pClap
00057E                  	smpsAlterVol		$09
00057E E609             	dc.b	$E6,$09
000580 989980           	dc.b	pClosedHH, pOpenHH, nRst
000583                  	smpsAlterVol		$F2
000583 E6F2             	dc.b	$E6,$F2
000585 8B               	dc.b	pAKick
000586                  	smpsAlterVol		$0E
000586 E60E             	dc.b	$E6,$0E
000588 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
00058B                  	smpsAlterVol		$F7
00058B E6F7             	dc.b	$E6,$F7
00058D 8A               	dc.b	pClap
00058E                  	smpsAlterVol		$09
00058E E609             	dc.b	$E6,$09
000590 989980           	dc.b	pClosedHH, pOpenHH, nRst
000593                  	smpsAlterVol		$F2
000593 E6F2             	dc.b	$E6,$F2
000595 8B               	dc.b	pAKick
000596                  	smpsAlterVol		$0E
000596 E60E             	dc.b	$E6,$0E
000598 9899             	dc.b	pClosedHH, pOpenHH
00059A                  	smpsAlterVol		$F5
00059A E6F5             	dc.b	$E6,$F5
00059C 85               	dc.b	pTomHi
00059D                  	smpsAlterVol		$02
00059D E602             	dc.b	$E6,$02
00059F 8A               	dc.b	pClap
0005A0                  	smpsAlterVol		$09
0005A0 E609             	dc.b	$E6,$09
0005A2 98998098989393   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pBongoLo, pBongoLo
0005A9                  	smpsAlterVol		$F7
0005A9 E6F7             	dc.b	$E6,$F7
0005AB 8A               	dc.b	pClap
0005AC                  	smpsAlterVol		$09
0005AC E609             	dc.b	$E6,$09
0005AE 989980           	dc.b	pClosedHH, pOpenHH, nRst
0005B1                  	smpsAlterVol		$F2
0005B1 E6F2             	dc.b	$E6,$F2
0005B3 8B               	dc.b	pAKick
0005B4                  	smpsAlterVol		$0E
0005B4 E60E             	dc.b	$E6,$0E
0005B6 9899             	dc.b	pClosedHH, pOpenHH
0005B8                  	smpsAlterVol		$F5
0005B8 E6F5             	dc.b	$E6,$F5
0005BA 85               	dc.b	pTomHi
0005BB                  	smpsAlterVol		$02
0005BB E602             	dc.b	$E6,$02
0005BD 8A               	dc.b	pClap
0005BE                  	smpsAlterVol		$09
0005BE E609             	dc.b	$E6,$09
0005C0 98               	dc.b	pClosedHH
0005C1                  	smpsAlterVol		$F5
0005C1 E6F5             	dc.b	$E6,$F5
0005C3 8580             	dc.b	pTomHi, nRst
0005C5                  	smpsAlterVol		$0B
0005C5 E60B             	dc.b	$E6,$0B
0005C7 98989393         	dc.b	pClosedHH, pClosedHH, pBongoLo, pBongoLo
0005CB                  	smpsAlterVol		$F7
0005CB E6F7             	dc.b	$E6,$F7
0005CD 8A               	dc.b	pClap
0005CE                  	smpsAlterVol		$09
0005CE E609             	dc.b	$E6,$09
0005D0 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
0005D6                  	smpsAlterVol		$F5
0005D6 E6F5             	dc.b	$E6,$F5
0005D8 85               	dc.b	pTomHi
0005D9                  	smpsAlterVol		$02
0005D9 E602             	dc.b	$E6,$02
0005DB 8A               	dc.b	pClap
0005DC                  	smpsAlterVol		$09
0005DC E609             	dc.b	$E6,$09
0005DE 98               	dc.b	pClosedHH
0005DF                  	smpsAlterVol		$F5
0005DF E6F5             	dc.b	$E6,$F5
0005E1 8580             	dc.b	pTomHi, nRst
0005E3                  	smpsAlterVol		$0B
0005E3 E60B             	dc.b	$E6,$0B
0005E5 98989993         	dc.b	pClosedHH, pClosedHH, pOpenHH, pBongoLo
0005E9                  	smpsAlterVol		$F7
0005E9 E6F7             	dc.b	$E6,$F7
0005EB 8A               	dc.b	pClap
0005EC                  	smpsAlterVol		$09
0005EC E609             	dc.b	$E6,$09
0005EE 989980           	dc.b	pClosedHH, pOpenHH, nRst
0005F1                  	smpsAlterVol		$F2
0005F1 E6F2             	dc.b	$E6,$F2
0005F3 8B               	dc.b	pAKick
0005F4                  	smpsAlterVol		$0E
0005F4 E60E             	dc.b	$E6,$0E
0005F6 9899             	dc.b	pClosedHH, pOpenHH
0005F8                  	smpsAlterVol		$F5
0005F8 E6F5             	dc.b	$E6,$F5
0005FA 85               	dc.b	pTomHi
0005FB                  	smpsAlterVol		$02
0005FB E602             	dc.b	$E6,$02
0005FD 8A               	dc.b	pClap
0005FE                  	smpsAlterVol		$09
0005FE E609             	dc.b	$E6,$09
000600 989980           	dc.b	pClosedHH, pOpenHH, nRst
000603                  	smpsAlterVol		$F2
000603 E6F2             	dc.b	$E6,$F2
000605 8B               	dc.b	pAKick
000606                  	smpsAlterVol		$0E
000606 E60E             	dc.b	$E6,$0E
000608 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
00060B                  	smpsAlterVol		$F7
00060B E6F7             	dc.b	$E6,$F7
00060D 8A               	dc.b	pClap
00060E                  	smpsAlterVol		$09
00060E E609             	dc.b	$E6,$09
000610 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
000616                  	smpsAlterVol		$F5
000616 E6F5             	dc.b	$E6,$F5
000618 85               	dc.b	pTomHi
000619                  	smpsAlterVol		$02
000619 E602             	dc.b	$E6,$02
00061B 8A               	dc.b	pClap
00061C                  	smpsAlterVol		$09
00061C E609             	dc.b	$E6,$09
00061E 98               	dc.b	pClosedHH
00061F                  	smpsAlterVol		$F5
00061F E6F5             	dc.b	$E6,$F5
000621 8580             	dc.b	pTomHi, nRst
000623                  	smpsAlterVol		$FD
000623 E6FD             	dc.b	$E6,$FD
000625 8B               	dc.b	pAKick
000626                  	smpsAlterVol		$0E
000626 E60E             	dc.b	$E6,$0E
000628 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
00062B                  	smpsAlterVol		$F7
00062B E6F7             	dc.b	$E6,$F7
00062D 8A               	dc.b	pClap
00062E                  	smpsAlterVol		$09
00062E E609             	dc.b	$E6,$09
000630 989380           	dc.b	pClosedHH, pBongoLo, nRst
000633                  	smpsAlterVol		$F2
000633 E6F2             	dc.b	$E6,$F2
000635 8B               	dc.b	pAKick
000636                  	smpsAlterVol		$0E
000636 E60E             	dc.b	$E6,$0E
000638 9899             	dc.b	pClosedHH, pOpenHH
00063A                  	smpsAlterVol		$F5
00063A E6F5             	dc.b	$E6,$F5
00063C 85               	dc.b	pTomHi
00063D                  	smpsAlterVol		$02
00063D E602             	dc.b	$E6,$02
00063F 8A               	dc.b	pClap
000640                  	smpsAlterVol		$09
000640 E609             	dc.b	$E6,$09
000642 98998098989993   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, pBongoLo
000649                  	smpsAlterVol		$F7
000649 E6F7             	dc.b	$E6,$F7
00064B 8A               	dc.b	pClap
00064C                  	smpsAlterVol		$09
00064C E609             	dc.b	$E6,$09
00064E 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
000654                  	smpsAlterVol		$F5
000654 E6F5             	dc.b	$E6,$F5
000656 85               	dc.b	pTomHi
000657                  	smpsAlterVol		$02
000657 E602             	dc.b	$E6,$02
000659 8A               	dc.b	pClap
00065A                  	smpsAlterVol		$09
00065A E609             	dc.b	$E6,$09
00065C 98               	dc.b	pClosedHH
00065D                  	smpsAlterVol		$F5
00065D E6F5             	dc.b	$E6,$F5
00065F 8580             	dc.b	pTomHi, nRst
000661                  	smpsAlterVol		$FD
000661 E6FD             	dc.b	$E6,$FD
000663 8B               	dc.b	pAKick
000664                  	smpsAlterVol		$0E
000664 E60E             	dc.b	$E6,$0E
000666 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
000669                  	smpsAlterVol		$F7
000669 E6F7             	dc.b	$E6,$F7
00066B 8A               	dc.b	pClap
00066C                  	smpsAlterVol		$09
00066C E609             	dc.b	$E6,$09
00066E 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
000674                  	smpsAlterVol		$F5
000674 E6F5             	dc.b	$E6,$F5
000676 85               	dc.b	pTomHi
000677                  	smpsAlterVol		$02
000677 E602             	dc.b	$E6,$02
000679 8A               	dc.b	pClap
00067A                  	smpsAlterVol		$09
00067A E609             	dc.b	$E6,$09
00067C 98               	dc.b	pClosedHH
00067D                  	smpsAlterVol		$F5
00067D E6F5             	dc.b	$E6,$F5
00067F 8580             	dc.b	pTomHi, nRst
000681                  	smpsAlterVol		$0B
000681 E60B             	dc.b	$E6,$0B
000683 98989393         	dc.b	pClosedHH, pClosedHH, pBongoLo, pBongoLo
000687                  	smpsAlterVol		$F7
000687 E6F7             	dc.b	$E6,$F7
000689 8A               	dc.b	pClap
00068A                  	smpsAlterVol		$09
00068A E609             	dc.b	$E6,$09
00068C 989980           	dc.b	pClosedHH, pOpenHH, nRst
00068F                  	smpsAlterVol		$F2
00068F E6F2             	dc.b	$E6,$F2
000691 8B               	dc.b	pAKick
000692                  	smpsAlterVol		$0E
000692 E60E             	dc.b	$E6,$0E
000694 9899             	dc.b	pClosedHH, pOpenHH
000696                  	smpsAlterVol		$F5
000696 E6F5             	dc.b	$E6,$F5
000698 85               	dc.b	pTomHi
000699                  	smpsAlterVol		$02
000699 E602             	dc.b	$E6,$02
00069B 8A               	dc.b	pClap
00069C                  	smpsAlterVol		$09
00069C E609             	dc.b	$E6,$09
00069E 989980           	dc.b	pClosedHH, pOpenHH, nRst
0006A1                  	smpsAlterVol		$F2
0006A1 E6F2             	dc.b	$E6,$F2
0006A3 8B               	dc.b	pAKick
0006A4                  	smpsAlterVol		$0E
0006A4 E60E             	dc.b	$E6,$0E
0006A6 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
0006A9                  	smpsAlterVol		$F7
0006A9 E6F7             	dc.b	$E6,$F7
0006AB 8A               	dc.b	pClap
0006AC                  	smpsAlterVol		$09
0006AC E609             	dc.b	$E6,$09
0006AE 98998098989980   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, nRst
0006B5                  	smpsAlterVol		$F7
0006B5 E6F7             	dc.b	$E6,$F7
0006B7 8A               	dc.b	pClap
0006B8                  	smpsAlterVol		$09
0006B8 E609             	dc.b	$E6,$09
0006BA 9899             	dc.b	pClosedHH, pOpenHH
0006BC                  	smpsAlterVol		$F5
0006BC E6F5             	dc.b	$E6,$F5
0006BE 850101           	dc.b	pTomHi, $01, $01
0006C1                  	smpsAlterVol		$FD
0006C1 E6FD             	dc.b	$E6,$FD
0006C3 8B02             	dc.b	pAKick, $02
0006C5                  	smpsAlterVol		$03
0006C5 E603             	dc.b	$E6,$03
0006C7 8501800385018085 	dc.b	pTomHi, $01, nRst, $03, pTomHi, $01, nRst, pTomHi
0006CF 8005             	dc.b	nRst, $05

0006D1                  SOVA_SA_PWM1_Loop3:
0006D1 85018003         	dc.b	pTomHi, $01, nRst, $03
0006D5                  	smpsLoop		$00, $03, SOVA_SA_PWM1_Loop3, Target
0006D5 F7               	dc.b	$F7
0006D6 0003             	dc.b	$00,$03
                        	if (SOVA_SA_PWM1_Loop3<*)
0006D8                  		rom_ptr_z80(SOVA_SA_PWM1_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006D8 D186             	dc.w  (((((SOVA_SA_PWM1_Loop3+Target))<<8)&$FF00)|((((SOVA_SA_PWM1_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006DA 85018085808580   	dc.b	pTomHi, $01, nRst, pTomHi, nRst, pTomHi, nRst
0006E1                  	smpsAlterVol		$0B
0006E1 E60B             	dc.b	$E6,$0B
0006E3 9802029393       	dc.b	pClosedHH, $02, $02, pBongoLo, pBongoLo
0006E8                  	smpsAlterVol		$F7
0006E8 E6F7             	dc.b	$E6,$F7
0006EA 8A               	dc.b	pClap
0006EB                  	smpsAlterVol		$09
0006EB E609             	dc.b	$E6,$09
0006ED 989980           	dc.b	pClosedHH, pOpenHH, nRst
0006F0                  	smpsAlterVol		$F2
0006F0 E6F2             	dc.b	$E6,$F2
0006F2 8B               	dc.b	pAKick
0006F3                  	smpsAlterVol		$0E
0006F3 E60E             	dc.b	$E6,$0E
0006F5 9899             	dc.b	pClosedHH, pOpenHH
0006F7                  	smpsAlterVol		$F5
0006F7 E6F5             	dc.b	$E6,$F5
0006F9 85               	dc.b	pTomHi
0006FA                  	smpsAlterVol		$02
0006FA E602             	dc.b	$E6,$02
0006FC 8A               	dc.b	pClap
0006FD                  	smpsAlterVol		$09
0006FD E609             	dc.b	$E6,$09
0006FF 98               	dc.b	pClosedHH
000700                  	smpsAlterVol		$F5
000700 E6F5             	dc.b	$E6,$F5
000702 8580             	dc.b	pTomHi, nRst
000704                  	smpsAlterVol		$0B
000704 E60B             	dc.b	$E6,$0B
000706 98989393         	dc.b	pClosedHH, pClosedHH, pBongoLo, pBongoLo
00070A                  	smpsAlterVol		$F7
00070A E6F7             	dc.b	$E6,$F7
00070C 8A               	dc.b	pClap
00070D                  	smpsAlterVol		$09
00070D E609             	dc.b	$E6,$09
00070F 989380989899     	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH
000715                  	smpsAlterVol		$F5
000715 E6F5             	dc.b	$E6,$F5
000717 85               	dc.b	pTomHi
000718                  	smpsAlterVol		$02
000718 E602             	dc.b	$E6,$02
00071A 8A               	dc.b	pClap
00071B                  	smpsAlterVol		$09
00071B E609             	dc.b	$E6,$09
00071D 98               	dc.b	pClosedHH
00071E                  	smpsAlterVol		$F5
00071E E6F5             	dc.b	$E6,$F5
000720 8580             	dc.b	pTomHi, nRst
000722                  	smpsAlterVol		$FD
000722 E6FD             	dc.b	$E6,$FD
000724 8B               	dc.b	pAKick
000725                  	smpsAlterVol		$0E
000725 E60E             	dc.b	$E6,$0E
000727 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
00072A                  	smpsAlterVol		$F7
00072A E6F7             	dc.b	$E6,$F7
00072C 8A               	dc.b	pClap
00072D                  	smpsAlterVol		$09
00072D E609             	dc.b	$E6,$09
00072F 989380989899     	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH
000735                  	smpsAlterVol		$F5
000735 E6F5             	dc.b	$E6,$F5
000737 85               	dc.b	pTomHi
000738                  	smpsAlterVol		$02
000738 E602             	dc.b	$E6,$02
00073A 8A               	dc.b	pClap
00073B                  	smpsAlterVol		$09
00073B E609             	dc.b	$E6,$09
00073D 989980           	dc.b	pClosedHH, pOpenHH, nRst
000740                  	smpsAlterVol		$F2
000740 E6F2             	dc.b	$E6,$F2
000742 8B               	dc.b	pAKick
000743                  	smpsAlterVol		$0E
000743 E60E             	dc.b	$E6,$0E
000745 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
000748                  	smpsAlterVol		$F7
000748 E6F7             	dc.b	$E6,$F7
00074A 8A               	dc.b	pClap
00074B                  	smpsAlterVol		$09
00074B E609             	dc.b	$E6,$09
00074D 989380           	dc.b	pClosedHH, pBongoLo, nRst
000750                  	smpsAlterVol		$F2
000750 E6F2             	dc.b	$E6,$F2
000752 8B               	dc.b	pAKick
000753                  	smpsAlterVol		$0E
000753 E60E             	dc.b	$E6,$0E
000755 9899             	dc.b	pClosedHH, pOpenHH
000757                  	smpsAlterVol		$F5
000757 E6F5             	dc.b	$E6,$F5
000759 85               	dc.b	pTomHi
00075A                  	smpsAlterVol		$02
00075A E602             	dc.b	$E6,$02
00075C 8A               	dc.b	pClap
00075D                  	smpsAlterVol		$09
00075D E609             	dc.b	$E6,$09
00075F 98998098989993   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH, pBongoLo
000766                  	smpsAlterVol		$F7
000766 E6F7             	dc.b	$E6,$F7
000768 8A               	dc.b	pClap
000769                  	smpsAlterVol		$09
000769 E609             	dc.b	$E6,$09
00076B 989980           	dc.b	pClosedHH, pOpenHH, nRst
00076E                  	smpsAlterVol		$F2
00076E E6F2             	dc.b	$E6,$F2
000770 8B               	dc.b	pAKick
000771                  	smpsAlterVol		$0E
000771 E60E             	dc.b	$E6,$0E
000773 9899             	dc.b	pClosedHH, pOpenHH
000775                  	smpsAlterVol		$F5
000775 E6F5             	dc.b	$E6,$F5
000777 85               	dc.b	pTomHi
000778                  	smpsAlterVol		$02
000778 E602             	dc.b	$E6,$02
00077A 8A               	dc.b	pClap
00077B                  	smpsAlterVol		$09
00077B E609             	dc.b	$E6,$09
00077D 989980           	dc.b	pClosedHH, pOpenHH, nRst
000780                  	smpsAlterVol		$F2
000780 E6F2             	dc.b	$E6,$F2
000782 8B               	dc.b	pAKick
000783                  	smpsAlterVol		$0E
000783 E60E             	dc.b	$E6,$0E
000785 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
000788                  	smpsAlterVol		$F7
000788 E6F7             	dc.b	$E6,$F7
00078A 8A               	dc.b	pClap
00078B                  	smpsAlterVol		$09
00078B E609             	dc.b	$E6,$09
00078D 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
000793                  	smpsAlterVol		$F5
000793 E6F5             	dc.b	$E6,$F5
000795 85               	dc.b	pTomHi
000796                  	smpsAlterVol		$02
000796 E602             	dc.b	$E6,$02
000798 8A               	dc.b	pClap
000799                  	smpsAlterVol		$09
000799 E609             	dc.b	$E6,$09
00079B 98               	dc.b	pClosedHH
00079C                  	smpsAlterVol		$F5
00079C E6F5             	dc.b	$E6,$F5
00079E 8580             	dc.b	pTomHi, nRst
0007A0                  	smpsAlterVol		$0B
0007A0 E60B             	dc.b	$E6,$0B
0007A2 98989993         	dc.b	pClosedHH, pClosedHH, pOpenHH, pBongoLo
0007A6                  	smpsAlterVol		$F7
0007A6 E6F7             	dc.b	$E6,$F7
0007A8 8A               	dc.b	pClap
0007A9                  	smpsAlterVol		$09
0007A9 E609             	dc.b	$E6,$09
0007AB 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
0007B1                  	smpsAlterVol		$F5
0007B1 E6F5             	dc.b	$E6,$F5
0007B3 85               	dc.b	pTomHi
0007B4                  	smpsAlterVol		$02
0007B4 E602             	dc.b	$E6,$02
0007B6 8A               	dc.b	pClap
0007B7                  	smpsAlterVol		$09
0007B7 E609             	dc.b	$E6,$09
0007B9 989980           	dc.b	pClosedHH, pOpenHH, nRst
0007BC                  	smpsAlterVol		$F2
0007BC E6F2             	dc.b	$E6,$F2
0007BE 8B               	dc.b	pAKick
0007BF                  	smpsAlterVol		$0E
0007BF E60E             	dc.b	$E6,$0E
0007C1 989993           	dc.b	pClosedHH, pOpenHH, pBongoLo
0007C4                  	smpsAlterVol		$F7
0007C4 E6F7             	dc.b	$E6,$F7
0007C6 8A               	dc.b	pClap
0007C7                  	smpsAlterVol		$09
0007C7 E609             	dc.b	$E6,$09
0007C9 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
0007CF                  	smpsAlterVol		$F5
0007CF E6F5             	dc.b	$E6,$F5
0007D1 85               	dc.b	pTomHi
0007D2                  	smpsAlterVol		$02
0007D2 E602             	dc.b	$E6,$02
0007D4 8A               	dc.b	pClap
0007D5                  	smpsAlterVol		$09
0007D5 E609             	dc.b	$E6,$09
0007D7 989980989893     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pBongoLo

0007DD                  SOVA_SA_PWM1_Loop4:
0007DD 93               	dc.b	pBongoLo
0007DE                  	smpsAlterVol		$F7
0007DE E6F7             	dc.b	$E6,$F7
0007E0 8A               	dc.b	pClap
0007E1                  	smpsAlterVol		$09
0007E1 E609             	dc.b	$E6,$09
0007E3 989380           	dc.b	pClosedHH, pBongoLo, nRst
0007E6                  	smpsAlterVol		$F2
0007E6 E6F2             	dc.b	$E6,$F2
0007E8 8B               	dc.b	pAKick
0007E9                  	smpsAlterVol		$0E
0007E9 E60E             	dc.b	$E6,$0E
0007EB 9899             	dc.b	pClosedHH, pOpenHH
0007ED                  	smpsAlterVol		$F5
0007ED E6F5             	dc.b	$E6,$F5
0007EF 85               	dc.b	pTomHi
0007F0                  	smpsAlterVol		$02
0007F0 E602             	dc.b	$E6,$02
0007F2 8A               	dc.b	pClap
0007F3                  	smpsAlterVol		$09
0007F3 E609             	dc.b	$E6,$09
0007F5 989980989899     	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pOpenHH
0007FB                  	smpsLoop		$00, $02, SOVA_SA_PWM1_Loop4, Target
0007FB F7               	dc.b	$F7
0007FC 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM1_Loop4<*)
0007FE                  		rom_ptr_z80(SOVA_SA_PWM1_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007FE DD87             	dc.w  (((((SOVA_SA_PWM1_Loop4+Target))<<8)&$FF00)|((((SOVA_SA_PWM1_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000800 93               	dc.b	pBongoLo
000801                  	smpsAlterVol		$F7
000801 E6F7             	dc.b	$E6,$F7
000803 8A               	dc.b	pClap
000804                  	smpsAlterVol		$09
000804 E609             	dc.b	$E6,$09
000806 989980           	dc.b	pClosedHH, pOpenHH, nRst
000809                  	smpsAlterVol		$F2
000809 E6F2             	dc.b	$E6,$F2
00080B 8B               	dc.b	pAKick
00080C                  	smpsAlterVol		$0E
00080C E60E             	dc.b	$E6,$0E
00080E 9899             	dc.b	pClosedHH, pOpenHH
000810                  	smpsAlterVol		$F5
000810 E6F5             	dc.b	$E6,$F5
000812 85               	dc.b	pTomHi
000813                  	smpsAlterVol		$02
000813 E602             	dc.b	$E6,$02
000815 8A               	dc.b	pClap
000816                  	smpsAlterVol		$09
000816 E609             	dc.b	$E6,$09
000818 989980           	dc.b	pClosedHH, pOpenHH, nRst
00081B                  	smpsAlterVol		$F2
00081B E6F2             	dc.b	$E6,$F2
00081D 8B               	dc.b	pAKick
00081E                  	smpsAlterVol		$0E
00081E E60E             	dc.b	$E6,$0E
000820 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
000823                  	smpsAlterVol		$F7
000823 E6F7             	dc.b	$E6,$F7
000825 8A               	dc.b	pClap
000826                  	smpsAlterVol		$09
000826 E609             	dc.b	$E6,$09
000828 989380           	dc.b	pClosedHH, pBongoLo, nRst
00082B                  	smpsAlterVol		$F2
00082B E6F2             	dc.b	$E6,$F2
00082D 8B               	dc.b	pAKick
00082E                  	smpsAlterVol		$0E
00082E E60E             	dc.b	$E6,$0E
000830 9899             	dc.b	pClosedHH, pOpenHH
000832                  	smpsAlterVol		$F5
000832 E6F5             	dc.b	$E6,$F5
000834 85               	dc.b	pTomHi
000835                  	smpsAlterVol		$02
000835 E602             	dc.b	$E6,$02
000837 8A               	dc.b	pClap
000838                  	smpsAlterVol		$09
000838 E609             	dc.b	$E6,$09
00083A 98               	dc.b	pClosedHH
00083B                  	smpsAlterVol		$F5
00083B E6F5             	dc.b	$E6,$F5
00083D 8580             	dc.b	pTomHi, nRst
00083F                  	smpsAlterVol		$0B
00083F E60B             	dc.b	$E6,$0B
000841 98989393         	dc.b	pClosedHH, pClosedHH, pBongoLo, pBongoLo
000845                  	smpsAlterVol		$F7
000845 E6F7             	dc.b	$E6,$F7
000847 8A               	dc.b	pClap
000848                  	smpsAlterVol		$09
000848 E609             	dc.b	$E6,$09
00084A 989980           	dc.b	pClosedHH, pOpenHH, nRst
00084D                  	smpsAlterVol		$F2
00084D E6F2             	dc.b	$E6,$F2
00084F 8B               	dc.b	pAKick
000850                  	smpsAlterVol		$0E
000850 E60E             	dc.b	$E6,$0E
000852 9899             	dc.b	pClosedHH, pOpenHH
000854                  	smpsAlterVol		$F5
000854 E6F5             	dc.b	$E6,$F5
000856 85               	dc.b	pTomHi
000857                  	smpsAlterVol		$02
000857 E602             	dc.b	$E6,$02
000859 8A               	dc.b	pClap
00085A                  	smpsAlterVol		$09
00085A E609             	dc.b	$E6,$09
00085C 98998098989393   	dc.b	pClosedHH, pOpenHH, nRst, pClosedHH, pClosedHH, pBongoLo, pBongoLo
000863                  	smpsAlterVol		$F7
000863 E6F7             	dc.b	$E6,$F7
000865 8A               	dc.b	pClap
000866                  	smpsAlterVol		$09
000866 E609             	dc.b	$E6,$09
000868 989380989899     	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH
00086E                  	smpsAlterVol		$F5
00086E E6F5             	dc.b	$E6,$F5
000870 85               	dc.b	pTomHi
000871                  	smpsAlterVol		$02
000871 E602             	dc.b	$E6,$02
000873 8A               	dc.b	pClap
000874                  	smpsAlterVol		$09
000874 E609             	dc.b	$E6,$09
000876 989980           	dc.b	pClosedHH, pOpenHH, nRst
000879                  	smpsAlterVol		$F2
000879 E6F2             	dc.b	$E6,$F2
00087B 8B               	dc.b	pAKick
00087C                  	smpsAlterVol		$0E
00087C E60E             	dc.b	$E6,$0E
00087E 989393           	dc.b	pClosedHH, pBongoLo, pBongoLo
000881                  	smpsAlterVol		$F7
000881 E6F7             	dc.b	$E6,$F7
000883 8A               	dc.b	pClap
000884                  	smpsAlterVol		$09
000884 E609             	dc.b	$E6,$09
000886 98938098989980   	dc.b	pClosedHH, pBongoLo, nRst, pClosedHH, pClosedHH, pOpenHH, nRst
00088D                  	smpsAlterVol		$F7
00088D E6F7             	dc.b	$E6,$F7
00088F 8A               	dc.b	pClap
000890                  	smpsAlterVol		$09
000890 E609             	dc.b	$E6,$09
000892 98               	dc.b	pClosedHH
000893                  	smpsAlterVol		$F5
000893 E6F5             	dc.b	$E6,$F5
000895 8501010101       	dc.b	pTomHi, $01, $01, $01, $01
00089A                  	smpsAlterVol		$FD
00089A E6FD             	dc.b	$E6,$FD
00089C 8B02             	dc.b	pAKick, $02
00089E                  	smpsAlterVol		$03
00089E E603             	dc.b	$E6,$03
0008A0 8501800385018085 	dc.b	pTomHi, $01, nRst, $03, pTomHi, $01, nRst, pTomHi
0008A8 8005             	dc.b	nRst, $05

0008AA                  SOVA_SA_PWM1_Loop5:
0008AA 85018003         	dc.b	pTomHi, $01, nRst, $03
0008AE                  	smpsLoop		$00, $03, SOVA_SA_PWM1_Loop5, Target
0008AE F7               	dc.b	$F7
0008AF 0003             	dc.b	$00,$03
                        	if (SOVA_SA_PWM1_Loop5<*)
0008B1                  		rom_ptr_z80(SOVA_SA_PWM1_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008B1 AA88             	dc.w  (((((SOVA_SA_PWM1_Loop5+Target))<<8)&$FF00)|((((SOVA_SA_PWM1_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0008B3 850180858085     	dc.b	pTomHi, $01, nRst, pTomHi, nRst, pTomHi
0008B9                  	smpsAlterNote	$00
0008B9 E100             	dc.b	$E1,$00
0008BB 80               	dc.b	nRst
0008BC                  	smpsJump		SOVA_SA_PWM1_Jump1, Target
0008BC F6               	dc.b	$F6
                        	if (SOVA_SA_PWM1_Jump1<*)
0008BD                  		rom_ptr_z80(SOVA_SA_PWM1_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008BD E884             	dc.w  (((((SOVA_SA_PWM1_Jump1+Target))<<8)&$FF00)|((((SOVA_SA_PWM1_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
0008BF                  SOVA_SA_PWM2:
0008BF 80108B0280       	dc.b	nRst, $10, pAKick, $02, nRst
0008C4                  	smpsAlterVol		$0F
0008C4 E60F             	dc.b	$E6,$0F
0008C6 9380             	dc.b	pBongoLo, nRst
0008C8                  	smpsAlterVol		$F1
0008C8 E6F1             	dc.b	$E6,$F1
0008CA 8B80             	dc.b	pAKick, nRst
0008CC                  	smpsAlterVol		$0F
0008CC E60F             	dc.b	$E6,$0F
0008CE 9980             	dc.b	pOpenHH, nRst
0008D0                  	smpsAlterVol		$F1
0008D0 E6F1             	dc.b	$E6,$F1
0008D2 8B80068B0280068B 	dc.b	pAKick, nRst, $06, pAKick, $02, nRst, $06, pAKick
0008DA 0280             	dc.b	$02, nRst
0008DC                  	smpsAlterVol		$0F
0008DC E60F             	dc.b	$E6,$0F
0008DE 938093809380     	dc.b	pBongoLo, nRst, pBongoLo, nRst, pBongoLo, nRst
0008E4                  	smpsAlterVol		$F1
0008E4 E6F1             	dc.b	$E6,$F1
0008E6 8B80068B028006   	dc.b	pAKick, nRst, $06, pAKick, $02, nRst, $06

0008ED                  SOVA_SA_PWM2_Loop1:
0008ED 8B0280           	dc.b	pAKick, $02, nRst
0008F0                  	smpsAlterVol		$0F
0008F0 E60F             	dc.b	$E6,$0F
0008F2 9380             	dc.b	pBongoLo, nRst
0008F4                  	smpsAlterVol		$F1
0008F4 E6F1             	dc.b	$E6,$F1
0008F6                  	smpsLoop		$00, $02, SOVA_SA_PWM2_Loop1, Target
0008F6 F7               	dc.b	$F7
0008F7 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM2_Loop1<*)
0008F9                  		rom_ptr_z80(SOVA_SA_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008F9 ED88             	dc.w  (((((SOVA_SA_PWM2_Loop1+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0008FB 8B80068B028006   	dc.b	pAKick, nRst, $06, pAKick, $02, nRst, $06
000902                  	smpsAlterVol		$0F
000902 E60F             	dc.b	$E6,$0F
000904 9802809380       	dc.b	pClosedHH, $02, nRst, pBongoLo, nRst
000909                  	smpsAlterVol		$F1
000909 E6F1             	dc.b	$E6,$F1
00090B 8B80             	dc.b	pAKick, nRst
00090D                  	smpsAlterVol		$0F
00090D E60F             	dc.b	$E6,$0F
00090F 9980             	dc.b	pOpenHH, nRst
000911                  	smpsAlterVol		$F1
000911 E6F1             	dc.b	$E6,$F1
000913 8B8006           	dc.b	pAKick, nRst, $06
000916                  	smpsAlterVol		$0F
000916 E60F             	dc.b	$E6,$0F
000918 9802800698028099 	dc.b	pClosedHH, $02, nRst, $06, pClosedHH, $02, nRst, pOpenHH
000920 8093809380       	dc.b	nRst, pBongoLo, nRst, pBongoLo, nRst
000925                  	smpsAlterVol		$F1
000925 E6F1             	dc.b	$E6,$F1
000927 8B80068B0280068B 	dc.b	pAKick, nRst, $06, pAKick, $02, nRst, $06, pAKick
00092F 0280             	dc.b	$02, nRst
000931                  	smpsAlterVol		$0F
000931 E60F             	dc.b	$E6,$0F
000933 9380             	dc.b	pBongoLo, nRst
000935                  	smpsAlterVol		$F1
000935 E6F1             	dc.b	$E6,$F1
000937 8B80             	dc.b	pAKick, nRst
000939                  	smpsAlterVol		$0F
000939 E60F             	dc.b	$E6,$0F
00093B 9980             	dc.b	pOpenHH, nRst
00093D                  	smpsAlterVol		$F1
00093D E6F1             	dc.b	$E6,$F1
00093F 8B8006           	dc.b	pAKick, nRst, $06
000942                  	smpsAlterVol		$0F
000942 E60F             	dc.b	$E6,$0F
000944 9802800698028093 	dc.b	pClosedHH, $02, nRst, $06, pClosedHH, $02, nRst, pBongoLo
00094C 80               	dc.b	nRst
00094D                  	smpsAlterVol		$F1
00094D E6F1             	dc.b	$E6,$F1
00094F 8B80             	dc.b	pAKick, nRst
000951                  	smpsAlterVol		$0F
000951 E60F             	dc.b	$E6,$0F
000953 9380988006980280 	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06, pClosedHH, $02, nRst
00095B                  	smpsAlterVol		$F5
00095B E6F5             	dc.b	$E6,$F5
00095D 850101800283801E 	dc.b	pTomHi, $01, $01, nRst, $02, pSplashCymb, nRst, $1E

000965                  SOVA_SA_PWM2_Jump1:
000965                  	smpsAlterVol		$FC
000965 E6FC             	dc.b	$E6,$FC
000967 8B0280           	dc.b	pAKick, $02, nRst
00096A                  	smpsAlterVol		$0F
00096A E60F             	dc.b	$E6,$0F
00096C 9380             	dc.b	pBongoLo, nRst
00096E                  	smpsAlterVol		$F5
00096E E6F5             	dc.b	$E6,$F5
000970 8580             	dc.b	pTomHi, nRst
000972                  	smpsAlterVol		$0B
000972 E60B             	dc.b	$E6,$0B
000974 9980             	dc.b	pOpenHH, nRst
000976                  	smpsAlterVol		$F1
000976 E6F1             	dc.b	$E6,$F1
000978 8B8006           	dc.b	pAKick, nRst, $06
00097B                  	smpsAlterVol		$04
00097B E604             	dc.b	$E6,$04
00097D 850280           	dc.b	pTomHi, $02, nRst
000980                  	smpsAlterVol		$0B
000980 E60B             	dc.b	$E6,$0B
000982 9980             	dc.b	pOpenHH, nRst
000984                  	smpsAlterVol		$F1
000984 E6F1             	dc.b	$E6,$F1
000986 8B80             	dc.b	pAKick, nRst
000988                  	smpsAlterVol		$0F
000988 E60F             	dc.b	$E6,$0F
00098A 9980             	dc.b	pOpenHH, nRst
00098C                  	smpsAlterVol		$F5
00098C E6F5             	dc.b	$E6,$F5
00098E 8580             	dc.b	pTomHi, nRst
000990                  	smpsAlterVol		$0B
000990 E60B             	dc.b	$E6,$0B
000992 9380988006       	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06
000997                  	smpsAlterVol		$F5
000997 E6F5             	dc.b	$E6,$F5
000999 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
00099E                  	smpsAlterVol		$FC
00099E E6FC             	dc.b	$E6,$FC
0009A0 8B80             	dc.b	pAKick, nRst
0009A2                  	smpsAlterVol		$0F
0009A2 E60F             	dc.b	$E6,$0F
0009A4 9380             	dc.b	pBongoLo, nRst
0009A6                  	smpsAlterVol		$F5
0009A6 E6F5             	dc.b	$E6,$F5
0009A8 8580             	dc.b	pTomHi, nRst
0009AA                  	smpsAlterVol		$0B
0009AA E60B             	dc.b	$E6,$0B
0009AC 9380             	dc.b	pBongoLo, nRst
0009AE                  	smpsAlterVol		$F1
0009AE E6F1             	dc.b	$E6,$F1
0009B0 8B8006           	dc.b	pAKick, nRst, $06
0009B3                  	smpsAlterVol		$0F
0009B3 E60F             	dc.b	$E6,$0F
0009B5 9802809980988093 	dc.b	pClosedHH, $02, nRst, pOpenHH, nRst, pClosedHH, nRst, pBongoLo
0009BD 80               	dc.b	nRst
0009BE                  	smpsAlterVol		$F5
0009BE E6F5             	dc.b	$E6,$F5
0009C0 8580             	dc.b	pTomHi, nRst
0009C2                  	smpsAlterVol		$0B
0009C2 E60B             	dc.b	$E6,$0B
0009C4 9380988006       	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06
0009C9                  	smpsAlterVol		$F1
0009C9 E6F1             	dc.b	$E6,$F1
0009CB 8B0280           	dc.b	pAKick, $02, nRst
0009CE                  	smpsAlterVol		$04
0009CE E604             	dc.b	$E6,$04
0009D0 8580             	dc.b	pTomHi, nRst
0009D2                  	smpsAlterVol		$FC
0009D2 E6FC             	dc.b	$E6,$FC
0009D4 8B80             	dc.b	pAKick, nRst
0009D6                  	smpsAlterVol		$0F
0009D6 E60F             	dc.b	$E6,$0F
0009D8 9980             	dc.b	pOpenHH, nRst
0009DA                  	smpsAlterVol		$F5
0009DA E6F5             	dc.b	$E6,$F5
0009DC 8580             	dc.b	pTomHi, nRst
0009DE                  	smpsAlterVol		$0B
0009DE E60B             	dc.b	$E6,$0B
0009E0 9980988006       	dc.b	pOpenHH, nRst, pClosedHH, nRst, $06
0009E5                  	smpsAlterVol		$F5
0009E5 E6F5             	dc.b	$E6,$F5
0009E7 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
0009EC                  	smpsAlterVol		$0B
0009EC E60B             	dc.b	$E6,$0B
0009EE 9880998093809380 	dc.b	pClosedHH, nRst, pOpenHH, nRst, pBongoLo, nRst, pBongoLo, nRst
0009F6 988006           	dc.b	pClosedHH, nRst, $06
0009F9                  	smpsAlterVol		$F1
0009F9 E6F1             	dc.b	$E6,$F1
0009FB 8B0280           	dc.b	pAKick, $02, nRst
0009FE                  	smpsAlterVol		$04
0009FE E604             	dc.b	$E6,$04
000A00 8580             	dc.b	pTomHi, nRst
000A02                  	smpsAlterVol		$FC
000A02 E6FC             	dc.b	$E6,$FC
000A04 8B80             	dc.b	pAKick, nRst
000A06                  	smpsAlterVol		$0F
000A06 E60F             	dc.b	$E6,$0F
000A08 9980             	dc.b	pOpenHH, nRst
000A0A                  	smpsAlterVol		$F5
000A0A E6F5             	dc.b	$E6,$F5
000A0C 8580             	dc.b	pTomHi, nRst
000A0E                  	smpsAlterVol		$0B
000A0E E60B             	dc.b	$E6,$0B
000A10 9380988006980280 	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06, pClosedHH, $02, nRst
000A18 9980             	dc.b	pOpenHH, nRst
000A1A                  	smpsAlterVol		$F1
000A1A E6F1             	dc.b	$E6,$F1
000A1C 8B80             	dc.b	pAKick, nRst
000A1E                  	smpsAlterVol		$0F
000A1E E60F             	dc.b	$E6,$0F
000A20 998093809380     	dc.b	pOpenHH, nRst, pBongoLo, nRst, pBongoLo, nRst
000A26                  	smpsAlterVol		$F1
000A26 E6F1             	dc.b	$E6,$F1
000A28 8B8006           	dc.b	pAKick, nRst, $06
000A2B                  	smpsAlterVol		$04
000A2B E604             	dc.b	$E6,$04
000A2D 850280           	dc.b	pTomHi, $02, nRst
000A30                  	smpsAlterVol		$0B
000A30 E60B             	dc.b	$E6,$0B
000A32 99               	dc.b	pOpenHH

000A33                  SOVA_SA_PWM2_Loop2:
000A33 80               	dc.b	nRst
000A34                  	smpsAlterVol		$F1
000A34 E6F1             	dc.b	$E6,$F1
000A36 8B80             	dc.b	pAKick, nRst
000A38                  	smpsAlterVol		$0F
000A38 E60F             	dc.b	$E6,$0F
000A3A 93               	dc.b	pBongoLo
000A3B                  	smpsLoop		$00, $02, SOVA_SA_PWM2_Loop2, Target
000A3B F7               	dc.b	$F7
000A3C 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM2_Loop2<*)
000A3E                  		rom_ptr_z80(SOVA_SA_PWM2_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A3E 338A             	dc.w  (((((SOVA_SA_PWM2_Loop2+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A40 80988006         	dc.b	nRst, pClosedHH, nRst, $06
000A44                  	smpsAlterVol		$F5
000A44 E6F5             	dc.b	$E6,$F5
000A46 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
000A4B                  	smpsAlterVol		$0B
000A4B E60B             	dc.b	$E6,$0B
000A4D 98809980         	dc.b	pClosedHH, nRst, pOpenHH, nRst
000A51                  	smpsAlterVol		$F5
000A51 E6F5             	dc.b	$E6,$F5
000A53 8580             	dc.b	pTomHi, nRst
000A55                  	smpsAlterVol		$0B
000A55 E60B             	dc.b	$E6,$0B
000A57 9380             	dc.b	pBongoLo, nRst
000A59                  	smpsAlterVol		$F1
000A59 E6F1             	dc.b	$E6,$F1
000A5B 8B80068B0280     	dc.b	pAKick, nRst, $06, pAKick, $02, nRst
000A61                  	smpsAlterVol		$0F
000A61 E60F             	dc.b	$E6,$0F
000A63 998098809380     	dc.b	pOpenHH, nRst, pClosedHH, nRst, pBongoLo, nRst
000A69                  	smpsAlterVol		$F1
000A69 E6F1             	dc.b	$E6,$F1
000A6B 8B80             	dc.b	pAKick, nRst
000A6D                  	smpsAlterVol		$0F
000A6D E60F             	dc.b	$E6,$0F
000A6F 9980988006       	dc.b	pOpenHH, nRst, pClosedHH, nRst, $06
000A74                  	smpsAlterVol		$F5
000A74 E6F5             	dc.b	$E6,$F5
000A76 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
000A7B                  	smpsAlterVol		$FC
000A7B E6FC             	dc.b	$E6,$FC

000A7D                  SOVA_SA_PWM2_Loop3:
000A7D 8B80             	dc.b	pAKick, nRst
000A7F                  	smpsAlterVol		$0F
000A7F E60F             	dc.b	$E6,$0F
000A81 9380             	dc.b	pBongoLo, nRst
000A83                  	smpsAlterVol		$F1
000A83 E6F1             	dc.b	$E6,$F1
000A85                  	smpsLoop		$00, $02, SOVA_SA_PWM2_Loop3, Target
000A85 F7               	dc.b	$F7
000A86 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM2_Loop3<*)
000A88                  		rom_ptr_z80(SOVA_SA_PWM2_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A88 7D8A             	dc.w  (((((SOVA_SA_PWM2_Loop3+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A8A 8B8006           	dc.b	pAKick, nRst, $06
000A8D                  	smpsAlterVol		$04
000A8D E604             	dc.b	$E6,$04
000A8F 850280           	dc.b	pTomHi, $02, nRst
000A92                  	smpsAlterVol		$0B
000A92 E60B             	dc.b	$E6,$0B
000A94 998098809980     	dc.b	pOpenHH, nRst, pClosedHH, nRst, pOpenHH, nRst
000A9A                  	smpsAlterVol		$F1
000A9A E6F1             	dc.b	$E6,$F1
000A9C 8B80             	dc.b	pAKick, nRst
000A9E                  	smpsAlterVol		$0F
000A9E E60F             	dc.b	$E6,$0F
000AA0 9380             	dc.b	pBongoLo, nRst
000AA2                  	smpsAlterVol		$F1
000AA2 E6F1             	dc.b	$E6,$F1
000AA4 8B8006           	dc.b	pAKick, nRst, $06
000AA7                  	smpsAlterVol		$04
000AA7 E604             	dc.b	$E6,$04
000AA9 850280           	dc.b	pTomHi, $02, nRst
000AAC                  	smpsAlterVol		$0B
000AAC E60B             	dc.b	$E6,$0B
000AAE 9980             	dc.b	pOpenHH, nRst
000AB0                  	smpsAlterVol		$F1
000AB0 E6F1             	dc.b	$E6,$F1
000AB2 8B80             	dc.b	pAKick, nRst
000AB4                  	smpsAlterVol		$0F
000AB4 E60F             	dc.b	$E6,$0F
000AB6 9980938093809880 	dc.b	pOpenHH, nRst, pBongoLo, nRst, pBongoLo, nRst, pClosedHH, nRst
000ABE 06               	dc.b	$06
000ABF                  	smpsAlterVol		$F1
000ABF E6F1             	dc.b	$E6,$F1
000AC1 8B0280           	dc.b	pAKick, $02, nRst
000AC4                  	smpsAlterVol		$04
000AC4 E604             	dc.b	$E6,$04
000AC6 8580             	dc.b	pTomHi, nRst
000AC8                  	smpsAlterVol		$0B
000AC8 E60B             	dc.b	$E6,$0B
000ACA 9880998093809380 	dc.b	pClosedHH, nRst, pOpenHH, nRst, pBongoLo, nRst, pBongoLo, nRst
000AD2                  	smpsAlterVol		$F1
000AD2 E6F1             	dc.b	$E6,$F1
000AD4 8B8006           	dc.b	pAKick, nRst, $06
000AD7                  	smpsAlterVol		$0F
000AD7 E60F             	dc.b	$E6,$0F
000AD9 980280           	dc.b	pClosedHH, $02, nRst
000ADC                  	smpsAlterVol		$F5
000ADC E6F5             	dc.b	$E6,$F5
000ADE 850101800289801E 	dc.b	pTomHi, $01, $01, nRst, $02, pCrashCymb, nRst, $1E
000AE6                  	smpsAlterVol		$FC
000AE6 E6FC             	dc.b	$E6,$FC
000AE8 8B0280           	dc.b	pAKick, $02, nRst
000AEB                  	smpsAlterVol		$0F
000AEB E60F             	dc.b	$E6,$0F
000AED 9980             	dc.b	pOpenHH, nRst
000AEF                  	smpsAlterVol		$F1
000AEF E6F1             	dc.b	$E6,$F1
000AF1 8B80             	dc.b	pAKick, nRst
000AF3                  	smpsAlterVol		$0F
000AF3 E60F             	dc.b	$E6,$0F
000AF5 9380988006       	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06
000AFA                  	smpsAlterVol		$F5
000AFA E6F5             	dc.b	$E6,$F5
000AFC 850280           	dc.b	pTomHi, $02, nRst
000AFF                  	smpsAlterVol		$0B
000AFF E60B             	dc.b	$E6,$0B

000B01                  SOVA_SA_PWM2_Loop4:
000B01 9980             	dc.b	pOpenHH, nRst
000B03                  	smpsAlterVol		$F1
000B03 E6F1             	dc.b	$E6,$F1
000B05 8B80             	dc.b	pAKick, nRst
000B07                  	smpsAlterVol		$0F
000B07 E60F             	dc.b	$E6,$0F
000B09                  	smpsLoop		$00, $02, SOVA_SA_PWM2_Loop4, Target
000B09 F7               	dc.b	$F7
000B0A 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM2_Loop4<*)
000B0C                  		rom_ptr_z80(SOVA_SA_PWM2_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B0C 018B             	dc.w  (((((SOVA_SA_PWM2_Loop4+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B0E 9980             	dc.b	pOpenHH, nRst
000B10                  	smpsAlterVol		$F1
000B10 E6F1             	dc.b	$E6,$F1
000B12 8B8006           	dc.b	pAKick, nRst, $06
000B15                  	smpsAlterVol		$04
000B15 E604             	dc.b	$E6,$04
000B17 850280           	dc.b	pTomHi, $02, nRst
000B1A                  	smpsAlterVol		$0B
000B1A E60B             	dc.b	$E6,$0B
000B1C 998098809380     	dc.b	pOpenHH, nRst, pClosedHH, nRst, pBongoLo, nRst
000B22                  	smpsAlterVol		$F1
000B22 E6F1             	dc.b	$E6,$F1
000B24 8B80             	dc.b	pAKick, nRst
000B26                  	smpsAlterVol		$0F
000B26 E60F             	dc.b	$E6,$0F
000B28 9980             	dc.b	pOpenHH, nRst
000B2A                  	smpsAlterVol		$F1
000B2A E6F1             	dc.b	$E6,$F1
000B2C 8B8006           	dc.b	pAKick, nRst, $06
000B2F                  	smpsAlterVol		$0F
000B2F E60F             	dc.b	$E6,$0F
000B31 980280           	dc.b	pClosedHH, $02, nRst
000B34                  	smpsAlterVol		$F5
000B34 E6F5             	dc.b	$E6,$F5
000B36 8580             	dc.b	pTomHi, nRst
000B38                  	smpsAlterVol		$0B
000B38 E60B             	dc.b	$E6,$0B
000B3A 98809980         	dc.b	pClosedHH, nRst, pOpenHH, nRst
000B3E                  	smpsAlterVol		$F5
000B3E E6F5             	dc.b	$E6,$F5
000B40 8580             	dc.b	pTomHi, nRst
000B42                  	smpsAlterVol		$0B
000B42 E60B             	dc.b	$E6,$0B
000B44 9980988006       	dc.b	pOpenHH, nRst, pClosedHH, nRst, $06
000B49                  	smpsAlterVol		$F5
000B49 E6F5             	dc.b	$E6,$F5
000B4B 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
000B50                  	smpsAlterVol		$FC
000B50 E6FC             	dc.b	$E6,$FC
000B52 8B80             	dc.b	pAKick, nRst
000B54                  	smpsAlterVol		$0F
000B54 E60F             	dc.b	$E6,$0F
000B56 9380             	dc.b	pBongoLo, nRst
000B58                  	smpsAlterVol		$F5
000B58 E6F5             	dc.b	$E6,$F5
000B5A 8580             	dc.b	pTomHi, nRst
000B5C                  	smpsAlterVol		$0B
000B5C E60B             	dc.b	$E6,$0B
000B5E 9380988006980280 	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06, pClosedHH, $02, nRst
000B66                  	smpsAlterVol		$F5
000B66 E6F5             	dc.b	$E6,$F5
000B68 8580             	dc.b	pTomHi, nRst
000B6A                  	smpsAlterVol		$0B
000B6A E60B             	dc.b	$E6,$0B
000B6C 98809380         	dc.b	pClosedHH, nRst, pBongoLo, nRst
000B70                  	smpsAlterVol		$F5
000B70 E6F5             	dc.b	$E6,$F5
000B72 8580             	dc.b	pTomHi, nRst
000B74                  	smpsAlterVol		$0B
000B74 E60B             	dc.b	$E6,$0B
000B76 9380             	dc.b	pBongoLo, nRst
000B78                  	smpsAlterVol		$F1
000B78 E6F1             	dc.b	$E6,$F1
000B7A 8B80068B0280     	dc.b	pAKick, nRst, $06, pAKick, $02, nRst
000B80                  	smpsAlterVol		$0F
000B80 E60F             	dc.b	$E6,$0F
000B82 9980             	dc.b	pOpenHH, nRst
000B84                  	smpsAlterVol		$F1
000B84 E6F1             	dc.b	$E6,$F1
000B86 8B80             	dc.b	pAKick, nRst
000B88                  	smpsAlterVol		$0F
000B88 E60F             	dc.b	$E6,$0F
000B8A 9380             	dc.b	pBongoLo, nRst
000B8C                  	smpsAlterVol		$F5
000B8C E6F5             	dc.b	$E6,$F5
000B8E 8580             	dc.b	pTomHi, nRst
000B90                  	smpsAlterVol		$0B
000B90 E60B             	dc.b	$E6,$0B
000B92 9380             	dc.b	pBongoLo, nRst
000B94                  	smpsAlterVol		$F1
000B94 E6F1             	dc.b	$E6,$F1
000B96 8B8006           	dc.b	pAKick, nRst, $06
000B99                  	smpsAlterVol		$0F
000B99 E60F             	dc.b	$E6,$0F
000B9B 980280           	dc.b	pClosedHH, $02, nRst
000B9E                  	smpsAlterVol		$F5
000B9E E6F5             	dc.b	$E6,$F5
000BA0 8580             	dc.b	pTomHi, nRst
000BA2                  	smpsAlterVol		$0B
000BA2 E60B             	dc.b	$E6,$0B
000BA4 9880938093809380 	dc.b	pClosedHH, nRst, pBongoLo, nRst, pBongoLo, nRst, pBongoLo, nRst
000BAC                  	smpsAlterVol		$F1
000BAC E6F1             	dc.b	$E6,$F1
000BAE 8B8006           	dc.b	pAKick, nRst, $06
000BB1                  	smpsAlterVol		$0F
000BB1 E60F             	dc.b	$E6,$0F
000BB3 980280           	dc.b	pClosedHH, $02, nRst
000BB6                  	smpsAlterVol		$F5
000BB6 E6F5             	dc.b	$E6,$F5
000BB8 8580             	dc.b	pTomHi, nRst
000BBA                  	smpsAlterVol		$FC
000BBA E6FC             	dc.b	$E6,$FC
000BBC 8B80             	dc.b	pAKick, nRst
000BBE                  	smpsAlterVol		$0F
000BBE E60F             	dc.b	$E6,$0F
000BC0 9980             	dc.b	pOpenHH, nRst
000BC2                  	smpsAlterVol		$F5
000BC2 E6F5             	dc.b	$E6,$F5
000BC4 8580             	dc.b	pTomHi, nRst
000BC6                  	smpsAlterVol		$0B
000BC6 E60B             	dc.b	$E6,$0B

000BC8                  SOVA_SA_PWM2_Loop5:
000BC8 9980988006       	dc.b	pOpenHH, nRst, pClosedHH, nRst, $06
000BCD                  	smpsAlterVol		$F1
000BCD E6F1             	dc.b	$E6,$F1
000BCF 8B0280           	dc.b	pAKick, $02, nRst
000BD2                  	smpsAlterVol		$04
000BD2 E604             	dc.b	$E6,$04
000BD4 8580             	dc.b	pTomHi, nRst
000BD6                  	smpsAlterVol		$FC
000BD6 E6FC             	dc.b	$E6,$FC
000BD8 8B80             	dc.b	pAKick, nRst
000BDA                  	smpsAlterVol		$0F
000BDA E60F             	dc.b	$E6,$0F
000BDC 9380             	dc.b	pBongoLo, nRst
000BDE                  	smpsAlterVol		$F1
000BDE E6F1             	dc.b	$E6,$F1
000BE0 8B80             	dc.b	pAKick, nRst
000BE2                  	smpsAlterVol		$0F
000BE2 E60F             	dc.b	$E6,$0F
000BE4                  	smpsLoop		$00, $02, SOVA_SA_PWM2_Loop5, Target
000BE4 F7               	dc.b	$F7
000BE5 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM2_Loop5<*)
000BE7                  		rom_ptr_z80(SOVA_SA_PWM2_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BE7 C88B             	dc.w  (((((SOVA_SA_PWM2_Loop5+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BE9 9380988006       	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06
000BEE                  	smpsAlterVol		$F5
000BEE E6F5             	dc.b	$E6,$F5
000BF0 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
000BF5                  	smpsAlterVol		$0B
000BF5 E60B             	dc.b	$E6,$0B
000BF7 98809980         	dc.b	pClosedHH, nRst, pOpenHH, nRst
000BFB                  	smpsAlterVol		$F1
000BFB E6F1             	dc.b	$E6,$F1
000BFD 8B80             	dc.b	pAKick, nRst
000BFF                  	smpsAlterVol		$0F
000BFF E60F             	dc.b	$E6,$0F
000C01 9980988006       	dc.b	pOpenHH, nRst, pClosedHH, nRst, $06
000C06                  	smpsAlterVol		$F5
000C06 E6F5             	dc.b	$E6,$F5
000C08 850280           	dc.b	pTomHi, $02, nRst
000C0B                  	smpsAlterVol		$0B
000C0B E60B             	dc.b	$E6,$0B

000C0D                  SOVA_SA_PWM2_Loop6:
000C0D 9980             	dc.b	pOpenHH, nRst
000C0F                  	smpsAlterVol		$F1
000C0F E6F1             	dc.b	$E6,$F1
000C11 8B80             	dc.b	pAKick, nRst
000C13                  	smpsAlterVol		$0F
000C13 E60F             	dc.b	$E6,$0F
000C15                  	smpsLoop		$00, $02, SOVA_SA_PWM2_Loop6, Target
000C15 F7               	dc.b	$F7
000C16 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM2_Loop6<*)
000C18                  		rom_ptr_z80(SOVA_SA_PWM2_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C18 0D8C             	dc.w  (((((SOVA_SA_PWM2_Loop6+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C1A 9380988006       	dc.b	pBongoLo, nRst, pClosedHH, nRst, $06
000C1F                  	smpsAlterVol		$F5
000C1F E6F5             	dc.b	$E6,$F5
000C21 8502808580       	dc.b	pTomHi, $02, nRst, pTomHi, nRst
000C26                  	smpsAlterVol		$FC
000C26 E6FC             	dc.b	$E6,$FC
000C28 8B80             	dc.b	pAKick, nRst
000C2A                  	smpsAlterVol		$0F
000C2A E60F             	dc.b	$E6,$0F
000C2C 9980             	dc.b	pOpenHH, nRst
000C2E                  	smpsAlterVol		$F5
000C2E E6F5             	dc.b	$E6,$F5
000C30 8580             	dc.b	pTomHi, nRst
000C32                  	smpsAlterVol		$0B
000C32 E60B             	dc.b	$E6,$0B
000C34 9980             	dc.b	pOpenHH, nRst
000C36                  	smpsAlterVol		$F1
000C36 E6F1             	dc.b	$E6,$F1
000C38 8B80068B0280     	dc.b	pAKick, nRst, $06, pAKick, $02, nRst
000C3E                  	smpsAlterVol		$04
000C3E E604             	dc.b	$E6,$04
000C40 8580             	dc.b	pTomHi, nRst
000C42                  	smpsAlterVol		$0B
000C42 E60B             	dc.b	$E6,$0B
000C44 9880998093809980 	dc.b	pClosedHH, nRst, pOpenHH, nRst, pBongoLo, nRst, pOpenHH, nRst
000C4C                  	smpsAlterVol		$F1
000C4C E6F1             	dc.b	$E6,$F1
000C4E 8B8006           	dc.b	pAKick, nRst, $06
000C51                  	smpsAlterVol		$0F
000C51 E60F             	dc.b	$E6,$0F
000C53 9802809980       	dc.b	pClosedHH, $02, nRst, pOpenHH, nRst
000C58                  	smpsAlterVol		$F5
000C58 E6F5             	dc.b	$E6,$F5
000C5A 89801E           	dc.b	pCrashCymb, nRst, $1E
000C5D                  	smpsJump		SOVA_SA_PWM2_Jump1, Target
000C5D F6               	dc.b	$F6
                        	if (SOVA_SA_PWM2_Jump1<*)
000C5E                  		rom_ptr_z80(SOVA_SA_PWM2_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C5E 6589             	dc.w  (((((SOVA_SA_PWM2_Jump1+Target))<<8)&$FF00)|((((SOVA_SA_PWM2_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000C60                  SOVA_SA_PWM3:
000C60 801089028006     	dc.b	nRst, $10, pCrashCymb, $02, nRst, $06
000C66                  	smpsAlterVol		$0B
000C66 E60B             	dc.b	$E6,$0B

000C68                  SOVA_SA_PWM3_Loop1:
000C68 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000C6C                  	smpsLoop		$00, $07, SOVA_SA_PWM3_Loop1, Target
000C6C F7               	dc.b	$F7
000C6D 0007             	dc.b	$00,$07
                        	if (SOVA_SA_PWM3_Loop1<*)
000C6F                  		rom_ptr_z80(SOVA_SA_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C6F 688C             	dc.w  (((((SOVA_SA_PWM3_Loop1+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C71                  	smpsAlterVol		$F1
000C71 E6F1             	dc.b	$E6,$F1
000C73 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000C77                  	smpsAlterVol		$0F
000C77 E60F             	dc.b	$E6,$0F

000C79                  SOVA_SA_PWM3_Loop2:
000C79 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000C7D                  	smpsLoop		$00, $03, SOVA_SA_PWM3_Loop2, Target
000C7D F7               	dc.b	$F7
000C7E 0003             	dc.b	$00,$03
                        	if (SOVA_SA_PWM3_Loop2<*)
000C80                  		rom_ptr_z80(SOVA_SA_PWM3_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C80 798C             	dc.w  (((((SOVA_SA_PWM3_Loop2+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C82                  	smpsAlterVol		$F1
000C82 E6F1             	dc.b	$E6,$F1
000C84 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000C88                  	smpsAlterVol		$0F
000C88 E60F             	dc.b	$E6,$0F
000C8A 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000C8E                  	smpsAlterVol		$F1
000C8E E6F1             	dc.b	$E6,$F1
000C90 8B028006         	dc.b	pAKick, $02, nRst, $06
000C94                  	smpsAlterVol		$04
000C94 E604             	dc.b	$E6,$04
000C96 8501801F         	dc.b	pTomHi, $01, nRst, $1F

000C9A                  SOVA_SA_PWM3_Jump1:
000C9A 89028006         	dc.b	pCrashCymb, $02, nRst, $06
000C9E                  	smpsAlterVol		$0B
000C9E E60B             	dc.b	$E6,$0B

000CA0                  SOVA_SA_PWM3_Loop3:
000CA0 9302800E9802800E 	dc.b	pBongoLo, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000CA8                  	smpsLoop		$00, $02, SOVA_SA_PWM3_Loop3, Target
000CA8 F7               	dc.b	$F7
000CA9 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM3_Loop3<*)
000CAB                  		rom_ptr_z80(SOVA_SA_PWM3_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000CAB A08C             	dc.w  (((((SOVA_SA_PWM3_Loop3+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000CAD 9302800E         	dc.b	pBongoLo, $02, nRst, $0E
000CB1                  	smpsAlterVol		$F1
000CB1 E6F1             	dc.b	$E6,$F1
000CB3 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000CB7                  	smpsAlterVol		$0F
000CB7 E60F             	dc.b	$E6,$0F
000CB9 9302800E9802800E 	dc.b	pBongoLo, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000CC1 9302800E         	dc.b	pBongoLo, $02, nRst, $0E
000CC5                  	smpsAlterVol		$F1
000CC5 E6F1             	dc.b	$E6,$F1
000CC7 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000CCB                  	smpsAlterVol		$0F
000CCB E60F             	dc.b	$E6,$0F
000CCD 9802800E9802800E 	dc.b	pClosedHH, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000CD5                  	smpsAlterVol		$F1
000CD5 E6F1             	dc.b	$E6,$F1
000CD7 8B02800E8B02800E 	dc.b	pAKick, $02, nRst, $0E, pAKick, $02, nRst, $0E
000CDF                  	smpsAlterVol		$0F
000CDF E60F             	dc.b	$E6,$0F
000CE1 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000CE5                  	smpsAlterVol		$F1
000CE5 E6F1             	dc.b	$E6,$F1
000CE7 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000CEB                  	smpsAlterVol		$0F
000CEB E60F             	dc.b	$E6,$0F
000CED 9802800E9802800E 	dc.b	pClosedHH, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000CF5 9302             	dc.b	pBongoLo, $02

000CF7                  SOVA_SA_PWM3_Loop4:
000CF7 800E9802800E9802 	dc.b	nRst, $0E, pClosedHH, $02, nRst, $0E, pClosedHH, $02
000CFF 800E             	dc.b	nRst, $0E
000D01                  	smpsAlterVol		$F1
000D01 E6F1             	dc.b	$E6,$F1
000D03 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000D07                  	smpsAlterVol		$0F
000D07 E60F             	dc.b	$E6,$0F
000D09 9802             	dc.b	pClosedHH, $02
000D0B                  	smpsLoop		$00, $02, SOVA_SA_PWM3_Loop4, Target
000D0B F7               	dc.b	$F7
000D0C 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM3_Loop4<*)
000D0E                  		rom_ptr_z80(SOVA_SA_PWM3_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D0E F78C             	dc.w  (((((SOVA_SA_PWM3_Loop4+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D10 800E9802800E9802 	dc.b	nRst, $0E, pClosedHH, $02, nRst, $0E, pClosedHH, $02
000D18 800E             	dc.b	nRst, $0E
000D1A                  	smpsAlterVol		$F1
000D1A E6F1             	dc.b	$E6,$F1
000D1C 8B028006         	dc.b	pAKick, $02, nRst, $06
000D20                  	smpsAlterVol		$04
000D20 E604             	dc.b	$E6,$04
000D22 8302801E89028006 	dc.b	pSplashCymb, $02, nRst, $1E, pCrashCymb, $02, nRst, $06
000D2A                  	smpsAlterVol		$0B
000D2A E60B             	dc.b	$E6,$0B

000D2C                  SOVA_SA_PWM3_Loop5:
000D2C 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000D30                  	smpsLoop		$00, $05, SOVA_SA_PWM3_Loop5, Target
000D30 F7               	dc.b	$F7
000D31 0005             	dc.b	$00,$05
                        	if (SOVA_SA_PWM3_Loop5<*)
000D33                  		rom_ptr_z80(SOVA_SA_PWM3_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D33 2C8D             	dc.w  (((((SOVA_SA_PWM3_Loop5+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D35                  	smpsAlterVol		$F1
000D35 E6F1             	dc.b	$E6,$F1
000D37 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000D3B                  	smpsAlterVol		$0F
000D3B E60F             	dc.b	$E6,$0F
000D3D 9302800E9802800E 	dc.b	pBongoLo, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000D45 9302             	dc.b	pBongoLo, $02

000D47                  SOVA_SA_PWM3_Loop6:
000D47 800E             	dc.b	nRst, $0E
000D49                  	smpsAlterVol		$F1
000D49 E6F1             	dc.b	$E6,$F1
000D4B 8B02800E8B02800E 	dc.b	pAKick, $02, nRst, $0E, pAKick, $02, nRst, $0E
000D53                  	smpsAlterVol		$0F
000D53 E60F             	dc.b	$E6,$0F
000D55 9802             	dc.b	pClosedHH, $02
000D57                  	smpsLoop		$00, $02, SOVA_SA_PWM3_Loop6, Target
000D57 F7               	dc.b	$F7
000D58 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM3_Loop6<*)
000D5A                  		rom_ptr_z80(SOVA_SA_PWM3_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D5A 478D             	dc.w  (((((SOVA_SA_PWM3_Loop6+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D5C 800E             	dc.b	nRst, $0E
000D5E                  	smpsAlterVol		$F1
000D5E E6F1             	dc.b	$E6,$F1
000D60 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000D64                  	smpsAlterVol		$0F
000D64 E60F             	dc.b	$E6,$0F
000D66 9302             	dc.b	pBongoLo, $02

000D68                  SOVA_SA_PWM3_Loop7:
000D68 800E9802         	dc.b	nRst, $0E, pClosedHH, $02
000D6C                  	smpsLoop		$00, $04, SOVA_SA_PWM3_Loop7, Target
000D6C F7               	dc.b	$F7
000D6D 0004             	dc.b	$00,$04
                        	if (SOVA_SA_PWM3_Loop7<*)
000D6F                  		rom_ptr_z80(SOVA_SA_PWM3_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D6F 688D             	dc.w  (((((SOVA_SA_PWM3_Loop7+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D71 800E             	dc.b	nRst, $0E
000D73                  	smpsAlterVol		$F1
000D73 E6F1             	dc.b	$E6,$F1
000D75 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000D79                  	smpsAlterVol		$0F
000D79 E60F             	dc.b	$E6,$0F

000D7B                  SOVA_SA_PWM3_Loo$8:
000D7B 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000D7F                  	smpsLoop		$00, $03, SOVA_SA_PWM3_Loo$8, Target
000D7F F7               	dc.b	$F7
000D80 0003             	dc.b	$00,$03
                        	if (SOVA_SA_PWM3_Loo$8<*)
000D82                  		rom_ptr_z80(SOVA_SA_PWM3_Loo$8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D82 7B8D             	dc.w  (((((SOVA_SA_PWM3_Loo$8+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Loo$8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D84                  	smpsAlterVol		$F1
000D84 E6F1             	dc.b	$E6,$F1
000D86 8B02800E8B02800E 	dc.b	pAKick, $02, nRst, $0E, pAKick, $02, nRst, $0E
000D8E                  	smpsAlterVol		$0F
000D8E E60F             	dc.b	$E6,$0F
000D90 9802800E9802800E 	dc.b	pClosedHH, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000D98                  	smpsAlterVol		$F1
000D98 E6F1             	dc.b	$E6,$F1
000D9A 8B028006         	dc.b	pAKick, $02, nRst, $06
000D9E                  	smpsAlterVol		$04
000D9E E604             	dc.b	$E6,$04
000DA0 8302801E         	dc.b	pSplashCymb, $02, nRst, $1E
000DA4                  	smpsJump		SOVA_SA_PWM3_Jump1, Target
000DA4 F6               	dc.b	$F6
                        	if (SOVA_SA_PWM3_Jump1<*)
000DA5                  		rom_ptr_z80(SOVA_SA_PWM3_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000DA5 9A8C             	dc.w  (((((SOVA_SA_PWM3_Jump1+Target))<<8)&$FF00)|((((SOVA_SA_PWM3_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000DA7                  SOVA_SA_PWM4:
000DA7 801083028006     	dc.b	nRst, $10, pSplashCymb, $02, nRst, $06
000DAD                  	smpsAlterVol		$0B
000DAD E60B             	dc.b	$E6,$0B

000DAF                  SOVA_SA_PWM4_Loop1:
000DAF 9302801E         	dc.b	pBongoLo, $02, nRst, $1E
000DB3                  	smpsAlterVol		$F1
000DB3 E6F1             	dc.b	$E6,$F1
000DB5 8B02801E         	dc.b	pAKick, $02, nRst, $1E
000DB9                  	smpsAlterVol		$0F
000DB9 E60F             	dc.b	$E6,$0F
000DBB 9302801E         	dc.b	pBongoLo, $02, nRst, $1E
000DBF                  	smpsLoop		$00, $02, SOVA_SA_PWM4_Loop1, Target
000DBF F7               	dc.b	$F7
000DC0 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM4_Loop1<*)
000DC2                  		rom_ptr_z80(SOVA_SA_PWM4_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000DC2 AF8D             	dc.w  (((((SOVA_SA_PWM4_Loop1+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000DC4 93028036         	dc.b	pBongoLo, $02, nRst, $36

000DC8                  SOVA_SA_PWM4_Jump1:
000DC8                  	smpsAlterVol		$F5
000DC8 E6F5             	dc.b	$E6,$F5
000DCA 83028006         	dc.b	pSplashCymb, $02, nRst, $06
000DCE                  	smpsAlterVol		$0B
000DCE E60B             	dc.b	$E6,$0B

000DD0                  SOVA_SA_PWM4_Loop2:
000DD0 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000DD4                  	smpsAlterVol		$F1
000DD4 E6F1             	dc.b	$E6,$F1
000DD6 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000DDA                  	smpsAlterVol		$0F
000DDA E60F             	dc.b	$E6,$0F
000DDC                  	smpsLoop		$00, $02, SOVA_SA_PWM4_Loop2, Target
000DDC F7               	dc.b	$F7
000DDD 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM4_Loop2<*)
000DDF                  		rom_ptr_z80(SOVA_SA_PWM4_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000DDF D08D             	dc.w  (((((SOVA_SA_PWM4_Loop2+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000DE1                  SOVA_SA_PWM4_Loop3:
000DE1 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000DE5                  	smpsAlterVol		$F5
000DE5 E6F5             	dc.b	$E6,$F5
000DE7 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000DEB                  	smpsAlterVol		$0B
000DEB E60B             	dc.b	$E6,$0B
000DED                  	smpsLoop		$00, $02, SOVA_SA_PWM4_Loop3, Target
000DED F7               	dc.b	$F7
000DEE 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM4_Loop3<*)
000DF0                  		rom_ptr_z80(SOVA_SA_PWM4_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000DF0 E18D             	dc.w  (((((SOVA_SA_PWM4_Loop3+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000DF2 9802800E9802800E 	dc.b	pClosedHH, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000DFA                  	smpsAlterVol		$F1
000DFA E6F1             	dc.b	$E6,$F1
000DFC 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E00                  	smpsAlterVol		$04
000E00 E604             	dc.b	$E6,$04
000E02 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000E06                  	smpsAlterVol		$0B
000E06 E60B             	dc.b	$E6,$0B
000E08 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000E0C                  	smpsAlterVol		$F5
000E0C E6F5             	dc.b	$E6,$F5
000E0E 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000E12                  	smpsAlterVol		$FC
000E12 E6FC             	dc.b	$E6,$FC
000E14 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E18                  	smpsAlterVol		$0F
000E18 E60F             	dc.b	$E6,$0F
000E1A 9802800E9302800E 	dc.b	pClosedHH, $02, nRst, $0E, pBongoLo, $02, nRst, $0E
000E22                  	smpsAlterVol		$F1
000E22 E6F1             	dc.b	$E6,$F1
000E24 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E28                  	smpsAlterVol		$0F
000E28 E60F             	dc.b	$E6,$0F
000E2A 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000E2E                  	smpsAlterVol		$F5
000E2E E6F5             	dc.b	$E6,$F5
000E30 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000E34                  	smpsAlterVol		$0B
000E34 E60B             	dc.b	$E6,$0B
000E36 9302800E9802800E 	dc.b	pBongoLo, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000E3E 9302800E         	dc.b	pBongoLo, $02, nRst, $0E
000E42                  	smpsAlterVol		$F1
000E42 E6F1             	dc.b	$E6,$F1
000E44 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E48                  	smpsAlterVol		$0F
000E48 E60F             	dc.b	$E6,$0F
000E4A 9302800E9802800E 	dc.b	pBongoLo, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000E52                  	smpsAlterVol		$F1
000E52 E6F1             	dc.b	$E6,$F1
000E54 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E58                  	smpsAlterVol		$04
000E58 E604             	dc.b	$E6,$04
000E5A 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000E5E                  	smpsAlterVol		$FC
000E5E E6FC             	dc.b	$E6,$FC
000E60 8B028016         	dc.b	pAKick, $02, nRst, $16
000E64                  	smpsAlterVol		$04
000E64 E604             	dc.b	$E6,$04
000E66 8501801F83028006 	dc.b	pTomHi, $01, nRst, $1F, pSplashCymb, $02, nRst, $06
000E6E                  	smpsAlterVol		$0B
000E6E E60B             	dc.b	$E6,$0B

000E70                  SOVA_SA_PWM4_Loop4:
000E70 9302800E         	dc.b	pBongoLo, $02, nRst, $0E
000E74                  	smpsAlterVol		$F1
000E74 E6F1             	dc.b	$E6,$F1
000E76 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E7A                  	smpsAlterVol		$0F
000E7A E60F             	dc.b	$E6,$0F
000E7C                  	smpsLoop		$00, $02, SOVA_SA_PWM4_Loop4, Target
000E7C F7               	dc.b	$F7
000E7D 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM4_Loop4<*)
000E7F                  		rom_ptr_z80(SOVA_SA_PWM4_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000E7F 708E             	dc.w  (((((SOVA_SA_PWM4_Loop4+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000E81 9302800E         	dc.b	pBongoLo, $02, nRst, $0E
000E85                  	smpsAlterVol		$F5
000E85 E6F5             	dc.b	$E6,$F5
000E87 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000E8B                  	smpsAlterVol		$0B
000E8B E60B             	dc.b	$E6,$0B
000E8D 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000E91                  	smpsAlterVol		$F1
000E91 E6F1             	dc.b	$E6,$F1
000E93 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000E97                  	smpsAlterVol		$0F
000E97 E60F             	dc.b	$E6,$0F

000E99                  SOVA_SA_PWM4_Loop5:
000E99 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000E9D                  	smpsAlterVol		$F5
000E9D E6F5             	dc.b	$E6,$F5
000E9F 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000EA3                  	smpsAlterVol		$0B
000EA3 E60B             	dc.b	$E6,$0B
000EA5                  	smpsLoop		$00, $02, SOVA_SA_PWM4_Loop5, Target
000EA5 F7               	dc.b	$F7
000EA6 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM4_Loop5<*)
000EA8                  		rom_ptr_z80(SOVA_SA_PWM4_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000EA8 998E             	dc.w  (((((SOVA_SA_PWM4_Loop5+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000EAA 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000EAE                  	smpsAlterVol		$F5
000EAE E6F5             	dc.b	$E6,$F5
000EB0 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000EB4                  	smpsAlterVol		$FC
000EB4 E6FC             	dc.b	$E6,$FC
000EB6 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000EBA                  	smpsAlterVol		$04
000EBA E604             	dc.b	$E6,$04
000EBC 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000EC0                  	smpsAlterVol		$0B
000EC0 E60B             	dc.b	$E6,$0B
000EC2 9802             	dc.b	pClosedHH, $02

000EC4                  SOVA_SA_PWM4_Loop6:
000EC4 800E             	dc.b	nRst, $0E
000EC6                  	smpsAlterVol		$F5
000EC6 E6F5             	dc.b	$E6,$F5
000EC8 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000ECC                  	smpsAlterVol		$0B
000ECC E60B             	dc.b	$E6,$0B
000ECE 9302             	dc.b	pBongoLo, $02
000ED0                  	smpsLoop		$00, $02, SOVA_SA_PWM4_Loop6, Target
000ED0 F7               	dc.b	$F7
000ED1 0002             	dc.b	$00,$02
                        	if (SOVA_SA_PWM4_Loop6<*)
000ED3                  		rom_ptr_z80(SOVA_SA_PWM4_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000ED3 C48E             	dc.w  (((((SOVA_SA_PWM4_Loop6+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000ED5 800E9802800E9302 	dc.b	nRst, $0E, pClosedHH, $02, nRst, $0E, pBongoLo, $02
000EDD 800E             	dc.b	nRst, $0E
000EDF                  	smpsAlterVol		$F1
000EDF E6F1             	dc.b	$E6,$F1
000EE1 8B02800E         	dc.b	pAKick, $02, nRst, $0E
000EE5                  	smpsAlterVol		$0F
000EE5 E60F             	dc.b	$E6,$0F
000EE7 9302800E9802800E 	dc.b	pBongoLo, $02, nRst, $0E, pClosedHH, $02, nRst, $0E
000EEF 9802800E         	dc.b	pClosedHH, $02, nRst, $0E
000EF3                  	smpsAlterVol		$F5
000EF3 E6F5             	dc.b	$E6,$F5
000EF5 8502800E         	dc.b	pTomHi, $02, nRst, $0E
000EF9                  	smpsAlterVol		$FC
000EF9 E6FC             	dc.b	$E6,$FC
000EFB 8B028016         	dc.b	pAKick, $02, nRst, $16
000EFF                  	smpsAlterVol		$04
000EFF E604             	dc.b	$E6,$04
000F01 8501801F         	dc.b	pTomHi, $01, nRst, $1F
000F05                  	smpsAlterVol		$0B
000F05 E60B             	dc.b	$E6,$0B
000F07                  	smpsJump		SOVA_SA_PWM4_Jump1, Target
000F07 F6               	dc.b	$F6
                        	if (SOVA_SA_PWM4_Jump1<*)
000F08                  		rom_ptr_z80(SOVA_SA_PWM4_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000F08 C88D             	dc.w  (((((SOVA_SA_PWM4_Jump1+Target))<<8)&$FF00)|((((SOVA_SA_PWM4_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000F0A                  SOVA_SA_Patches:
                        	;Voice $00 Soprano Sax
000F0A 2A               	dc.b	$2A
000F0B 01080604531F1F50 	dc.b	$01, $08, $06, $04,	$53, $1F, $1F, $50
000F13 1214111F00000000 	dc.b	$12, $14, $11, $1F,	$00, $00, $00, $00
000F1B 2915360B17331C80 	dc.b	$29, $15, $36, $0B,	$17, $33, $1C, $80
                        	
                        	;Voice $01 Reverse Cymbal
000F23 3D               	dc.b	$3D
000F24 0F04000008074607 	dc.b	$0F, $04, $00, $00,	$08, $07, $46, $07
000F2C 00001205000F0F0F 	dc.b	$00, $00, $12, $05,	$00, $0F, $0F, $0F
000F34 000D470700838383 	dc.b	$00, $0D, $47, $07,	$00, $83, $83, $83
                        	
                        	;Voice $02 Lead 2 Sawtooth
000F3C 38               	dc.b	$38
000F3D 75137111D1521414 	dc.b	$75, $13, $71, $11,	$D1, $52, $14, $14
000F45 0A07010100000000 	dc.b	$0A, $07, $01, $01,	$00, $00, $00, $00
000F4D F0F0F0FC1E1E1E80 	dc.b	$F0, $F0, $F0, $FC,	$1E, $1E, $1E, $80
                        	
                        	;Voice $03 Electric Guitar (Clean)
000F55 39               	dc.b	$39
000F56 032261211F121F1F 	dc.b	$03, $22, $61, $21,	$1F, $12, $1F, $1F
000F5E 0505050B00000008 	dc.b	$05, $05, $05, $0B,	$00, $00, $00, $08
000F66 101810181E151D80 	dc.b	$10, $18, $10, $18,	$1E, $15, $1D, $80

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  FMPITCH            00000000 E
FMVOI0_SOPSAX      00000000 E  FMVOI1_REVCYMB     00000001 E  FMVOI2_LEAD2SAW    00000002 E
FMVOI3_EGITCLN     00000003 E  MOD1               01010405 E  MOD2               01020206 E
NA0                0000008A E  NA1                00000096 E  NA2                000000A2 E
NA3                000000AE E  NA4                000000BA E  NA5                000000C6 E
NA6                000000D2 E  NA7                000000DE E  NAB0               00000089 E
NAB1               00000095 E  NAB2               000000A1 E  NAB3               000000AD E
NAB4               000000B9 E  NAB5               000000C5 E  NAB6               000000D1 E
NAB7               000000DD E  NB0                0000008C E  NB1                00000098 E
NB2                000000A4 E  NB3                000000B0 E  NB4                000000BC E
NB5                000000C8 E  NB6                000000D4 E  NBB0               0000008B E
NBB1               00000097 E  NBB2               000000A3 E  NBB3               000000AF E
NBB4               000000BB E  NBB5               000000C7 E  NBB6               000000D3 E
NBB7               000000DF E  NC0                00000081 E  NC1                0000008D E
NC2                00000099 E  NC3                000000A5 E  NC4                000000B1 E
NC5                000000BD E  NC6                000000C9 E  NC7                000000D5 E
NCS0               00000082 E  NCS1               0000008E E  NCS2               0000009A E
NCS3               000000A6 E  NCS4               000000B2 E  NCS5               000000BE E
NCS6               000000CA E  NCS7               000000D6 E  ND0                00000083 E
ND1                0000008F E  ND2                0000009B E  ND3                000000A7 E
ND4                000000B3 E  ND5                000000BF E  ND6                000000CB E
ND7                000000D7 E  NE0                00000085 E  NE1                00000091 E
NE2                0000009D E  NE3                000000A9 E  NE4                000000B5 E
NE5                000000C1 E  NE6                000000CD E  NE7                000000D9 E
NEB0               00000084 E  NEB1               00000090 E  NEB2               0000009C E
NEB3               000000A8 E  NEB4               000000B4 E  NEB5               000000C0 E
NEB6               000000CC E  NEB7               000000D8 E  NF0                00000086 E
NF1                00000092 E  NF2                0000009E E  NF3                000000AA E
NF4                000000B6 E  NF5                000000C2 E  NF6                000000CE E
NF7                000000DA E  NFS0               00000087 E  NFS1               00000093 E
NFS2               0000009F E  NFS3               000000AB E  NFS4               000000B7 E
NFS5               000000C3 E  NFS6               000000CF E  NFS7               000000DB E
NG0                00000088 E  NG1                00000094 E  NG2                000000A0 E
NG3                000000AC E  NG4                000000B8 E  NG5                000000C4 E
NG6                000000D0 E  NG7                000000DC E  NRST               00000080 E
PAKICK             0000008B E  PANCENTER          000000C0 S  PANCENTRE          000000C0 S
PANLEFT            00000080 S  PANNONE            00000000 S  PANRIGHT           00000040 S
PASNARE            0000008C E  PBELL              0000008D E  PBONGOHI           00000092 E
PBONGOLO           00000093 E  PCLAP              0000008A E  PCLICKHI           00000090 E
PCLICKLO           00000091 E  PCLOSEDHH          00000098 E  PCOWBELL           0000008F E
PCRASHCYMB         00000089 E  PCRA_D81           00000081 E  PCRA_D82           0000008C E
PCRA_D83           00000085 E  PCRA_D84           00000086 E  PCRA_D85           00000087 E
PEHIHAT            00000088 E  PEKICK             00000081 E  PESNARE            00000082 E
PFINGSNAP          0000008E E  PFINGSNAPHI        0000008E E  PFINGSNAPLO        0000009E E
PNEPDADA           0000009D E  POPENHH            00000099 E  PORCHHITHI         0000009F E
PORCHHITLO         000000A1 E  PORCHHITLOWER      000000A2 E  PORCHHITMED        000000A0 E
PRIDEBELL          00000084 E  PSEGA              00000097 E  PSGDELTA           0000000C E
PSGMOD             00000000 E  PSGVOI1            00000008 E  PSGVOI2            00000000 E
PSGVOL             00000005 E  PSGVOL2            00000007 E  PSILENCE           00000096 E
PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E
PTOMHI             00000085 E  PTOMLOW            00000087 E  PTOMLOWER          0000009A E
PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E  PTOMMID            00000086 E
PWMPITCH           00000000 E  PWMVOL             00000055 E  SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  SOVA_SA_FM1        00000040
SOVA_SA_FM2        000000D0    SOVA_SA_FM3        00000177    SOVA_SA_FM4        000001D8
SOVA_SA_FM5        00000257    SOVA_SA_FM6        00000291    SOVA_SA_JUMP1      00000056
SOVA_SA_JUMP2      000000F1    SOVA_SA_JUMP3      0000018E    SOVA_SA_JUMP4      000001E9
SOVA_SA_JUMP5      00000273    SOVA_SA_JUMP6      000002AC    SOVA_SA_JUMP7      00000329
SOVA_SA_JUMP8      000003B0    SOVA_SA_LOOP1      00000046    SOVA_SA_LOOP10     0000025F
SOVA_SA_LOOP11     00000297    SOVA_SA_LOOP12     000002D6    SOVA_SA_LOOP13     000002DE
SOVA_SA_LOOP14     000002E5    SOVA_SA_LOOP15     000002EC    SOVA_SA_LOOP16     000002F8
SOVA_SA_LOOP17     000002FF    SOVA_SA_LOOP18     00000306    SOVA_SA_LOOP19     00000319
SOVA_SA_LOOP2      00000048    SOVA_SA_LOOP20     0000031B    SOVA_SA_LOOP21     00000330
SOVA_SA_LOOP22     0000036A    SOVA_SA_LOOP3      0000005D    SOVA_SA_LOOP4      00000097
SOVA_SA_LOOP5      000000D6    SOVA_SA_LOOP6      000000F3    SOVA_SA_LOOP7      00000103
SOVA_SA_LOOP8      0000013E    SOVA_SA_LOOP9      00000188    SOVA_SA_PATCHES    00000F0A
SOVA_SA_PSG1       000002CB    SOVA_SA_PSG2       00000317    SOVA_SA_PSG3       000003A3
SOVA_SA_PWM1       0000041E    SOVA_SA_PWM1_JUMP1 000004E8    SOVA_SA_PWM1_LOOP1 0000042E
SOVA_SA_PWM1_LOOP2 000004D8    SOVA_SA_PWM1_LOOP3 000006D1    SOVA_SA_PWM1_LOOP4 000007DD
SOVA_SA_PWM1_LOOP5 000008AA    SOVA_SA_PWM2       000008BF    SOVA_SA_PWM2_JUMP1 00000965
SOVA_SA_PWM2_LOOP1 000008ED    SOVA_SA_PWM2_LOOP2 00000A33    SOVA_SA_PWM2_LOOP3 00000A7D
SOVA_SA_PWM2_LOOP4 00000B01    SOVA_SA_PWM2_LOOP5 00000BC8    SOVA_SA_PWM2_LOOP6 00000C0D
SOVA_SA_PWM3       00000C60    SOVA_SA_PWM3_JUMP1 00000C9A    SOVA_SA_PWM3_LOO$8 00000D7B
SOVA_SA_PWM3_LOOP1 00000C68    SOVA_SA_PWM3_LOOP2 00000C79    SOVA_SA_PWM3_LOOP3 00000CA0
SOVA_SA_PWM3_LOOP4 00000CF7    SOVA_SA_PWM3_LOOP5 00000D2C    SOVA_SA_PWM3_LOOP6 00000D47
SOVA_SA_PWM3_LOOP7 00000D68    SOVA_SA_PWM4       00000DA7    SOVA_SA_PWM4_JUMP1 00000DC8
SOVA_SA_PWM4_LOOP1 00000DAF    SOVA_SA_PWM4_LOOP2 00000DD0    SOVA_SA_PWM4_LOOP3 00000DE1
SOVA_SA_PWM4_LOOP4 00000E70    SOVA_SA_PWM4_LOOP5 00000E99    SOVA_SA_PWM4_LOOP6 00000EC4
TARGET             00040000 E
