                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E
       = 00009F         pOrchHitHi		EQU	$9F
       = 0000A0         pOrchHitMed		EQU	$A0
       = 0000A1         pOrchHitLo		EQU	$A1
       = 0000A2         pOrchHitLower	EQU	$A2

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	if \0==4
                        		dc.b	volL
                        	else
                        		dc.b	(volL<<4)+volR
                        	endif	
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000000         FMPitch		EQU	$00

       = 00000C         PSGPitch	EQU	PSGDelta
       = 000000         PSGMod		EQU	$00
       = 000002         PSGVol1		EQU	$02
       = 000003         PSGVol2		EQU	PSGVol1+$01
       = 000000         PSGVoi		EQU $00

       = 000000         PWMPitch1	EQU $00
       = 000018         PWMPitch2	EQU	$02*PSGDelta
       = 0000AA         PWMVol		EQU	$AA
000000                  	smpsHeaderVoice		Elegy_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(Elegy_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 AC8C             	dc.w  (((((Elegy_Patches+Target))<<8)&$FF00)|((((Elegy_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $09
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($09)
                        		if ($09)==0
                        		else
000005 1C               			dc.b	((256 - ((((($09))-1)*256 + ((($09))/2)) / (($09)))) % 256)
                        		endif
000006                  	smpsHeaderFM		Elegy_FM1, Target, FMPitch, $1F
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(Elegy_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((Elegy_FM1+Target))<<8)&$FF00)|((((Elegy_FM1+Target))>>8)&$7F)|$80)
000008 001F             	dc.b	FMPitch,$1F
00000A                  	smpsHeaderFM		Elegy_FM2, Target, FMPitch, $24
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(Elegy_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A BA81             	dc.w  (((((Elegy_FM2+Target))<<8)&$FF00)|((((Elegy_FM2+Target))>>8)&$7F)|$80)
00000C 0024             	dc.b	FMPitch,$24
00000E                  	smpsHeaderFM		Elegy_FM3, Target, FMPitch, $15
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(Elegy_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 3483             	dc.w  (((((Elegy_FM3+Target))<<8)&$FF00)|((((Elegy_FM3+Target))>>8)&$7F)|$80)
000010 0015             	dc.b	FMPitch,$15
000012                  	smpsHeaderFM		Elegy_FM4, Target, FMPitch, $17
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(Elegy_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 7485             	dc.w  (((((Elegy_FM4+Target))<<8)&$FF00)|((((Elegy_FM4+Target))>>8)&$7F)|$80)
000014 0017             	dc.b	FMPitch,$17
000016                  	smpsHeaderFM		Elegy_FM5, Target, FMPitch, $17
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(Elegy_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 CF86             	dc.w  (((((Elegy_FM5+Target))<<8)&$FF00)|((((Elegy_FM5+Target))>>8)&$7F)|$80)
000018 0017             	dc.b	FMPitch,$17
00001A                  	smpsHeaderFM		Elegy_FM6, Target, FMPitch, $16
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(Elegy_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A CF86             	dc.w  (((((Elegy_FM6+Target))<<8)&$FF00)|((((Elegy_FM6+Target))>>8)&$7F)|$80)
00001C 0016             	dc.b	FMPitch,$16
                        	;!@ smpsHeaderPSG		Elegy_PSG1, Target, $00, $06, $00, $00
                        	;!@ smpsHeaderPSG		Elegy_PSG2, Target, $00, $06, $00, $00
                        	;!@ smpsHeaderPSG		Elegy_PSG3, Target, $00, $07, $00, $00
00001E                  	smpsHeaderPSG		Elegy_PSG1, Target, PSGPitch, PSGVol1, PSGMod, PSGVoi
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(Elegy_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E D086             	dc.w  (((((Elegy_PSG1+Target))<<8)&$FF00)|((((Elegy_PSG1+Target))>>8)&$7F)|$80)
000020 0C02             	dc.b	PSGPitch,PSGVol1
                        	;dc.w	voice
000022 0000             	dc.b	PSGMod,PSGVoi
000024                  	smpsHeaderPSG		Elegy_PSG2, Target, PSGPitch, PSGVol1, PSGMod, PSGVoi
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(Elegy_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 EC88             	dc.w  (((((Elegy_PSG2+Target))<<8)&$FF00)|((((Elegy_PSG2+Target))>>8)&$7F)|$80)
000026 0C02             	dc.b	PSGPitch,PSGVol1
                        	;dc.w	voice
000028 0000             	dc.b	PSGMod,PSGVoi
00002A                  	smpsHeaderPSG		Elegy_PSG3, Target, PSGPitch, PSGVol2, PSGMod, PSGVoi
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(Elegy_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 048A             	dc.w  (((((Elegy_PSG3+Target))<<8)&$FF00)|((((Elegy_PSG3+Target))>>8)&$7F)|$80)
00002C 0C03             	dc.b	PSGPitch,PSGVol2
                        	;dc.w	voice
00002E 0000             	dc.b	PSGMod,PSGVoi
000030                  	smpsHeaderPWM		Elegy_PWM1, Target, PWMPitch1, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(Elegy_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 218B             	dc.w  (((((Elegy_PWM1+Target))<<8)&$FF00)|((((Elegy_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch1
                        	if 4==4
000033 AA               		dc.b	PWMVol
                        	else
                        	endif	
000034                  	smpsHeaderPWM		Elegy_PWM2, Target, PWMPitch1, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(Elegy_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 728B             	dc.w  (((((Elegy_PWM2+Target))<<8)&$FF00)|((((Elegy_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch1
                        	if 4==4
000037 AA               		dc.b	PWMVol
                        	else
                        	endif	
000038                  	smpsHeaderPWM		Elegy_PWM3, Target, PWMPitch1, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(Elegy_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 F68B             	dc.w  (((((Elegy_PWM3+Target))<<8)&$FF00)|((((Elegy_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch1
                        	if 4==4
00003B AA               		dc.b	PWMVol
                        	else
                        	endif	
00003C                  	smpsHeaderPWM		Elegy_PWM4, Target, PWMPitch2, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(Elegy_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 348C             	dc.w  (((((Elegy_PWM4+Target))<<8)&$FF00)|((((Elegy_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 18               	dc.b	PWMPitch2
                        	if 4==4
00003F AA               		dc.b	PWMVol
                        	else
                        	endif	

000040                  Elegy_FM1:
000040                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E0C0             		dc.b $E0,panCenter
                        	endif
000042                  	smpsAlterNote	$02
000042 E102             	dc.b	$E1,$02
000044                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000044 EF00             		dc.b $EF,$00
                        	endif

000046                  Elegy_Loop1:
000046 BC14BDBEBF       	dc.b	nB4, $14, nC5, nCs5, nD5
00004B                  	smpsLoop		$00, $04, Elegy_Loop1, Target
00004B F7               	dc.b	$F7
00004C 0004             	dc.b	$00,$04
                        	if (Elegy_Loop1<*)
00004E                  		rom_ptr_z80(Elegy_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00004E 4680             	dc.w  (((((Elegy_Loop1+Target))<<8)&$FF00)|((((Elegy_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000050                  Elegy_Jump1:
000050                  	smpsAlterNote	$FB
000050 E1FB             	dc.b	$E1,$FB
000052                  	smpsAlterVol	$FC
000052 E6FC             	dc.b	$E6,$FC
000054 BA05             	dc.b	nA4, $05
000056                  	smpsAlterNote	$FE
000056 E1FE             	dc.b	$E1,$FE
000058 E7B901           	dc.b	smpsNoAttack, nAb4, $01
00005B                  	smpsAlterNote	$E9
00005B E1E9             	dc.b	$E1,$E9
00005D E7B7             	dc.b	smpsNoAttack, nFs4
00005F                  	smpsAlterNote	$11
00005F E111             	dc.b	$E1,$11
000061 E7B4             	dc.b	smpsNoAttack, nEb4
000063                  	smpsAlterNote	$FF
000063 E1FF             	dc.b	$E1,$FF
000065 E7B2             	dc.b	smpsNoAttack, nCs4
000067                  	smpsAlterNote	$F0
000067 E1F0             	dc.b	$E1,$F0
000069 E7B0             	dc.b	smpsNoAttack, nB3
00006B                  	smpsAlterNote	$F3
00006B E1F3             	dc.b	$E1,$F3
00006D E701             	dc.b	smpsNoAttack, $01
00006F                  	smpsAlterNote	$F6
00006F E1F6             	dc.b	$E1,$F6
000071 E7B5             	dc.b	smpsNoAttack, nE4
000073                  	smpsAlterNote	$19
000073 E119             	dc.b	$E1,$19
000075 E7B9             	dc.b	smpsNoAttack, nAb4
000077                  	smpsAlterNote	$FB
000077 E1FB             	dc.b	$E1,$FB
000079 E7BA1BBC05       	dc.b	smpsNoAttack, nA4, $1B, nB4, $05
00007E                  	smpsAlterNote	$EB
00007E E1EB             	dc.b	$E1,$EB
000080 E7BB01           	dc.b	smpsNoAttack, nBb4, $01
000083                  	smpsAlterNote	$0B
000083 E10B             	dc.b	$E1,$0B
000085 E7B8             	dc.b	smpsNoAttack, nG4
000087                  	smpsAlterNote	$00
000087 E100             	dc.b	$E1,$00
000089 E7B6             	dc.b	smpsNoAttack, nF4
00008B                  	smpsAlterNote	$EB
00008B E1EB             	dc.b	$E1,$EB
00008D E7B4             	dc.b	smpsNoAttack, nEb4
00008F                  	smpsAlterNote	$03
00008F E103             	dc.b	$E1,$03
000091 E7B1             	dc.b	smpsNoAttack, nC4
000093                  	smpsAlterNote	$0D
000093 E10D             	dc.b	$E1,$0D
000095 E7B3             	dc.b	smpsNoAttack, nD4
000097                  	smpsAlterNote	$EF
000097 E1EF             	dc.b	$E1,$EF
000099 E7B9             	dc.b	smpsNoAttack, nAb4
00009B                  	smpsAlterNote	$FD
00009B E1FD             	dc.b	$E1,$FD
00009D E7BC1CBD05       	dc.b	smpsNoAttack, nB4, $1C, nC5, $05
0000A2                  	smpsAlterNote	$FF
0000A2 E1FF             	dc.b	$E1,$FF
0000A4 E7BC01           	dc.b	smpsNoAttack, nB4, $01
0000A7                  	smpsAlterNote	$E4
0000A7 E1E4             	dc.b	$E1,$E4
0000A9 E7BA             	dc.b	smpsNoAttack, nA4
0000AB                  	smpsAlterNote	$15
0000AB E115             	dc.b	$E1,$15
0000AD E7B7             	dc.b	smpsNoAttack, nFs4
0000AF                  	smpsAlterNote	$FE
0000AF E1FE             	dc.b	$E1,$FE
0000B1 E7B5             	dc.b	smpsNoAttack, nE4
0000B3                  	smpsAlterNote	$ED
0000B3 E1ED             	dc.b	$E1,$ED
0000B5 E7B3             	dc.b	smpsNoAttack, nD4
0000B7                  	smpsAlterNote	$F0
0000B7 E1F0             	dc.b	$E1,$F0
0000B9 E701             	dc.b	smpsNoAttack, $01
0000BB                  	smpsAlterNote	$F3
0000BB E1F3             	dc.b	$E1,$F3
0000BD E7B8             	dc.b	smpsNoAttack, nG4
0000BF                  	smpsAlterNote	$0E
0000BF E10E             	dc.b	$E1,$0E
0000C1 E7BC             	dc.b	smpsNoAttack, nB4
0000C3                  	smpsAlterNote	$FD
0000C3 E1FD             	dc.b	$E1,$FD
0000C5 E7BD1BBF05       	dc.b	smpsNoAttack, nC5, $1B, nD5, $05
0000CA                  	smpsAlterNote	$F3
0000CA E1F3             	dc.b	$E1,$F3
0000CC E7BE01           	dc.b	smpsNoAttack, nCs5, $01
0000CF                  	smpsAlterNote	$0E
0000CF E10E             	dc.b	$E1,$0E
0000D1 E7BB             	dc.b	smpsNoAttack, nBb4
0000D3                  	smpsAlterNote	$00
0000D3 E100             	dc.b	$E1,$00
0000D5 E7B9             	dc.b	smpsNoAttack, nAb4
0000D7                  	smpsAlterNote	$E9
0000D7 E1E9             	dc.b	$E1,$E9
0000D9 E7B7             	dc.b	smpsNoAttack, nFs4
0000DB                  	smpsAlterNote	$03
0000DB E103             	dc.b	$E1,$03
0000DD E7B4             	dc.b	smpsNoAttack, nEb4
0000DF                  	smpsAlterNote	$10
0000DF E110             	dc.b	$E1,$10
0000E1 E7B6             	dc.b	smpsNoAttack, nF4
0000E3                  	smpsAlterNote	$F5
0000E3 E1F5             	dc.b	$E1,$F5
0000E5 E7BC             	dc.b	smpsNoAttack, nB4
0000E7                  	smpsAlterNote	$FD
0000E7 E1FD             	dc.b	$E1,$FD
0000E9 E7BF1CC105       	dc.b	smpsNoAttack, nD5, $1C, nE5, $05
0000EE                  	smpsAlterNote	$FE
0000EE E1FE             	dc.b	$E1,$FE
0000F0 E7C001           	dc.b	smpsNoAttack, nEb5, $01
0000F3                  	smpsAlterNote	$EE
0000F3 E1EE             	dc.b	$E1,$EE
0000F5 E7BE             	dc.b	smpsNoAttack, nCs5
0000F7                  	smpsAlterNote	$1A
0000F7 E11A             	dc.b	$E1,$1A
0000F9 E7BB             	dc.b	smpsNoAttack, nBb4
0000FB                  	smpsAlterNote	$FE
0000FB E1FE             	dc.b	$E1,$FE
0000FD E7B9             	dc.b	smpsNoAttack, nAb4
0000FF                  	smpsAlterNote	$E9
0000FF E1E9             	dc.b	$E1,$E9
000101 E7B7             	dc.b	smpsNoAttack, nFs4
000103                  	smpsAlterNote	$ED
000103 E1ED             	dc.b	$E1,$ED
000105 E701             	dc.b	smpsNoAttack, $01
000107                  	smpsAlterNote	$F8
000107 E1F8             	dc.b	$E1,$F8
000109 E7BC             	dc.b	smpsNoAttack, nB4
00010B                  	smpsAlterNote	$12
00010B E112             	dc.b	$E1,$12
00010D E7C0             	dc.b	smpsNoAttack, nEb5
00010F                  	smpsAlterNote	$FD
00010F E1FD             	dc.b	$E1,$FD
000111 E7C11BC205       	dc.b	smpsNoAttack, nE5, $1B, nF5, $05
000116                  	smpsAlterNote	$F1
000116 E1F1             	dc.b	$E1,$F1
000118 E7C101           	dc.b	smpsNoAttack, nE5, $01
00011B                  	smpsAlterNote	$08
00011B E108             	dc.b	$E1,$08
00011D E7BE             	dc.b	smpsNoAttack, nCs5
00011F                  	smpsAlterNote	$00
00011F E100             	dc.b	$E1,$00
000121 E7BC             	dc.b	smpsNoAttack, nB4
000123                  	smpsAlterNote	$E3
000123 E1E3             	dc.b	$E1,$E3
000125 E7BA             	dc.b	smpsNoAttack, nA4
000127                  	smpsAlterNote	$05
000127 E105             	dc.b	$E1,$05
000129 E7B7             	dc.b	smpsNoAttack, nFs4
00012B                  	smpsAlterNote	$13
00012B E113             	dc.b	$E1,$13
00012D E7B9             	dc.b	smpsNoAttack, nAb4
00012F                  	smpsAlterNote	$F3
00012F E1F3             	dc.b	$E1,$F3
000131 E7BF             	dc.b	smpsNoAttack, nD5
000133                  	smpsAlterNote	$FD
000133 E1FD             	dc.b	$E1,$FD
000135 E7C21C           	dc.b	smpsNoAttack, nF5, $1C
000138                  	smpsAlterNote	$FC
000138 E1FC             	dc.b	$E1,$FC
00013A C405             	dc.b	nG5, $05
00013C                  	smpsAlterNote	$FF
00013C E1FF             	dc.b	$E1,$FF
00013E E7C301           	dc.b	smpsNoAttack, nFs5, $01
000141                  	smpsAlterNote	$EB
000141 E1EB             	dc.b	$E1,$EB
000143 E7C1             	dc.b	smpsNoAttack, nE5
000145                  	smpsAlterNote	$0F
000145 E10F             	dc.b	$E1,$0F
000147 E7BE             	dc.b	smpsNoAttack, nCs5
000149                  	smpsAlterNote	$FE
000149 E1FE             	dc.b	$E1,$FE
00014B E7BC             	dc.b	smpsNoAttack, nB4
00014D                  	smpsAlterNote	$E3
00014D E1E3             	dc.b	$E1,$E3
00014F E7BA             	dc.b	smpsNoAttack, nA4
000151                  	smpsAlterNote	$E9
000151 E1E9             	dc.b	$E1,$E9
000153 E701             	dc.b	smpsNoAttack, $01
000155                  	smpsAlterNote	$F7
000155 E1F7             	dc.b	$E1,$F7
000157 E7BF             	dc.b	smpsNoAttack, nD5
000159                  	smpsAlterNote	$16
000159 E116             	dc.b	$E1,$16
00015B E7C3             	dc.b	smpsNoAttack, nFs5
00015D                  	smpsAlterNote	$FC
00015D E1FC             	dc.b	$E1,$FC
00015F E7C41BC605       	dc.b	smpsNoAttack, nG5, $1B, nA5, $05
000164                  	smpsAlterNote	$ED
000164 E1ED             	dc.b	$E1,$ED
000166 E7C501           	dc.b	smpsNoAttack, nAb5, $01
000169                  	smpsAlterNote	$0B
000169 E10B             	dc.b	$E1,$0B
00016B E7C2             	dc.b	smpsNoAttack, nF5
00016D                  	smpsAlterNote	$00
00016D E100             	dc.b	$E1,$00
00016F E7C0             	dc.b	smpsNoAttack, nEb5
000171                  	smpsAlterNote	$EE
000171 E1EE             	dc.b	$E1,$EE
000173 E7BE             	dc.b	smpsNoAttack, nCs5
000175                  	smpsAlterNote	$05
000175 E105             	dc.b	$E1,$05
000177 E7BB             	dc.b	smpsNoAttack, nBb4
000179                  	smpsAlterNote	$0B
000179 E10B             	dc.b	$E1,$0B
00017B E7BD             	dc.b	smpsNoAttack, nC5
00017D                  	smpsAlterNote	$F1
00017D E1F1             	dc.b	$E1,$F1
00017F E7C3             	dc.b	smpsNoAttack, nFs5
000181                  	smpsAlterNote	$FB
000181 E1FB             	dc.b	$E1,$FB
000183 E7C608C805       	dc.b	smpsNoAttack, nA5, $08, nB5, $05
000188                  	smpsAlterNote	$F3
000188 E1F3             	dc.b	$E1,$F3
00018A E7C701           	dc.b	smpsNoAttack, nBb5, $01
00018D                  	smpsAlterNote	$11
00018D E111             	dc.b	$E1,$11
00018F E7C4             	dc.b	smpsNoAttack, nG5
000191                  	smpsAlterNote	$04
000191 E104             	dc.b	$E1,$04
000193 E7C2             	dc.b	smpsNoAttack, nF5
000195                  	smpsAlterNote	$ED
000195 E1ED             	dc.b	$E1,$ED
000197 E7C0             	dc.b	smpsNoAttack, nEb5
000199                  	smpsAlterNote	$03
000199 E103             	dc.b	$E1,$03
00019B E7BD             	dc.b	smpsNoAttack, nC5
00019D                  	smpsAlterNote	$10
00019D E110             	dc.b	$E1,$10
00019F E7BE             	dc.b	smpsNoAttack, nCs5
0001A1                  	smpsAlterNote	$00
0001A1 E100             	dc.b	$E1,$00
0001A3 E7C3             	dc.b	smpsNoAttack, nFs5
0001A5                  	smpsAlterNote	$09
0001A5 E109             	dc.b	$E1,$09
0001A7 E7C7             	dc.b	smpsNoAttack, nBb5
0001A9                  	smpsAlterNote	$02
0001A9 E102             	dc.b	$E1,$02
                        	;!@ dc.b	smpsNoAttack, nB5, $07, nRst
0001AB E7C807           	dc.b	smpsNoAttack, nB5, $07

0001AE                  Elegy_Loop2:
                        	;!@ dc.b	$50
0001AE 8050             	dc.b	nRst, $50
0001B0                  	smpsLoop		$00, $08, Elegy_Loop2, Target
0001B0 F7               	dc.b	$F7
0001B1 0008             	dc.b	$00,$08
                        	if (Elegy_Loop2<*)
0001B3                  		rom_ptr_z80(Elegy_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001B3 AE81             	dc.w  (((((Elegy_Loop2+Target))<<8)&$FF00)|((((Elegy_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001B5                  	smpsAlterVol	$04
0001B5 E604             	dc.b	$E6,$04
0001B7                  	smpsJump		Elegy_Jump1, Target
0001B7 F6               	dc.b	$F6
                        	if (Elegy_Jump1<*)
0001B8                  		rom_ptr_z80(Elegy_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001B8 5080             	dc.w  (((((Elegy_Jump1+Target))<<8)&$FF00)|((((Elegy_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001BA                  Elegy_FM2:
0001BA                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
0001BA EF00             		dc.b $EF,$00
                        	endif
0001BC                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001BC E0C0             		dc.b $E0,panCenter
                        	endif
0001BE                  	smpsAlterNote	$02
0001BE E102             	dc.b	$E1,$02

0001C0                  Elegy_Loop3:
0001C0 B014B1B2B3       	dc.b	nB3, $14, nC4, nCs4, nD4
0001C5                  	smpsLoop		$00, $04, Elegy_Loop3, Target
0001C5 F7               	dc.b	$F7
0001C6 0004             	dc.b	$00,$04
                        	if (Elegy_Loop3<*)
0001C8                  		rom_ptr_z80(Elegy_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001C8 C081             	dc.w  (((((Elegy_Loop3+Target))<<8)&$FF00)|((((Elegy_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001CA                  Elegy_Jump2:
0001CA                  	smpsAlterNote	$FB
0001CA E1FB             	dc.b	$E1,$FB
0001CC                  	smpsAlterVol	$FC
0001CC E6FC             	dc.b	$E6,$FC
0001CE AE05             	dc.b	nA3, $05
0001D0                  	smpsAlterNote	$FE
0001D0 E1FE             	dc.b	$E1,$FE
0001D2 E7AD01           	dc.b	smpsNoAttack, nAb3, $01
0001D5                  	smpsAlterNote	$E9
0001D5 E1E9             	dc.b	$E1,$E9
0001D7 E7AB             	dc.b	smpsNoAttack, nFs3
0001D9                  	smpsAlterNote	$11
0001D9 E111             	dc.b	$E1,$11
0001DB E7A8             	dc.b	smpsNoAttack, nEb3
0001DD                  	smpsAlterNote	$FF
0001DD E1FF             	dc.b	$E1,$FF
0001DF E7A6             	dc.b	smpsNoAttack, nCs3
0001E1                  	smpsAlterNote	$F0
0001E1 E1F0             	dc.b	$E1,$F0
0001E3 E7A4             	dc.b	smpsNoAttack, nB2
0001E5                  	smpsAlterNote	$F3
0001E5 E1F3             	dc.b	$E1,$F3
0001E7 E701             	dc.b	smpsNoAttack, $01
0001E9                  	smpsAlterNote	$F6
0001E9 E1F6             	dc.b	$E1,$F6
0001EB E7A9             	dc.b	smpsNoAttack, nE3
0001ED                  	smpsAlterNote	$19
0001ED E119             	dc.b	$E1,$19
0001EF E7AD             	dc.b	smpsNoAttack, nAb3
0001F1                  	smpsAlterNote	$FB
0001F1 E1FB             	dc.b	$E1,$FB
0001F3 E7AE1BB005       	dc.b	smpsNoAttack, nA3, $1B, nB3, $05
0001F8                  	smpsAlterNote	$EB
0001F8 E1EB             	dc.b	$E1,$EB
0001FA E7AF01           	dc.b	smpsNoAttack, nBb3, $01
0001FD                  	smpsAlterNote	$0B
0001FD E10B             	dc.b	$E1,$0B
0001FF E7AC             	dc.b	smpsNoAttack, nG3
000201                  	smpsAlterNote	$00
000201 E100             	dc.b	$E1,$00
000203 E7AA             	dc.b	smpsNoAttack, nF3
000205                  	smpsAlterNote	$EB
000205 E1EB             	dc.b	$E1,$EB
000207 E7A8             	dc.b	smpsNoAttack, nEb3
000209                  	smpsAlterNote	$03
000209 E103             	dc.b	$E1,$03
00020B E7A5             	dc.b	smpsNoAttack, nC3
00020D                  	smpsAlterNote	$0D
00020D E10D             	dc.b	$E1,$0D
00020F E7A7             	dc.b	smpsNoAttack, nD3
000211                  	smpsAlterNote	$EF
000211 E1EF             	dc.b	$E1,$EF
000213 E7AD             	dc.b	smpsNoAttack, nAb3
000215                  	smpsAlterNote	$FD
000215 E1FD             	dc.b	$E1,$FD
000217 E7B01CB105       	dc.b	smpsNoAttack, nB3, $1C, nC4, $05
00021C                  	smpsAlterNote	$FF
00021C E1FF             	dc.b	$E1,$FF
00021E E7B001           	dc.b	smpsNoAttack, nB3, $01
000221                  	smpsAlterNote	$E4
000221 E1E4             	dc.b	$E1,$E4
000223 E7AE             	dc.b	smpsNoAttack, nA3
000225                  	smpsAlterNote	$15
000225 E115             	dc.b	$E1,$15
000227 E7AB             	dc.b	smpsNoAttack, nFs3
000229                  	smpsAlterNote	$FE
000229 E1FE             	dc.b	$E1,$FE
00022B E7A9             	dc.b	smpsNoAttack, nE3
00022D                  	smpsAlterNote	$ED
00022D E1ED             	dc.b	$E1,$ED
00022F E7A7             	dc.b	smpsNoAttack, nD3
000231                  	smpsAlterNote	$F0
000231 E1F0             	dc.b	$E1,$F0
000233 E701             	dc.b	smpsNoAttack, $01
000235                  	smpsAlterNote	$F3
000235 E1F3             	dc.b	$E1,$F3
000237 E7AC             	dc.b	smpsNoAttack, nG3
000239                  	smpsAlterNote	$0E
000239 E10E             	dc.b	$E1,$0E
00023B E7B0             	dc.b	smpsNoAttack, nB3
00023D                  	smpsAlterNote	$FD
00023D E1FD             	dc.b	$E1,$FD
00023F E7B11BB305       	dc.b	smpsNoAttack, nC4, $1B, nD4, $05
000244                  	smpsAlterNote	$F3
000244 E1F3             	dc.b	$E1,$F3
000246 E7B201           	dc.b	smpsNoAttack, nCs4, $01
000249                  	smpsAlterNote	$0E
000249 E10E             	dc.b	$E1,$0E
00024B E7AF             	dc.b	smpsNoAttack, nBb3
00024D                  	smpsAlterNote	$00
00024D E100             	dc.b	$E1,$00
00024F E7AD             	dc.b	smpsNoAttack, nAb3
000251                  	smpsAlterNote	$E9
000251 E1E9             	dc.b	$E1,$E9
000253 E7AB             	dc.b	smpsNoAttack, nFs3
000255                  	smpsAlterNote	$03
000255 E103             	dc.b	$E1,$03
000257 E7A8             	dc.b	smpsNoAttack, nEb3
000259                  	smpsAlterNote	$10
000259 E110             	dc.b	$E1,$10
00025B E7AA             	dc.b	smpsNoAttack, nF3
00025D                  	smpsAlterNote	$F5
00025D E1F5             	dc.b	$E1,$F5
00025F E7B0             	dc.b	smpsNoAttack, nB3
000261                  	smpsAlterNote	$FD
000261 E1FD             	dc.b	$E1,$FD
000263 E7B31CB505       	dc.b	smpsNoAttack, nD4, $1C, nE4, $05
000268                  	smpsAlterNote	$FE
000268 E1FE             	dc.b	$E1,$FE
00026A E7B401           	dc.b	smpsNoAttack, nEb4, $01
00026D                  	smpsAlterNote	$EE
00026D E1EE             	dc.b	$E1,$EE
00026F E7B2             	dc.b	smpsNoAttack, nCs4
000271                  	smpsAlterNote	$1A
000271 E11A             	dc.b	$E1,$1A
000273 E7AF             	dc.b	smpsNoAttack, nBb3
000275                  	smpsAlterNote	$FE
000275 E1FE             	dc.b	$E1,$FE
000277 E7AD             	dc.b	smpsNoAttack, nAb3
000279                  	smpsAlterNote	$E9
000279 E1E9             	dc.b	$E1,$E9
00027B E7AB             	dc.b	smpsNoAttack, nFs3
00027D                  	smpsAlterNote	$ED
00027D E1ED             	dc.b	$E1,$ED
00027F E701             	dc.b	smpsNoAttack, $01
000281                  	smpsAlterNote	$F8
000281 E1F8             	dc.b	$E1,$F8
000283 E7B0             	dc.b	smpsNoAttack, nB3
000285                  	smpsAlterNote	$12
000285 E112             	dc.b	$E1,$12
000287 E7B4             	dc.b	smpsNoAttack, nEb4
000289                  	smpsAlterNote	$FD
000289 E1FD             	dc.b	$E1,$FD
00028B E7B51BB605       	dc.b	smpsNoAttack, nE4, $1B, nF4, $05
000290                  	smpsAlterNote	$F1
000290 E1F1             	dc.b	$E1,$F1
000292 E7B501           	dc.b	smpsNoAttack, nE4, $01
000295                  	smpsAlterNote	$08
000295 E108             	dc.b	$E1,$08
000297 E7B2             	dc.b	smpsNoAttack, nCs4
000299                  	smpsAlterNote	$00
000299 E100             	dc.b	$E1,$00
00029B E7B0             	dc.b	smpsNoAttack, nB3
00029D                  	smpsAlterNote	$E3
00029D E1E3             	dc.b	$E1,$E3
00029F E7AE             	dc.b	smpsNoAttack, nA3
0002A1                  	smpsAlterNote	$05
0002A1 E105             	dc.b	$E1,$05
0002A3 E7AB             	dc.b	smpsNoAttack, nFs3
0002A5                  	smpsAlterNote	$13
0002A5 E113             	dc.b	$E1,$13
0002A7 E7AD             	dc.b	smpsNoAttack, nAb3
0002A9                  	smpsAlterNote	$F3
0002A9 E1F3             	dc.b	$E1,$F3
0002AB E7B3             	dc.b	smpsNoAttack, nD4
0002AD                  	smpsAlterNote	$FD
0002AD E1FD             	dc.b	$E1,$FD
0002AF E7B61C           	dc.b	smpsNoAttack, nF4, $1C
0002B2                  	smpsAlterNote	$FC
0002B2 E1FC             	dc.b	$E1,$FC
0002B4 B805             	dc.b	nG4, $05
0002B6                  	smpsAlterNote	$FF
0002B6 E1FF             	dc.b	$E1,$FF
0002B8 E7B701           	dc.b	smpsNoAttack, nFs4, $01
0002BB                  	smpsAlterNote	$EB
0002BB E1EB             	dc.b	$E1,$EB
0002BD E7B5             	dc.b	smpsNoAttack, nE4
0002BF                  	smpsAlterNote	$0F
0002BF E10F             	dc.b	$E1,$0F
0002C1 E7B2             	dc.b	smpsNoAttack, nCs4
0002C3                  	smpsAlterNote	$FE
0002C3 E1FE             	dc.b	$E1,$FE
0002C5 E7B0             	dc.b	smpsNoAttack, nB3
0002C7                  	smpsAlterNote	$E3
0002C7 E1E3             	dc.b	$E1,$E3
0002C9 E7AE             	dc.b	smpsNoAttack, nA3
0002CB                  	smpsAlterNote	$E9
0002CB E1E9             	dc.b	$E1,$E9
0002CD E701             	dc.b	smpsNoAttack, $01
0002CF                  	smpsAlterNote	$F7
0002CF E1F7             	dc.b	$E1,$F7
0002D1 E7B3             	dc.b	smpsNoAttack, nD4
0002D3                  	smpsAlterNote	$16
0002D3 E116             	dc.b	$E1,$16
0002D5 E7B7             	dc.b	smpsNoAttack, nFs4
0002D7                  	smpsAlterNote	$FC
0002D7 E1FC             	dc.b	$E1,$FC
0002D9 E7B81BBA05       	dc.b	smpsNoAttack, nG4, $1B, nA4, $05
0002DE                  	smpsAlterNote	$ED
0002DE E1ED             	dc.b	$E1,$ED
0002E0 E7B901           	dc.b	smpsNoAttack, nAb4, $01
0002E3                  	smpsAlterNote	$0B
0002E3 E10B             	dc.b	$E1,$0B
0002E5 E7B6             	dc.b	smpsNoAttack, nF4
0002E7                  	smpsAlterNote	$00
0002E7 E100             	dc.b	$E1,$00
0002E9 E7B4             	dc.b	smpsNoAttack, nEb4
0002EB                  	smpsAlterNote	$EE
0002EB E1EE             	dc.b	$E1,$EE
0002ED E7B2             	dc.b	smpsNoAttack, nCs4
0002EF                  	smpsAlterNote	$05
0002EF E105             	dc.b	$E1,$05
0002F1 E7AF             	dc.b	smpsNoAttack, nBb3
0002F3                  	smpsAlterNote	$0B
0002F3 E10B             	dc.b	$E1,$0B
0002F5 E7B1             	dc.b	smpsNoAttack, nC4
0002F7                  	smpsAlterNote	$F1
0002F7 E1F1             	dc.b	$E1,$F1
0002F9 E7B7             	dc.b	smpsNoAttack, nFs4
0002FB                  	smpsAlterNote	$FB
0002FB E1FB             	dc.b	$E1,$FB
0002FD E7BA08BC05       	dc.b	smpsNoAttack, nA4, $08, nB4, $05
000302                  	smpsAlterNote	$F3
000302 E1F3             	dc.b	$E1,$F3
000304 E7BB01           	dc.b	smpsNoAttack, nBb4, $01
000307                  	smpsAlterNote	$11
000307 E111             	dc.b	$E1,$11
000309 E7B8             	dc.b	smpsNoAttack, nG4
00030B                  	smpsAlterNote	$04
00030B E104             	dc.b	$E1,$04
00030D E7B6             	dc.b	smpsNoAttack, nF4
00030F                  	smpsAlterNote	$ED
00030F E1ED             	dc.b	$E1,$ED
000311 E7B4             	dc.b	smpsNoAttack, nEb4
000313                  	smpsAlterNote	$03
000313 E103             	dc.b	$E1,$03
000315 E7B1             	dc.b	smpsNoAttack, nC4
000317                  	smpsAlterNote	$10
000317 E110             	dc.b	$E1,$10
000319 E7B2             	dc.b	smpsNoAttack, nCs4
00031B                  	smpsAlterNote	$00
00031B E100             	dc.b	$E1,$00
00031D E7B7             	dc.b	smpsNoAttack, nFs4
00031F                  	smpsAlterNote	$09
00031F E109             	dc.b	$E1,$09
000321 E7BB             	dc.b	smpsNoAttack, nBb4
000323                  	smpsAlterNote	$02
000323 E102             	dc.b	$E1,$02
                        	;!@ dc.b	smpsNoAttack, nB4, $07, nRst
000325 E7BC07           	dc.b	smpsNoAttack, nB4, $07

000328                  Elegy_Loop4:
                        	;!@ dc.b	$50
000328 8050             	dc.b	nRst, $50
00032A                  	smpsLoop		$00, $08, Elegy_Loop4, Target
00032A F7               	dc.b	$F7
00032B 0008             	dc.b	$00,$08
                        	if (Elegy_Loop4<*)
00032D                  		rom_ptr_z80(Elegy_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00032D 2883             	dc.w  (((((Elegy_Loop4+Target))<<8)&$FF00)|((((Elegy_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00032F                  	smpsAlterVol	$04
00032F E604             	dc.b	$E6,$04
000331                  	smpsJump		Elegy_Jump2, Target
000331 F6               	dc.b	$F6
                        	if (Elegy_Jump2<*)
000332                  		rom_ptr_z80(Elegy_Jump2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000332 CA81             	dc.w  (((((Elegy_Jump2+Target))<<8)&$FF00)|((((Elegy_Jump2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000334                  Elegy_FM3:
000334                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000334 E0C0             		dc.b $E0,panCenter
                        	endif
000336                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000336 EF00             		dc.b $EF,$00
                        	endif
000338 9D03             	dc.b	nE2, $03

00033A                  Elegy_Loop6:
00033A 0203020380029D03 	dc.b	$02, $03, $02, $03, nRst, $02, nE2, $03
000342 0280039D02038002 	dc.b	$02, nRst, $03, nE2, $02, $03, nRst, $02
00034A 9D0302030203     	dc.b	nE2, $03, $02, $03, $02, $03

000350                  Elegy_Loop5:
000350 80029D03         	dc.b	nRst, $02, nE2, $03
000354                  	smpsLoop		$00, $08, Elegy_Loop5, Target
000354 F7               	dc.b	$F7
000355 0008             	dc.b	$00,$08
                        	if (Elegy_Loop5<*)
000357                  		rom_ptr_z80(Elegy_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000357 5083             	dc.w  (((((Elegy_Loop5+Target))<<8)&$FF00)|((((Elegy_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000359                  	smpsLoop		$01, $03, Elegy_Loop6, Target
000359 F7               	dc.b	$F7
00035A 0103             	dc.b	$01,$03
                        	if (Elegy_Loop6<*)
00035C                  		rom_ptr_z80(Elegy_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00035C 3A83             	dc.w  (((((Elegy_Loop6+Target))<<8)&$FF00)|((((Elegy_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00035E 0203020380029D03 	dc.b	$02, $03, $02, $03, nRst, $02, nE2, $03
000366 0280039D02038002 	dc.b	$02, nRst, $03, nE2, $02, $03, nRst, $02
00036E 9D0302030203     	dc.b	nE2, $03, $02, $03, $02, $03

000374                  Elegy_Loop7:
000374 80029D03         	dc.b	nRst, $02, nE2, $03
000378                  	smpsLoop		$00, $07, Elegy_Loop7, Target
000378 F7               	dc.b	$F7
000379 0007             	dc.b	$00,$07
                        	if (Elegy_Loop7<*)
00037B                  		rom_ptr_z80(Elegy_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
00037B 7483             	dc.w  (((((Elegy_Loop7+Target))<<8)&$FF00)|((((Elegy_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00037D 8002             	dc.b	nRst, $02

00037F                  Elegy_Jump3:
00037F A203028003A20203 	dc.b	nA2, $03, $02, nRst, $03, nA2, $02, $03
000387 8002A203028005A2 	dc.b	nRst, $02, nA2, $03, $02, nRst, $05, nA2

00038F                  Elegy_Loo$8:
00038F 0302             	dc.b	$03, $02
000391                  	smpsLoop		$00, $04, Elegy_Loo$8, Target
000391 F7               	dc.b	$F7
000392 0004             	dc.b	$00,$04
                        	if (Elegy_Loo$8<*)
000394                  		rom_ptr_z80(Elegy_Loo$8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000394 8F83             	dc.w  (((((Elegy_Loo$8+Target))<<8)&$FF00)|((((Elegy_Loo$8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000396 8003A2           	dc.b	nRst, $03, nA2

000399                  Elegy_Loo$9:
000399 02038002A203     	dc.b	$02, $03, nRst, $02, nA2, $03
00039F                  	smpsLoop		$00, $02, Elegy_Loo$9, Target
00039F F7               	dc.b	$F7
0003A0 0002             	dc.b	$00,$02
                        	if (Elegy_Loo$9<*)
0003A2                  		rom_ptr_z80(Elegy_Loo$9+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003A2 9983             	dc.w  (((((Elegy_Loo$9+Target))<<8)&$FF00)|((((Elegy_Loo$9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003A4 8002A40AA2030280 	dc.b	nRst, $02, nB2, $0A, nA2, $03, $02, nRst
0003AC 03A202038002A203 	dc.b	$03, nA2, $02, $03, nRst, $02, nA2, $03
0003B4 028005A2         	dc.b	$02, nRst, $05, nA2

0003B8                  Elegy_Loop10:
0003B8 0302             	dc.b	$03, $02
0003BA                  	smpsLoop		$00, $04, Elegy_Loop10, Target
0003BA F7               	dc.b	$F7
0003BB 0004             	dc.b	$00,$04
                        	if (Elegy_Loop10<*)
0003BD                  		rom_ptr_z80(Elegy_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003BD B883             	dc.w  (((((Elegy_Loop10+Target))<<8)&$FF00)|((((Elegy_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003BF 8003A2           	dc.b	nRst, $03, nA2

0003C2                  Elegy_Loop11:
0003C2 02038002A203     	dc.b	$02, $03, nRst, $02, nA2, $03
0003C8                  	smpsLoop		$00, $02, Elegy_Loop11, Target
0003C8 F7               	dc.b	$F7
0003C9 0002             	dc.b	$00,$02
                        	if (Elegy_Loop11<*)
0003CB                  		rom_ptr_z80(Elegy_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003CB C283             	dc.w  (((((Elegy_Loop11+Target))<<8)&$FF00)|((((Elegy_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003CD 80029E0AA2030280 	dc.b	nRst, $02, nF2, $0A, nA2, $03, $02, nRst
0003D5 03A202038002A203 	dc.b	$03, nA2, $02, $03, nRst, $02, nA2, $03
0003DD 028005A2         	dc.b	$02, nRst, $05, nA2

0003E1                  Elegy_Loop12:
0003E1 0302             	dc.b	$03, $02
0003E3                  	smpsLoop		$00, $04, Elegy_Loop12, Target
0003E3 F7               	dc.b	$F7
0003E4 0004             	dc.b	$00,$04
                        	if (Elegy_Loop12<*)
0003E6                  		rom_ptr_z80(Elegy_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003E6 E183             	dc.w  (((((Elegy_Loop12+Target))<<8)&$FF00)|((((Elegy_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003E8 8003A2           	dc.b	nRst, $03, nA2

0003EB                  Elegy_Loop13:
0003EB 02038002A203     	dc.b	$02, $03, nRst, $02, nA2, $03
0003F1                  	smpsLoop		$00, $02, Elegy_Loop13, Target
0003F1 F7               	dc.b	$F7
0003F2 0002             	dc.b	$00,$02
                        	if (Elegy_Loop13<*)
0003F4                  		rom_ptr_z80(Elegy_Loop13+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003F4 EB83             	dc.w  (((((Elegy_Loop13+Target))<<8)&$FF00)|((((Elegy_Loop13+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003F6 8002A40AA2030280 	dc.b	nRst, $02, nB2, $0A, nA2, $03, $02, nRst
0003FE 03A202038002A203 	dc.b	$03, nA2, $02, $03, nRst, $02, nA2, $03
000406 028005A203020302 	dc.b	$02, nRst, $05, nA2, $03, $02, $03, $02
00040E 0302A703A502A903 	dc.b	$03, $02, nD3, $03, nC3, $02, nE3, $03
000416 A7058002AA03A902 	dc.b	nD3, $05, nRst, $02, nF3, $03, nE3, $02
00041E A703A905800C     	dc.b	nD3, $03, nE3, $05, nRst, $0C
000424                  	smpsAlterVol		$01
000424 E601             	dc.b	$E6,$01
000426 A20302038007A203 	dc.b	nA2, $03, $02, $03, nRst, $07, nA2, $03
00042E 02038002A2030203 	dc.b	$02, $03, nRst, $02, nA2, $03, $02, $03
000436 020302A003020380 	dc.b	$02, $03, $02, nG2, $03, $02, $03, nRst
00043E 02A00380         	dc.b	$02, nG2, $03, nRst

000442                  Elegy_Loop14:
000442 02A003           	dc.b	$02, nG2, $03
000445                  	smpsLoop		$00, $04, Elegy_Loop14, Target
000445 F7               	dc.b	$F7
000446 0004             	dc.b	$00,$04
                        	if (Elegy_Loop14<*)
000448                  		rom_ptr_z80(Elegy_Loop14+Target)
                        	;dc.w z80_ptr(ptr,addr)
000448 4284             	dc.w  (((((Elegy_Loop14+Target))<<8)&$FF00)|((((Elegy_Loop14+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00044A 8002A003029E0302 	dc.b	nRst, $02, nG2, $03, $02, nF2, $03, $02
000452 0380029E0380     	dc.b	$03, nRst, $02, nF2, $03, nRst

000458                  Elegy_Loop15:
000458 029E03           	dc.b	$02, nF2, $03
00045B                  	smpsLoop		$00, $04, Elegy_Loop15, Target
00045B F7               	dc.b	$F7
00045C 0004             	dc.b	$00,$04
                        	if (Elegy_Loop15<*)
00045E                  		rom_ptr_z80(Elegy_Loop15+Target)
                        	;dc.w z80_ptr(ptr,addr)
00045E 5884             	dc.w  (((((Elegy_Loop15+Target))<<8)&$FF00)|((((Elegy_Loop15+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000460 80029E03029D0302 	dc.b	nRst, $02, nF2, $03, $02, nE2, $03, $02
000468 0380029D0380     	dc.b	$03, nRst, $02, nE2, $03, nRst

00046E                  Elegy_Loop16:
00046E 029D03           	dc.b	$02, nE2, $03
000471                  	smpsLoop		$00, $04, Elegy_Loop16, Target
000471 F7               	dc.b	$F7
000472 0004             	dc.b	$00,$04
                        	if (Elegy_Loop16<*)
000474                  		rom_ptr_z80(Elegy_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
000474 6E84             	dc.w  (((((Elegy_Loop16+Target))<<8)&$FF00)|((((Elegy_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000476 80029D03029B0302 	dc.b	nRst, $02, nE2, $03, $02, nD2, $03, $02
00047E 0380029B0380     	dc.b	$03, nRst, $02, nD2, $03, nRst

000484                  Elegy_Loop17:
000484 029B03           	dc.b	$02, nD2, $03
000487                  	smpsLoop		$00, $04, Elegy_Loop17, Target
000487 F7               	dc.b	$F7
000488 0004             	dc.b	$00,$04
                        	if (Elegy_Loop17<*)
00048A                  		rom_ptr_z80(Elegy_Loop17+Target)
                        	;dc.w z80_ptr(ptr,addr)
00048A 8484             	dc.w  (((((Elegy_Loop17+Target))<<8)&$FF00)|((((Elegy_Loop17+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00048C 80029B0302990302 	dc.b	nRst, $02, nD2, $03, $02, nC2, $03, $02
000494 038002990380     	dc.b	$03, nRst, $02, nC2, $03, nRst

00049A                  Elegy_Loop18:
00049A 029903           	dc.b	$02, nC2, $03
00049D                  	smpsLoop		$00, $04, Elegy_Loop18, Target
00049D F7               	dc.b	$F7
00049E 0004             	dc.b	$00,$04
                        	if (Elegy_Loop18<*)
0004A0                  		rom_ptr_z80(Elegy_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004A0 9A84             	dc.w  (((((Elegy_Loop18+Target))<<8)&$FF00)|((((Elegy_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004A2 80029903         	dc.b	nRst, $02, nC2, $03

0004A6                  Elegy_Loop20:
0004A6 029D03020380029D 	dc.b	$02, nE2, $03, $02, $03, nRst, $02, nE2
0004AE 0380             	dc.b	$03, nRst

0004B0                  Elegy_Loop19:
0004B0 029D03           	dc.b	$02, nE2, $03
0004B3                  	smpsLoop		$00, $04, Elegy_Loop19, Target
0004B3 F7               	dc.b	$F7
0004B4 0004             	dc.b	$00,$04
                        	if (Elegy_Loop19<*)
0004B6                  		rom_ptr_z80(Elegy_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004B6 B084             	dc.w  (((((Elegy_Loop19+Target))<<8)&$FF00)|((((Elegy_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004B8 80029D03         	dc.b	nRst, $02, nE2, $03
0004BC                  	smpsLoop		$01, $02, Elegy_Loop20, Target
0004BC F7               	dc.b	$F7
0004BD 0102             	dc.b	$01,$02
                        	if (Elegy_Loop20<*)
0004BF                  		rom_ptr_z80(Elegy_Loop20+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004BF A684             	dc.w  (((((Elegy_Loop20+Target))<<8)&$FF00)|((((Elegy_Loop20+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004C1 02A20302038007A2 	dc.b	$02, nA2, $03, $02, $03, nRst, $07, nA2
0004C9 0302038002A20302 	dc.b	$03, $02, $03, nRst, $02, nA2, $03, $02
0004D1 03020302A0030203 	dc.b	$03, $02, $03, $02, nG2, $03, $02, $03
0004D9 8002A00380       	dc.b	nRst, $02, nG2, $03, nRst

0004DE                  Elegy_Loop21:
0004DE 02A003           	dc.b	$02, nG2, $03
0004E1                  	smpsLoop		$00, $04, Elegy_Loop21, Target
0004E1 F7               	dc.b	$F7
0004E2 0004             	dc.b	$00,$04
                        	if (Elegy_Loop21<*)
0004E4                  		rom_ptr_z80(Elegy_Loop21+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004E4 DE84             	dc.w  (((((Elegy_Loop21+Target))<<8)&$FF00)|((((Elegy_Loop21+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004E6 8002A003029E0302 	dc.b	nRst, $02, nG2, $03, $02, nF2, $03, $02
0004EE 0380029E0380     	dc.b	$03, nRst, $02, nF2, $03, nRst

0004F4                  Elegy_Loop22:
0004F4 029E03           	dc.b	$02, nF2, $03
0004F7                  	smpsLoop		$00, $04, Elegy_Loop22, Target
0004F7 F7               	dc.b	$F7
0004F8 0004             	dc.b	$00,$04
                        	if (Elegy_Loop22<*)
0004FA                  		rom_ptr_z80(Elegy_Loop22+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004FA F484             	dc.w  (((((Elegy_Loop22+Target))<<8)&$FF00)|((((Elegy_Loop22+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004FC 80029E03029D0302 	dc.b	nRst, $02, nF2, $03, $02, nE2, $03, $02
000504 0380029D0380     	dc.b	$03, nRst, $02, nE2, $03, nRst

00050A                  Elegy_Loop23:
00050A 029D03           	dc.b	$02, nE2, $03
00050D                  	smpsLoop		$00, $04, Elegy_Loop23, Target
00050D F7               	dc.b	$F7
00050E 0004             	dc.b	$00,$04
                        	if (Elegy_Loop23<*)
000510                  		rom_ptr_z80(Elegy_Loop23+Target)
                        	;dc.w z80_ptr(ptr,addr)
000510 0A85             	dc.w  (((((Elegy_Loop23+Target))<<8)&$FF00)|((((Elegy_Loop23+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000512 80029D03029E0302 	dc.b	nRst, $02, nE2, $03, $02, nF2, $03, $02
00051A 0380029E0380     	dc.b	$03, nRst, $02, nF2, $03, nRst

000520                  Elegy_Loop24:
000520 029E03           	dc.b	$02, nF2, $03
000523                  	smpsLoop		$00, $04, Elegy_Loop24, Target
000523 F7               	dc.b	$F7
000524 0004             	dc.b	$00,$04
                        	if (Elegy_Loop24<*)
000526                  		rom_ptr_z80(Elegy_Loop24+Target)
                        	;dc.w z80_ptr(ptr,addr)
000526 2085             	dc.w  (((((Elegy_Loop24+Target))<<8)&$FF00)|((((Elegy_Loop24+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000528 80029E0302A00302 	dc.b	nRst, $02, nF2, $03, $02, nG2, $03, $02
000530 038002A00380     	dc.b	$03, nRst, $02, nG2, $03, nRst

000536                  Elegy_Loop25:
000536 02A003           	dc.b	$02, nG2, $03
000539                  	smpsLoop		$00, $04, Elegy_Loop25, Target
000539 F7               	dc.b	$F7
00053A 0004             	dc.b	$00,$04
                        	if (Elegy_Loop25<*)
00053C                  		rom_ptr_z80(Elegy_Loop25+Target)
                        	;dc.w z80_ptr(ptr,addr)
00053C 3685             	dc.w  (((((Elegy_Loop25+Target))<<8)&$FF00)|((((Elegy_Loop25+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00053E 8002A00302A10302 	dc.b	nRst, $02, nG2, $03, $02, nAb2, $03, $02
000546 038002A10380     	dc.b	$03, nRst, $02, nAb2, $03, nRst

00054C                  Elegy_Loop26:
00054C 02A103           	dc.b	$02, nAb2, $03
00054F                  	smpsLoop		$00, $04, Elegy_Loop26, Target
00054F F7               	dc.b	$F7
000550 0004             	dc.b	$00,$04
                        	if (Elegy_Loop26<*)
000552                  		rom_ptr_z80(Elegy_Loop26+Target)
                        	;dc.w z80_ptr(ptr,addr)
000552 4C85             	dc.w  (((((Elegy_Loop26+Target))<<8)&$FF00)|((((Elegy_Loop26+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000554 8002A10302A20302 	dc.b	nRst, $02, nAb2, $03, $02, nA2, $03, $02
00055C 038002A20380     	dc.b	$03, nRst, $02, nA2, $03, nRst

000562                  Elegy_Loop27:
000562 02A203           	dc.b	$02, nA2, $03
000565                  	smpsLoop		$00, $04, Elegy_Loop27, Target
000565 F7               	dc.b	$F7
000566 0004             	dc.b	$00,$04
                        	if (Elegy_Loop27<*)
000568                  		rom_ptr_z80(Elegy_Loop27+Target)
                        	;dc.w z80_ptr(ptr,addr)
000568 6285             	dc.w  (((((Elegy_Loop27+Target))<<8)&$FF00)|((((Elegy_Loop27+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00056A 8002A20302       	dc.b	nRst, $02, nA2, $03, $02
00056F                  	smpsAlterVol		$FF
00056F E6FF             	dc.b	$E6,$FF
000571                  	smpsJump		Elegy_Jump3, Target
000571 F6               	dc.b	$F6
                        	if (Elegy_Jump3<*)
000572                  		rom_ptr_z80(Elegy_Jump3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000572 7F83             	dc.w  (((((Elegy_Jump3+Target))<<8)&$FF00)|((((Elegy_Jump3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000574                  Elegy_FM4:
000574                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000574 E0C0             		dc.b $E0,panCenter
                        	endif
000576                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000576 EF01             		dc.b $EF,$01
                        	endif
000578 A9               	dc.b	nE3

000579                  Elegy_Loop29:
000579 0302030205030502 	dc.b	$03, $02, $03, $02, $05, $03, $05, $02
000581 0503020302       	dc.b	$05, $03, $02, $03, $02

000586                  Elegy_Loop28:
000586 05               	dc.b	$05
000587                  	smpsLoop		$00, $08, Elegy_Loop28, Target
000587 F7               	dc.b	$F7
000588 0008             	dc.b	$00,$08
                        	if (Elegy_Loop28<*)
00058A                  		rom_ptr_z80(Elegy_Loop28+Target)
                        	;dc.w z80_ptr(ptr,addr)
00058A 8685             	dc.w  (((((Elegy_Loop28+Target))<<8)&$FF00)|((((Elegy_Loop28+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00058C                  	smpsLoop		$01, $04, Elegy_Loop29, Target
00058C F7               	dc.b	$F7
00058D 0104             	dc.b	$01,$04
                        	if (Elegy_Loop29<*)
00058F                  		rom_ptr_z80(Elegy_Loop29+Target)
                        	;dc.w z80_ptr(ptr,addr)
00058F 7985             	dc.w  (((((Elegy_Loop29+Target))<<8)&$FF00)|((((Elegy_Loop29+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000591                  Elegy_Jump4:
000591 AE03050205030703 	dc.b	nA3, $03, $05, $02, $05, $03, $07, $03
000599 0203020302030502 	dc.b	$02, $03, $02, $03, $02, $03, $05, $02
0005A1 0503020505B00AAE 	dc.b	$05, $03, $02, $05, $05, nB3, $0A, nA3
0005A9 0305020503070302 	dc.b	$03, $05, $02, $05, $03, $07, $03, $02
0005B1 0302030203050205 	dc.b	$03, $02, $03, $02, $03, $05, $02, $05
0005B9 03020505AA0AAE03 	dc.b	$03, $02, $05, $05, nF3, $0A, nA3, $03
0005C1 0502050307030203 	dc.b	$05, $02, $05, $03, $07, $03, $02, $03
0005C9 0203020305020503 	dc.b	$02, $03, $02, $03, $05, $02, $05, $03
0005D1 020505B00AAE0305 	dc.b	$02, $05, $05, nB3, $0A, nA3, $03, $05
0005D9 0205030703020302 	dc.b	$02, $05, $03, $07, $03, $02, $03, $02
0005E1 0302B303B102B503 	dc.b	$03, $02, nD4, $03, nC4, $02, nE4, $03
0005E9 B307B603B502B303 	dc.b	nD4, $07, nF4, $03, nE4, $02, nD4, $03
0005F1 B511             	dc.b	nE4, $11
0005F3                  	smpsAlterVol		$01
0005F3 E601             	dc.b	$E6,$01
0005F5 AE03020A03020503 	dc.b	nA3, $03, $02, $0A, $03, $02, $05, $03
0005FD 0203020302AC0302 	dc.b	$02, $03, $02, $03, $02, nG3, $03, $02
000605 0505030203020302 	dc.b	$05, $05, $03, $02, $03, $02, $03, $02
00060D 050302AA03020505 	dc.b	$05, $03, $02, nF3, $03, $02, $05, $05
000615 0302030203020503 	dc.b	$03, $02, $03, $02, $03, $02, $05, $03
00061D 02A9030205050302 	dc.b	$02, nE3, $03, $02, $05, $05, $03, $02
000625 03020302050302A7 	dc.b	$03, $02, $03, $02, $05, $03, $02, nD3
00062D 0302050503020302 	dc.b	$03, $02, $05, $05, $03, $02, $03, $02
000635 0302050302A503   	dc.b	$03, $02, $05, $03, $02, nC3, $03

00063C                  Elegy_Loop30:
00063C 0205050302030203 	dc.b	$02, $05, $05, $03, $02, $03, $02, $03
000644 02050302A903     	dc.b	$02, $05, $03, $02, nE3, $03
00064A                  	smpsLoop		$00, $02, Elegy_Loop30, Target
00064A F7               	dc.b	$F7
00064B 0002             	dc.b	$00,$02
                        	if (Elegy_Loop30<*)
00064D                  		rom_ptr_z80(Elegy_Loop30+Target)
                        	;dc.w z80_ptr(ptr,addr)
00064D 3C86             	dc.w  (((((Elegy_Loop30+Target))<<8)&$FF00)|((((Elegy_Loop30+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00064F 0205050302030203 	dc.b	$02, $05, $05, $03, $02, $03, $02, $03
000657 02050302AE03020A 	dc.b	$02, $05, $03, $02, nA3, $03, $02, $0A
00065F 0302050302030203 	dc.b	$03, $02, $05, $03, $02, $03, $02, $03
000667 02AC030205050302 	dc.b	$02, nG3, $03, $02, $05, $05, $03, $02
00066F 03020302050302AA 	dc.b	$03, $02, $03, $02, $05, $03, $02, nF3
000677 0302050503020302 	dc.b	$03, $02, $05, $05, $03, $02, $03, $02
00067F 0302050302A90302 	dc.b	$03, $02, $05, $03, $02, nE3, $03, $02
000687 0505030203020302 	dc.b	$05, $05, $03, $02, $03, $02, $03, $02
00068F 050302AA03020505 	dc.b	$05, $03, $02, nF3, $03, $02, $05, $05
000697 0302030203020503 	dc.b	$03, $02, $03, $02, $03, $02, $05, $03
00069F 02AC030205050302 	dc.b	$02, nG3, $03, $02, $05, $05, $03, $02
0006A7 03020302050302AD 	dc.b	$03, $02, $03, $02, $05, $03, $02, nAb3
0006AF 0302050503020302 	dc.b	$03, $02, $05, $05, $03, $02, $03, $02
0006B7 0302050302AE0302 	dc.b	$03, $02, $05, $03, $02, nA3, $03, $02
0006BF 0505030203020302 	dc.b	$05, $05, $03, $02, $03, $02, $03, $02
0006C7 050302           	dc.b	$05, $03, $02
0006CA                  	smpsAlterVol		$FF
0006CA E6FF             	dc.b	$E6,$FF
0006CC                  	smpsJump		Elegy_Jump4, Target
0006CC F6               	dc.b	$F6
                        	if (Elegy_Jump4<*)
0006CD                  		rom_ptr_z80(Elegy_Jump4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006CD 9185             	dc.w  (((((Elegy_Jump4+Target))<<8)&$FF00)|((((Elegy_Jump4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0006CF                  Elegy_FM5:
                        	;smpsFMvoice		$02
                        	;smpsPan		panCenter

                        ;Elegy_Loop31:
                        	;dc.b	nE5, $28, nRst
                        	;smpsLoop		$00, $04, Elegy_Loop31, Target

                        ;Elegy_Jump5:
                        	;smpsAlterVol	$10

                        ;Elegy_Loop32:
                        	;dc.b	nA4, $05, nRst, $03, nG4, $05, nRst, $02
                        	;smpsLoop		$00, $02, Elegy_Loop32, Target
                        	;dc.b	nA4, $05, nG4
                        	;smpsAlterVol	$FF
                        	;dc.b	nA4, nRst, $03, nG4, $05, nRst, $02, nA4
                        	;dc.b	$05, nRst, $14, nA4, $05, nRst, $03, nG4
                        	;dc.b	$05, nRst, $02
                        	;smpsAlterVol	$FF
                        	;dc.b	nA4, $05, nRst, $03, nG4, $05, nRst, $02
                        	;dc.b	nA4, $05, nG4, nA4, nRst, $03, nG4, $05
                        	;dc.b	nRst, $02, nF4, $05, nRst, $14

                        ;Elegy_Loop33:
                        	;dc.b	nA4, $05, nRst, $03, nG4, $05, nRst, $02
                        	;smpsLoop		$00, $02, Elegy_Loop33, Target
                        	;dc.b	nA4, $05, nG4, nA4, nRst, $03, nG4, $05
                        	;dc.b	nRst, $02, nA4, $05, nRst, $14

                        ;Elegy_Loop34:
                        	;dc.b	nA4, $05, nRst, $03, nG4, $05, nRst, $02
                        	;smpsLoop		$00, $02, Elegy_Loop34, Target
                        	;dc.b	nA4, $05, nG4
                        	;smpsAlterNote	$00
                        	;!@ dc.b	nRst

                        ;Elegy_Loop35:
                        	;!@ dc.b	$55
                        	;dc.b		nRst, $55
                        	;smpsLoop		$00, $08, Elegy_Loop35, Target
                        	;smpsAlterVol	$F2
                        	;smpsJump		Elegy_Jump5, Target

0006CF                  Elegy_FM6:
                        	;smpsFMvoice		$02
                        	;smpsPan		panCenter

                        ;Elegy_Loop36:
                        	;dc.b	nE4, $28, nRst
                        	;smpsLoop		$00, $04, Elegy_Loop36, Target

                        ;Elegy_Jump6:
                        	;!@ dc.b	nRst, $7F, $7F, $1A
                        	;dc.b	nRst, $7F, nRst, $7F, nRst, $1A
                        	;smpsAlterNote	$00

                        ;Elegy_Loop37:
                        	;!@ dc.b	$55
                        	;dc.b		nRst, $55
                        	;smpsLoop		$00, $08, Elegy_Loop37, Target
                        	;smpsJump		Elegy_Jump6, Target
0006CF                  	smpsStop
0006CF F2               	dc.b	$F2

0006D0                  Elegy_PSG1:
0006D0 8028             	dc.b	nRst, $28
0006D2                  	smpsPSGvoice	PSGVoi
0006D2 F500             	dc.b	$F5,PSGVoi

0006D4                  Elegy_Loop38:
0006D4 8C038F029203     	dc.b	nB0, $03, nD1, $02, nF1, $03
0006DA                  	smpsSetVol	$FF
0006DA ECFF             	dc.b	$EC,$FF
0006DC 9502980395029203 	dc.b	nAb1, $02, nB1, $03, nAb1, $02, nF1, $03
0006E4 8F028C0392029503 	dc.b	nD1, $02, nB0, $03, nF1, $02, nAb1, $03
0006EC 98029B0398029503 	dc.b	nB1, $02, nD2, $03, nB1, $02, nAb1, $03
0006F4 91028028         	dc.b	nE1, $02, nRst, $28
0006F8                  	smpsSetVol	$01
0006F8 EC01             	dc.b	$EC,$01
0006FA                  	smpsLoop		$00, $02, Elegy_Loop38, Target
0006FA F7               	dc.b	$F7
0006FB 0002             	dc.b	$00,$02
                        	if (Elegy_Loop38<*)
0006FD                  		rom_ptr_z80(Elegy_Loop38+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006FD D486             	dc.w  (((((Elegy_Loop38+Target))<<8)&$FF00)|((((Elegy_Loop38+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006FF 8C038F029203     	dc.b	nB0, $03, nD1, $02, nF1, $03
000705                  	smpsSetVol	$FF
000705 ECFF             	dc.b	$EC,$FF
000707 9502980395029203 	dc.b	nAb1, $02, nB1, $03, nAb1, $02, nF1, $03
00070F 8F028C0392029503 	dc.b	nD1, $02, nB0, $03, nF1, $02, nAb1, $03
000717 98029B0398029503 	dc.b	nB1, $02, nD2, $03, nB1, $02, nAb1, $03
00071F 910280288C038F02 	dc.b	nE1, $02, nRst, $28, nB0, $03, nD1, $02
000727 9203950280058C03 	dc.b	nF1, $03, nAb1, $02, nRst, $05, nB0, $03
00072F 8F028C0392029503 	dc.b	nD1, $02, nB0, $03, nF1, $02, nAb1, $03
000737 9802800A         	dc.b	nB1, $02, nRst, $0A

00073B                  Elegy_Jump7:
                        	;!@ dc.b	nRst, $7F, $7F, $42
00073B 807F807F8042     	dc.b	nRst, $7F, nRst, $7F, nRst, $42
000741                  	smpsAlterNote	$00
000741 E100             	dc.b	$E1,$00
                        	;!@ dc.b	$0A
000743 800A             	dc.b	nRst, $0A
000745                  	smpsSetVol	$01
000745 EC01             	dc.b	$EC,$01
000747                  	smpsAlterNote	$FF
000747 E1FF             	dc.b	$E1,$FF
000749 9D01             	dc.b	nE2, $01
00074B                  	smpsAlterNote	$00
00074B E100             	dc.b	$E1,$00
00074D E7A204A005A20A9D 	dc.b	smpsNoAttack, nA2, $04, nG2, $05, nA2, $0A, nE2
000755 05               	dc.b	$05
000756                  	smpsAlterNote	$02
000756 E102             	dc.b	$E1,$02
000758 E79E01E7A0       	dc.b	smpsNoAttack, nF2, $01, smpsNoAttack, nG2
00075D                  	smpsAlterNote	$FC
00075D E1FC             	dc.b	$E1,$FC
00075F E7A1             	dc.b	smpsNoAttack, nAb2
000761                  	smpsAlterNote	$FD
000761 E1FD             	dc.b	$E1,$FD
000763 E7A3             	dc.b	smpsNoAttack, nBb2
000765                  	smpsAlterNote	$FE
000765 E1FE             	dc.b	$E1,$FE
000767 E7A5             	dc.b	smpsNoAttack, nC3
000769                  	smpsAlterNote	$00
000769 E100             	dc.b	$E1,$00
00076B 08A407A012       	dc.b	$08, nB2, $07, nG2, $12
000770                  	smpsAlterNote	$01
000770 E101             	dc.b	$E1,$01
000772 E702             	dc.b	smpsNoAttack, $02
000774                  	smpsAlterNote	$02
000774 E102             	dc.b	$E1,$02
000776 E701             	dc.b	smpsNoAttack, $01
000778                  	smpsAlterNote	$04
000778 E104             	dc.b	$E1,$04
00077A E701             	dc.b	smpsNoAttack, $01
00077C                  	smpsAlterNote	$FF
00077C E1FF             	dc.b	$E1,$FF
00077E E79F             	dc.b	smpsNoAttack, nFs2
000780                  	smpsAlterNote	$FD
000780 E1FD             	dc.b	$E1,$FD
000782 E79E             	dc.b	smpsNoAttack, nF2
000784                  	smpsAlterNote	$00
000784 E100             	dc.b	$E1,$00
000786 E701             	dc.b	smpsNoAttack, $01
000788                  	smpsAlterNote	$02
000788 E102             	dc.b	$E1,$02
00078A 800A             	dc.b	nRst, $0A
00078C                  	smpsAlterNote	$FD
00078C E1FD             	dc.b	$E1,$FD
00078E A201             	dc.b	nA2, $01
000790                  	smpsAlterNote	$01
000790 E101             	dc.b	$E1,$01
000792 E7A504           	dc.b	smpsNoAttack, nC3, $04
000795                  	smpsAlterNote	$00
000795 E100             	dc.b	$E1,$00
000797 E7A40AA2078001A0 	dc.b	smpsNoAttack, nB2, $0A, nA2, $07, nRst, $01, nG2
00079F 07               	dc.b	$07
0007A0                  	smpsAlterNote	$01
0007A0 E101             	dc.b	$E1,$01
0007A2 01               	dc.b	$01
0007A3                  	smpsAlterNote	$00
0007A3 E100             	dc.b	$E1,$00
0007A5 E7A123           	dc.b	smpsNoAttack, nAb2, $23
0007A8                  	smpsAlterNote	$02
0007A8 E102             	dc.b	$E1,$02
0007AA E701             	dc.b	smpsNoAttack, $01
0007AC                  	smpsAlterNote	$FC
0007AC E1FC             	dc.b	$E1,$FC
0007AE E7A0             	dc.b	smpsNoAttack, nG2
0007B0                  	smpsAlterNote	$FF
0007B0 E1FF             	dc.b	$E1,$FF
0007B2 E701             	dc.b	smpsNoAttack, $01
0007B4                  	smpsAlterNote	$00
0007B4 E100             	dc.b	$E1,$00
0007B6 E79F             	dc.b	smpsNoAttack, nFs2
0007B8                  	smpsAlterNote	$FD
0007B8 E1FD             	dc.b	$E1,$FD
0007BA A1               	dc.b	nAb2
0007BB                  	smpsAlterNote	$00
0007BB E100             	dc.b	$E1,$00
0007BD E7A20E           	dc.b	smpsNoAttack, nA2, $0E
0007C0                  	smpsAlterNote	$03
0007C0 E103             	dc.b	$E1,$03
0007C2 A301             	dc.b	nBb2, $01
0007C4                  	smpsAlterNote	$00
0007C4 E100             	dc.b	$E1,$00
0007C6 E7A40E           	dc.b	smpsNoAttack, nB2, $0E
0007C9                  	smpsAlterNote	$01
0007C9 E101             	dc.b	$E1,$01
0007CB 01               	dc.b	$01
0007CC                  	smpsAlterNote	$00
0007CC E100             	dc.b	$E1,$00
0007CE E7A50EA301E7A407 	dc.b	smpsNoAttack, nC3, $0E, nBb2, $01, smpsNoAttack, nB2, $07
0007D6 A5A601E7A70F     	dc.b	nC3, nCs3, $01, smpsNoAttack, nD3, $0F
0007DC                  	smpsAlterNote	$01
0007DC E101             	dc.b	$E1,$01
0007DE E701             	dc.b	smpsNoAttack, $01
0007E0                  	smpsAlterNote	$03
0007E0 E103             	dc.b	$E1,$03
0007E2 E701             	dc.b	smpsNoAttack, $01
0007E4                  	smpsAlterNote	$01
0007E4 E101             	dc.b	$E1,$01
0007E6 E7A6             	dc.b	smpsNoAttack, nCs3
0007E8                  	smpsAlterNote	$00
0007E8 E100             	dc.b	$E1,$00
0007EA E7A58005         	dc.b	smpsNoAttack, nC3, nRst, $05
0007EE                  	smpsAlterNote	$FE
0007EE E1FE             	dc.b	$E1,$FE
0007F0 A201             	dc.b	nA2, $01
0007F2                  	smpsAlterNote	$00
0007F2 E100             	dc.b	$E1,$00
0007F4 E7A404A505A40AA7 	dc.b	smpsNoAttack, nB2, $04, nC3, $05, nB2, $0A, nD3
0007FC 08A507A403A502A4 	dc.b	$08, nC3, $07, nB2, $03, nC3, $02, nB2
000804 1E               	dc.b	$1E
000805                  	smpsAlterNote	$01
000805 E101             	dc.b	$E1,$01
000807 E701             	dc.b	smpsNoAttack, $01
000809                  	smpsAlterNote	$03
000809 E103             	dc.b	$E1,$03
00080B E701             	dc.b	smpsNoAttack, $01
00080D                  	smpsAlterNote	$FE
00080D E1FE             	dc.b	$E1,$FE
00080F E7A3E7A2         	dc.b	smpsNoAttack, nBb2, smpsNoAttack, nA2
000813                  	smpsAlterNote	$00
000813 E100             	dc.b	$E1,$00
000815 E7019605999DA2A5 	dc.b	smpsNoAttack, $01, nA1, $05, nC2, nE2, nA2, nC3
00081D A7               	dc.b	nD3
00081E                  	smpsAlterNote	$FF
00081E E1FF             	dc.b	$E1,$FF
000820 A801             	dc.b	nEb3, $01
000822                  	smpsAlterNote	$00
000822 E100             	dc.b	$E1,$00
000824 E7A90C           	dc.b	smpsNoAttack, nE3, $0C
000827                  	smpsAlterNote	$FF
000827 E1FF             	dc.b	$E1,$FF
000829 E7A801           	dc.b	smpsNoAttack, nEb3, $01
00082C                  	smpsAlterNote	$FE
00082C E1FE             	dc.b	$E1,$FE
00082E E7A7             	dc.b	smpsNoAttack, nD3
000830                  	smpsAlterNote	$00
000830 E100             	dc.b	$E1,$00
000832 05A9AA           	dc.b	$05, nE3, nF3
000835                  	smpsAlterNote	$FE
000835 E1FE             	dc.b	$E1,$FE
000837 A701             	dc.b	nD3, $01
000839                  	smpsAlterNote	$00
000839 E100             	dc.b	$E1,$00
00083B E7A907           	dc.b	smpsNoAttack, nE3, $07
00083E                  	smpsAlterNote	$02
00083E E102             	dc.b	$E1,$02
000840 AA01             	dc.b	nF3, $01
000842                  	smpsAlterNote	$00
000842 E100             	dc.b	$E1,$00
000844 E706AB01E7AC04   	dc.b	smpsNoAttack, $06, nFs3, $01, smpsNoAttack, nG3, $04
00084B                  	smpsAlterNote	$FE
00084B E1FE             	dc.b	$E1,$FE
00084D AA01             	dc.b	nF3, $01
00084F                  	smpsAlterNote	$00
00084F E100             	dc.b	$E1,$00
000851 E7AC0EAA0FA90AA7 	dc.b	smpsNoAttack, nG3, $0E, nF3, $0F, nE3, $0A, nD3
000859 23               	dc.b	$23
00085A                  	smpsAlterNote	$01
00085A E101             	dc.b	$E1,$01
00085C E701             	dc.b	smpsNoAttack, $01
00085E                  	smpsAlterNote	$02
00085E E102             	dc.b	$E1,$02
000860 E701             	dc.b	smpsNoAttack, $01
000862                  	smpsAlterNote	$FE
000862 E1FE             	dc.b	$E1,$FE
000864 E7A6             	dc.b	smpsNoAttack, nCs3
000866                  	smpsAlterNote	$01
000866 E101             	dc.b	$E1,$01
000868 E701             	dc.b	smpsNoAttack, $01
00086A                  	smpsAlterNote	$00
00086A E100             	dc.b	$E1,$00
00086C E7A58005A203A402 	dc.b	smpsNoAttack, nC3, nRst, $05, nA2, $03, nB2, $02
000874 A505A40AA005A206 	dc.b	nC3, $05, nB2, $0A, nG2, $05, nA2, $06
00087C                  	smpsAlterNote	$01
00087C E101             	dc.b	$E1,$01
00087E E701             	dc.b	smpsNoAttack, $01
000880                  	smpsAlterNote	$FD
000880 E1FD             	dc.b	$E1,$FD
000882 E7A1             	dc.b	smpsNoAttack, nAb2
000884                  	smpsAlterNote	$01
000884 E101             	dc.b	$E1,$01
000886 E701             	dc.b	smpsNoAttack, $01
000888                  	smpsAlterNote	$FE
000888 E1FE             	dc.b	$E1,$FE
00088A E7A0             	dc.b	smpsNoAttack, nG2
00088C                  	smpsAlterNote	$00
00088C E100             	dc.b	$E1,$00
00088E 8005A003A202A405 	dc.b	nRst, $05, nG2, $03, nA2, $02, nB2, $05
000896 A50AA705A406     	dc.b	nC3, $0A, nD3, $05, nB2, $06
00089C                  	smpsAlterNote	$01
00089C E101             	dc.b	$E1,$01
00089E E701             	dc.b	smpsNoAttack, $01
0008A0                  	smpsAlterNote	$FE
0008A0 E1FE             	dc.b	$E1,$FE
0008A2 E7A3             	dc.b	smpsNoAttack, nBb2
0008A4                  	smpsAlterNote	$02
0008A4 E102             	dc.b	$E1,$02
0008A6 E701             	dc.b	smpsNoAttack, $01
0008A8                  	smpsAlterNote	$FF
0008A8 E1FF             	dc.b	$E1,$FF
0008AA E7A2             	dc.b	smpsNoAttack, nA2
0008AC                  	smpsAlterNote	$00
0008AC E100             	dc.b	$E1,$00
0008AE 800A             	dc.b	nRst, $0A
0008B0                  	smpsSetVol	$FE
0008B0 ECFE             	dc.b	$EC,$FE
0008B2                  	smpsAlterNote	$02
0008B2 E102             	dc.b	$E1,$02
0008B4 A801             	dc.b	nEb3, $01
0008B6                  	smpsAlterNote	$00
0008B6 E100             	dc.b	$E1,$00
0008B8 E7AA04A70AA105A4 	dc.b	smpsNoAttack, nF3, $04, nD3, $0A, nAb2, $05, nB2
0008C0 AAA801E7AE13     	dc.b	nF3, nEb3, $01, smpsNoAttack, nA3, $13
0008C6                  	smpsSetVol	$02
0008C6 EC02             	dc.b	$EC,$02
0008C8 E701             	dc.b	smpsNoAttack, $01
0008CA                  	smpsSetVol	$01
0008CA EC01             	dc.b	$EC,$01
0008CC E703             	dc.b	smpsNoAttack, $03

0008CE                  Elegy_Loop39:
0008CE                  	smpsSetVol	$01
0008CE EC01             	dc.b	$EC,$01
0008D0 E702             	dc.b	smpsNoAttack, $02
0008D2                  	smpsLoop		$00, $04, Elegy_Loop39, Target
0008D2 F7               	dc.b	$F7
0008D3 0004             	dc.b	$00,$04
                        	if (Elegy_Loop39<*)
0008D5                  		rom_ptr_z80(Elegy_Loop39+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008D5 CE88             	dc.w  (((((Elegy_Loop39+Target))<<8)&$FF00)|((((Elegy_Loop39+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0008D7                  	smpsSetVol	$01
0008D7 EC01             	dc.b	$EC,$01
0008D9 E701             	dc.b	smpsNoAttack, $01
0008DB                  	smpsSetVol	$01
0008DB EC01             	dc.b	$EC,$01
0008DD E702             	dc.b	smpsNoAttack, $02
0008DF                  	smpsSetVol	$01
0008DF EC01             	dc.b	$EC,$01
0008E1 E703             	dc.b	smpsNoAttack, $03
0008E3                  	smpsSetVol	$01
0008E3 EC01             	dc.b	$EC,$01
0008E5 E702             	dc.b	smpsNoAttack, $02
0008E7                  	smpsSetVol	$F6
0008E7 ECF6             	dc.b	$EC,$F6
0008E9                  	smpsJump		Elegy_Jump7, Target
0008E9 F6               	dc.b	$F6
                        	if (Elegy_Jump7<*)
0008EA                  		rom_ptr_z80(Elegy_Jump7+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008EA 3B87             	dc.w  (((((Elegy_Jump7+Target))<<8)&$FF00)|((((Elegy_Jump7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0008EC                  Elegy_PSG2:
                        	;!@ dc.b	nRst, $7F, $7F, $42
0008EC 807F807F8042     	dc.b	nRst, $7F, nRst, $7F, nRst, $42

0008F2                  Elegy_Jump8:
0008F2                  	smpsPSGvoice	PSGVoi
0008F2 F500             	dc.b	$F5,PSGVoi

0008F4                  Elegy_Loop40:
0008F4 A2058003A0058002 	dc.b	nA2, $05, nRst, $03, nG2, $05, nRst, $02
0008FC                  	smpsLoop		$00, $02, Elegy_Loop40, Target
0008FC F7               	dc.b	$F7
0008FD 0002             	dc.b	$00,$02
                        	if (Elegy_Loop40<*)
0008FF                  		rom_ptr_z80(Elegy_Loop40+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008FF F488             	dc.w  (((((Elegy_Loop40+Target))<<8)&$FF00)|((((Elegy_Loop40+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000901 A205A0A28003A005 	dc.b	nA2, $05, nG2, nA2, nRst, $03, nG2, $05
000909 8002A2058014     	dc.b	nRst, $02, nA2, $05, nRst, $14

00090F                  Elegy_Loop41:
00090F A2058003A0058002 	dc.b	nA2, $05, nRst, $03, nG2, $05, nRst, $02
000917                  	smpsLoop		$00, $02, Elegy_Loop41, Target
000917 F7               	dc.b	$F7
000918 0002             	dc.b	$00,$02
                        	if (Elegy_Loop41<*)
00091A                  		rom_ptr_z80(Elegy_Loop41+Target)
                        	;dc.w z80_ptr(ptr,addr)
00091A 0F89             	dc.w  (((((Elegy_Loop41+Target))<<8)&$FF00)|((((Elegy_Loop41+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00091C A205A0A28003A005 	dc.b	nA2, $05, nG2, nA2, nRst, $03, nG2, $05
000924 80029E05         	dc.b	nRst, $02, nF2, $05
000928                  	smpsSetVol	$02
000928 EC02             	dc.b	$EC,$02
00092A A903A502A203A502 	dc.b	nE3, $03, nC3, $02, nA2, $03, nC3, $02
000932 A203A902A403A902 	dc.b	nA2, $03, nE3, $02, nB2, $03, nE3, $02
00093A                  	smpsSetVol	$FE
00093A ECFE             	dc.b	$EC,$FE

00093C                  Elegy_Loop42:
00093C A2058003A0058002 	dc.b	nA2, $05, nRst, $03, nG2, $05, nRst, $02
000944                  	smpsLoop		$00, $02, Elegy_Loop42, Target
000944 F7               	dc.b	$F7
000945 0002             	dc.b	$00,$02
                        	if (Elegy_Loop42<*)
000947                  		rom_ptr_z80(Elegy_Loop42+Target)
                        	;dc.w z80_ptr(ptr,addr)
000947 3C89             	dc.w  (((((Elegy_Loop42+Target))<<8)&$FF00)|((((Elegy_Loop42+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000949 A205A0A28003A005 	dc.b	nA2, $05, nG2, nA2, nRst, $03, nG2, $05
000951 8002A2058014     	dc.b	nRst, $02, nA2, $05, nRst, $14

000957                  Elegy_Loop43:
000957 A2058003A0058002 	dc.b	nA2, $05, nRst, $03, nG2, $05, nRst, $02
00095F                  	smpsLoop		$00, $02, Elegy_Loop43, Target
00095F F7               	dc.b	$F7
000960 0002             	dc.b	$00,$02
                        	if (Elegy_Loop43<*)
000962                  		rom_ptr_z80(Elegy_Loop43+Target)
                        	;dc.w z80_ptr(ptr,addr)
000962 5789             	dc.w  (((((Elegy_Loop43+Target))<<8)&$FF00)|((((Elegy_Loop43+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000964 A205A0A703A502A9 	dc.b	nA2, $05, nG2, nD3, $03, nC3, $02, nE3
00096C 03A707AA03A902A7 	dc.b	$03, nD3, $07, nF3, $03, nE3, $02, nD3
000974 03A90C80419D0580 	dc.b	$03, nE3, $0C, nRst, $41, nE2, $05, nRst
00097C 039B058002990580 	dc.b	$03, nD2, $05, nRst, $02, nC2, $05, nRst
000984 2891058003950580 	dc.b	$28, nE1, $05, nRst, $03, nAb1, $05, nRst
00098C 0298059B80039D05 	dc.b	$02, nB1, $05, nD2, nRst, $03, nE2, $05
000994 80029E059D8037A0 	dc.b	nRst, $02, nF2, $05, nE2, nRst, $37, nG2
00099C 0505A2A4800AA90F 	dc.b	$05, $05, nA2, nB2, nRst, $0A, nE3, $0F
0009A4 0FAA058003A90580 	dc.b	$0F, nF3, $05, nRst, $03, nE3, $05, nRst
0009AC 02A705A58003A405 	dc.b	$02, nD3, $05, nC3, nRst, $03, nB2, $05
0009B4 8002A305A2801E9D 	dc.b	nRst, $02, nBb2, $05, nA2, nRst, $1E, nE2
0009BC 039E02A00F9B980A 	dc.b	$03, nF2, $02, nG2, $0F, nD2, nB1, $0A
0009C4 9926019C9DA1079E 	dc.b	nC2, $26, $01, nEb2, nE2, nAb2, $07, nF2
0009CC 9D059B0898079505 	dc.b	nE2, $05, nD2, $08, nB1, $07, nAb1, $05
0009D4 9699039B029D059B 	dc.b	nA1, nC2, $03, nD2, $02, nE2, $05, nD2
0009DC 0A9805990D800298 	dc.b	$0A, nB1, $05, nC2, $0D, nRst, $02, nB1
0009E4 0399029B059D0A9E 	dc.b	$03, nC2, $02, nD2, $05, nE2, $0A, nF2
0009EC 059B0D8007980A9B 	dc.b	$05, nD2, $0D, nRst, $07, nB1, $0A, nD2
0009F4 9E960399029D03A2 	dc.b	nF2, nA1, $03, nC2, $02, nE2, $03, nA2
0009FC 16               	dc.b	$16
0009FD                  	smpsAlterNote	$00
0009FD E100             	dc.b	$E1,$00
0009FF 800A             	dc.b	nRst, $0A
000A01                  	smpsJump		Elegy_Jump8, Target
000A01 F6               	dc.b	$F6
                        	if (Elegy_Jump8<*)
000A02                  		rom_ptr_z80(Elegy_Jump8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A02 F288             	dc.w  (((((Elegy_Jump8+Target))<<8)&$FF00)|((((Elegy_Jump8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000A04                  Elegy_PSG3:
                        	;!@ dc.b	nRst, $7F, $7F, $42
000A04 807F807F8042     	dc.b	nRst, $7F, nRst, $7F, nRst, $42

000A0A                  Elegy_Jump9:
000A0A                  	smpsPSGvoice	PSGVoi
000A0A F500             	dc.b	$F5,PSGVoi

000A0C                  Elegy_Loop44:
000A0C 9905800398058002 	dc.b	nC2, $05, nRst, $03, nB1, $05, nRst, $02
000A14                  	smpsLoop		$00, $02, Elegy_Loop44, Target
000A14 F7               	dc.b	$F7
000A15 0002             	dc.b	$00,$02
                        	if (Elegy_Loop44<*)
000A17                  		rom_ptr_z80(Elegy_Loop44+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A17 0C8A             	dc.w  (((((Elegy_Loop44+Target))<<8)&$FF00)|((((Elegy_Loop44+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A19 9905989980039805 	dc.b	nC2, $05, nB1, nC2, nRst, $03, nB1, $05
000A21 800299058014     	dc.b	nRst, $02, nC2, $05, nRst, $14

000A27                  Elegy_Loop45:
000A27 9905800398058002 	dc.b	nC2, $05, nRst, $03, nB1, $05, nRst, $02
000A2F                  	smpsLoop		$00, $02, Elegy_Loop45, Target
000A2F F7               	dc.b	$F7
000A30 0002             	dc.b	$00,$02
                        	if (Elegy_Loop45<*)
000A32                  		rom_ptr_z80(Elegy_Loop45+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A32 278A             	dc.w  (((((Elegy_Loop45+Target))<<8)&$FF00)|((((Elegy_Loop45+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A34 9905989980039805 	dc.b	nC2, $05, nB1, nC2, nRst, $03, nB1, $05
000A3C 800296058001     	dc.b	nRst, $02, nA1, $05, nRst, $01
000A42                  	smpsSetVol	$04
000A42 EC04             	dc.b	$EC,$04
000A44 A902A503A202A503 	dc.b	nE3, $02, nC3, $03, nA2, $02, nC3, $03
000A4C A202A903A402A9   	dc.b	nA2, $02, nE3, $03, nB2, $02, nE3
000A53                  	smpsSetVol	$FC
000A53 ECFC             	dc.b	$EC,$FC

000A55                  Elegy_Loop46:
000A55 9905800398058002 	dc.b	nC2, $05, nRst, $03, nB1, $05, nRst, $02
000A5D                  	smpsLoop		$00, $02, Elegy_Loop46, Target
000A5D F7               	dc.b	$F7
000A5E 0002             	dc.b	$00,$02
                        	if (Elegy_Loop46<*)
000A60                  		rom_ptr_z80(Elegy_Loop46+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A60 558A             	dc.w  (((((Elegy_Loop46+Target))<<8)&$FF00)|((((Elegy_Loop46+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A62 9905989980039805 	dc.b	nC2, $05, nB1, nC2, nRst, $03, nB1, $05
000A6A 800299058014     	dc.b	nRst, $02, nC2, $05, nRst, $14

000A70                  Elegy_Loop47:
000A70 9905800398058002 	dc.b	nC2, $05, nRst, $03, nB1, $05, nRst, $02
000A78                  	smpsLoop		$00, $02, Elegy_Loop47, Target
000A78 F7               	dc.b	$F7
000A79 0002             	dc.b	$00,$02
                        	if (Elegy_Loop47<*)
000A7B                  		rom_ptr_z80(Elegy_Loop47+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A7B 708A             	dc.w  (((((Elegy_Loop47+Target))<<8)&$FF00)|((((Elegy_Loop47+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A7D 9905989E039D02A0 	dc.b	nC2, $05, nB1, nF2, $03, nE2, $02, nG2
000A85 039E07A203A0029E 	dc.b	$03, nF2, $07, nA2, $03, nG2, $02, nF2
000A8D 03A00C8046       	dc.b	$03, nG2, $0C, nRst, $46
000A92                  	smpsSetVol	$05
000A92 EC05             	dc.b	$EC,$05
000A94 9D0580039B058002 	dc.b	nE2, $05, nRst, $03, nD2, $05, nRst, $02
000A9C 9905802891058003 	dc.b	nC2, $05, nRst, $28, nE1, $05, nRst, $03
000AA4 9505800298059B80 	dc.b	nAb1, $05, nRst, $02, nB1, $05, nD2, nRst
000AAC 039D0580029E059D 	dc.b	$03, nE2, $05, nRst, $02, nF2, $05, nE2
000AB4 8037A00505A2A480 	dc.b	nRst, $37, nG2, $05, $05, nA2, nB2, nRst
000ABC 0AA90F0FAA058003 	dc.b	$0A, nE3, $0F, $0F, nF3, $05, nRst, $03
000AC4 A9058002A705A580 	dc.b	nE3, $05, nRst, $02, nD3, $05, nC3, nRst
000ACC 03A4058002A305A2 	dc.b	$03, nB2, $05, nRst, $02, nBb2, $05, nA2
000AD4 801E9D039E02A00F 	dc.b	nRst, $1E, nE2, $03, nF2, $02, nG2, $0F
000ADC 9B980A9926019C9D 	dc.b	nD2, nB1, $0A, nC2, $26, $01, nEb2, nE2
000AE4 A1079E9D059B0898 	dc.b	nAb2, $07, nF2, nE2, $05, nD2, $08, nB1
000AEC 0795059699039B02 	dc.b	$07, nAb1, $05, nA1, nC2, $03, nD2, $02
000AF4 9D059B0A9805990D 	dc.b	nE2, $05, nD2, $0A, nB1, $05, nC2, $0D
000AFC 8002980399029B05 	dc.b	nRst, $02, nB1, $03, nC2, $02, nD2, $05
000B04 9D0A9E059B0D8007 	dc.b	nE2, $0A, nF2, $05, nD2, $0D, nRst, $07
000B0C 980A9B9E96039902 	dc.b	nB1, $0A, nD2, nF2, nA1, $03, nC2, $02
000B14 9D03A216         	dc.b	nE2, $03, nA2, $16
000B18                  	smpsAlterNote	$00
000B18 E100             	dc.b	$E1,$00
000B1A 8005             	dc.b	nRst, $05
000B1C                  	smpsSetVol	$FB
000B1C ECFB             	dc.b	$EC,$FB
000B1E                  	smpsJump		Elegy_Jump9, Target
000B1E F6               	dc.b	$F6
                        	if (Elegy_Jump9<*)
000B1F                  		rom_ptr_z80(Elegy_Jump9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B1F 0A8A             	dc.w  (((((Elegy_Jump9+Target))<<8)&$FF00)|((((Elegy_Jump9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B21                  Elegy_PWM1:
000B21                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000B21 E0C0             		dc.b $E0,panCenter
                        	endif
000B23 8928             	dc.b pCrashCymb, $28

000B25                  Elegy_PWM1_Loop1:
000B25 810A82           	dc.b pEKick, $0A, pESnare
000B28                  	smpsLoop		$00, $0C, Elegy_PWM1_Loop1, Target
000B28 F7               	dc.b	$F7
000B29 000C             	dc.b	$00,$0C
                        	if (Elegy_PWM1_Loop1<*)
000B2B                  		rom_ptr_z80(Elegy_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B2B 258B             	dc.w  (((((Elegy_PWM1_Loop1+Target))<<8)&$FF00)|((((Elegy_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B2D 891483           	dc.b pCrashCymb, $14, pSplashCymb

000B30                  Elegy_PWM1_Jump1:
000B30 8928             	dc.b pCrashCymb, $28

000B32                  Elegy_PWM1_Loop2:
000B32 810A828182818298 	dc.b pEKick, $0A, pESnare, pEKick, pESnare, pEKick, pESnare, pClosedHH
000B3A 05050505         	dc.b $05, $05, $05, $05
000B3E                  	smpsLoop		$00, $02, Elegy_PWM1_Loop2, Target
000B3E F7               	dc.b	$F7
000B3F 0002             	dc.b	$00,$02
                        	if (Elegy_PWM1_Loop2<*)
000B41                  		rom_ptr_z80(Elegy_PWM1_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B41 328B             	dc.w  (((((Elegy_PWM1_Loop2+Target))<<8)&$FF00)|((((Elegy_PWM1_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B43 810A82818298     	dc.b pEKick, $0A, pESnare, pEKick, pESnare, pClosedHH

000B49                  Elegy_PWM1_Loop3:
000B49 05               	dc.b $05
000B4A                  	smpsLoop		$00, $08, Elegy_PWM1_Loop3, Target
000B4A F7               	dc.b	$F7
000B4B 0008             	dc.b	$00,$08
                        	if (Elegy_PWM1_Loop3<*)
000B4D                  		rom_ptr_z80(Elegy_PWM1_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B4D 498B             	dc.w  (((((Elegy_PWM1_Loop3+Target))<<8)&$FF00)|((((Elegy_PWM1_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B4F 891483           	dc.b pCrashCymb, $14, pSplashCymb

000B52                  Elegy_PWM1_Loop5:
000B52 8928             	dc.b pCrashCymb, $28

000B54                  Elegy_PWM1_Loop4:
000B54 810A828182818298 	dc.b pEKick, $0A, pESnare, pEKick, pESnare, pEKick, pESnare, pClosedHH
000B5C 05050505         	dc.b $05, $05, $05, $05
000B60                  	smpsLoop		$00, $03, Elegy_PWM1_Loop4, Target
000B60 F7               	dc.b	$F7
000B61 0003             	dc.b	$00,$03
                        	if (Elegy_PWM1_Loop4<*)
000B63                  		rom_ptr_z80(Elegy_PWM1_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B63 548B             	dc.w  (((((Elegy_PWM1_Loop4+Target))<<8)&$FF00)|((((Elegy_PWM1_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B65 810A828182       	dc.b pEKick, $0A, pESnare, pEKick, pESnare
000B6A                  	smpsLoop		$01, $02, Elegy_PWM1_Loop5, Target
000B6A F7               	dc.b	$F7
000B6B 0102             	dc.b	$01,$02
                        	if (Elegy_PWM1_Loop5<*)
000B6D                  		rom_ptr_z80(Elegy_PWM1_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B6D 528B             	dc.w  (((((Elegy_PWM1_Loop5+Target))<<8)&$FF00)|((((Elegy_PWM1_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B6F                  	smpsJump		Elegy_PWM1_Jump1, Target
000B6F F6               	dc.b	$F6
                        	if (Elegy_PWM1_Jump1<*)
000B70                  		rom_ptr_z80(Elegy_PWM1_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B70 308B             	dc.w  (((((Elegy_PWM1_Jump1+Target))<<8)&$FF00)|((((Elegy_PWM1_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B72                  Elegy_PWM2:
000B72 810A82818298     	dc.b pEKick, $0A, pESnare, pEKick, pESnare, pClosedHH

000B78                  Elegy_PWM2_Loop1:
000B78 05               	dc.b $05
000B79                  	smpsLoop		$00, $08, Elegy_PWM2_Loop1, Target
000B79 F7               	dc.b	$F7
000B7A 0008             	dc.b	$00,$08
                        	if (Elegy_PWM2_Loop1<*)
000B7C                  		rom_ptr_z80(Elegy_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B7C 788B             	dc.w  (((((Elegy_PWM2_Loop1+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B7E 0302030205030502 	dc.b $03, $02, $03, $02, $05, $03, $05, $02
000B86 0503020302       	dc.b $05, $03, $02, $03, $02
000B8B                  	smpsLoop		$01, $03, Elegy_PWM2_Loop1, Target
000B8B F7               	dc.b	$F7
000B8C 0103             	dc.b	$01,$03
                        	if (Elegy_PWM2_Loop1<*)
000B8E                  		rom_ptr_z80(Elegy_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B8E 788B             	dc.w  (((((Elegy_PWM2_Loop1+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B90 8103020307030285 	dc.b pEKick, $03, $02, $03, $07, $03, $02, $85
000B98 03028603870C     	dc.b $03, $02, $86, $03, $87, $0C

000B9E                  Elegy_PWM2_Jump1:
000B9E 810A8298         	dc.b pEKick, $0A, pESnare, pClosedHH

000BA2                  Elegy_PWM2_Loop2:
000BA2 05               	dc.b $05
000BA3                  	smpsLoop		$00, $10, Elegy_PWM2_Loop2, Target
000BA3 F7               	dc.b	$F7
000BA4 0010             	dc.b	$00,$10
                        	if (Elegy_PWM2_Loop2<*)
000BA6                  		rom_ptr_z80(Elegy_PWM2_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BA6 A28B             	dc.w  (((((Elegy_PWM2_Loop2+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BA8 810A8298         	dc.b pEKick, $0A, pESnare, pClosedHH

000BAC                  Elegy_PWM2_Loop3:
000BAC 05               	dc.b $05
000BAD                  	smpsLoop		$00, $0C, Elegy_PWM2_Loop3, Target
000BAD F7               	dc.b	$F7
000BAE 000C             	dc.b	$00,$0C
                        	if (Elegy_PWM2_Loop3<*)
000BB0                  		rom_ptr_z80(Elegy_PWM2_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BB0 AC8B             	dc.w  (((((Elegy_PWM2_Loop3+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BB2 810A8298         	dc.b pEKick, $0A, pESnare, pClosedHH

000BB6                  Elegy_PWM2_Loop4:
000BB6 05               	dc.b $05
000BB7                  	smpsLoop		$00, $07, Elegy_PWM2_Loop4, Target
000BB7 F7               	dc.b	$F7
000BB8 0007             	dc.b	$00,$07
                        	if (Elegy_PWM2_Loop4<*)
000BBA                  		rom_ptr_z80(Elegy_PWM2_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BBA B68B             	dc.w  (((((Elegy_PWM2_Loop4+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BBC 2D81030203070302 	dc.b $2D, pEKick, $03, $02, $03, $07, $03, $02
000BC4 8503028603870C   	dc.b $85, $03, $02, $86, $03, $87, $0C

000BCB                  Elegy_PWM2_Loop9:
000BCB 810A8298         	dc.b pEKick, $0A, pESnare, pClosedHH

000BCF                  Elegy_PWM2_Loop5:
000BCF 05               	dc.b $05
000BD0                  	smpsLoop		$00, $10, Elegy_PWM2_Loop5, Target
000BD0 F7               	dc.b	$F7
000BD1 0010             	dc.b	$00,$10
                        	if (Elegy_PWM2_Loop5<*)
000BD3                  		rom_ptr_z80(Elegy_PWM2_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BD3 CF8B             	dc.w  (((((Elegy_PWM2_Loop5+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000BD5                  Elegy_PWM2_Loop7:
000BD5 810A8298         	dc.b pEKick, $0A, pESnare, pClosedHH

000BD9                  Elegy_PWM2_Loop6:
000BD9 05               	dc.b $05
000BDA                  	smpsLoop		$00, $0C, Elegy_PWM2_Loop6, Target
000BDA F7               	dc.b	$F7
000BDB 000C             	dc.b	$00,$0C
                        	if (Elegy_PWM2_Loop6<*)
000BDD                  		rom_ptr_z80(Elegy_PWM2_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BDD D98B             	dc.w  (((((Elegy_PWM2_Loop6+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BDF                  	smpsLoop		$01, $02, Elegy_PWM2_Loop7, Target
000BDF F7               	dc.b	$F7
000BE0 0102             	dc.b	$01,$02
                        	if (Elegy_PWM2_Loop7<*)
000BE2                  		rom_ptr_z80(Elegy_PWM2_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BE2 D58B             	dc.w  (((((Elegy_PWM2_Loop7+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BE4 810A8298         	dc.b pEKick, $0A, pESnare, pClosedHH

000BE8                  Elegy_PWM2_Loop8:
000BE8 05               	dc.b $05
000BE9                  	smpsLoop		$00, $08, Elegy_PWM2_Loop8, Target
000BE9 F7               	dc.b	$F7
000BEA 0008             	dc.b	$00,$08
                        	if (Elegy_PWM2_Loop8<*)
000BEC                  		rom_ptr_z80(Elegy_PWM2_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BEC E88B             	dc.w  (((((Elegy_PWM2_Loop8+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BEE                  	smpsLoop		$02, $02, Elegy_PWM2_Loop9, Target
000BEE F7               	dc.b	$F7
000BEF 0202             	dc.b	$02,$02
                        	if (Elegy_PWM2_Loop9<*)
000BF1                  		rom_ptr_z80(Elegy_PWM2_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BF1 CB8B             	dc.w  (((((Elegy_PWM2_Loop9+Target))<<8)&$FF00)|((((Elegy_PWM2_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BF3                  	smpsJump		Elegy_PWM2_Jump1, Target
000BF3 F6               	dc.b	$F6
                        	if (Elegy_PWM2_Jump1<*)
000BF4                  		rom_ptr_z80(Elegy_PWM2_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BF4 9E8B             	dc.w  (((((Elegy_PWM2_Jump1+Target))<<8)&$FF00)|((((Elegy_PWM2_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000BF6                  Elegy_PWM3:
000BF6 9803020302050305 	dc.b pClosedHH, $03, $02, $03, $02, $05, $03, $05
000BFE 02050302037F8080 	dc.b $02, $05, $03, $02, $03, $7F, nRst, nRst
000C06 08810302030C     	dc.b $08, pEKick, $03, $02, $03, $0C

000C0C                  Elegy_PWM3_Jump1:
000C0C 9805050505810A82 	dc.b pClosedHH, $05, $05, $05, $05, pEKick, $0A, pESnare
000C14 7F8003897F800D81 	dc.b $7F, nRst, $03, pCrashCymb, $7F, nRst, $0D, pEKick
000C1C 0302030C         	dc.b $03, $02, $03, $0C

000C20                  Elegy_PWM3_Loop1:
000C20 9805050505810A82 	dc.b pClosedHH, $05, $05, $05, $05, pEKick, $0A, pESnare
000C28 7F808024         	dc.b $7F, nRst, nRst, $24
000C2C                  	smpsLoop		$00, $02, Elegy_PWM3_Loop1, Target
000C2C F7               	dc.b	$F7
000C2D 0002             	dc.b	$00,$02
                        	if (Elegy_PWM3_Loop1<*)
000C2F                  		rom_ptr_z80(Elegy_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C2F 208C             	dc.w  (((((Elegy_PWM3_Loop1+Target))<<8)&$FF00)|((((Elegy_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C31                  	smpsJump		Elegy_PWM3_Jump1, Target
000C31 F6               	dc.b	$F6
                        	if (Elegy_PWM3_Jump1<*)
000C32                  		rom_ptr_z80(Elegy_PWM3_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C32 0C8C             	dc.w  (((((Elegy_PWM3_Jump1+Target))<<8)&$FF00)|((((Elegy_PWM3_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000C34                  Elegy_PWM4:
000C34                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000C34 E0C0             		dc.b $E0,panCenter
                        	endif

000C36                  Elegy_PWM4_Loop1:
000C36 9F2880           	dc.b	pOrchHitHi, $28, nRst
000C39                  	smpsLoop		$00, $04, Elegy_PWM4_Loop1, Target
000C39 F7               	dc.b	$F7
000C3A 0004             	dc.b	$00,$04
                        	if (Elegy_PWM4_Loop1<*)
000C3C                  		rom_ptr_z80(Elegy_PWM4_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C3C 368C             	dc.w  (((((Elegy_PWM4_Loop1+Target))<<8)&$FF00)|((((Elegy_PWM4_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000C3E                  Elegy_PWM4_Jump1:
                        	;smpsAlterVol	$10

000C3E                  Elegy_PWM4_Loop2:
000C3E A0058003A1058002 	dc.b	pOrchHitMed, $05, nRst, $03, pOrchHitLo, $05, nRst, $02
000C46                  	smpsLoop		$00, $02, Elegy_PWM4_Loop2, Target
000C46 F7               	dc.b	$F7
000C47 0002             	dc.b	$00,$02
                        	if (Elegy_PWM4_Loop2<*)
000C49                  		rom_ptr_z80(Elegy_PWM4_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C49 3E8C             	dc.w  (((((Elegy_PWM4_Loop2+Target))<<8)&$FF00)|((((Elegy_PWM4_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C4B A005A1           	dc.b	pOrchHitMed, $05, pOrchHitLo
                        	;smpsAlterVol	$FF
000C4E A08003A1058002A0 	dc.b	pOrchHitMed, nRst, $03, pOrchHitLo, $05, nRst, $02, pOrchHitMed
000C56 058014A0058003A1 	dc.b	$05, nRst, $14, pOrchHitMed, $05, nRst, $03, pOrchHitLo
000C5E 058002           	dc.b	$05, nRst, $02
                        	;smpsAlterVol	$FF
000C61 A0058003A1058002 	dc.b	pOrchHitMed, $05, nRst, $03, pOrchHitLo, $05, nRst, $02
000C69 A005A1A08003A105 	dc.b	pOrchHitMed, $05, pOrchHitLo, pOrchHitMed, nRst, $03, pOrchHitLo, $05
000C71 8002A2058014     	dc.b	nRst, $02, pOrchHitLower, $05, nRst, $14

000C77                  Elegy_PWM4_Loop3:
000C77 A0058003A1058002 	dc.b	pOrchHitMed, $05, nRst, $03, pOrchHitLo, $05, nRst, $02
000C7F                  	smpsLoop		$00, $02, Elegy_PWM4_Loop3, Target
000C7F F7               	dc.b	$F7
000C80 0002             	dc.b	$00,$02
                        	if (Elegy_PWM4_Loop3<*)
000C82                  		rom_ptr_z80(Elegy_PWM4_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C82 778C             	dc.w  (((((Elegy_PWM4_Loop3+Target))<<8)&$FF00)|((((Elegy_PWM4_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C84 A005A1A08003A105 	dc.b	pOrchHitMed, $05, pOrchHitLo, pOrchHitMed, nRst, $03, pOrchHitLo, $05
000C8C 8002A0058014     	dc.b	nRst, $02, pOrchHitMed, $05, nRst, $14

000C92                  Elegy_PWM4_Loop4:
000C92 A0058003A1058002 	dc.b	pOrchHitMed, $05, nRst, $03, pOrchHitLo, $05, nRst, $02
000C9A                  	smpsLoop		$00, $02, Elegy_PWM4_Loop4, Target
000C9A F7               	dc.b	$F7
000C9B 0002             	dc.b	$00,$02
                        	if (Elegy_PWM4_Loop4<*)
000C9D                  		rom_ptr_z80(Elegy_PWM4_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C9D 928C             	dc.w  (((((Elegy_PWM4_Loop4+Target))<<8)&$FF00)|((((Elegy_PWM4_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C9F A005A1           	dc.b	pOrchHitMed, $05, pOrchHitLo
                        	;!@ smpsAlterNote	$00
000CA2 80               	dc.b	nRst

000CA3                  Elegy_PWM4_Loop5:
000CA3 55               	dc.b	$55
000CA4                  	smpsLoop		$00, $08, Elegy_PWM4_Loop5, Target
000CA4 F7               	dc.b	$F7
000CA5 0008             	dc.b	$00,$08
                        	if (Elegy_PWM4_Loop5<*)
000CA7                  		rom_ptr_z80(Elegy_PWM4_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000CA7 A38C             	dc.w  (((((Elegy_PWM4_Loop5+Target))<<8)&$FF00)|((((Elegy_PWM4_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;smpsAlterVol	$F2
000CA9                  	smpsJump		Elegy_PWM4_Jump1, Target
000CA9 F6               	dc.b	$F6
                        	if (Elegy_PWM4_Jump1<*)
000CAA                  		rom_ptr_z80(Elegy_PWM4_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000CAA 3E8C             	dc.w  (((((Elegy_PWM4_Jump1+Target))<<8)&$FF00)|((((Elegy_PWM4_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000CAC                  Elegy_Patches:
                        	;dc.b	$38
                        	;dc.b	$75, $13, $71, $11, $D1, $52, $14, $14
                        	;dc.b	$0A, $07, $01, $01, $00, $00, $00, $00
                        	;dc.b	$F0, $F0, $F0, $FC, $23, $1E, $1E, $06
                        	
                        	;dc.b	$08
                        	;dc.b	$0A, $70, $30, $00, $1F, $1F, $5F, $5F
                        	;dc.b	$12, $0E, $0A, $0A, $00, $04, $04, $03
                        	;dc.b	$2F, $2F, $2F, $2F, $24, $2D, $13, $06
                        	
                        	;dc.b	$3A
                        	;dc.b	$64, $60, $60, $30, $9D, $9D, $50, $4C
                        	;dc.b	$04, $06, $04, $05, $1F, $05, $01, $01
                        	;dc.b	$A8, $25, $25, $55, $7F, $06, $14, $00
                        	
000CAC 38               	dc.b	$38
000CAD 75137111D1521414 	dc.b	$75, $13, $71, $11, $D1, $52, $14, $14
000CB5 0A07010100000000 	dc.b	$0A, $07, $01, $01, $00, $00, $00, $00
000CBD F0F0F0FC231E1E14 	dc.b	$F0, $F0, $F0, $FC, $23, $1E, $1E, $14
                        	
000CC5 08               	dc.b	$08
000CC6 0A7030001F1F5F5F 	dc.b 	$0A, $70, $30, $00, $1F, $1F, $5F, $5F
000CCE 120E0A0A00040403 	dc.b	$12, $0E, $0A, $0A, $00, $04, $04, $03
000CD6 2F2F2F2F242D1318 	dc.b	$2F, $2F, $2F, $2F, $24, $2D, $13, $18
                        	
000CDE 3A               	dc.b	$3A
000CDF 646060309D9D504C 	dc.b	$64, $60, $60, $30, $9D, $9D, $50, $4C
000CE7 040604051F050101 	dc.b	$04, $06, $04, $05, $1F, $05, $01, $01
000CEF A82525557F061414 	dc.b	$A8, $25, $25, $55, $7F, $06, $14, $14

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  ELEGY_FM1          00000040
ELEGY_FM2          000001BA    ELEGY_FM3          00000334    ELEGY_FM4          00000574
ELEGY_FM5          000006CF    ELEGY_FM6          000006CF    ELEGY_JUMP1        00000050
ELEGY_JUMP2        000001CA    ELEGY_JUMP3        0000037F    ELEGY_JUMP4        00000591
ELEGY_JUMP7        0000073B    ELEGY_JUMP8        000008F2    ELEGY_JUMP9        00000A0A
ELEGY_LOO$8        0000038F    ELEGY_LOO$9        00000399    ELEGY_LOOP1        00000046
ELEGY_LOOP10       000003B8    ELEGY_LOOP11       000003C2    ELEGY_LOOP12       000003E1
ELEGY_LOOP13       000003EB    ELEGY_LOOP14       00000442    ELEGY_LOOP15       00000458
ELEGY_LOOP16       0000046E    ELEGY_LOOP17       00000484    ELEGY_LOOP18       0000049A
ELEGY_LOOP19       000004B0    ELEGY_LOOP2        000001AE    ELEGY_LOOP20       000004A6
ELEGY_LOOP21       000004DE    ELEGY_LOOP22       000004F4    ELEGY_LOOP23       0000050A
ELEGY_LOOP24       00000520    ELEGY_LOOP25       00000536    ELEGY_LOOP26       0000054C
ELEGY_LOOP27       00000562    ELEGY_LOOP28       00000586    ELEGY_LOOP29       00000579
ELEGY_LOOP3        000001C0    ELEGY_LOOP30       0000063C    ELEGY_LOOP38       000006D4
ELEGY_LOOP39       000008CE    ELEGY_LOOP4        00000328    ELEGY_LOOP40       000008F4
ELEGY_LOOP41       0000090F    ELEGY_LOOP42       0000093C    ELEGY_LOOP43       00000957
ELEGY_LOOP44       00000A0C    ELEGY_LOOP45       00000A27    ELEGY_LOOP46       00000A55
ELEGY_LOOP47       00000A70    ELEGY_LOOP5        00000350    ELEGY_LOOP6        0000033A
ELEGY_LOOP7        00000374    ELEGY_PATCHES      00000CAC    ELEGY_PSG1         000006D0
ELEGY_PSG2         000008EC    ELEGY_PSG3         00000A04    ELEGY_PWM1         00000B21
ELEGY_PWM1_JUMP1   00000B30    ELEGY_PWM1_LOOP1   00000B25    ELEGY_PWM1_LOOP2   00000B32
ELEGY_PWM1_LOOP3   00000B49    ELEGY_PWM1_LOOP4   00000B54    ELEGY_PWM1_LOOP5   00000B52
ELEGY_PWM2         00000B72    ELEGY_PWM2_JUMP1   00000B9E    ELEGY_PWM2_LOOP1   00000B78
ELEGY_PWM2_LOOP2   00000BA2    ELEGY_PWM2_LOOP3   00000BAC    ELEGY_PWM2_LOOP4   00000BB6
ELEGY_PWM2_LOOP5   00000BCF    ELEGY_PWM2_LOOP6   00000BD9    ELEGY_PWM2_LOOP7   00000BD5
ELEGY_PWM2_LOOP8   00000BE8    ELEGY_PWM2_LOOP9   00000BCB    ELEGY_PWM3         00000BF6
ELEGY_PWM3_JUMP1   00000C0C    ELEGY_PWM3_LOOP1   00000C20    ELEGY_PWM4         00000C34
ELEGY_PWM4_JUMP1   00000C3E    ELEGY_PWM4_LOOP1   00000C36    ELEGY_PWM4_LOOP2   00000C3E
ELEGY_PWM4_LOOP3   00000C77    ELEGY_PWM4_LOOP4   00000C92    ELEGY_PWM4_LOOP5   00000CA3
FMPITCH            00000000 E  NA0                0000008A E  NA1                00000096 E
NA2                000000A2 E  NA3                000000AE E  NA4                000000BA E
NA5                000000C6 E  NA6                000000D2 E  NA7                000000DE E
NAB0               00000089 E  NAB1               00000095 E  NAB2               000000A1 E
NAB3               000000AD E  NAB4               000000B9 E  NAB5               000000C5 E
NAB6               000000D1 E  NAB7               000000DD E  NB0                0000008C E
NB1                00000098 E  NB2                000000A4 E  NB3                000000B0 E
NB4                000000BC E  NB5                000000C8 E  NB6                000000D4 E
NBB0               0000008B E  NBB1               00000097 E  NBB2               000000A3 E
NBB3               000000AF E  NBB4               000000BB E  NBB5               000000C7 E
NBB6               000000D3 E  NBB7               000000DF E  NC0                00000081 E
NC1                0000008D E  NC2                00000099 E  NC3                000000A5 E
NC4                000000B1 E  NC5                000000BD E  NC6                000000C9 E
NC7                000000D5 E  NCS0               00000082 E  NCS1               0000008E E
NCS2               0000009A E  NCS3               000000A6 E  NCS4               000000B2 E
NCS5               000000BE E  NCS6               000000CA E  NCS7               000000D6 E
ND0                00000083 E  ND1                0000008F E  ND2                0000009B E
ND3                000000A7 E  ND4                000000B3 E  ND5                000000BF E
ND6                000000CB E  ND7                000000D7 E  NE0                00000085 E
NE1                00000091 E  NE2                0000009D E  NE3                000000A9 E
NE4                000000B5 E  NE5                000000C1 E  NE6                000000CD E
NE7                000000D9 E  NEB0               00000084 E  NEB1               00000090 E
NEB2               0000009C E  NEB3               000000A8 E  NEB4               000000B4 E
NEB5               000000C0 E  NEB6               000000CC E  NEB7               000000D8 E
NF0                00000086 E  NF1                00000092 E  NF2                0000009E E
NF3                000000AA E  NF4                000000B6 E  NF5                000000C2 E
NF6                000000CE E  NF7                000000DA E  NFS0               00000087 E
NFS1               00000093 E  NFS2               0000009F E  NFS3               000000AB E
NFS4               000000B7 E  NFS5               000000C3 E  NFS6               000000CF E
NFS7               000000DB E  NG0                00000088 E  NG1                00000094 E
NG2                000000A0 E  NG3                000000AC E  NG4                000000B8 E
NG5                000000C4 E  NG6                000000D0 E  NG7                000000DC E
NRST               00000080 E  PAKICK             0000008B E  PANCENTER          000000C0 S
PANCENTRE          000000C0 S  PANLEFT            00000080 S  PANNONE            00000000 S
PANRIGHT           00000040 S  PASNARE            0000008C E  PBELL              0000008D E
PBONGOHI           00000092 E  PBONGOLO           00000093 E  PCLAP              0000008A E
PCLICKHI           00000090 E  PCLICKLO           00000091 E  PCLOSEDHH          00000098 E
PCOWBELL           0000008F E  PCRASHCYMB         00000089 E  PCRA_D81           00000081 E
PCRA_D82           0000008C E  PCRA_D83           00000085 E  PCRA_D84           00000086 E
PCRA_D85           00000087 E  PEHIHAT            00000088 E  PEKICK             00000081 E
PESNARE            00000082 E  PFINGSNAP          0000008E E  PFINGSNAPHI        0000008E E
PFINGSNAPLO        0000009E E  PNEPDADA           0000009D E  POPENHH            00000099 E
PORCHHITHI         0000009F E  PORCHHITLO         000000A1 E  PORCHHITLOWER      000000A2 E
PORCHHITMED        000000A0 E  PRIDEBELL          00000084 E  PSEGA              00000097 E
PSGDELTA           0000000C E  PSGMOD             00000000 E  PSGPITCH           0000000C E
PSGVOI             00000000 E  PSGVOL1            00000002 E  PSGVOL2            00000003 E
PSILENCE           00000096 E  PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E
PTIMPANILO         00000095 E  PTOMHI             00000085 E  PTOMLOW            00000087 E
PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E
PTOMMID            00000086 E  PWMPITCH1          00000000 E  PWMPITCH2          00000018 E
PWMVOL             000000AA E  SMPSED             000000ED E  SMPSEE             000000EE E
SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E  SMPSMODON          000000F1 E
SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E  SMPSPITCH01HI      0000000C E
SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E  SMPSPITCH02LO      000000E8 E
SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E  SMPSPITCH04HI      00000030 E
SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E  SMPSPITCH05LO      000000C4 E
SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E  SMPSPITCH07HI      00000054 E
SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E  SMPSPITCH08LO      000000A0 E
SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E  SMPSPITCH10HI      00000078 E
SMPSPITCH10LO      00000088 E  TARGET             00040000 E  TEMPDIV            00000002 S
