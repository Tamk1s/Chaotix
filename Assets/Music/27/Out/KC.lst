                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
       = 00008E         pFingSnap	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm

                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000
       = 00007F         PWMVol1	EQU	$7F
       = 000070         PWMVol2	EQU	PWMVol1-$0F
       = 000000         PWMPitch	EQU	$00
       = 000000         PSGVoi0		EQU $00
       = 000004         PSGVoi1		EQU $04
       = 000007         PSGVol0		EQU	$0C-$05
       = 000009         PSGVol1		EQU	$0A-$01
       = 000006         PSGVol2		EQU	$0C-$06
000000                  	smpsHeaderVoice	HDN_BlueTwl_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(HDN_BlueTwl_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 AD8B             	dc.w  (((((HDN_BlueTwl_Patches+Target))<<8)&$FF00)|((((HDN_BlueTwl_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $03
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($03)
                        		if ($03)==0
                        		else
000005 55               			dc.b	((256 - ((((($03))-1)*256 + ((($03))/2)) / (($03)))) % 256)
                        		endif
000006                  	smpsHeaderFM	HDN_BlueTwl_FM1, Target, $00, $14-$07
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(HDN_BlueTwl_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((HDN_BlueTwl_FM1+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM1+Target))>>8)&$7F)|$80)
000008 000D             	dc.b	$00,$14-$07
00000A                  	smpsHeaderFM	HDN_BlueTwl_FM2, Target, $00, $1F-$07
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(HDN_BlueTwl_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A A981             	dc.w  (((((HDN_BlueTwl_FM2+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM2+Target))>>8)&$7F)|$80)
00000C 0018             	dc.b	$00,$1F-$07
00000E                  	smpsHeaderFM	HDN_BlueTwl_FM3, Target, $00, $0F+$07
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(HDN_BlueTwl_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E AA83             	dc.w  (((((HDN_BlueTwl_FM3+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM3+Target))>>8)&$7F)|$80)
000010 0016             	dc.b	$00,$0F+$07
000012                  	smpsHeaderFM	HDN_BlueTwl_FM4, Target, $00, $15+$07
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(HDN_BlueTwl_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 FE84             	dc.w  (((((HDN_BlueTwl_FM4+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM4+Target))>>8)&$7F)|$80)
000014 001C             	dc.b	$00,$15+$07
000016                  	smpsHeaderFM	HDN_BlueTwl_FM5, Target, $00, $14
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(HDN_BlueTwl_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 5286             	dc.w  (((((HDN_BlueTwl_FM5+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM5+Target))>>8)&$7F)|$80)
000018 0014             	dc.b	$00,$14
00001A                  	smpsHeaderFM	HDN_BlueTwl_FM6, Target, $00, $1F
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(HDN_BlueTwl_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 1E87             	dc.w  (((((HDN_BlueTwl_FM6+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM6+Target))>>8)&$7F)|$80)
00001C 001F             	dc.b	$00,$1F
00001E                  	smpsHeaderPSG	HDN_BlueTwl_PSG1, Target, PSGDelta, PSGVol0, $00, PSGVoi0
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(HDN_BlueTwl_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E EA87             	dc.w  (((((HDN_BlueTwl_PSG1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PSG1+Target))>>8)&$7F)|$80)
000020 0C07             	dc.b	PSGDelta,PSGVol0
                        	;dc.w	voice
000022 0000             	dc.b	$00,PSGVoi0
000024                  	smpsHeaderPSG	HDN_BlueTwl_PSG2, Target, PSGDelta, PSGVol1, $00, PSGVoi0
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(HDN_BlueTwl_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 4C89             	dc.w  (((((HDN_BlueTwl_PSG2+Target))<<8)&$FF00)|((((HDN_BlueTwl_PSG2+Target))>>8)&$7F)|$80)
000026 0C09             	dc.b	PSGDelta,PSGVol1
                        	;dc.w	voice
000028 0000             	dc.b	$00,PSGVoi0
00002A                  	smpsHeaderPSG	HDN_BlueTwl_PSG3, Target, PSGDelta, PSGVol2, $00, PSGVoi1
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(HDN_BlueTwl_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 8A8A             	dc.w  (((((HDN_BlueTwl_PSG3+Target))<<8)&$FF00)|((((HDN_BlueTwl_PSG3+Target))>>8)&$7F)|$80)
00002C 0C06             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
00002E 0004             	dc.b	$00,PSGVoi1
000030                  	smpsHeaderPWM	HDN_BlueTwl_PWM1, Target, PWMPitch, PWMVol1
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(HDN_BlueTwl_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 548B             	dc.w  (((((HDN_BlueTwl_PWM1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
000033 7F               	dc.b	PWMVol1
000034                  	smpsHeaderPWM	HDN_BlueTwl_PWM2, Target, PWMPitch, PWMVol2
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(HDN_BlueTwl_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 7F8B             	dc.w  (((((HDN_BlueTwl_PWM2+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
000037 70               	dc.b	PWMVol2
000038                  	smpsHeaderPWM	HDN_BlueTwl_PWM3, Target, PWMPitch, PWMVol1
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(HDN_BlueTwl_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 AC8B             	dc.w  (((((HDN_BlueTwl_PWM3+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
00003B 7F               	dc.b	PWMVol1
00003C                  	smpsHeaderPWM	HDN_BlueTwl_PWM4, Target, PWMPitch, PWMVol1
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(HDN_BlueTwl_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C AC8B             	dc.w  (((((HDN_BlueTwl_PWM4+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
00003F 7F               	dc.b	PWMVol1

000040                  HDN_BlueTwl_FM1:
000040                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E080             		dc.b $E0,panLeft
                        	endif
000042                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,$00
                        	endif
000044 800CAE06A91C800E 	dc.b	nRst, $0C, nA3, $06, nE3, $1C, nRst, $0E
00004C A906AC1C800EB108 	dc.b	nE3, $06, nG3, $1C, nRst, $0E, nC4, $08
000054 B0AE138001AA1780 	dc.b	nB3, nA3, $13, nRst, $01, nF3, $17, nRst
00005C 25A506AAA917800D 	dc.b	$25, nC3, $06, nF3, nE3, $17, nRst, $0D
000064 AC0B8001A717800D 	dc.b	nG3, $0B, nRst, $01, nD3, $17, nRst, $0D
00006C A406A50B8001A711 	dc.b	nB2, $06, nC3, $0B, nRst, $01, nD3, $11
000074 8001A2178025A911 	dc.b	nRst, $01, nA2, $17, nRst, $25, nE3, $11
00007C 8001AE118001B011 	dc.b	nRst, $01, nA3, $11, nRst, $01, nB3, $11
000084 8001B3118007B303 	dc.b	nRst, $01, nD4, $11, nRst, $07, nD4, $03
00008C B2B1178019B31180 	dc.b	nCs4, nC4, $17, nRst, $19, nD4, $11, nRst
000094 01B1118001AE0B80 	dc.b	$01, nC4, $11, nRst, $01, nA3, $0B, nRst
00009C 0DA9118001AC1180 	dc.b	$0D, nE3, $11, nRst, $01, nG3, $11, nRst
0000A4 01AE22800BB103B0 	dc.b	$01, nA3, $22, nRst, $0B, nC4, $03, nB3
0000AC 178019AD09AEB006 	dc.b	$17, nRst, $19, nAb3, $09, nA3, nB3, $06
0000B4 B109B3B506800CA9 	dc.b	nC4, $09, nD4, nE4, $06, nRst, $0C, nE3
0000BC 118001AE118001B0 	dc.b	$11, nRst, $01, nA3, $11, nRst, $01, nB3
0000C4 118001B3118007B3 	dc.b	$11, nRst, $01, nD4, $11, nRst, $07, nD4
0000CC 03B2B1178019B311 	dc.b	$03, nCs4, nC4, $17, nRst, $19, nD4, $11
0000D4 8001B1118001AE0B 	dc.b	nRst, $01, nC4, $11, nRst, $01, nA3, $0B
0000DC 800DA9118001AC11 	dc.b	nRst, $0D, nE3, $11, nRst, $01, nG3, $11
0000E4 8001AE22800BB103 	dc.b	nRst, $01, nA3, $22, nRst, $0B, nC4, $03
0000EC AD09B0B306B009B3 	dc.b	nAb3, $09, nB3, nD4, $06, nB3, $09, nD4
0000F4 B606AE22801AAE06 	dc.b	nF4, $06, nA3, $22, nRst, $1A, nA3, $06
0000FC A91C800EA906AC1C 	dc.b	nE3, $1C, nRst, $0E, nE3, $06, nG3, $1C
000104 800EB108B0AE1380 	dc.b	nRst, $0E, nC4, $08, nB3, nA3, $13, nRst
00010C 01AA178025A506AA 	dc.b	$01, nF3, $17, nRst, $25, nC3, $06, nF3
000114 A917800DAC0B8001 	dc.b	nE3, $17, nRst, $0D, nG3, $0B, nRst, $01
00011C A717800DA406A50B 	dc.b	nD3, $17, nRst, $0D, nB2, $06, nC3, $0B
000124 8001A7118001A217 	dc.b	nRst, $01, nD3, $11, nRst, $01, nA2, $17
00012C 800DAC06AEAF1780 	dc.b	nRst, $0D, nG3, $06, nA3, nBb3, $17, nRst
000134 0AAD09AC0B8001AA 	dc.b	$0A, nAb3, $09, nG3, $0B, nRst, $01, nF3
00013C 1C800EA817800AA8 	dc.b	$1C, nRst, $0E, nEb3, $17, nRst, $0A, nEb3
000144 09AA0B8001AC1C80 	dc.b	$09, nF3, $0B, nRst, $01, nG3, $1C, nRst
00014C 0EA517800AA709A8 	dc.b	$0E, nC3, $17, nRst, $0A, nD3, $09, nEb3
000154 06AA22800EA509A8 	dc.b	$06, nF3, $22, nRst, $0E, nC3, $09, nEb3
00015C AA06A809AAAD06AC 	dc.b	nF3, $06, nEb3, $09, nF3, nAb3, $06, nG3
000164 22800EAD17800AAD 	dc.b	$22, nRst, $0E, nAb3, $17, nRst, $0A, nAb3
00016C 09AF0B8001AF1C80 	dc.b	$09, nBb3, $0B, nRst, $01, nBb3, $1C, nRst
000174 0EB017800AAD09AC 	dc.b	$0E, nB3, $17, nRst, $0A, nAb3, $09, nG3
00017C 06A722800EA51780 	dc.b	$06, nD3, $22, nRst, $0E, nC3, $17, nRst
000184 0AA709A806AA1780 	dc.b	$0A, nD3, $09, nEb3, $06, nF3, $17, nRst
00018C 01A3178001A103A5 	dc.b	$01, nBb2, $17, nRst, $01, nAb2, $03, nC3
000194 A3A5A1A5A3A5A3A7 	dc.b	nBb2, nC3, nAb2, nC3, nBb2, nC3, nBb2, nD3
00019C A5A7A4A0A1A3A52E 	dc.b	nC3, nD3, nB2, nG2, nAb2, nBb2, nC3, $2E
0001A4 8009             	dc.b	nRst, $09
0001A6                  	smpsJump		HDN_BlueTwl_FM1, Target
0001A6 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_FM1<*)
0001A7                  		rom_ptr_z80(HDN_BlueTwl_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001A7 4080             	dc.w  (((((HDN_BlueTwl_FM1+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001A9                  HDN_BlueTwl_FM2:
0001A9                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001A9 E040             		dc.b $E0,panRight
                        	endif
0001AB                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
0001AB EF00             		dc.b $EF,$00
                        	endif
0001AD 800EAE058001A91C 	dc.b	nRst, $0E, nA3, $05, nRst, $01, nE3, $1C
0001B5 800EA9058001AC1C 	dc.b	nRst, $0E, nE3, $05, nRst, $01, nG3, $1C
0001BD 800EB1078001B007 	dc.b	nRst, $0E, nC4, $07, nRst, $01, nB3, $07
0001C5 8001AE128002AA16 	dc.b	nRst, $01, nA3, $12, nRst, $02, nF3, $16
0001CD 8026A5058001AA05 	dc.b	nRst, $26, nC3, $05, nRst, $01, nF3, $05
0001D5 8001A916800EAC0B 	dc.b	nRst, $01, nE3, $16, nRst, $0E, nG3, $0B
0001DD 8001A716800EA405 	dc.b	nRst, $01, nD3, $16, nRst, $0E, nB2, $05
0001E5 8001A50B8001A711 	dc.b	nRst, $01, nC3, $0B, nRst, $01, nD3, $11
0001ED 8001A2168026A911 	dc.b	nRst, $01, nA2, $16, nRst, $26, nE3, $11
0001F5 8001AE118001B011 	dc.b	nRst, $01, nA3, $11, nRst, $01, nB3, $11
0001FD 8001B3118007B302 	dc.b	nRst, $01, nD4, $11, nRst, $07, nD4, $02
000205 8001B2028001B116 	dc.b	nRst, $01, nCs4, $02, nRst, $01, nC4, $16
00020D 801AB3118001B111 	dc.b	nRst, $1A, nD4, $11, nRst, $01, nC4, $11
000215 8001AE0B800DA911 	dc.b	nRst, $01, nA3, $0B, nRst, $0D, nE3, $11
00021D 8001AC118001AE22 	dc.b	nRst, $01, nG3, $11, nRst, $01, nA3, $22
000225 800BB1028001B016 	dc.b	nRst, $0B, nC4, $02, nRst, $01, nB3, $16
00022D 801AAD088001AE08 	dc.b	nRst, $1A, nAb3, $08, nRst, $01, nA3, $08
000235 8001B0058001B108 	dc.b	nRst, $01, nB3, $05, nRst, $01, nC4, $08
00023D 8001B3088001B505 	dc.b	nRst, $01, nD4, $08, nRst, $01, nE4, $05
000245 800DA9118001AE11 	dc.b	nRst, $0D, nE3, $11, nRst, $01, nA3, $11
00024D 8001B0118001B311 	dc.b	nRst, $01, nB3, $11, nRst, $01, nD4, $11
000255 8007B3028001B202 	dc.b	nRst, $07, nD4, $02, nRst, $01, nCs4, $02
00025D 8001B116801AB311 	dc.b	nRst, $01, nC4, $16, nRst, $1A, nD4, $11
000265 8001B1118001AE0B 	dc.b	nRst, $01, nC4, $11, nRst, $01, nA3, $0B
00026D 800DA9118001AC11 	dc.b	nRst, $0D, nE3, $11, nRst, $01, nG3, $11
000275 8001AE22800BB102 	dc.b	nRst, $01, nA3, $22, nRst, $0B, nC4, $02
00027D 8001AD088001B008 	dc.b	nRst, $01, nAb3, $08, nRst, $01, nB3, $08
000285 8001B3058001B008 	dc.b	nRst, $01, nD4, $05, nRst, $01, nB3, $08
00028D 8001B3088001B605 	dc.b	nRst, $01, nD4, $08, nRst, $01, nF4, $05
000295 8001AE22801AAE05 	dc.b	nRst, $01, nA3, $22, nRst, $1A, nA3, $05
00029D 8001A91C800EA905 	dc.b	nRst, $01, nE3, $1C, nRst, $0E, nE3, $05
0002A5 8001AC1C800EB107 	dc.b	nRst, $01, nG3, $1C, nRst, $0E, nC4, $07
0002AD 8001B0078001AE12 	dc.b	nRst, $01, nB3, $07, nRst, $01, nA3, $12
0002B5 8002AA168026A505 	dc.b	nRst, $02, nF3, $16, nRst, $26, nC3, $05
0002BD 8001AA058001A916 	dc.b	nRst, $01, nF3, $05, nRst, $01, nE3, $16
0002C5 800EAC0B8001A716 	dc.b	nRst, $0E, nG3, $0B, nRst, $01, nD3, $16
0002CD 800EA4058001A50B 	dc.b	nRst, $0E, nB2, $05, nRst, $01, nC3, $0B
0002D5 8001A7118001A216 	dc.b	nRst, $01, nD3, $11, nRst, $01, nA2, $16
0002DD 800EAC058001AE05 	dc.b	nRst, $0E, nG3, $05, nRst, $01, nA3, $05
0002E5 8001AF16800BAD08 	dc.b	nRst, $01, nBb3, $16, nRst, $0B, nAb3, $08
0002ED 8001AC0B8001AA1C 	dc.b	nRst, $01, nG3, $0B, nRst, $01, nF3, $1C
0002F5 800EA816800BA808 	dc.b	nRst, $0E, nEb3, $16, nRst, $0B, nEb3, $08
0002FD 8001AA0B8001AC1C 	dc.b	nRst, $01, nF3, $0B, nRst, $01, nG3, $1C
000305 800EA516800BA708 	dc.b	nRst, $0E, nC3, $16, nRst, $0B, nD3, $08
00030D 8001A8058001AA22 	dc.b	nRst, $01, nEb3, $05, nRst, $01, nF3, $22
000315 800EA5088001A808 	dc.b	nRst, $0E, nC3, $08, nRst, $01, nEb3, $08
00031D 8001AA058001A808 	dc.b	nRst, $01, nF3, $05, nRst, $01, nEb3, $08
000325 8001AA088001AD05 	dc.b	nRst, $01, nF3, $08, nRst, $01, nAb3, $05
00032D 8001AC22800EAD16 	dc.b	nRst, $01, nG3, $22, nRst, $0E, nAb3, $16
000335 800BAD088001AF0B 	dc.b	nRst, $0B, nAb3, $08, nRst, $01, nBb3, $0B
00033D 8001AF1C800EB016 	dc.b	nRst, $01, nBb3, $1C, nRst, $0E, nB3, $16
000345 800BAD088001AC05 	dc.b	nRst, $0B, nAb3, $08, nRst, $01, nG3, $05
00034D 8001A722800EA516 	dc.b	nRst, $01, nD3, $22, nRst, $0E, nC3, $16
000355 800BA7088001A805 	dc.b	nRst, $0B, nD3, $08, nRst, $01, nEb3, $05
00035D 8001AA168002A316 	dc.b	nRst, $01, nF3, $16, nRst, $02, nBb2, $16
000365 8002A18001A50280 	dc.b	nRst, $02, nAb2, nRst, $01, nC3, $02, nRst
00036D 01A3028001A50280 	dc.b	$01, nBb2, $02, nRst, $01, nC3, $02, nRst
000375 01A102           	dc.b	$01, nAb2, $02

000378                  HDN_BlueTwl_Loop1:
000378 8001A5028001A302 	dc.b	nRst, $01, nC3, $02, nRst, $01, nBb2, $02
000380                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop1, Target
000380 F7               	dc.b	$F7
000381 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop1<*)
000383                  		rom_ptr_z80(HDN_BlueTwl_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000383 7883             	dc.w  (((((HDN_BlueTwl_Loop1+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000385 8001A7028001A502 	dc.b	nRst, $01, nD3, $02, nRst, $01, nC3, $02
00038D 8001A7028001A402 	dc.b	nRst, $01, nD3, $02, nRst, $01, nB2, $02
000395 8001A0028001A102 	dc.b	nRst, $01, nG2, $02, nRst, $01, nAb2, $02
00039D 8001A3028001A52D 	dc.b	nRst, $01, nBb2, $02, nRst, $01, nC3, $2D
0003A5 8008             	dc.b	nRst, $08
0003A7                  	smpsJump		HDN_BlueTwl_FM2, Target
0003A7 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_FM2<*)
0003A8                  		rom_ptr_z80(HDN_BlueTwl_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003A8 A981             	dc.w  (((((HDN_BlueTwl_FM2+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0003AA                  HDN_BlueTwl_FM3:
0003AA                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0003AA E080             		dc.b $E0,panLeft
                        	endif
0003AC                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0003AC EF01             		dc.b $EF,$01
                        	endif
0003AE A206A9ACB08018A0 	dc.b	nA2, $06, nE3, nG3, nB3, nRst, $18, nG2
0003B6 06A9ACB080189E06 	dc.b	$06, nE3, nG3, nB3, nRst, $18, nF2, $06
0003BE A9ACB18018A406AA 	dc.b	nE3, nG3, nC4, nRst, $18, nB2, $06, nF3
0003C6 AEB08018A206A9AC 	dc.b	nA3, nB3, nRst, $18, nA2, $06, nE3, nG3
0003CE B18018A006A9ACB1 	dc.b	nC4, nRst, $18, nG2, $06, nE3, nG3, nC4
0003D6 80189E06A5AAAA   	dc.b	nRst, $18, nF2, $06, nC3, nF3, nF3

0003DD                  HDN_BlueTwl_Loop2:
0003DD 8018A206A9ACB0   	dc.b	nRst, $18, nA2, $06, nE3, nG3, nB3
0003E4                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop2, Target
0003E4 F7               	dc.b	$F7
0003E5 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop2<*)
0003E7                  		rom_ptr_z80(HDN_BlueTwl_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003E7 DD83             	dc.w  (((((HDN_BlueTwl_Loop2+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003E9 8018A406AAAEB380 	dc.b	nRst, $18, nB2, $06, nF3, nA3, nD4, nRst
0003F1 18A006A9ACB18018 	dc.b	$18, nG2, $06, nE3, nG3, nC4, nRst, $18
0003F9 A206AAAEB380189D 	dc.b	nA2, $06, nF3, nA3, nD4, nRst, $18, nE2
000401 06A4A9AC80189E06 	dc.b	$06, nB2, nE3, nG3, nRst, $18, nF2, $06
000409 A5AAAE8018A006A7 	dc.b	nC3, nF3, nA3, nRst, $18, nG2, $06, nD3
000411 ACB080189D06A4A7 	dc.b	nG3, nB3, nRst, $18, nE2, $06, nB2, nD3
000419 AD8018A206A9ACB0 	dc.b	nAb3, nRst, $18, nA2, $06, nE3, nG3, nB3
000421 8018A406AAAEB380 	dc.b	nRst, $18, nB2, $06, nF3, nA3, nD4, nRst
000429 18A006A9ACB18018 	dc.b	$18, nG2, $06, nE3, nG3, nC4, nRst, $18
000431 A206AAAEB380189D 	dc.b	nA2, $06, nF3, nA3, nD4, nRst, $18, nE2
000439 06A4A9AC80189E06 	dc.b	$06, nB2, nE3, nG3, nRst, $18, nF2, $06
000441 A5AAAE8018A106A7 	dc.b	nC3, nF3, nA3, nRst, $18, nAb2, $06, nD3
000449 AA               	dc.b	nF3

00044A                  HDN_BlueTwl_Loop3:
00044A B08018A206A9AC   	dc.b	nB3, nRst, $18, nA2, $06, nE3, nG3
000451                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop3, Target
000451 F7               	dc.b	$F7
000452 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop3<*)
000454                  		rom_ptr_z80(HDN_BlueTwl_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000454 4A84             	dc.w  (((((HDN_BlueTwl_Loop3+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000456 B08018A006A9ACB0 	dc.b	nB3, nRst, $18, nG2, $06, nE3, nG3, nB3
00045E 80189E06A9ACB180 	dc.b	nRst, $18, nF2, $06, nE3, nG3, nC4, nRst
000466 18A406AAAEB08018 	dc.b	$18, nB2, $06, nF3, nA3, nB3, nRst, $18
00046E A206A9ACB18018A0 	dc.b	nA2, $06, nE3, nG3, nC4, nRst, $18, nG2
000476 06A9ACB180189E06 	dc.b	$06, nE3, nG3, nC4, nRst, $18, nF2, $06
00047E A5AAAA8018A206A9 	dc.b	nC3, nF3, nF3, nRst, $18, nA2, $06, nE3
000486 ACB08018A306AAAF 	dc.b	nG3, nB3, nRst, $18, nBb2, $06, nF3, nBb3
00048E B38018A106AAADB1 	dc.b	nD4, nRst, $18, nAb2, $06, nF3, nAb3, nC4
000496 80189C06A3A8AC80 	dc.b	nRst, $18, nEb2, $06, nBb2, nEb3, nG3, nRst
00049E 18A006A4A7AA8018 	dc.b	$18, nG2, $06, nB2, nD3, nF3, nRst, $18
0004A6 A506A0A5A88018A3 	dc.b	nC3, $06, nG2, nC3, nEb3, nRst, $18, nBb2
0004AE 06AAAFB38018A106 	dc.b	$06, nF3, nBb3, nD4, nRst, $18, nAb2, $06
0004B6 A8ADB18018A006A4 	dc.b	nEb3, nAb3, nC4, nRst, $18, nG2, $06, nB2
0004BE A7AA8018A106A8AD 	dc.b	nD3, nF3, nRst, $18, nAb2, $06, nEb3, nAb3
0004C6 B18018A306A7AAAF 	dc.b	nC4, nRst, $18, nBb2, $06, nD3, nF3, nBb3
0004CE 8018A406A7AAAD80 	dc.b	nRst, $18, nB2, $06, nD3, nF3, nAb3, nRst
0004D6 18A506A0A8AC8018 	dc.b	$18, nC3, $06, nG2, nEb3, nG3, nRst, $18
0004DE 9E06A5AAAD8018A0 	dc.b	nF2, $06, nC3, nF3, nAb3, nRst, $18, nG2
0004E6 06A7AAAF8018A106 	dc.b	$06, nD3, nF3, nBb3, nRst, $18, nAb2, $06
0004EE A5A8ADA3A7AAAFA5 	dc.b	nC3, nEb3, nAb3, nBb2, nD3, nF3, nBb3, nC3
0004F6 A0A5A8801F       	dc.b	nG2, nC3, nEb3, nRst, $1F
0004FB                  	smpsJump		HDN_BlueTwl_FM3, Target
0004FB F6               	dc.b	$F6
                        	if (HDN_BlueTwl_FM3<*)
0004FC                  		rom_ptr_z80(HDN_BlueTwl_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004FC AA83             	dc.w  (((((HDN_BlueTwl_FM3+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0004FE                  HDN_BlueTwl_FM4:
0004FE                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0004FE E040             		dc.b $E0,panRight
                        	endif
000500                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000500 EF01             		dc.b $EF,$01
                        	endif
000502 96069DA0A4801894 	dc.b	nA1, $06, nE2, nG2, nB2, nRst, $18, nG1
00050A 069DA0A480189206 	dc.b	$06, nE2, nG2, nB2, nRst, $18, nF1, $06
000512 9DA0A5801898069E 	dc.b	nE2, nG2, nC3, nRst, $18, nB1, $06, nF2
00051A A2A4801896069DA0 	dc.b	nA2, nB2, nRst, $18, nA1, $06, nE2, nG2
000522 A5801894069DA0A5 	dc.b	nC3, nRst, $18, nG1, $06, nE2, nG2, nC3
00052A 80189206999E9E   	dc.b	nRst, $18, nF1, $06, nC2, nF2, nF2

000531                  HDN_BlueTwl_Loop4:
000531 801896069DA0A4   	dc.b	nRst, $18, nA1, $06, nE2, nG2, nB2
000538                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop4, Target
000538 F7               	dc.b	$F7
000539 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop4<*)
00053B                  		rom_ptr_z80(HDN_BlueTwl_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00053B 3185             	dc.w  (((((HDN_BlueTwl_Loop4+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00053D 801898069EA2A780 	dc.b	nRst, $18, nB1, $06, nF2, nA2, nD3, nRst
000545 1894069DA0A58018 	dc.b	$18, nG1, $06, nE2, nG2, nC3, nRst, $18
00054D 96069EA2A7801891 	dc.b	nA1, $06, nF2, nA2, nD3, nRst, $18, nE1
000555 06989DA080189206 	dc.b	$06, nB1, nE2, nG2, nRst, $18, nF1, $06
00055D 999EA2801894069B 	dc.b	nC2, nF2, nA2, nRst, $18, nG1, $06, nD2
000565 A0A480189106989B 	dc.b	nG2, nB2, nRst, $18, nE1, $06, nB1, nD2
00056D A1801896069DA0A4 	dc.b	nAb2, nRst, $18, nA1, $06, nE2, nG2, nB2
000575 801898069EA2A780 	dc.b	nRst, $18, nB1, $06, nF2, nA2, nD3, nRst
00057D 1894069DA0A58018 	dc.b	$18, nG1, $06, nE2, nG2, nC3, nRst, $18
000585 96069EA2A7801891 	dc.b	nA1, $06, nF2, nA2, nD3, nRst, $18, nE1
00058D 06989DA080189206 	dc.b	$06, nB1, nE2, nG2, nRst, $18, nF1, $06
000595 999EA2801895069B 	dc.b	nC2, nF2, nA2, nRst, $18, nAb1, $06, nD2
00059D 9E               	dc.b	nF2

00059E                  HDN_BlueTwl_Loop5:
00059E A4801896069DA0   	dc.b	nB2, nRst, $18, nA1, $06, nE2, nG2
0005A5                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop5, Target
0005A5 F7               	dc.b	$F7
0005A6 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop5<*)
0005A8                  		rom_ptr_z80(HDN_BlueTwl_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005A8 9E85             	dc.w  (((((HDN_BlueTwl_Loop5+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005AA A4801894069DA0A4 	dc.b	nB2, nRst, $18, nG1, $06, nE2, nG2, nB2
0005B2 801892069DA0A580 	dc.b	nRst, $18, nF1, $06, nE2, nG2, nC3, nRst
0005BA 1898069EA2A48018 	dc.b	$18, nB1, $06, nF2, nA2, nB2, nRst, $18
0005C2 96069DA0A5801894 	dc.b	nA1, $06, nE2, nG2, nC3, nRst, $18, nG1
0005CA 069DA0A580189206 	dc.b	$06, nE2, nG2, nC3, nRst, $18, nF1, $06
0005D2 999E9E801896069D 	dc.b	nC2, nF2, nF2, nRst, $18, nA1, $06, nE2
0005DA A0A4801897069EA3 	dc.b	nG2, nB2, nRst, $18, nBb1, $06, nF2, nBb2
0005E2 A7801895069EA1A5 	dc.b	nD3, nRst, $18, nAb1, $06, nF2, nAb2, nC3
0005EA 80189006979CA080 	dc.b	nRst, $18, nEb1, $06, nBb1, nEb2, nG2, nRst
0005F2 189406989B9E8018 	dc.b	$18, nG1, $06, nB1, nD2, nF2, nRst, $18
0005FA 990694999C801897 	dc.b	nC2, $06, nG1, nC2, nEb2, nRst, $18, nBb1
000602 069EA3A780189506 	dc.b	$06, nF2, nBb2, nD3, nRst, $18, nAb1, $06
00060A 9CA1A58018940698 	dc.b	nEb2, nAb2, nC3, nRst, $18, nG1, $06, nB1
000612 9B9E801895069CA1 	dc.b	nD2, nF2, nRst, $18, nAb1, $06, nEb2, nAb2
00061A A5801897069B9EA3 	dc.b	nC3, nRst, $18, nBb1, $06, nD2, nF2, nBb2
000622 801898069B9EA180 	dc.b	nRst, $18, nB1, $06, nD2, nF2, nAb2, nRst
00062A 189906949CA08018 	dc.b	$18, nC2, $06, nG1, nEb2, nG2, nRst, $18
000632 9206999EA1801894 	dc.b	nF1, $06, nC2, nF2, nAb2, nRst, $18, nG1
00063A 069B9EA380189506 	dc.b	$06, nD2, nF2, nBb2, nRst, $18, nAb1, $06
000642 999CA1979B9EA399 	dc.b	nC2, nEb2, nAb2, nBb1, nD2, nF2, nBb2, nC2
00064A 94999C801F       	dc.b	nG1, nC2, nEb2, nRst, $1F
00064F                  	smpsJump		HDN_BlueTwl_FM4, Target
00064F F6               	dc.b	$F6
                        	if (HDN_BlueTwl_FM4<*)
000650                  		rom_ptr_z80(HDN_BlueTwl_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000650 FE84             	dc.w  (((((HDN_BlueTwl_FM4+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000652                  HDN_BlueTwl_FM5:
000652                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000652 E080             		dc.b $E0,panLeft
                        	endif
000654                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
000654 EF02             		dc.b $EF,$02
                        	endif
000656 AE2E8002AC2E8002 	dc.b	nA3, $2E, nRst, $02, nG3, $2E, nRst, $02
00065E AA2E8002B02E8002 	dc.b	nF3, $2E, nRst, $02, nB3, $2E, nRst, $02
000666 AE2E8002AC2E8002 	dc.b	nA3, $2E, nRst, $02, nG3, $2E, nRst, $02
00066E AA2E8002A92E8002 	dc.b	nF3, $2E, nRst, $02, nE3, $2E, nRst, $02
000676 A92E8002A72E8002 	dc.b	nE3, $2E, nRst, $02, nD3, $2E, nRst, $02
00067E A52E8002A72E8002 	dc.b	nC3, $2E, nRst, $02, nD3, $2E, nRst, $02
000686 AC2E8002AE2E8002 	dc.b	nG3, $2E, nRst, $02, nA3, $2E, nRst, $02
00068E B02E8002AD2E8002 	dc.b	nB3, $2E, nRst, $02, nAb3, $2E, nRst, $02
000696 A92E8002A72E8002 	dc.b	nE3, $2E, nRst, $02, nD3, $2E, nRst, $02
00069E A52E8002A72E8002 	dc.b	nC3, $2E, nRst, $02, nD3, $2E, nRst, $02
0006A6 AC2E8002AE2E8002 	dc.b	nG3, $2E, nRst, $02, nA3, $2E, nRst, $02
0006AE AD2E8002AE2E8002 	dc.b	nAb3, $2E, nRst, $02, nA3, $2E, nRst, $02
0006B6 AE2E8002AC2E8002 	dc.b	nA3, $2E, nRst, $02, nG3, $2E, nRst, $02
0006BE AA2E8002B02E8002 	dc.b	nF3, $2E, nRst, $02, nB3, $2E, nRst, $02
0006C6 AE2E8002AC2E8002 	dc.b	nA3, $2E, nRst, $02, nG3, $2E, nRst, $02
0006CE AA2E8002A92E8002 	dc.b	nF3, $2E, nRst, $02, nE3, $2E, nRst, $02
0006D6 AF2E8002AA2E8002 	dc.b	nBb3, $2E, nRst, $02, nF3, $2E, nRst, $02
0006DE A82E8002AC2E8002 	dc.b	nEb3, $2E, nRst, $02, nG3, $2E, nRst, $02
0006E6 A52E8002AA2E8002 	dc.b	nC3, $2E, nRst, $02, nF3, $2E, nRst, $02
0006EE A52E8002A42E8002 	dc.b	nC3, $2E, nRst, $02, nB2, $2E, nRst, $02
0006F6 AD2E8002AF2E8002 	dc.b	nAb3, $2E, nRst, $02, nBb3, $2E, nRst, $02
0006FE B02E8002A52E8002 	dc.b	nB3, $2E, nRst, $02, nC3, $2E, nRst, $02
000706 A52E8002AA2E8002 	dc.b	nC3, $2E, nRst, $02, nF3, $2E, nRst, $02
00070E A806BBB980AA1780 	dc.b	nEb3, $06, nBb4, nAb4, nRst, nF3, $17, nRst
000716 01B12E8009       	dc.b	$01, nC4, $2E, nRst, $09
00071B                  	smpsJump		HDN_BlueTwl_FM5, Target
00071B F6               	dc.b	$F6
                        	if (HDN_BlueTwl_FM5<*)
00071C                  		rom_ptr_z80(HDN_BlueTwl_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
00071C 5286             	dc.w  (((((HDN_BlueTwl_FM5+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

                        ;!@
                        ;HDN_BlueTwl_FM6:
                        	;smpsPan		panRight
                        	;smpsFMvoice		$02
                        	;dc.b	nRst, $09, nA3, $2E, nRst, $02, nG3, $2E
                        	;dc.b	nRst, $02, nF3, $2E, nRst, $02, nB3, $2E
                        	;dc.b	nRst, $02, nA3, $2E, nRst, $02, nG3, $2E
                        	;dc.b	nRst, $02, nF3, $2E, nRst, $02, nE3, $2E
                        	;dc.b	nRst, $02, nE3, $2E, nRst, $02, nD3, $2E
                        	;dc.b	nRst, $02, nC3, $2E, nRst, $02, nD3, $2E
                        	;dc.b	nRst, $02, nG3, $2E, nRst, $02, nA3, $2E
                        	;dc.b	nRst, $02, nB3, $2E, nRst, $02, nAb3, $2E
                        	;dc.b	nRst, $02, nE3, $2E, nRst, $02, nD3, $2E
                        	;dc.b	nRst, $02, nC3, $2E, nRst, $02, nD3, $2E
                        	;dc.b	nRst, $02, nG3, $2E, nRst, $02, nA3, $2E
                        	;dc.b	nRst, $02, nAb3, $2E, nRst, $02, nA3, $2E
                        	;dc.b	nRst, $02, nA3, $2E, nRst, $02, nG3, $2E
                        	;dc.b	nRst, $02, nF3, $2E, nRst, $02, nB3, $2E
                        	;dc.b	nRst, $02, nA3, $2E, nRst, $02, nG3, $2E
                        	;dc.b	nRst, $02, nF3, $2E, nRst, $02, nE3, $2E
                        	;dc.b	nRst, $02, nBb3, $2E, nRst, $02, nF3, $2E
                        	;dc.b	nRst, $02, nEb3, $2E, nRst, $02, nG3, $2E
                        	;dc.b	nRst, $02, nC3, $2E, nRst, $02, nF3, $2E
                        	;dc.b	nRst, $02, nC3, $2E, nRst, $02, nB2, $2E
                        	;dc.b	nRst, $02, nAb3, $2E, nRst, $02, nBb3, $2E
                        	;dc.b	nRst, $02, nB3, $2E, nRst, $02, nC3, $2E
                        	;dc.b	nRst, $02, nC3, $2E, nRst, $02, nF3, $2E
                        	;dc.b	nRst, $02, nEb3, $06, nBb4, nAb4, nRst, nF3
                        	;dc.b	$17, nRst, $01, nC4, $2E
                        	;smpsJump		HDN_BlueTwl_FM6, Target
                        	
00071E                  HDN_BlueTwl_FM6:
00071E                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00071E E040             		dc.b $E0,panRight
                        	endif
000720                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
000720 EF02             		dc.b $EF,$02
                        	endif
000722 A22E8002A02E8002 	dc.b	nA2, $2E, nRst, $02, nG2, $2E, nRst, $02
00072A 9E2E8002A42E8002 	dc.b	nF2, $2E, nRst, $02, nB2, $2E, nRst, $02
000732 A22E8002A02E8002 	dc.b	nA2, $2E, nRst, $02, nG2, $2E, nRst, $02
00073A 9E2E80029D2E8002 	dc.b	nF2, $2E, nRst, $02, nE2, $2E, nRst, $02
000742 9D2E80029B2E8002 	dc.b	nE2, $2E, nRst, $02, nD2, $2E, nRst, $02
00074A 992E80029B2E8002 	dc.b	nC2, $2E, nRst, $02, nD2, $2E, nRst, $02
000752 A02E8002A22E8002 	dc.b	nG2, $2E, nRst, $02, nA2, $2E, nRst, $02
00075A A42E8002A12E8002 	dc.b	nB2, $2E, nRst, $02, nAb2, $2E, nRst, $02
000762 9D2E80029B2E8002 	dc.b	nE2, $2E, nRst, $02, nD2, $2E, nRst, $02
00076A 992E80029B2E8002 	dc.b	nC2, $2E, nRst, $02, nD2, $2E, nRst, $02
000772 A02E8002A22E8002 	dc.b	nG2, $2E, nRst, $02, nA2, $2E, nRst, $02
00077A A12E8002A22E8002 	dc.b	nAb2, $2E, nRst, $02, nA2, $2E, nRst, $02
000782 A22E8002A02E8002 	dc.b	nA2, $2E, nRst, $02, nG2, $2E, nRst, $02
00078A 9E2E8002A42E8002 	dc.b	nF2, $2E, nRst, $02, nB2, $2E, nRst, $02
000792 A22E8002A02E8002 	dc.b	nA2, $2E, nRst, $02, nG2, $2E, nRst, $02
00079A 9E2E80029D2E8002 	dc.b	nF2, $2E, nRst, $02, nE2, $2E, nRst, $02
0007A2 A32E80029E2E8002 	dc.b	nBb2, $2E, nRst, $02, nF2, $2E, nRst, $02
0007AA 9C2E8002A02E8002 	dc.b	nEb2, $2E, nRst, $02, nG2, $2E, nRst, $02
0007B2 992E80029E2E8002 	dc.b	nC2, $2E, nRst, $02, nF2, $2E, nRst, $02
0007BA 992E8002982E8002 	dc.b	nC2, $2E, nRst, $02, nB1, $2E, nRst, $02
0007C2 A12E8002A32E8002 	dc.b	nAb2, $2E, nRst, $02, nBb2, $2E, nRst, $02
0007CA A42E8002992E8002 	dc.b	nB2, $2E, nRst, $02, nC2, $2E, nRst, $02
0007D2 992E80029E2E8002 	dc.b	nC2, $2E, nRst, $02, nF2, $2E, nRst, $02
0007DA 9C06AFAD809E1780 	dc.b	nEb2, $06, nBb3, nAb3, nRst, nF2, $17, nRst
0007E2 01A52E8009       	dc.b	$01, nC3, $2E, nRst, $09
0007E7                  	smpsJump		HDN_BlueTwl_FM6, Target
0007E7 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_FM6<*)
0007E8                  		rom_ptr_z80(HDN_BlueTwl_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007E8 1E87             	dc.w  (((((HDN_BlueTwl_FM6+Target))<<8)&$FF00)|((((HDN_BlueTwl_FM6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0007EA                  HDN_BlueTwl_PSG1:
0007EA                  	smpsPSGvoice	PSGVoi0
0007EA F500             	dc.b	$F5,PSGVoi0
0007EC 800C8A06851C800E 	dc.b	nRst, $0C, nA0, $06, nE0, $1C, nRst, $0E
0007F4 8506881C800E8D08 	dc.b	nE0, $06, nG0, $1C, nRst, $0E, nC1, $08
0007FC 8C8A138001861780 	dc.b	nB0, nA0, $13, nRst, $01, nF0, $17, nRst
000804 258106868517800D 	dc.b	$25, nC0, $06, nF0, nE0, $17, nRst, $0D
00080C 880B80018317800D 	dc.b	nG0, $0B, nRst, $01, nD0, $17, nRst, $0D
000814 81060B8001831180 	dc.b	nC0, $06, $0B, nRst, $01, nD0, $11, nRst
00081C 0181178025851180 	dc.b	$01, nC0, $17, nRst, $25, nE0, $11, nRst
000824 018A1180018C1180 	dc.b	$01, nA0, $11, nRst, $01, nB0, $11, nRst
00082C 018F1180078F038E 	dc.b	$01, nD1, $11, nRst, $07, nD1, $03, nCs1
000834 8D1780198F118001 	dc.b	nC1, $17, nRst, $19, nD1, $11, nRst, $01
00083C 8D1180018A0B800D 	dc.b	nC1, $11, nRst, $01, nA0, $0B, nRst, $0D
000844 8511800188118001 	dc.b	nE0, $11, nRst, $01, nG0, $11, nRst, $01
00084C 8A22800B8D038C17 	dc.b	nA0, $22, nRst, $0B, nC1, $03, nB0, $17
000854 801989098A8C068D 	dc.b	nRst, $19, nAb0, $09, nA0, nB0, $06, nC1
00085C 098F9106800C8511 	dc.b	$09, nD1, nE1, $06, nRst, $0C, nE0, $11
000864 80018A1180018C11 	dc.b	nRst, $01, nA0, $11, nRst, $01, nB0, $11
00086C 80018F1180078F03 	dc.b	nRst, $01, nD1, $11, nRst, $07, nD1, $03
000874 8E8D1780198F1180 	dc.b	nCs1, nC1, $17, nRst, $19, nD1, $11, nRst
00087C 018D1180018A0B80 	dc.b	$01, nC1, $11, nRst, $01, nA0, $0B, nRst
000884 0D85118001881180 	dc.b	$0D, nE0, $11, nRst, $01, nG0, $11, nRst
00088C 018A22800B8D0389 	dc.b	$01, nA0, $22, nRst, $0B, nC1, $03, nAb0
000894 098C8F068C098F92 	dc.b	$09, nB0, nD1, $06, nB0, $09, nD1, nF1
00089C 068A22801A8A0685 	dc.b	$06, nA0, $22, nRst, $1A, nA0, $06, nE0
0008A4 1C800E8506881C80 	dc.b	$1C, nRst, $0E, nE0, $06, nG0, $1C, nRst
0008AC 0E8D088C8A138001 	dc.b	$0E, nC1, $08, nB0, nA0, $13, nRst, $01
0008B4 8617802581068685 	dc.b	nF0, $17, nRst, $25, nC0, $06, nF0, nE0
0008BC 17800D880B800183 	dc.b	$17, nRst, $0D, nG0, $0B, nRst, $01, nD0
0008C4 17800D81060B8001 	dc.b	$17, nRst, $0D, nC0, $06, $0B, nRst, $01
0008CC 831180018117800D 	dc.b	nD0, $11, nRst, $01, nC0, $17, nRst, $0D
0008D4 88068A8B17800A89 	dc.b	nG0, $06, nA0, nBb0, $17, nRst, $0A, nAb0
0008DC 09880B8001861C80 	dc.b	$09, nG0, $0B, nRst, $01, nF0, $1C, nRst
0008E4 0E8417800A840986 	dc.b	$0E, nEb0, $17, nRst, $0A, nEb0, $09, nF0
0008EC 0B8001881C800E81 	dc.b	$0B, nRst, $01, nG0, $1C, nRst, $0E, nC0
0008F4 17800A8309840686 	dc.b	$17, nRst, $0A, nD0, $09, nEb0, $06, nF0
0008FC 22800E8109848606 	dc.b	$22, nRst, $0E, nC0, $09, nEb0, nF0, $06
000904 8409868906882280 	dc.b	nEb0, $09, nF0, nAb0, $06, nG0, $22, nRst
00090C 0E8917800A89098B 	dc.b	$0E, nAb0, $17, nRst, $0A, nAb0, $09, nBb0
000914 0B80018B1C800E8C 	dc.b	$0B, nRst, $01, nBb0, $1C, nRst, $0E, nB0
00091C 17800A8909880683 	dc.b	$17, nRst, $0A, nAb0, $09, nG0, $06, nD0
000924 22800E8117800A83 	dc.b	$22, nRst, $0E, nC0, $17, nRst, $0A, nD0
00092C 0984068617800181 	dc.b	$09, nEb0, $06, nF0, $17, nRst, $01, nC0
000934 17800181         	dc.b	$17, nRst, $01, nC0

000938                  HDN_BlueTwl_Loop6:
000938 03               	dc.b	$03
000939                  	smpsLoop		$00, $09, HDN_BlueTwl_Loop6, Target
000939 F7               	dc.b	$F7
00093A 0009             	dc.b	$00,$09
                        	if (HDN_BlueTwl_Loop6<*)
00093C                  		rom_ptr_z80(HDN_BlueTwl_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00093C 3889             	dc.w  (((((HDN_BlueTwl_Loop6+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00093E 8381838181818181 	dc.b	nD0, nC0, nD0, nC0, nC0, nC0, nC0, nC0
000946 2E8009           	dc.b	$2E, nRst, $09
000949                  	smpsJump		HDN_BlueTwl_PSG1, Target
000949 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_PSG1<*)
00094A                  		rom_ptr_z80(HDN_BlueTwl_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00094A EA87             	dc.w  (((((HDN_BlueTwl_PSG1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00094C                  HDN_BlueTwl_PSG2:
00094C                  	smpsPSGvoice	PSGVoi0
00094C F500             	dc.b	$F5,PSGVoi0

00094E                  HDN_BlueTwl_Loop7:
00094E 810685888C8018   	dc.b	nC0, $06, nE0, nG0, nB0, nRst, $18
000955                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop7, Target
000955 F7               	dc.b	$F7
000956 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop7<*)
000958                  		rom_ptr_z80(HDN_BlueTwl_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000958 4E89             	dc.w  (((((HDN_BlueTwl_Loop7+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00095A 810685888D801881 	dc.b	nC0, $06, nE0, nG0, nC1, nRst, $18, nC0
000962 06868A8C         	dc.b	$06, nF0, nA0, nB0

000966                  HDN_BlueTwl_Loo$8:
000966 8018810685888D   	dc.b	nRst, $18, nC0, $06, nE0, nG0, nC1
00096D                  	smpsLoop		$00, $02, HDN_BlueTwl_Loo$8, Target
00096D F7               	dc.b	$F7
00096E 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loo$8<*)
000970                  		rom_ptr_z80(HDN_BlueTwl_Loo$8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000970 6689             	dc.w  (((((HDN_BlueTwl_Loo$8+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loo$8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000972 80188106068686   	dc.b	nRst, $18, nC0, $06, $06, nF0, nF0

000979                  HDN_BlueTwl_Loo$9:
000979 8018810685888C   	dc.b	nRst, $18, nC0, $06, nE0, nG0, nB0
000980                  	smpsLoop		$00, $02, HDN_BlueTwl_Loo$9, Target
000980 F7               	dc.b	$F7
000981 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loo$9<*)
000983                  		rom_ptr_z80(HDN_BlueTwl_Loo$9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000983 7989             	dc.w  (((((HDN_BlueTwl_Loo$9+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loo$9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000985 80188106868A8F80 	dc.b	nRst, $18, nC0, $06, nF0, nA0, nD1, nRst
00098D 18810685888D8018 	dc.b	$18, nC0, $06, nE0, nG0, nC1, nRst, $18
000995 8106868A8F801881 	dc.b	nC0, $06, nF0, nA0, nD1, nRst, $18, nC0
00099D 0606858880188106 	dc.b	$06, $06, nE0, nG0, nRst, $18, nC0, $06
0009A5 06868A8018810683 	dc.b	$06, nF0, nA0, nRst, $18, nC0, $06, nD0
0009AD 888C801881060683 	dc.b	nG0, nB0, nRst, $18, nC0, $06, $06, nD0
0009B5 898018810685888C 	dc.b	nAb0, nRst, $18, nC0, $06, nE0, nG0, nB0
0009BD 80188106868A8F80 	dc.b	nRst, $18, nC0, $06, nF0, nA0, nD1, nRst
0009C5 18810685888D8018 	dc.b	$18, nC0, $06, nE0, nG0, nC1, nRst, $18
0009CD 8106868A8F801881 	dc.b	nC0, $06, nF0, nA0, nD1, nRst, $18, nC0
0009D5 0606858880188106 	dc.b	$06, $06, nE0, nG0, nRst, $18, nC0, $06
0009DD 06868A8018810683 	dc.b	$06, nF0, nA0, nRst, $18, nC0, $06, nD0
0009E5 86               	dc.b	nF0

0009E6                  HDN_BlueTwl_Loop10:
0009E6 8C801881068588   	dc.b	nB0, nRst, $18, nC0, $06, nE0, nG0
0009ED                  	smpsLoop		$00, $04, HDN_BlueTwl_Loop10, Target
0009ED F7               	dc.b	$F7
0009EE 0004             	dc.b	$00,$04
                        	if (HDN_BlueTwl_Loop10<*)
0009F0                  		rom_ptr_z80(HDN_BlueTwl_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
0009F0 E689             	dc.w  (((((HDN_BlueTwl_Loop10+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0009F2 8D80188106868A8C 	dc.b	nC1, nRst, $18, nC0, $06, nF0, nA0, nB0

0009FA                  HDN_BlueTwl_Loop11:
0009FA 8018810685888D   	dc.b	nRst, $18, nC0, $06, nE0, nG0, nC1
000A01                  	smpsLoop		$00, $02, HDN_BlueTwl_Loop11, Target
000A01 F7               	dc.b	$F7
000A02 0002             	dc.b	$00,$02
                        	if (HDN_BlueTwl_Loop11<*)
000A04                  		rom_ptr_z80(HDN_BlueTwl_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A04 FA89             	dc.w  (((((HDN_BlueTwl_Loop11+Target))<<8)&$FF00)|((((HDN_BlueTwl_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A06 8018810606868680 	dc.b	nRst, $18, nC0, $06, $06, nF0, nF0, nRst
000A0E 18810685888C8018 	dc.b	$18, nC0, $06, nE0, nG0, nB0, nRst, $18
000A16 8106868B8F801881 	dc.b	nC0, $06, nF0, nBb0, nD1, nRst, $18, nC0
000A1E 0686898D80188106 	dc.b	$06, nF0, nAb0, nC1, nRst, $18, nC0, $06
000A26 0684888018810606 	dc.b	$06, nEb0, nG0, nRst, $18, nC0, $06, $06
000A2E 8386801881060606 	dc.b	nD0, nF0, nRst, $18, nC0, $06, $06, $06
000A36 8480188106868B8F 	dc.b	nEb0, nRst, $18, nC0, $06, nF0, nBb0, nD1
000A3E 8018810684898D80 	dc.b	nRst, $18, nC0, $06, nEb0, nAb0, nC1, nRst
000A46 1881060683868018 	dc.b	$18, nC0, $06, $06, nD0, nF0, nRst, $18
000A4E 810684898D801881 	dc.b	nC0, $06, nEb0, nAb0, nC1, nRst, $18, nC0
000A56 0683868B80188106 	dc.b	$06, nD0, nF0, nBb0, nRst, $18, nC0, $06
000A5E 8386898018810606 	dc.b	nD0, nF0, nAb0, nRst, $18, nC0, $06, $06
000A66 8488801881060686 	dc.b	nEb0, nG0, nRst, $18, nC0, $06, $06, nF0
000A6E 898018810683868B 	dc.b	nAb0, nRst, $18, nC0, $06, nD0, nF0, nBb0
000A76 8018810606848981 	dc.b	nRst, $18, nC0, $06, $06, nEb0, nAb0, nC0
000A7E 83868B8181818480 	dc.b	nD0, nF0, nBb0, nC0, nC0, nC0, nEb0, nRst
000A86 1F               	dc.b	$1F
000A87                  	smpsJump		HDN_BlueTwl_PSG2, Target
000A87 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_PSG2<*)
000A88                  		rom_ptr_z80(HDN_BlueTwl_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A88 4C89             	dc.w  (((((HDN_BlueTwl_PSG2+Target))<<8)&$FF00)|((((HDN_BlueTwl_PSG2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000A8A                  HDN_BlueTwl_PSG3:
000A8A                  	smpsPSGvoice	PSGVoi1
000A8A F504             	dc.b	$F5,PSGVoi1
000A8C 8A2E8002882E8002 	dc.b	nA0, $2E, nRst, $02, nG0, $2E, nRst, $02
000A94 862E80028C2E8002 	dc.b	nF0, $2E, nRst, $02, nB0, $2E, nRst, $02
000A9C 8A2E8002882E8002 	dc.b	nA0, $2E, nRst, $02, nG0, $2E, nRst, $02
000AA4 862E8002852E8002 	dc.b	nF0, $2E, nRst, $02, nE0, $2E, nRst, $02
000AAC 852E8002832E8002 	dc.b	nE0, $2E, nRst, $02, nD0, $2E, nRst, $02
000AB4 812E8002832E8002 	dc.b	nC0, $2E, nRst, $02, nD0, $2E, nRst, $02
000ABC 882E80028A2E8002 	dc.b	nG0, $2E, nRst, $02, nA0, $2E, nRst, $02
000AC4 8C2E8002892E8002 	dc.b	nB0, $2E, nRst, $02, nAb0, $2E, nRst, $02
000ACC 852E8002832E8002 	dc.b	nE0, $2E, nRst, $02, nD0, $2E, nRst, $02
000AD4 812E8002832E8002 	dc.b	nC0, $2E, nRst, $02, nD0, $2E, nRst, $02
000ADC 882E80028A2E8002 	dc.b	nG0, $2E, nRst, $02, nA0, $2E, nRst, $02
000AE4 892E80028A2E8002 	dc.b	nAb0, $2E, nRst, $02, nA0, $2E, nRst, $02
000AEC 8A2E8002882E8002 	dc.b	nA0, $2E, nRst, $02, nG0, $2E, nRst, $02
000AF4 862E80028C2E8002 	dc.b	nF0, $2E, nRst, $02, nB0, $2E, nRst, $02
000AFC 8A2E8002882E8002 	dc.b	nA0, $2E, nRst, $02, nG0, $2E, nRst, $02
000B04 862E8002852E8002 	dc.b	nF0, $2E, nRst, $02, nE0, $2E, nRst, $02
000B0C 8B2E8002862E8002 	dc.b	nBb0, $2E, nRst, $02, nF0, $2E, nRst, $02
000B14 842E8002882E8002 	dc.b	nEb0, $2E, nRst, $02, nG0, $2E, nRst, $02
000B1C 812E8002862E8002 	dc.b	nC0, $2E, nRst, $02, nF0, $2E, nRst, $02
000B24 812E8002812E8002 	dc.b	nC0, $2E, nRst, $02, nC0, $2E, nRst, $02
000B2C 892E80028B2E8002 	dc.b	nAb0, $2E, nRst, $02, nBb0, $2E, nRst, $02
000B34 8C2E8002812E8002 	dc.b	nB0, $2E, nRst, $02, nC0, $2E, nRst, $02
000B3C 812E8002862E8002 	dc.b	nC0, $2E, nRst, $02, nF0, $2E, nRst, $02
000B44 8406979580861780 	dc.b	nEb0, $06, nBb1, nAb1, nRst, nF0, $17, nRst
000B4C 018D2E8009       	dc.b	$01, nC1, $2E, nRst, $09
000B51                  	smpsJump		HDN_BlueTwl_PSG3, Target
000B51 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_PSG3<*)
000B52                  		rom_ptr_z80(HDN_BlueTwl_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B52 8A8A             	dc.w  (((((HDN_BlueTwl_PSG3+Target))<<8)&$FF00)|((((HDN_BlueTwl_PSG3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B54                  HDN_BlueTwl_PWM1:
000B54 8B0C0C8C18       	dc.b	pAKick, $0C, $0C, pASnare, $18
000B59                  	smpsLoop		$00, $20, HDN_BlueTwl_PWM1, Target
000B59 F7               	dc.b	$F7
000B5A 0020             	dc.b	$00,$20
                        	if (HDN_BlueTwl_PWM1<*)
000B5C                  		rom_ptr_z80(HDN_BlueTwl_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B5C 548B             	dc.w  (((((HDN_BlueTwl_PWM1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B5E                  HDN_BlueTwl_PWM1_Loop1:
000B5E 85069A859A820C0C 	dc.b	pTomHi, $06, pTomLower, pTomHi, pTomLower, pESnare, $0C, $0C
000B66                  	smpsLoop		$00, $0E, HDN_BlueTwl_PWM1_Loop1, Target
000B66 F7               	dc.b	$F7
000B67 000E             	dc.b	$00,$0E
                        	if (HDN_BlueTwl_PWM1_Loop1<*)
000B69                  		rom_ptr_z80(HDN_BlueTwl_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B69 5E8B             	dc.w  (((((HDN_BlueTwl_PWM1_Loop1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B6B 8B03038C8C818182 	dc.b	pAKick, $03, $03, pASnare, pASnare, pEKick, pEKick, pESnare
000B73 828586879A820C89 	dc.b	pESnare, pTomHi, pTomMid, pTomLow, pTomLower, pESnare, $0C, pCrashCymb
000B7B 37               	dc.b	$37
000B7C                  	smpsJump		HDN_BlueTwl_PWM1, Target
000B7C F6               	dc.b	$F6
                        	if (HDN_BlueTwl_PWM1<*)
000B7D                  		rom_ptr_z80(HDN_BlueTwl_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B7D 548B             	dc.w  (((((HDN_BlueTwl_PWM1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B7F                  HDN_BlueTwl_PWM2:
000B7F 9806060606990C0C 	dc.b	pClosedHH, $06, $06, $06, $06, pOpenHH, $0C, $0C
000B87                  	smpsLoop		$00, $20, HDN_BlueTwl_PWM2, Target
000B87 F7               	dc.b	$F7
000B88 0020             	dc.b	$00,$20
                        	if (HDN_BlueTwl_PWM2<*)
000B8A                  		rom_ptr_z80(HDN_BlueTwl_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B8A 7F8B             	dc.w  (((((HDN_BlueTwl_PWM2+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000B8C                  HDN_BlueTwl_PWM2_Loop2:
000B8C 98               	dc.b	pClosedHH

000B8D                  HDN_BlueTwl_PWM2_Loop1:
000B8D 03               	dc.b	$03
000B8E                  	smpsLoop		$00, $08, HDN_BlueTwl_PWM2_Loop1, Target
000B8E F7               	dc.b	$F7
000B8F 0008             	dc.b	$00,$08
                        	if (HDN_BlueTwl_PWM2_Loop1<*)
000B91                  		rom_ptr_z80(HDN_BlueTwl_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B91 8D8B             	dc.w  (((((HDN_BlueTwl_PWM2_Loop1+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B93 990C0C           	dc.b	pOpenHH, $0C, $0C
000B96                  	smpsLoop		$01, $0E, HDN_BlueTwl_PWM2_Loop2, Target
000B96 F7               	dc.b	$F7
000B97 010E             	dc.b	$01,$0E
                        	if (HDN_BlueTwl_PWM2_Loop2<*)
000B99                  		rom_ptr_z80(HDN_BlueTwl_PWM2_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B99 8C8B             	dc.w  (((((HDN_BlueTwl_PWM2_Loop2+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM2_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B9B 8A03030303840606 	dc.b	pClap, $03, $03, $03, $03, pRideBell, $06, $06
000BA3 068282828337     	dc.b	$06, pESnare, pESnare, pESnare, pSplashCymb, $37
000BA9                  	smpsJump		HDN_BlueTwl_PWM2, Target
000BA9 F6               	dc.b	$F6
                        	if (HDN_BlueTwl_PWM2<*)
000BAA                  		rom_ptr_z80(HDN_BlueTwl_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BAA 7F8B             	dc.w  (((((HDN_BlueTwl_PWM2+Target))<<8)&$FF00)|((((HDN_BlueTwl_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000BAC                  HDN_BlueTwl_PWM3:
000BAC                  HDN_BlueTwl_PWM4:
000BAC                  	smpsStop
000BAC F2               	dc.b	$F2

000BAD                  HDN_BlueTwl_Patches:
000BAD 2C               	dc.b	$2C
000BAE 3C74743458585A9A 	dc.b	$3C, $74, $74, $34,	$58, $58, $5A, $9A
000BB6 0E0A0E0800000000 	dc.b	$0E, $0A, $0E, $08,	$00, $00, $00, $00
                        	;!@ dc.b	$F7, $F7, $F6, $F6,	$32, $08, $39, $04
000BBE F7F7F6F6320B3907 	dc.b	$F7, $F7, $F6, $F6,	$32, $08+$03, $39, $04+$03
                        	
000BC6 39               	dc.b	$39
000BC7 0D0201019F1F1F5F 	dc.b	$0D, $02, $01, $01,	$9F, $1F, $1F, $5F
000BCF 0A09090408070707 	dc.b	$0A, $09, $09, $04,	$08, $07, $07, $07
                        	;!@ dc.b	$24, $24, $24, $28,	$2A, $14, $26, $0C
000BD7 242424282A142614 	dc.b	$24, $24, $24, $28,	$2A, $14, $26, $0C+$08
                        	
000BDF 34               	dc.b	$34
000BE0 73020131525F5F1F 	dc.b	$73, $02, $01, $31,	$52, $5F, $5F, $1F
000BE8 0505050A03040404 	dc.b	$05, $05, $05, $0A,	$03, $04, $04, $04
000BF0 211123451E10230C 	dc.b	$21, $11, $23, $45,	$1E, $10, $23, $0C

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  HDN_BLUETWL_FM1    00000040
HDN_BLUETWL_FM2    000001A9    HDN_BLUETWL_FM3    000003AA    HDN_BLUETWL_FM4    000004FE
HDN_BLUETWL_FM5    00000652    HDN_BLUETWL_FM6    0000071E    HDN_BLUETWL_LOO$8  00000966
HDN_BLUETWL_LOO$9  00000979    HDN_BLUETWL_LOOP1  00000378    HDN_BLUETWL_LOOP10 000009E6
HDN_BLUETWL_LOOP11 000009FA    HDN_BLUETWL_LOOP2  000003DD    HDN_BLUETWL_LOOP3  0000044A
HDN_BLUETWL_LOOP4  00000531    HDN_BLUETWL_LOOP5  0000059E    HDN_BLUETWL_LOOP6  00000938
HDN_BLUETWL_LOOP7  0000094E    HDN_BLUETWL_PATCHES                           00000BAD
HDN_BLUETWL_PSG1   000007EA    HDN_BLUETWL_PSG2   0000094C    HDN_BLUETWL_PSG3   00000A8A
HDN_BLUETWL_PWM1   00000B54    HDN_BLUETWL_PWM1_LOOP1                        00000B5E
HDN_BLUETWL_PWM2   00000B7F    HDN_BLUETWL_PWM2_LOOP1                        00000B8D
HDN_BLUETWL_PWM2_LOOP2                        00000B8C    HDN_BLUETWL_PWM3   00000BAC
HDN_BLUETWL_PWM4   00000BAC    NA0                0000008A E  NA1                00000096 E
NA2                000000A2 E  NA3                000000AE E  NA4                000000BA E
NA5                000000C6 E  NA6                000000D2 E  NA7                000000DE E
NAB0               00000089 E  NAB1               00000095 E  NAB2               000000A1 E
NAB3               000000AD E  NAB4               000000B9 E  NAB5               000000C5 E
NAB6               000000D1 E  NAB7               000000DD E  NB0                0000008C E
NB1                00000098 E  NB2                000000A4 E  NB3                000000B0 E
NB4                000000BC E  NB5                000000C8 E  NB6                000000D4 E
NBB0               0000008B E  NBB1               00000097 E  NBB2               000000A3 E
NBB3               000000AF E  NBB4               000000BB E  NBB5               000000C7 E
NBB6               000000D3 E  NBB7               000000DF E  NC0                00000081 E
NC1                0000008D E  NC2                00000099 E  NC3                000000A5 E
NC4                000000B1 E  NC5                000000BD E  NC6                000000C9 E
NC7                000000D5 E  NCS0               00000082 E  NCS1               0000008E E
NCS2               0000009A E  NCS3               000000A6 E  NCS4               000000B2 E
NCS5               000000BE E  NCS6               000000CA E  NCS7               000000D6 E
ND0                00000083 E  ND1                0000008F E  ND2                0000009B E
ND3                000000A7 E  ND4                000000B3 E  ND5                000000BF E
ND6                000000CB E  ND7                000000D7 E  NE0                00000085 E
NE1                00000091 E  NE2                0000009D E  NE3                000000A9 E
NE4                000000B5 E  NE5                000000C1 E  NE6                000000CD E
NE7                000000D9 E  NEB0               00000084 E  NEB1               00000090 E
NEB2               0000009C E  NEB3               000000A8 E  NEB4               000000B4 E
NEB5               000000C0 E  NEB6               000000CC E  NEB7               000000D8 E
NF0                00000086 E  NF1                00000092 E  NF2                0000009E E
NF3                000000AA E  NF4                000000B6 E  NF5                000000C2 E
NF6                000000CE E  NF7                000000DA E  NFS0               00000087 E
NFS1               00000093 E  NFS2               0000009F E  NFS3               000000AB E
NFS4               000000B7 E  NFS5               000000C3 E  NFS6               000000CF E
NFS7               000000DB E  NG0                00000088 E  NG1                00000094 E
NG2                000000A0 E  NG3                000000AC E  NG4                000000B8 E
NG5                000000C4 E  NG6                000000D0 E  NG7                000000DC E
NRST               00000080 E  PAKICK             0000008B E  PANCENTER          000000C0 S
PANCENTRE          000000C0 S  PANLEFT            00000080 S  PANNONE            00000000 S
PANRIGHT           00000040 S  PASNARE            0000008C E  PBELL              0000008D E
PBONGOHI           00000092 E  PBONGOLO           00000093 E  PCLAP              0000008A E
PCLICKHI           00000090 E  PCLICKLO           00000091 E  PCLOSEDHH          00000098 E
PCOWBELL           0000008F E  PCRASHCYMB         00000089 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
POPENHH            00000099 E  PRIDEBELL          00000084 E  PSEGA              00000097 E
PSGDELTA           0000000C E  PSGVOI0            00000000 E  PSGVOI1            00000004 E
PSGVOL0            00000007 E  PSGVOL1            00000009 E  PSGVOL2            00000006 E
PSILENCE           00000096 E  PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E
PTIMPANILO         00000095 E  PTOMHI             00000085 E  PTOMLOW            00000087 E
PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E
PTOMMID            00000086 E  PWMPITCH           00000000 E  PWMVOL1            0000007F E
PWMVOL2            00000070 E  SMPSED             000000ED E  SMPSEE             000000EE E
SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E  SMPSMODON          000000F1 E
SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E  SMPSPITCH01HI      0000000C E
SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E  SMPSPITCH02LO      000000E8 E
SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E  SMPSPITCH04HI      00000030 E
SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E  SMPSPITCH05LO      000000C4 E
SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E  SMPSPITCH07HI      00000054 E
SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E  SMPSPITCH08LO      000000A0 E
SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E  SMPSPITCH10HI      00000078 E
SMPSPITCH10LO      00000088 E  TARGET             00040000 E  TEMPDIV            00000002 S
