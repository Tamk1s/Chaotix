 AS V1.42 Beta [Bld 89] - source file S1.asm - page 1 - 2/2/2019 16:35:12


       1/       0 :                     		cpu 68000
       2/       0 : =$5                 SonicDriverVer			=  5
       3/       0 : =$1                 use_s2_samples			=  1
       4/       0 : =$1                 use_s3_samples			=  1
       5/       0 : =$0                 use_sk_samples			=  0
       6/       0 : =$1                 use_s3d_samples		 	=  1
       7/       0 :                     		include "_smps2asm_inc.asm"
(1)    1/       0 :                     ; =============================================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; =============================================================================================
(1)    4/       0 :                     
(1)    5/       0 :                     ; function to make a little-endian 16-bit pointer for the Z80 sound driver
(1)    6/       0 :                     z80_ptr function x,((((x)<<8)&$FF00)|(((x)>>8)&$7F)|$80)
(1)    7/       0 :                     
(1)    8/       0 :                     ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
(1)    9/       0 :                     rom_ptr_z80 macro addr
(1)   10/       0 :                     	dc.w z80_ptr(addr)
(1)   11/       0 :                         endm
(1)   12/       0 :                     
(1)   13/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   14/       0 : =$C                 psgdelta	EQU 12
(1)   15/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)   16/       0 :                     ; Standard Octave Pitch Equates
(1)   17/       0 : =$88..$B8           	enum smpsPitch10lo=$88,smpsPitch09lo=$94,smpsPitch08lo=$A0,smpsPitch07lo=$AC,smpsPitch06lo=$B8
(1)   18/       0 : =$C4..$F4           	enum smpsPitch05lo=$C4,smpsPitch04lo=$D0,smpsPitch03lo=$DC,smpsPitch02lo=$E8,smpsPitch01lo=$F4
(1)   19/       0 : =$0..$30            	enum smpsPitch00=$00,smpsPitch01hi=$0C,smpsPitch02hi=$18,smpsPitch03hi=$24,smpsPitch04hi=$30
(1)   20/       0 : =$3C..$6C           	enum smpsPitch05hi=$3C,smpsPitch06hi=$48,smpsPitch07hi=$54,smpsPitch08hi=$60,smpsPitch09hi=$6C
(1)   21/       0 : =$78                	enum smpsPitch10hi=$78
(1)   22/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)   23/       0 :                     ; Note Equates
(1)   24/       0 : =$80..$8F           	enum nRst=$80+0,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   25/       0 : =$90..$9F           	enum nEb1=nD1+1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   26/       0 : =$A0..$AF           	enum nG2=nFs2+1,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   27/       0 : =$B0..$BF           	enum nB3=nBb3+1,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   28/       0 : =$C0..$CF           	enum nEb5=nD5+1,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   29/       0 : =$D0..$DF           	enum nG6=nFs6+1,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   30/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   31/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   32/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   33/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   34/       0 : =>FALSE             	if SonicDriverVer<=2
(1)   35/       0 :                     nMaxPSG				EQU nA5
(1)   36/       0 :                     nMaxPSG1			EQU nA5+psgdelta
(1)   37/       0 :                     nMaxPSG2			EQU nA5+psgdelta
(1)   38/       0 : =>TRUE              	else
(1)   39/       0 : =$C7                nMaxPSG				EQU nBb6-psgdelta
(1)   40/       0 : =$D3                nMaxPSG1			EQU nBb6
(1)   41/       0 : =$D4                nMaxPSG2			EQU nB6
(1)   42/       0 : [34]                	endif
(1)   43/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)   44/       0 :                     ; PSG volume envelope equates
(1)   45/       0 : =>FALSE             	if SonicDriverVer==1
(1)   46/       0 :                     		enum fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   47/       0 :                     		enum fTone_07=fTone_06+1,fTone_08,fTone_09
(1)   48/       0 : =>FALSE             	elseif SonicDriverVer==2
(1)   49/       0 :                     		enum fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   50/       0 :                     		enum fTone_07=fTone_06+1,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   51/       0 :                     		enum fTone_0D=fTone_0C+1
(1)   52/       0 : =>TRUE              	else
(1)   53/       0 : =$1..$6             		enum sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 2 - 2/2/2019 16:35:13


(1)   54/       0 : =$7..$C             		enum sTone_07=sTone_06+1,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(1)   55/       0 : =$D..$12            		enum sTone_0D=sTone_0C+1,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
(1)   56/       0 : =$13..$18           		enum sTone_13=sTone_12+1,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
(1)   57/       0 : =$19..$1E           		enum sTone_19=sTone_18+1,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
(1)   58/       0 : =$1F..$24           		enum sTone_1F=sTone_1E+1,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
(1)   59/       0 : =$25..$27           		enum sTone_25=sTone_24+1,sTone_26,sTone_27
(1)   60/       0 :                     		; For conversions:
(1)   61/       0 : =>TRUE              		if SonicDriverVer>=5
(1)   62/       0 : =$28..$2D           			enum fTone_01=$28,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   63/       0 : =$2E..$33           			enum fTone_07=fTone_06+1,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   64/       0 : =$34                			enum fTone_0D=fTone_0C+1
(1)   65/       0 : [61]                		endif
(1)   66/       0 : [45]                	endif
(1)   67/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)   68/       0 :                     ; DAC Equates
(1)   69/       0 : =>FALSE             	if SonicDriverVer==1
(1)   70/       0 :                     		enum dKick=$81,dSnare,dTimpani
(1)   71/       0 :                     		enum dHiTimpani=$88,dMidTimpani,dLowTimpani,dVLowTimpani
(1)   72/       0 : =>FALSE             	elseif SonicDriverVer==2
(1)   73/       0 :                     		enum dKick=$81,dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)   74/       0 :                     		enum dLowTimpani=dMidTimpani+1,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)   75/       0 :                     		enum dMidClap=dHiClap+1,dLowClap
(1)   76/       0 : =>TRUE              	else;if SonicDriverVer>=3
(1)   77/       0 : =>TRUE              		if (use_s3_samples<>0)||(use_sk_samples<>0)||(use_s3d_samples<>0)
(1)   78/       0 : =$81..$87           			enum dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)   79/       0 : =$88..$8C           			enum dCrashCymbal=dMuffledSnare+1,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)   80/       0 : =$8D..$90           			enum dHigherMetalHit=dHighMetalHit+1,dMidMetalHit,dClapS3,dElectricHighTom
(1)   81/       0 : =$91..$93           			enum dElectricMidTom=dElectricHighTom+1,dElectricLowTom,dElectricFloorTom
(1)   82/       0 : =$94..$97           			enum dTightSnare=dElectricFloorTom+1,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)   83/       0 : =$98..$9B           			enum dHiTimpaniS3=dLooserSnare+1,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)   84/       0 : =$9C..$9E           			enum dClick=dQuickLooseSnare+1,dPowerKick,dQuickGlassCrash
(1)   85/       0 : [77]                		endif
(1)   86/       0 : =>TRUE              		if (use_s3_samples<>0)||(use_sk_samples<>0)
(1)   87/       0 : =$9F..$A2           			enum dGlassCrashSnare=dQuickGlassCrash+1,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)   88/       0 : =$A3..$A7           			enum dOddSnareKick=dQuietGlassCrash+1,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)   89/       0 : =$A8..$AE           			enum dModLooseKick=dLooseKick+1,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)   90/       0 : =$AF..$B2           			enum dHiHitDrum=dLowWoodBlock+1,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(1)   91/       0 : =$B3..$B5           			enum dLowerEchoedClapHit=dEchoedClapHit+1,dHipHopHitKick,dHipHopHitPowerKick
(1)   92/       0 : =$B6..$B9           			enum dBassHey=dHipHopHitPowerKick+1,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)   93/       0 : =$BA..$BD           			enum dReverseFadingWind=dHipHopHitKick3+1,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)   94/       0 : =$BE..$C1           			enum dCrashingNoiseWoo=dPowerKick2+1,dQuickHit,dKickHey,dPowerKickHit
(1)   95/       0 : =$C2..$C4           			enum dLowPowerKickHit=dPowerKickHit+1,dLowerPowerKickHit,dLowestPowerKickHit
(1)   96/       0 : [86]                		endif
(1)   97/       0 :                     		; For conversions:
(1)   98/       0 : =>TRUE              		if (use_s2_samples<>0)
(1)   99/       0 : =>TRUE              			if (use_s3_samples<>0)||(use_sk_samples<>0)
(1)  100/       0 : =$C5                				enum dKick=dLowestPowerKickHit+1
(1)  101/       0 : =>FALSE             			elseif (use_s3d_samples<>0)
(1)  102/       0 :                     				enum dKick=dQuickGlassCrash+1
(1)  103/       0 : =>FALSE             			else
(1)  104/       0 :                     				enum dKick=$81
(1)  105/       0 : [99]                			endif
(1)  106/       0 : =$C6..$CD           			enum dSnare=dKick+1,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)  107/       0 : =$CE..$D3           			enum dLowTimpani=dMidTimpani+1,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)  108/       0 : =$D4..$D5           			enum dMidClap=dHiClap+1,dLowClap
(1)  109/       0 : [98]                		endif
(1)  110/       0 : =>TRUE              		if (use_s3d_samples<>0)
(1)  111/       0 : =>TRUE              			if (use_s2_samples<>0)
(1)  112/       0 : =$D6..$D7           				enum dFinalFightMetalCrash=dLowClap+1,dIntroKick
(1)  113/       0 : =>FALSE             			elseif (use_s3_samples<>0)||(use_sk_samples<>0)
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 3 - 2/2/2019 16:35:13


(1)  114/       0 :                     				enum dFinalFightMetalCrash=dLowestPowerKickHit+1,dIntroKick
(1)  115/       0 : =>FALSE             			else
(1)  116/       0 :                     				enum dFinalFightMetalCrash=dQuickGlassCrash+1,dIntroKick
(1)  117/       0 : [111]               			endif
(1)  118/       0 : [110]               		endif
(1)  119/       0 : =>TRUE              		if (use_s3_samples<>0)
(1)  120/       0 : =>TRUE              			if (use_s3d_samples<>0)
(1)  121/       0 : =$D8..$D9           				enum dEchoedClapHit_S3=dIntroKick+1,dLowerEchoedClapHit_S3
(1)  122/       0 : =>FALSE             			elseif (use_s2_samples<>0)
(1)  123/       0 :                     				enum dEchoedClapHit_S3=dLowClap+1,dLowerEchoedClapHit_S3
(1)  124/       0 : =>FALSE             			else
(1)  125/       0 :                     				enum dEchoedClapHit_S3=dLowestPowerKickHit+1,dLowerEchoedClapHit_S3
(1)  126/       0 : [120]               			endif
(1)  127/       0 : [119]               		endif
(1)  128/       0 : [69]                	endif
(1)  129/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  130/       0 :                     ; Channel IDs for SFX
(1)  131/       0 : =$80                cPSG1				EQU $80
(1)  132/       0 : =$A0                cPSG2				EQU $A0
(1)  133/       0 : =$C0                cPSG3				EQU $C0
(1)  134/       0 : =$E0                cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(1)  135/       0 : =$2                 cFM3				EQU $02
(1)  136/       0 : =$4                 cFM4				EQU $04
(1)  137/       0 : =$5                 cFM5				EQU $05
(1)  138/       0 : =$6                 cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(1)  139/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  140/       0 :                     ; Conversion macros and functions
(1)  141/       0 :                     
(1)  142/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)  143/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(1)  144/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(1)  145/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)  146/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)  147/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)  148/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)  149/       0 :                     
(1)  150/       0 :                     convertMainTempoMod macro mod
(1)  151/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)  152/       0 :                     		dc.b	mod
(1)  153/       0 :                     	elseif SourceDriver==1
(1)  154/       0 :                     		if mod==1
(1)  155/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)  156/       0 :                     		endif
(1)  157/       0 :                     		if SonicDriverVer==2
(1)  158/       0 :                     			dc.b	s1TempotoS2(mod)
(1)  159/       0 :                     		else;if SonicDriverVer>=3
(1)  160/       0 :                     			dc.b	s1TempotoS3(mod)
(1)  161/       0 :                     		endif
(1)  162/       0 :                     	elseif SourceDriver==2
(1)  163/       0 :                     		if mod==0
(1)  164/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)  165/       0 :                     		endif
(1)  166/       0 :                     		if SonicDriverVer==1
(1)  167/       0 :                     			dc.b	s2TempotoS1(mod)
(1)  168/       0 :                     		else;if SonicDriverVer>=3
(1)  169/       0 :                     			dc.b	s2TempotoS3(mod)
(1)  170/       0 :                     		endif
(1)  171/       0 :                     	else;if SourceDriver>=3
(1)  172/       0 :                     		if mod==0
(1)  173/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 4 - 2/2/2019 16:35:13


(1)  174/       0 :                     		endif
(1)  175/       0 :                     		if SonicDriverVer==1
(1)  176/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  177/       0 :                     		else;if SonicDriverVer==2
(1)  178/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  179/       0 :                     		endif
(1)  180/       0 :                     	endif
(1)  181/       0 :                     	endm
(1)  182/       0 :                     
(1)  183/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  184/       0 :                     PSGPitchConvert macro pitch
(1)  185/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  186/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  187/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  188/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  189/       0 :                     	else
(1)  190/       0 :                     		dc.b	pitch
(1)  191/       0 :                     	endif
(1)  192/       0 :                     	endm
(1)  193/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  194/       0 :                     ; Header Macros
(1)  195/       0 :                     smpsHeaderStartSong macro ver
(1)  196/       0 :                     SourceDriver set ver
(1)  197/       0 :                     songStart set *
(1)  198/       0 :                     	endm
(1)  199/       0 :                     
(1)  200/       0 :                     smpsHeaderStartSongConvert macro ver
(1)  201/       0 :                     SourceDriver set ver
(1)  202/       0 :                     songStart set *
(1)  203/       0 :                     	endm
(1)  204/       0 :                     
(1)  205/       0 :                     smpsHeaderVoiceNull macro
(1)  206/       0 :                     	if songStart<>*
(1)  207/       0 :                     		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
(1)  208/       0 :                     	endif
(1)  209/       0 :                     	dc.w	$0000
(1)  210/       0 :                     	endm
(1)  211/       0 :                     
(1)  212/       0 :                     ; Header - Set up Voice Location
(1)  213/       0 :                     ; Common to music and SFX
(1)  214/       0 :                     smpsHeaderVoice macro loc
(1)  215/       0 :                     	if songStart<>*
(1)  216/       0 :                     		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
(1)  217/       0 :                     	endif
(1)  218/       0 :                     	if SonicDriverVer<>1
(1)  219/       0 :                     		dc.w	z80_ptr(loc)
(1)  220/       0 :                     	else
(1)  221/       0 :                     		if MOMPASS==2
(1)  222/       0 :                     		if loc<songStart
(1)  223/       0 :                     			fatal "Voice banks for Sonic 1 songs must come after the song"
(1)  224/       0 :                     		endif
(1)  225/       0 :                     		endif
(1)  226/       0 :                     		dc.w	loc-songStart
(1)  227/       0 :                     	endif
(1)  228/       0 :                     	endm
(1)  229/       0 :                     
(1)  230/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  231/       0 :                     ; Common to music and SFX
(1)  232/       0 :                     smpsHeaderVoiceUVB macro
(1)  233/       0 :                     	if songStart<>*
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 5 - 2/2/2019 16:35:13


(1)  234/       0 :                     		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
(1)  235/       0 :                     	endif
(1)  236/       0 :                     	if SonicDriverVer>=3
(1)  237/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  238/       0 :                     	endif
(1)  239/       0 :                     	endm
(1)  240/       0 :                     
(1)  241/       0 :                     ; Header macros for music (not for SFX)
(1)  242/       0 :                     ; Header - Set up Channel Usage
(1)  243/       0 :                     smpsHeaderChan macro fm,psg
(1)  244/       0 :                     	dc.b	fm,psg
(1)  245/       0 :                     	endm
(1)  246/       0 :                     
(1)  247/       0 :                     ; Header - Set up Tempo
(1)  248/       0 :                     smpsHeaderTempo macro div,mod
(1)  249/       0 :                     	dc.b	div
(1)  250/       0 :                     	convertMainTempoMod mod
(1)  251/       0 :                     	endm
(1)  252/       0 :                     
(1)  253/       0 :                     ; Header - Set up DAC Channel
(1)  254/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  255/       0 :                     	if SonicDriverVer<>1
(1)  256/       0 :                     		dc.w	z80_ptr(loc)
(1)  257/       0 :                     	else
(1)  258/       0 :                     		dc.w	loc-songStart
(1)  259/       0 :                     	endif
(1)  260/       0 :                     	if ("pitch"<>"")
(1)  261/       0 :                     		dc.b	pitch
(1)  262/       0 :                     		if ("vol"<>"")
(1)  263/       0 :                     			dc.b	vol
(1)  264/       0 :                     		else
(1)  265/       0 :                     			dc.b	$00
(1)  266/       0 :                     		endif
(1)  267/       0 :                     	else
(1)  268/       0 :                     		dc.w	$00
(1)  269/       0 :                     	endif
(1)  270/       0 :                     	endm
(1)  271/       0 :                     
(1)  272/       0 :                     ; Header - Set up FM Channel
(1)  273/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  274/       0 :                     	if SonicDriverVer<>1
(1)  275/       0 :                     		dc.w	z80_ptr(loc)
(1)  276/       0 :                     	else
(1)  277/       0 :                     		dc.w	loc-songStart
(1)  278/       0 :                     	endif
(1)  279/       0 :                     	dc.b	pitch,vol
(1)  280/       0 :                     	endm
(1)  281/       0 :                     
(1)  282/       0 :                     ; Header - Set up PSG Channel
(1)  283/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  284/       0 :                     	if SonicDriverVer<>1
(1)  285/       0 :                     		dc.w	z80_ptr(loc)
(1)  286/       0 :                     	else
(1)  287/       0 :                     		dc.w	loc-songStart
(1)  288/       0 :                     	endif
(1)  289/       0 :                     	PSGPitchConvert pitch
(1)  290/       0 :                     	dc.b	vol,mod,voice
(1)  291/       0 :                     	endm
(1)  292/       0 :                     
(1)  293/       0 :                     ; Header macros for SFX (not for music)
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 6 - 2/2/2019 16:35:13


(1)  294/       0 :                     ; Header - Set up Tempo
(1)  295/       0 :                     smpsHeaderTempoSFX macro div
(1)  296/       0 :                     	dc.b	div
(1)  297/       0 :                     	endm
(1)  298/       0 :                     
(1)  299/       0 :                     ; Header - Set up Channel Usage
(1)  300/       0 :                     smpsHeaderChanSFX macro chan
(1)  301/       0 :                     	dc.b	chan
(1)  302/       0 :                     	endm
(1)  303/       0 :                     
(1)  304/       0 :                     ; Header - Set up FM Channel
(1)  305/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  306/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  307/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  308/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  309/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  310/       0 :                     	endif
(1)  311/       0 :                     	dc.b	$80,chanid
(1)  312/       0 :                     	if SonicDriverVer<>1
(1)  313/       0 :                     		dc.w	z80_ptr(loc)
(1)  314/       0 :                     	else
(1)  315/       0 :                     		dc.w	loc-songStart
(1)  316/       0 :                     	endif
(1)  317/       0 :                     	if (chanid&$80)<>0
(1)  318/       0 :                     		PSGPitchConvert pitch
(1)  319/       0 :                     	else
(1)  320/       0 :                     		dc.b	pitch
(1)  321/       0 :                     	endif
(1)  322/       0 :                     	dc.b	vol
(1)  323/       0 :                     	endm
(1)  324/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  325/       0 :                     ; Co-ord Flag Macros and Equates
(1)  326/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  327/       0 :                     smpsPan macro direction,amsfms
(1)  328/       0 :                     panNone set $00
(1)  329/       0 :                     panRight set $40
(1)  330/       0 :                     panLeft set $80
(1)  331/       0 :                     panCentre set $C0
(1)  332/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  333/       0 :                     	dc.b $E0,direction+amsfms
(1)  334/       0 :                     	endm
(1)  335/       0 :                     
(1)  336/       0 :                     ; E1xx - Set channel frequency displacement to xx
(1)  337/       0 :                     smpsAlterNote macro val
(1)  338/       0 :                     	dc.b	$E1,val
(1)  339/       0 :                     	endm
(1)  340/       0 :                     
(1)  341/       0 :                     ; E2xx - Useless
(1)  342/       0 :                     smpsNop macro val
(1)  343/       0 :                     	if SonicDriverVer<3
(1)  344/       0 :                     		dc.b	$E2,val
(1)  345/       0 :                     	endif
(1)  346/       0 :                     	endm
(1)  347/       0 :                     
(1)  348/       0 :                     ; Return (used after smpsCall)
(1)  349/       0 :                     smpsReturn macro val
(1)  350/       0 :                     	if SonicDriverVer>=3
(1)  351/       0 :                     		dc.b	$F9
(1)  352/       0 :                     	else
(1)  353/       0 :                     		dc.b	$E3
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 7 - 2/2/2019 16:35:13


(1)  354/       0 :                     	endif
(1)  355/       0 :                     	endm
(1)  356/       0 :                     
(1)  357/       0 :                     ; Fade in previous song (ie. 1-Up)
(1)  358/       0 :                     smpsFade macro val
(1)  359/       0 :                     	if SonicDriverVer>=3
(1)  360/       0 :                     		dc.b	$E2
(1)  361/       0 :                     		if ("val"<>"")
(1)  362/       0 :                     			dc.b	val
(1)  363/       0 :                     		else
(1)  364/       0 :                     			dc.b	$FF
(1)  365/       0 :                     		endif
(1)  366/       0 :                     		if SourceDriver<3
(1)  367/       0 :                     			smpsStop
(1)  368/       0 :                     		endif
(1)  369/       0 :                     	else
(1)  370/       0 :                     		dc.b	$E4
(1)  371/       0 :                     	endif
(1)  372/       0 :                     	endm
(1)  373/       0 :                     
(1)  374/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  375/       0 :                     smpsChanTempoDiv macro val
(1)  376/       0 :                     	if SonicDriverVer>=5
(1)  377/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  378/       0 :                     		dc.b	$FF,$08,val
(1)  379/       0 :                     	elseif SonicDriverVer==3
(1)  380/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  381/       0 :                     	else
(1)  382/       0 :                     		dc.b	$E5,val
(1)  383/       0 :                     	endif
(1)  384/       0 :                     	endm
(1)  385/       0 :                     
(1)  386/       0 :                     ; E6xx - Alter Volume by xx
(1)  387/       0 :                     smpsAlterVol macro val
(1)  388/       0 :                     	dc.b	$E6,val
(1)  389/       0 :                     	endm
(1)  390/       0 :                     
(1)  391/       0 :                     ; E7 - Prevent attack of next note
(1)  392/       0 : =$E7                smpsNoAttack	EQU $E7
(1)  393/       0 :                     
(1)  394/       0 :                     ; E8xx - Set note fill to xx
(1)  395/       0 :                     smpsNoteFill macro val
(1)  396/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  397/       0 :                     		; Unique to Flamewing's modified driver
(1)  398/       0 :                     		dc.b	$FF,$0A,val
(1)  399/       0 :                     	else
(1)  400/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  401/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  402/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  403/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  404/       0 :                     		endif
(1)  405/       0 :                     		dc.b	$E8,val
(1)  406/       0 :                     	endif
(1)  407/       0 :                     	endm
(1)  408/       0 :                     
(1)  409/       0 :                     ; Add xx to channel pitch
(1)  410/       0 :                     smpsAlterPitch macro val
(1)  411/       0 :                     	if SonicDriverVer>=3
(1)  412/       0 :                     		dc.b	$FB,val
(1)  413/       0 :                     	else
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 8 - 2/2/2019 16:35:13


(1)  414/       0 :                     		dc.b	$E9,val
(1)  415/       0 :                     	endif
(1)  416/       0 :                     	endm
(1)  417/       0 :                     
(1)  418/       0 :                     ; Set music tempo modifier to xx
(1)  419/       0 :                     smpsSetTempoMod macro mod
(1)  420/       0 :                     	if SonicDriverVer>=3
(1)  421/       0 :                     		dc.b	$FF,$00
(1)  422/       0 :                     	else
(1)  423/       0 :                     		dc.b	$EA
(1)  424/       0 :                     	endif
(1)  425/       0 :                     	convertMainTempoMod mod
(1)  426/       0 :                     	endm
(1)  427/       0 :                     
(1)  428/       0 :                     ; Set music tempo divider to xx
(1)  429/       0 :                     smpsSetTempoDiv macro val
(1)  430/       0 :                     	if SonicDriverVer>=3
(1)  431/       0 :                     		dc.b	$FF,$04,val
(1)  432/       0 :                     	else
(1)  433/       0 :                     		dc.b	$EB,val
(1)  434/       0 :                     	endif
(1)  435/       0 :                     	endm
(1)  436/       0 :                     
(1)  437/       0 :                     ; ECxx - Set Volume to xx
(1)  438/       0 :                     smpsSetVol macro val
(1)  439/       0 :                     	if SonicDriverVer>=3
(1)  440/       0 :                     		dc.b	$E4,val
(1)  441/       0 :                     	else
(1)  442/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  443/       0 :                     	endif
(1)  444/       0 :                     	endm
(1)  445/       0 :                     
(1)  446/       0 :                     ; Works on all drivers
(1)  447/       0 :                     smpsPSGAlterVol macro vol
(1)  448/       0 :                     	dc.b	$EC,vol
(1)  449/       0 :                     	endm
(1)  450/       0 :                     
(1)  451/       0 :                     ; Clears pushing sound flag in S1
(1)  452/       0 :                     smpsClearPush macro
(1)  453/       0 :                     	if SonicDriverVer==1
(1)  454/       0 :                     		dc.b	$ED
(1)  455/       0 :                     	else
(1)  456/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  457/       0 :                     	endif
(1)  458/       0 :                     	endm
(1)  459/       0 :                     
(1)  460/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  461/       0 :                     smpsStopSpecial macro
(1)  462/       0 :                     	if SonicDriverVer==1
(1)  463/       0 :                     		dc.b	$EE
(1)  464/       0 :                     	else
(1)  465/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  466/       0 :                     		dc.b	$F2
(1)  467/       0 :                     	endif
(1)  468/       0 :                     	endm
(1)  469/       0 :                     
(1)  470/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  471/       0 :                     smpsSetvoice macro voice,songID
(1)  472/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  473/       0 :                     		dc.b	$EF,voice|$80,songID+$81
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 9 - 2/2/2019 16:35:13


(1)  474/       0 :                     	else
(1)  475/       0 :                     		dc.b	$EF,voice
(1)  476/       0 :                     	endif
(1)  477/       0 :                     	endm
(1)  478/       0 :                     
(1)  479/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  480/       0 :                     smpsModSet macro wait,speed,change,step
(1)  481/       0 :                     	dc.b	$F0
(1)  482/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  483/       0 :                     		dc.b	wait+1,speed,change,(step*speed+1)&$FF
(1)  484/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  485/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  486/       0 :                     	else
(1)  487/       0 :                     		dc.b	wait,speed,change,step
(1)  488/       0 :                     	endif
(1)  489/       0 :                     	;dc.b	speed,change,step
(1)  490/       0 :                     	endm
(1)  491/       0 :                     
(1)  492/       0 :                     ; Turn on Modulation
(1)  493/       0 :                     smpsModOn macro
(1)  494/       0 :                     	if SonicDriverVer>=3
(1)  495/       0 :                     		dc.b	$F4,$80
(1)  496/       0 :                     	else
(1)  497/       0 :                     		dc.b	$F1
(1)  498/       0 :                     	endif
(1)  499/       0 :                     	endm
(1)  500/       0 :                     
(1)  501/       0 :                     ; F2 - End of channel
(1)  502/       0 :                     smpsStop macro
(1)  503/       0 :                     	dc.b	$F2
(1)  504/       0 :                     	endm
(1)  505/       0 :                     
(1)  506/       0 :                     ; F3xx - PSG waveform to xx
(1)  507/       0 :                     smpsPSGform macro form
(1)  508/       0 :                     	dc.b	$F3,form
(1)  509/       0 :                     	endm
(1)  510/       0 :                     
(1)  511/       0 :                     ; Turn off Modulation
(1)  512/       0 :                     smpsModOff macro
(1)  513/       0 :                     	if SonicDriverVer>=3
(1)  514/       0 :                     		dc.b	$FA
(1)  515/       0 :                     	else
(1)  516/       0 :                     		dc.b	$F4
(1)  517/       0 :                     	endif
(1)  518/       0 :                     	endm
(1)  519/       0 :                     
(1)  520/       0 :                     ; F5xx - PSG voice to xx
(1)  521/       0 :                     smpsPSGvoice macro voice
(1)  522/       0 :                     	dc.b	$F5,voice
(1)  523/       0 :                     	endm
(1)  524/       0 :                     
(1)  525/       0 :                     ; F6xxxx - Jump to xxxx
(1)  526/       0 :                     smpsJump macro loc
(1)  527/       0 :                     	dc.b	$F6
(1)  528/       0 :                     	if SonicDriverVer<>1
(1)  529/       0 :                     		dc.w	z80_ptr(loc)
(1)  530/       0 :                     	else
(1)  531/       0 :                     		dc.w	loc-*-1
(1)  532/       0 :                     	endif
(1)  533/       0 :                     	endm
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 10 - 2/2/2019 16:35:13


(1)  534/       0 :                     
(1)  535/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  536/       0 :                     smpsLoop macro index,loops,loc
(1)  537/       0 :                     	dc.b	$F7
(1)  538/       0 :                     	dc.b	index,loops
(1)  539/       0 :                     	if SonicDriverVer<>1
(1)  540/       0 :                     		dc.w	z80_ptr(loc)
(1)  541/       0 :                     	else
(1)  542/       0 :                     		dc.w	loc-*-1
(1)  543/       0 :                     	endif
(1)  544/       0 :                     	endm
(1)  545/       0 :                     
(1)  546/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  547/       0 :                     smpsCall macro loc
(1)  548/       0 :                     	dc.b	$F8
(1)  549/       0 :                     	if SonicDriverVer<>1
(1)  550/       0 :                     		dc.w	z80_ptr(loc)
(1)  551/       0 :                     	else
(1)  552/       0 :                     		dc.w	loc-*-1
(1)  553/       0 :                     	endif
(1)  554/       0 :                     	endm
(1)  555/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  556/       0 :                     ; Alter Volume
(1)  557/       0 :                     smpsFMAlterVol macro val1,val2
(1)  558/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  559/       0 :                     		dc.b	$E5,val1,val2
(1)  560/       0 :                     	else
(1)  561/       0 :                     		dc.b	$E6,val1
(1)  562/       0 :                     	endif
(1)  563/       0 :                     	endm
(1)  564/       0 :                     
(1)  565/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  566/       0 : =>TRUE              	if SonicDriverVer>=3
(1)  567/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  568/       0 :                     smpsStopFM macro
(1)  569/       0 :                     	dc.b	$E3
(1)  570/       0 :                     	endm
(1)  571/       0 :                     
(1)  572/       0 :                     ; Spindash Rev
(1)  573/       0 :                     smpsSpindashRev macro
(1)  574/       0 :                     	dc.b	$E9
(1)  575/       0 :                     	endm
(1)  576/       0 :                     
(1)  577/       0 :                     smpsPlayDACSample macro sample
(1)  578/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  579/       0 :                     	endm
(1)  580/       0 :                     
(1)  581/       0 :                     smpsConditionalJump macro index,loc
(1)  582/       0 :                     	dc.b	$EB
(1)  583/       0 :                     	dc.b	index
(1)  584/       0 :                     	dc.w	z80_ptr(loc)
(1)  585/       0 :                     	endm
(1)  586/       0 :                     
(1)  587/       0 :                     ; Set note values to xx-$40
(1)  588/       0 :                     smpsSetNote macro val
(1)  589/       0 :                     	dc.b	$ED,val
(1)  590/       0 :                     	endm
(1)  591/       0 :                     
(1)  592/       0 :                     smpsFMICommand macro reg,val
(1)  593/       0 :                     	dc.b	$EE,reg,val
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 11 - 2/2/2019 16:35:13


(1)  594/       0 :                     	endm
(1)  595/       0 :                     
(1)  596/       0 :                     ; Set Modulation
(1)  597/       0 :                     smpsModChange2 macro fmmod,psgmod
(1)  598/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  599/       0 :                     	endm
(1)  600/       0 :                     
(1)  601/       0 :                     ; Set Modulation
(1)  602/       0 :                     smpsModChange macro val
(1)  603/       0 :                     	dc.b	$F4,val
(1)  604/       0 :                     	endm
(1)  605/       0 :                     
(1)  606/       0 :                     ; FCxxxx - Jump to xxxx
(1)  607/       0 :                     smpsContinuousLoop macro loc
(1)  608/       0 :                     	dc.b	$FC
(1)  609/       0 :                     	dc.w	z80_ptr(loc)
(1)  610/       0 :                     	endm
(1)  611/       0 :                     
(1)  612/       0 :                     smpsAlternateSMPS macro flag
(1)  613/       0 :                     	dc.b	$FD,flag
(1)  614/       0 :                     	endm
(1)  615/       0 :                     
(1)  616/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  617/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  618/       0 :                     	endm
(1)  619/       0 :                     
(1)  620/       0 :                     smpsPlaySound macro index
(1)  621/       0 :                     	dc.b	$FF,$01,index
(1)  622/       0 :                     	endm
(1)  623/       0 :                     
(1)  624/       0 :                     smpsHaltMusic macro flag
(1)  625/       0 :                     	dc.b	$FF,$02,flag
(1)  626/       0 :                     	endm
(1)  627/       0 :                     
(1)  628/       0 :                     smpsCopyData macro data,len
(1)  629/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  630/       0 :                     	dc.b	$FF,$03
(1)  631/       0 :                     	dc.w	little_endian(data)
(1)  632/       0 :                     	dc.b	len
(1)  633/       0 :                     	endm
(1)  634/       0 :                     
(1)  635/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  636/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  637/       0 :                     	endm
(1)  638/       0 :                     
(1)  639/       0 :                     smpsFMVolEnv macro tone,mask
(1)  640/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  641/       0 :                     	endm
(1)  642/       0 :                     
(1)  643/       0 :                     smpsFMFlutter macro tone,mask
(1)  644/       0 :                     	smpsFMVolEnv	tone,mask
(1)  645/       0 :                     	endm
(1)  646/       0 :                     
(1)  647/       0 :                     smpsResetSpindashRev macro val
(1)  648/       0 :                     	dc.b	$FF,$07
(1)  649/       0 :                     	endm
(1)  650/       0 :                     
(1)  651/       0 :                     	; Flags ported from other drivers.
(1)  652/       0 : =>TRUE              	if SonicDriverVer>=5
(1)  653/       0 :                     smpsChanFMCommand macro reg,val
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 12 - 2/2/2019 16:35:13


(1)  654/       0 :                     	dc.b	$FF,$09,reg,val
(1)  655/       0 :                     	endm
(1)  656/       0 :                     
(1)  657/       0 :                     smpsPitchSlide macro enable
(1)  658/       0 :                     	dc.b	$FF,$0B,enable
(1)  659/       0 :                     	endm
(1)  660/       0 :                     
(1)  661/       0 :                     smpsSetLFO macro enable,amsfms
(1)  662/       0 :                     	dc.b	$FF,$0C,enable,amsfms
(1)  663/       0 :                     	endm
(1)  664/       0 : [652]               	endif
(1)  665/       0 :                     
(1)  666/       0 : [566]               	endif
(1)  667/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  668/       0 :                     ; S1/S2 only coordination flag
(1)  669/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  670/       0 :                     smpsWeirdD1LRR macro
(1)  671/       0 :                     	if SonicDriverVer>=3
(1)  672/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  673/       0 :                     		smpsFMICommand $88,$0F
(1)  674/       0 :                     		smpsFMICommand $8C,$0F
(1)  675/       0 :                     	else
(1)  676/       0 :                     		dc.b	$F9
(1)  677/       0 :                     	endif
(1)  678/       0 :                     	endm
(1)  679/       0 :                     ; ---------------------------------------------------------------------------------------------
(1)  680/       0 :                     ; Macros for FM instruments
(1)  681/       0 :                     ; Voices - Feedback
(1)  682/       0 :                     smpsVcFeedback macro val
(1)  683/       0 :                     vcFeedback set val
(1)  684/       0 :                     	endm
(1)  685/       0 :                     
(1)  686/       0 :                     ; Voices - Algorithm
(1)  687/       0 :                     smpsVcAlgorithm macro val
(1)  688/       0 :                     vcAlgorithm set val
(1)  689/       0 :                     	endm
(1)  690/       0 :                     
(1)  691/       0 :                     smpsVcUnusedBits macro val
(1)  692/       0 :                     vcUnusedBits set val
(1)  693/       0 :                     	endm
(1)  694/       0 :                     
(1)  695/       0 :                     ; Voices - Detune
(1)  696/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  697/       0 :                     vcDT1 set op1
(1)  698/       0 :                     vcDT2 set op2
(1)  699/       0 :                     vcDT3 set op3
(1)  700/       0 :                     vcDT4 set op4
(1)  701/       0 :                     	endm
(1)  702/       0 :                     
(1)  703/       0 :                     ; Voices - Coarse-Frequency
(1)  704/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  705/       0 :                     vcCF1 set op1
(1)  706/       0 :                     vcCF2 set op2
(1)  707/       0 :                     vcCF3 set op3
(1)  708/       0 :                     vcCF4 set op4
(1)  709/       0 :                     	endm
(1)  710/       0 :                     
(1)  711/       0 :                     ; Voices - Rate Scale
(1)  712/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  713/       0 :                     vcRS1 set op1
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 13 - 2/2/2019 16:35:13


(1)  714/       0 :                     vcRS2 set op2
(1)  715/       0 :                     vcRS3 set op3
(1)  716/       0 :                     vcRS4 set op4
(1)  717/       0 :                     	endm
(1)  718/       0 :                     
(1)  719/       0 :                     ; Voices - Attack Rate
(1)  720/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  721/       0 :                     vcAR1 set op1
(1)  722/       0 :                     vcAR2 set op2
(1)  723/       0 :                     vcAR3 set op3
(1)  724/       0 :                     vcAR4 set op4
(1)  725/       0 :                     	endm
(1)  726/       0 :                     
(1)  727/       0 :                     ; Voices - Amplitude Modulation
(1)  728/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  729/       0 :                     vcAM1 set op1
(1)  730/       0 :                     vcAM2 set op2
(1)  731/       0 :                     vcAM3 set op3
(1)  732/       0 :                     vcAM4 set op4
(1)  733/       0 :                     	endm
(1)  734/       0 :                     
(1)  735/       0 :                     ; Voices - First Decay Rate
(1)  736/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  737/       0 :                     vcD1R1 set op1
(1)  738/       0 :                     vcD1R2 set op2
(1)  739/       0 :                     vcD1R3 set op3
(1)  740/       0 :                     vcD1R4 set op4
(1)  741/       0 :                     	endm
(1)  742/       0 :                     
(1)  743/       0 :                     ; Voices - Second Decay Rate
(1)  744/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  745/       0 :                     vcD2R1 set op1
(1)  746/       0 :                     vcD2R2 set op2
(1)  747/       0 :                     vcD2R3 set op3
(1)  748/       0 :                     vcD2R4 set op4
(1)  749/       0 :                     	endm
(1)  750/       0 :                     
(1)  751/       0 :                     ; Voices - Decay Level
(1)  752/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  753/       0 :                     vcDL1 set op1
(1)  754/       0 :                     vcDL2 set op2
(1)  755/       0 :                     vcDL3 set op3
(1)  756/       0 :                     vcDL4 set op4
(1)  757/       0 :                     	endm
(1)  758/       0 :                     
(1)  759/       0 :                     ; Voices - Release Rate
(1)  760/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  761/       0 :                     vcRR1 set op1
(1)  762/       0 :                     vcRR2 set op2
(1)  763/       0 :                     vcRR3 set op3
(1)  764/       0 :                     vcRR4 set op4
(1)  765/       0 :                     	endm
(1)  766/       0 :                     
(1)  767/       0 :                     ; Voices - Total Level
(1)  768/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  769/       0 :                     vcTL1 set op1
(1)  770/       0 :                     vcTL2 set op2
(1)  771/       0 :                     vcTL3 set op3
(1)  772/       0 :                     vcTL4 set op4
(1)  773/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
 AS V1.42 Beta [Bld 89] - source file S1.asm(_smps2asm_inc.asm) - page 14 - 2/2/2019 16:35:13


(1)  774/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  775/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  776/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  777/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  778/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  779/       0 :                     vcTLMask1 set $80
(1)  780/       0 :                     	if SonicDriverVer==2
(1)  781/       0 :                     		dc.b	(vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
(1)  782/       0 :                     		dc.b	(vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
(1)  783/       0 :                     		dc.b	(vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
(1)  784/       0 :                     		dc.b	vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
(1)  785/       0 :                     		dc.b	(vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
(1)  786/       0 :                     		dc.b	vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
(1)  787/       0 :                     	else
(1)  788/       0 :                     		dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
(1)  789/       0 :                     		dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
(1)  790/       0 :                     		dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
(1)  791/       0 :                     		dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
(1)  792/       0 :                     		dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
(1)  793/       0 :                     		dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
(1)  794/       0 :                     	endif
(1)  795/       0 :                     	endm
(1)  796/       0 :                     
(1)  797/       0 :                     
       8/       0 :                     
       9/       0 :                     Maniax_Header:
      10/       0 : (MACRO)             	smpsHeaderStartSong 1
      10/       0 : =$1                 SourceDriver set 1
      10/       0 : =$0                 songStart set *
      11/       0 : (MACRO)             	smpsHeaderVoice     Maniax_Voices
      11/       0 : =>FALSE                     if songStart<>*
      11/       0 :                                     fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
      11/       0 : [11]                        endif
      11/       0 : =>TRUE                      if SonicDriverVer<>1
      11/       0 : 1890                                dc.w    z80_ptr(MANIAX_VOICES)
      11/       2 : =>FALSE                     else
      11/       2 :                                     if MOMPASS==2
      11/       2 :                                     if MANIAX_VOICES<songStart
      11/       2 :                                             fatal "Voice banks for Sonic 1 songs must come after the song"
      11/       2 : [11]                                endif
      11/       2 : [11]                                endif
      11/       2 :                                     dc.w    MANIAX_VOICES-songStart
      11/       2 : [11]                        endif
      12/       2 : (MACRO)             	smpsHeaderChan      $06, $03
      12/       2 : 0603                        dc.b    $06,$03
      13/       4 : (MACRO)             	smpsHeaderTempo     $02, $1E
      13/       4 : 0200                        dc.b    $02
      13/       6 :  (MACRO-2)                  convertMainTempoMod $1E
      13/       6 : =>FALSE                     if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
      13/       6 :                                     dc.b    $1E
      13/       6 : =>TRUE                      elseif SourceDriver==1
      13/       6 : =>FALSE                             if $1E==1
      13/       6 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
      13/       6 : [13]                                endif
      13/       6 : =>FALSE                             if SonicDriverVer==2
      13/       6 :                                             dc.b    s1TempotoS2($1E)
      13/       6 : =>TRUE                              else;if SonicDriverVer>=3
      13/       6 : 0900                                        dc.b    s1TempotoS3($1E)
      13/       8 : [13]                                endif
      13/       8 : =>FALSE                     elseif SourceDriver==2
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 15 - 2/2/2019 16:35:13


      13/       8 :                                     if $1E==0
      13/       8 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
      13/       8 : [13]                                endif
      13/       8 :                                     if SonicDriverVer==1
      13/       8 :                                             dc.b    s2TempotoS1($1E)
      13/       8 :                                     else;if SonicDriverVer>=3
      13/       8 :                                             dc.b    s2TempotoS3($1E)
      13/       8 : [13]                                endif
      13/       8 : =>FALSE                     else;if SourceDriver>=3
      13/       8 :                                     if $1E==0
      13/       8 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
      13/       8 : [13]                                endif
      13/       8 :                                     if SonicDriverVer==1
      13/       8 :                                             dc.b    s3TempotoS1($1E)
      13/       8 :                                     else;if SonicDriverVer==2
      13/       8 :                                             dc.b    s3TempotoS2($1E)
      13/       8 : [13]                                endif
      13/       8 : [13]                        endif
      14/       8 :                     	
      15/       8 : (MACRO)             	smpsHeaderFM        Maniax_FM1,	$00, $13
      15/       8 : =>TRUE                      if SonicDriverVer<>1
      15/       8 : 5080                                dc.w    z80_ptr(MANIAX_FM1)
      15/       A : =>FALSE                     else
      15/       A :                                     dc.w    MANIAX_FM1-songStart
      15/       A : [15]                        endif
      15/       A : 0013                        dc.b    $00,$13
      16/       C : (MACRO)             	smpsHeaderFM        Maniax_FM2,	$00, $17
      16/       C : =>TRUE                      if SonicDriverVer<>1
      16/       C : CE82                                dc.w    z80_ptr(MANIAX_FM2)
      16/       E : =>FALSE                     else
      16/       E :                                     dc.w    MANIAX_FM2-songStart
      16/       E : [16]                        endif
      16/       E : 0017                        dc.b    $00,$17
      17/      10 : (MACRO)             	smpsHeaderFM        Maniax_FM3,	$00, $1A
      17/      10 : =>TRUE                      if SonicDriverVer<>1
      17/      10 : 5684                                dc.w    z80_ptr(MANIAX_FM3)
      17/      12 : =>FALSE                     else
      17/      12 :                                     dc.w    MANIAX_FM3-songStart
      17/      12 : [17]                        endif
      17/      12 : 001A                        dc.b    $00,$1A
      18/      14 : (MACRO)             	smpsHeaderFM        Maniax_FM4,	$00, $14
      18/      14 : =>TRUE                      if SonicDriverVer<>1
      18/      14 : E886                                dc.w    z80_ptr(MANIAX_FM4)
      18/      16 : =>FALSE                     else
      18/      16 :                                     dc.w    MANIAX_FM4-songStart
      18/      16 : [18]                        endif
      18/      16 : 0014                        dc.b    $00,$14
      19/      18 : (MACRO)             	smpsHeaderFM        Maniax_FM5,	$00, $18
      19/      18 : =>TRUE                      if SonicDriverVer<>1
      19/      18 : 4C88                                dc.w    z80_ptr(MANIAX_FM5)
      19/      1A : =>FALSE                     else
      19/      1A :                                     dc.w    MANIAX_FM5-songStart
      19/      1A : [19]                        endif
      19/      1A : 0018                        dc.b    $00,$18
      20/      1C : (MACRO)             	smpsHeaderFM        Maniax_FM6,	$00, $12
      20/      1C : =>TRUE                      if SonicDriverVer<>1
      20/      1C : B888                                dc.w    z80_ptr(MANIAX_FM6)
      20/      1E : =>FALSE                     else
      20/      1E :                                     dc.w    MANIAX_FM6-songStart
      20/      1E : [20]                        endif
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 16 - 2/2/2019 16:35:13


      20/      1E : 0012                        dc.b    $00,$12
      21/      20 : (MACRO)             	smpsHeaderPSG       Maniax_PSG1,	$00, $0A, $00, $00
      21/      20 : =>TRUE                      if SonicDriverVer<>1
      21/      20 : BC8A                                dc.w    z80_ptr(MANIAX_PSG1)
      21/      22 : =>FALSE                     else
      21/      22 :                                     dc.w    MANIAX_PSG1-songStart
      21/      22 : [21]                        endif
      21/      22 :  (MACRO-2)                  PSGPitchConvert $00
      21/      22 : =>TRUE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
      21/      22 : 0C00                                dc.b    ($00+psgdelta)&$FF
      21/      24 : =>FALSE                     elseif (SonicDriverVer<3)&&(SourceDriver>=3)
      21/      24 :                                     dc.b    ($00-psgdelta)&$FF
      21/      24 : =>FALSE                     else
      21/      24 :                                     dc.b    $00
      21/      24 : [21]                        endif
      21/      24 : 0A00 0000                   dc.b    $0A,$00,$00
      22/      28 : (MACRO)             	smpsHeaderPSG       Maniax_PSG2,	$00, $00, $00, $00
      22/      28 : =>TRUE                      if SonicDriverVer<>1
      22/      28 : 408D                                dc.w    z80_ptr(MANIAX_PSG2)
      22/      2A : =>FALSE                     else
      22/      2A :                                     dc.w    MANIAX_PSG2-songStart
      22/      2A : [22]                        endif
      22/      2A :  (MACRO-2)                  PSGPitchConvert $00
      22/      2A : =>TRUE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
      22/      2A : 0C00                                dc.b    ($00+psgdelta)&$FF
      22/      2C : =>FALSE                     elseif (SonicDriverVer<3)&&(SourceDriver>=3)
      22/      2C :                                     dc.b    ($00-psgdelta)&$FF
      22/      2C : =>FALSE                     else
      22/      2C :                                     dc.b    $00
      22/      2C : [22]                        endif
      22/      2C : 0000 0000                   dc.b    $00,$00,$00
      23/      30 : (MACRO)             	smpsHeaderPSG       Maniax_PSG3,	$00, $09, $00, $00
      23/      30 : =>TRUE                      if SonicDriverVer<>1
      23/      30 : 6E8E                                dc.w    z80_ptr(MANIAX_PSG3)
      23/      32 : =>FALSE                     else
      23/      32 :                                     dc.w    MANIAX_PSG3-songStart
      23/      32 : [23]                        endif
      23/      32 :  (MACRO-2)                  PSGPitchConvert $00
      23/      32 : =>TRUE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
      23/      32 : 0C00                                dc.b    ($00+psgdelta)&$FF
      23/      34 : =>FALSE                     elseif (SonicDriverVer<3)&&(SourceDriver>=3)
      23/      34 :                                     dc.b    ($00-psgdelta)&$FF
      23/      34 : =>FALSE                     else
      23/      34 :                                     dc.b    $00
      23/      34 : [23]                        endif
      23/      34 : 0900 0000                   dc.b    $09,$00,$00
      24/      38 : (MACRO)             	smpsHeaderDAC       Maniax_DAC,$00,$AA
      24/      38 : =>TRUE                      if SonicDriverVer<>1
      24/      38 : 1690                                dc.w    z80_ptr(MANIAX_DAC)
      24/      3A : =>FALSE                     else
      24/      3A :                                     dc.w    MANIAX_DAC-songStart
      24/      3A : [24]                        endif
      24/      3A : =>TRUE                      if ("$00"<>"")
      24/      3A : 0000                                dc.b    $00
      24/      3C : =>TRUE                              if ("$AA"<>"")
      24/      3C : AA00                                        dc.b    $AA
      24/      3E : =>FALSE                             else
      24/      3E :                                             dc.b    $00
      24/      3E : [24]                                endif
      24/      3E : =>FALSE                     else
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 17 - 2/2/2019 16:35:13


      24/      3E :                                     dc.w    $00
      24/      3E : [24]                        endif
      25/      3E : (MACRO)             	smpsHeaderDAC       Maniax_DAC,$00,$AA
      25/      3E : =>TRUE                      if SonicDriverVer<>1
      25/      3E : 1690                                dc.w    z80_ptr(MANIAX_DAC)
      25/      40 : =>FALSE                     else
      25/      40 :                                     dc.w    MANIAX_DAC-songStart
      25/      40 : [25]                        endif
      25/      40 : =>TRUE                      if ("$00"<>"")
      25/      40 : 0000                                dc.b    $00
      25/      42 : =>TRUE                              if ("$AA"<>"")
      25/      42 : AA00                                        dc.b    $AA
      25/      44 : =>FALSE                             else
      25/      44 :                                             dc.b    $00
      25/      44 : [25]                                endif
      25/      44 : =>FALSE                     else
      25/      44 :                                     dc.w    $00
      25/      44 : [25]                        endif
      26/      44 : (MACRO)             	smpsHeaderDAC       Maniax_DAC,$00,$AA
      26/      44 : =>TRUE                      if SonicDriverVer<>1
      26/      44 : 1690                                dc.w    z80_ptr(MANIAX_DAC)
      26/      46 : =>FALSE                     else
      26/      46 :                                     dc.w    MANIAX_DAC-songStart
      26/      46 : [26]                        endif
      26/      46 : =>TRUE                      if ("$00"<>"")
      26/      46 : 0000                                dc.b    $00
      26/      48 : =>TRUE                              if ("$AA"<>"")
      26/      48 : AA00                                        dc.b    $AA
      26/      4A : =>FALSE                             else
      26/      4A :                                             dc.b    $00
      26/      4A : [26]                                endif
      26/      4A : =>FALSE                     else
      26/      4A :                                     dc.w    $00
      26/      4A : [26]                        endif
      27/      4A : (MACRO)             	smpsHeaderDAC       Maniax_DAC,$00,$AA
      27/      4A : =>TRUE                      if SonicDriverVer<>1
      27/      4A : 1690                                dc.w    z80_ptr(MANIAX_DAC)
      27/      4C : =>FALSE                     else
      27/      4C :                                     dc.w    MANIAX_DAC-songStart
      27/      4C : [27]                        endif
      27/      4C : =>TRUE                      if ("$00"<>"")
      27/      4C : 0000                                dc.b    $00
      27/      4E : =>TRUE                              if ("$AA"<>"")
      27/      4E : AA00                                        dc.b    $AA
      27/      50 : =>FALSE                             else
      27/      50 :                                             dc.b    $00
      27/      50 : [27]                                endif
      27/      50 : =>FALSE                     else
      27/      50 :                                     dc.w    $00
      27/      50 : [27]                        endif
      28/      50 :                     
      29/      50 :                     ; FM1 Data
      30/      50 :                     Maniax_FM1:
      31/      50 : (MACRO)             	smpsPan             panCenter, $00
      31/      50 : =$0                 panNone set $00
      31/      50 : =$40                panRight set $40
      31/      50 : =$80                panLeft set $80
      31/      50 : =$C0                panCentre set $C0
      31/      50 : =$C0                panCenter set $C0 ; silly Americans :U
      31/      50 : E0C0                        dc.b $E0,PANCENTER+$00
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 18 - 2/2/2019 16:35:13


      32/      52 : (MACRO)             	smpsSetvoice        $01
      32/      52 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
      32/      52 :                                     dc.b    $EF,$01|$80,+$81
      32/      52 : =>TRUE                      else
      32/      52 : EF01                                dc.b    $EF,$01
      32/      54 : [32]                        endif
      33/      54 : 8006 B306 8003 B106 	dc.b	nRst, $06, nD4, $06, nRst, $03, nC4, $06, nRst, $03, nD4, $03
                    8003 B303           
      34/      60 : 8003                	dc.b	nRst, $03
      35/      62 :                     
      36/      62 :                     Maniax_Jump05:
      37/      62 : B012 AE12 B012 AE12 	dc.b	nB3, $12, nA3, $12, nB3, $12, nA3, $12, nB3, $0C, nA3, $0C
                    B00C AE0C           
      38/      6E : B112 B012 AE3C AE12 	dc.b	nC4, $12, nB3, $12, nA3, $3C, nA3, $12, nB3, $12, nC4, $0C
                    B012 B10C           
      39/      7A : AE12 B012 B10C B112 	dc.b	nA3, $12, nB3, $12, nC4, $0C, nC4, $12, nB3, $1E, nRst, $12
                    B01E 8012           
      40/      86 : (MACRO)             	smpsSetvoice        $00
      40/      86 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
      40/      86 :                                     dc.b    $EF,$00|$80,+$81
      40/      86 : =>TRUE                      else
      40/      86 : EF00                                dc.b    $EF,$00
      40/      88 : [40]                        endif
      41/      88 : 801E B109 B10C B006 	dc.b	nRst, $1E, nC4, $09, nC4, $0C, nB3, $06, nB3, $09, nB3, $0C
                    B009 B00C           
      42/      94 : B009 B003 B009 AE06 	dc.b	nB3, $09, nB3, $03, nB3, $09, nA3, $06, nA3, $09, nA3, $0C
                    AE09 AE0C           
      43/      A0 : B109 B103 B109 B006 	dc.b	nC4, $09, nC4, $03, nC4, $09, nB3, $06, nB3, $09, nB3, $0C
                    B009 B00C           
      44/      AC : B006 B006 B003 B006 	dc.b	nB3, $06, nB3, $06, nB3, $03, nB3, $06, nA3, $06, nA3, $09
                    AE06 AE09           
      45/      B8 : AE06 AE03 AE03 B10F 	dc.b	nA3, $06, nA3, $03, nA3, $03, nC4, $0F, nC4, $06, nB3, $09
                    B106 B009           
      46/      C4 : B003 B003 B00C B009 	dc.b	nB3, $03, nB3, $03, nB3, $0C, nB3, $09, nB3, $03, nB3, $03
                    B003 B003           
      47/      D0 : B006 AE06 AE09 AE0C 	dc.b	nB3, $06, nA3, $06, nA3, $09, nA3, $0C, nC4, $09, nC4, $06
                    B109 B106           
      48/      DC : B106 B30C B003 B00C 	dc.b	nC4, $06, nD4, $0C, nB3, $03, nB3, $0C, nB3, $09, nB3, $03
                    B009 B003           
      49/      E8 : B006 B00C B006 B506 	dc.b	nB3, $06, nB3, $0C, nB3, $06, nE4, $06, nEb4, $06, nC4, $09
                    B406 B109           
      50/      F4 : B10C B006 B009 B00C 	dc.b	nC4, $0C, nB3, $06, nB3, $09, nB3, $0C, nB3, $09, nB3, $03
                    B009 B003           
      51/     100 : B009 AE06 AE09 AE0C 	dc.b	nB3, $09, nA3, $06, nA3, $09, nA3, $0C, nC4, $09, nC4, $03
                    B109 B103           
      52/     10C : B109 B006 B009 B00C 	dc.b	nC4, $09, nB3, $06, nB3, $09, nB3, $0C, nB3, $06, nB3, $06
                    B006 B006           
      53/     118 : B003 B006 AE06 AE09 	dc.b	nB3, $03, nB3, $06, nA3, $06, nA3, $09, nA3, $06, nA3, $03
                    AE06 AE03           
      54/     124 : AE03 B10F B106 B009 	dc.b	nA3, $03, nC4, $0F, nC4, $06, nB3, $09, nB3, $03, nB3, $03
                    B003 B003           
      55/     130 : B00C B009 B003 B003 	dc.b	nB3, $0C, nB3, $09, nB3, $03, nB3, $03, nB3, $06, nA3, $06
                    B006 AE06           
      56/     13C : AE09 AE0C B109 B103 	dc.b	nA3, $09, nA3, $0C, nC4, $09, nC4, $03, nC4, $03, nC4, $06
                    B103 B106           
      57/     148 : B00C B003 B00C B10C 	dc.b	nB3, $0C, nB3, $03, nB3, $0C, nC4, $0C, nC4, $06, nC4, $0C
                    B106 B10C           
      58/     154 : B509 B409 B30C B309 	dc.b	nE4, $09, nEb4, $09, nD4, $0C, nD4, $09, nD4, $09, nD4, $09
                    B309 B309           
      59/     160 : B309 B506 B509 B506 	dc.b	nD4, $09, nE4, $06, nE4, $09, nE4, $06, nE4, $06, nE4, $06
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 19 - 2/2/2019 16:35:13


                    B506 B506           
      60/     16C : B509 B503 B503 B509 	dc.b	nE4, $09, nE4, $03, nE4, $03, nE4, $09, nE4, $06, nE4, $06
                    B506 B506           
      61/     178 : B509 B506 B503 B509 	dc.b	nE4, $09, nE4, $06, nE4, $03, nE4, $09, nFs4, $18, nFs4, $18
                    B718 B718           
      62/     184 : B909 B906 B906 B909 	dc.b	nAb4, $09, nAb4, $06, nAb4, $06, nAb4, $09, nAb4, $03, nAb4, $0F
                    B903 B90F           
      63/     190 : B809 B806 B806 B81B 	dc.b	nG4, $09, nG4, $06, nG4, $06, nG4, $1B, nG4, $06, nG4, $03
                    B806 B803           
      64/     19C : B806 B806 B806 B809 	dc.b	nG4, $06, nG4, $06, nG4, $06, nG4, $09, nG4, $06, nG4, $06
                    B806 B806           
      65/     1A8 : B606 B603 B606 B606 	dc.b	nF4, $06, nF4, $03, nF4, $06, nF4, $06, nF4, $03, nF4, $0C
                    B603 B60C           
      66/     1B4 : B50C B106 B103 B106 	dc.b	nE4, $0C, nC4, $06, nC4, $03, nC4, $06, nC4, $06, nB3, $06
                    B106 B006           
      67/     1C0 : B006 B003 B006 B006 	dc.b	nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $06, nB3, $03
                    B006 B003           
      68/     1CC : B006 B006 AE06 AE06 	dc.b	nB3, $06, nB3, $06, nA3, $06, nA3, $06, nA3, $03, nA3, $06
                    AE03 AE06           
      69/     1D8 : AE06 B106 B103 B106 	dc.b	nA3, $06, nC4, $06, nC4, $03, nC4, $06, nC4, $06, nB3, $06
                    B106 B006           
      70/     1E4 : B006 B003 B006 B006 	dc.b	nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $06, nB3, $03
                    B006 B003           
      71/     1F0 : B006 B006 AE06 AE06 	dc.b	nB3, $06, nB3, $06, nA3, $06, nA3, $06, nA3, $03, nA3, $06
                    AE03 AE06           
      72/     1FC : AE06 B106 B103 B106 	dc.b	nA3, $06, nC4, $06, nC4, $03, nC4, $06, nC4, $06, nB3, $06
                    B106 B006           
      73/     208 : B006 B003 B006 B006 	dc.b	nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $06, nB3, $03
                    B006 B003           
      74/     214 : B006 B006 AE06 AE06 	dc.b	nB3, $06, nB3, $06, nA3, $06, nA3, $06, nA3, $03, nA3, $06
                    AE03 AE06           
      75/     220 : AE06 B106 B103 B106 	dc.b	nA3, $06, nC4, $06, nC4, $03, nC4, $06, nC4, $06, nB3, $06
                    B106 B006           
      76/     22C : B006 B003 B006 B006 	dc.b	nB3, $06, nB3, $03, nB3, $06, nB3, $06, nC4, $0C, nC4, $06
                    B10C B106           
      77/     238 : B10C B112 B106 B103 	dc.b	nC4, $0C, nC4, $12, nC4, $06, nC4, $03, nC4, $06, nC4, $06
                    B106 B106           
      78/     244 : B006 B006 B003 B006 	dc.b	nB3, $06, nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $06
                    B006 B006           
      79/     250 : B003 B006 B006 AE06 	dc.b	nB3, $03, nB3, $06, nB3, $06, nA3, $06, nA3, $06, nA3, $03
                    AE06 AE03           
      80/     25C : AE06 AE06 B106 B103 	dc.b	nA3, $06, nA3, $06, nC4, $06, nC4, $03, nC4, $06, nC4, $06
                    B106 B106           
      81/     268 : B006 B006 B003 B006 	dc.b	nB3, $06, nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $06
                    B006 B006           
      82/     274 : B003 B006 B006 AE06 	dc.b	nB3, $03, nB3, $06, nB3, $06, nA3, $06, nA3, $06, nA3, $03
                    AE06 AE03           
      83/     280 : AE06 AE06 B106 B103 	dc.b	nA3, $06, nA3, $06, nC4, $06, nC4, $03, nC4, $06, nC4, $06
                    B106 B106           
      84/     28C : B006 B006 B003 B006 	dc.b	nB3, $06, nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $06
                    B006 B006           
      85/     298 : B003 B006 B006 AE06 	dc.b	nB3, $03, nB3, $06, nB3, $06, nA3, $06, nA3, $06, nA3, $03
                    AE06 AE03           
      86/     2A4 : AE06 AE06 B106 B103 	dc.b	nA3, $06, nA3, $06, nC4, $06, nC4, $03, nC4, $06, nC4, $06
                    B106 B106           
      87/     2B0 : B006 B006 B003 B006 	dc.b	nB3, $06, nB3, $06, nB3, $03, nB3, $06, nB3, $06, nB3, $12
                    B006 B012           
      88/     2BC : B00C B012 AF60 B160 	dc.b	nB3, $0C, nB3, $12, nBb3, $60, nC4, $60, nC4, $60, nC4, $12
                    B160 B112           
      89/     2C8 : B14E                	dc.b	nC4, $4E
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 20 - 2/2/2019 16:35:13


      90/     2CA : (MACRO)             	smpsJump            Maniax_Jump05
      90/     2CA : F600                        dc.b    $F6
      90/     2CC : =>TRUE                      if SonicDriverVer<>1
      90/     2CC : 6280                                dc.w    z80_ptr(MANIAX_JUMP05)
      90/     2CE : =>FALSE                     else
      90/     2CE :                                     dc.w    MANIAX_JUMP05-*-1
      90/     2CE : [90]                        endif
      91/     2CE :                     
      92/     2CE :                     ; FM2 Data
      93/     2CE :                     Maniax_FM2:
      94/     2CE : (MACRO)             	smpsPan             panCenter, $00
      94/     2CE : =$0                 panNone set $00
      94/     2CE : =$40                panRight set $40
      94/     2CE : =$80                panLeft set $80
      94/     2CE : =$C0                panCentre set $C0
      94/     2CE : =$C0                panCenter set $C0 ; silly Americans :U
      94/     2CE : E0C0                        dc.b $E0,PANCENTER+$00
      95/     2D0 : (MACRO)             	smpsSetvoice        $03
      95/     2D0 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
      95/     2D0 :                                     dc.b    $EF,$03|$80,+$81
      95/     2D0 : =>TRUE                      else
      95/     2D0 : EF03                                dc.b    $EF,$03
      95/     2D2 : [95]                        endif
      96/     2D2 : 8006 BC03 8006 BA03 	dc.b	nRst, $06, nB4, $03, nRst, $06, nA4, $03, nRst, $06, nB4, $03
                    8006 BC03           
      97/     2DE : 8003                	dc.b	nRst, $03
      98/     2E0 :                     
      99/     2E0 :                     Maniax_Jump04:
     100/     2E0 : 807F 807F 804C      	dc.b	nRst, $7F, nRst, $7F, nRst, $4C
     101/     2E6 : (MACRO)             	smpsSetvoice        $02
     101/     2E6 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     101/     2E6 :                                     dc.b    $EF,$02|$80,+$81
     101/     2E6 : =>TRUE                      else
     101/     2E6 : EF02                                dc.b    $EF,$02
     101/     2E8 : [101]                       endif
     102/     2E8 : 8006 AC03 AE03 B003 	dc.b	nRst, $06, nG3, $03, nA3, $03, nB3, $03, nC4, $03, nA3, $03
                    B103 AE03           
     103/     2F4 : B003 B103 B303 B003 	dc.b	nB3, $03, nC4, $03, nD4, $03, nB3, $03, nC4, $03, nD4, $03
                    B103 B303           
     104/     300 : B503 B103 B303 B503 	dc.b	nE4, $03, nC4, $03, nD4, $03, nE4, $03, nF4, $03, nG4, $06
                    B603 B806           
     105/     30C : 805C 805C 805C 805C 	dc.b	nRst, $5C, nRst, $5C, nRst, $5C, nRst, $5C, nRst, $5C, nRst, $5C
                    805C 805C           
     106/     318 : 805C 805C 805C      	dc.b	nRst, $5C, nRst, $5C, nRst, $5C
     107/     31E : (MACRO)             	smpsSetvoice        $02
     107/     31E : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     107/     31E :                                     dc.b    $EF,$02|$80,+$81
     107/     31E : =>TRUE                      else
     107/     31E : EF02                                dc.b    $EF,$02
     107/     320 : [107]                       endif
     108/     320 : 807F 807F 800A      	dc.b	nRst, $7F, nRst, $7F, nRst, $0A
     109/     326 : (MACRO)             	smpsSetvoice        $03
     109/     326 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     109/     326 :                                     dc.b    $EF,$03|$80,+$81
     109/     326 : =>TRUE                      else
     109/     326 : EF03                                dc.b    $EF,$03
     109/     328 : [109]                       endif
     110/     328 : 8006 B803 8003 B603 	dc.b	nRst, $06, nG4, $03, nRst, $03, nF4, $03, nE4, $03, nRst, $03
                    B503 8003           
     111/     334 : B603 8003 B803 B803 	dc.b	nF4, $03, nRst, $03, nG4, $03, nG4, $03, nRst, $15
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 21 - 2/2/2019 16:35:13


                    8015                
     112/     33E : (MACRO)             	smpsAlterVol        $04
     112/     33E : E604                        dc.b    $E6,$04
     113/     340 : B506 B303 B106 B506 	dc.b	nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06, nRst, $06
                    B306 8006           
     114/     34C : AC03 B006 B106 B306 	dc.b	nG3, $03, nB3, $06, nC4, $06, nD4, $06, nC4, $03, nB3, $06
                    B103 B006           
     115/     358 : B306 B106 8006 AC03 	dc.b	nD4, $06, nC4, $06, nRst, $06, nG3, $03, nC4, $06, nD4, $06
                    B106 B306           
     116/     364 : B506 B303 B106 B506 	dc.b	nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06, nRst, $06
                    B306 8006           
     117/     370 : AC03 B006 B106 B306 	dc.b	nG3, $03, nB3, $06, nC4, $06, nD4, $06, nC4, $03, nB3, $06
                    B103 B006           
     118/     37C : B306 B106 8006 AC03 	dc.b	nD4, $06, nC4, $06, nRst, $06, nG3, $03, nC4, $06, nD4, $06
                    B106 B306           
     119/     388 : B506 B303 B106 B506 	dc.b	nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06, nRst, $06
                    B306 8006           
     120/     394 : AC03 B006 B106 B306 	dc.b	nG3, $03, nB3, $06, nC4, $06, nD4, $06, nC4, $03, nB3, $06
                    B103 B006           
     121/     3A0 : B306 B106 8006 AC03 	dc.b	nD4, $06, nC4, $06, nRst, $06, nG3, $03, nC4, $06, nD4, $06
                    B106 B306           
     122/     3AC : B506 B303 B106 B506 	dc.b	nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06, nRst, $06
                    B306 8006           
     123/     3B8 : AC03 B006 B306 B10C 	dc.b	nG3, $03, nB3, $06, nD4, $06, nC4, $0C, nC4, $06, nC4, $0C
                    B106 B10C           
     124/     3C4 : B112 B506 B303 B106 	dc.b	nC4, $12, nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06
                    B506 B306           
     125/     3D0 : 8006 AC03 B006 B106 	dc.b	nRst, $06, nG3, $03, nB3, $06, nC4, $06, nD4, $06, nC4, $03
                    B306 B103           
     126/     3DC : B006 B306 B106 8006 	dc.b	nB3, $06, nD4, $06, nC4, $06, nRst, $06, nG3, $03, nC4, $06
                    AC03 B106           
     127/     3E8 : B306 B506 B303 B106 	dc.b	nD4, $06, nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06
                    B506 B306           
     128/     3F4 : 8006 AC03 B006 B106 	dc.b	nRst, $06, nG3, $03, nB3, $06, nC4, $06, nD4, $06, nC4, $03
                    B306 B103           
     129/     400 : B006 B306 B106 8006 	dc.b	nB3, $06, nD4, $06, nC4, $06, nRst, $06, nG3, $03, nC4, $06
                    AC03 B106           
     130/     40C : B306 B506 B303 B106 	dc.b	nD4, $06, nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06
                    B506 B306           
     131/     418 : 8006 AC03 B006 B106 	dc.b	nRst, $06, nG3, $03, nB3, $06, nC4, $06, nD4, $06, nC4, $03
                    B306 B103           
     132/     424 : B006 B306 B106 8006 	dc.b	nB3, $06, nD4, $06, nC4, $06, nRst, $06, nG3, $03, nC4, $06
                    AC03 B106           
     133/     430 : B306 B506 B303 B106 	dc.b	nD4, $06, nE4, $06, nD4, $03, nC4, $06, nE4, $06, nD4, $06
                    B506 B306           
     134/     43C : 8006 AC03 B006 B106 	dc.b	nRst, $06, nG3, $03, nB3, $06, nC4, $06, nD4, $09
                    B309                
     135/     446 : (MACRO)             	smpsAlterNote       $00
     135/     446 : E100                        dc.b    $E1,$00
     136/     448 : 807F 807F 807F 802A 	dc.b	nRst, $7F, nRst, $7F, nRst, $7F, nRst, $2A
     137/     450 : (MACRO)             	smpsAlterVol        $FC
     137/     450 : E6FC                        dc.b    $E6,$FC
     138/     452 : (MACRO)             	smpsJump            Maniax_Jump04
     138/     452 : F600                        dc.b    $F6
     138/     454 : =>TRUE                      if SonicDriverVer<>1
     138/     454 : E082                                dc.w    z80_ptr(MANIAX_JUMP04)
     138/     456 : =>FALSE                     else
     138/     456 :                                     dc.w    MANIAX_JUMP04-*-1
     138/     456 : [138]                       endif
     139/     456 :                     
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 22 - 2/2/2019 16:35:13


     140/     456 :                     ; FM3 Data
     141/     456 :                     Maniax_FM3:
     142/     456 : (MACRO)             	smpsPan             panLeft, $00
     142/     456 : =$0                 panNone set $00
     142/     456 : =$40                panRight set $40
     142/     456 : =$80                panLeft set $80
     142/     456 : =$C0                panCentre set $C0
     142/     456 : =$C0                panCenter set $C0 ; silly Americans :U
     142/     456 : E080                        dc.b $E0,PANLEFT+$00
     143/     458 : (MACRO)             	smpsSetvoice        $05
     143/     458 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     143/     458 :                                     dc.b    $EF,$05|$80,+$81
     143/     458 : =>TRUE                      else
     143/     458 : EF05                                dc.b    $EF,$05
     143/     45A : [143]                       endif
     144/     45A : 801E                	dc.b	nRst, $1E
     145/     45C :                     
     146/     45C :                     Maniax_Jump03:
     147/     45C : D502 8004 D402 8004 	dc.b	nC7, $02, nRst, $04, nB6, $02, nRst, $04, nA6, $02, nRst, $04
                    D202 8004           
     148/     468 : D002 8004 D502 8004 	dc.b	nG6, $02, nRst, $04, nC7, $02, nRst, $04, nB6, $02, nRst, $04
                    D402 8004           
     149/     474 : D202 8004 D002 8004 	dc.b	nA6, $02, nRst, $04, nG6, $02, nRst, $04, nC7, $02, nRst, $04
                    D502 8004           
     150/     480 : D402 8004 D202 8004 	dc.b	nB6, $02, nRst, $04, nA6, $02, nRst, $04, nG6, $02, nRst, $04
                    D002 8004           
     151/     48C : D502 8004 D402 8004 	dc.b	nC7, $02, nRst, $04, nB6, $02, nRst, $04, nA6, $02, nRst, $04
                    D202 8004           
     152/     498 : D002 8004 D502 8004 	dc.b	nG6, $02, nRst, $04, nC7, $02, nRst, $04, nB6, $02, nRst, $04
                    D402 8004           
     153/     4A4 : D202 8004 D002 8004 	dc.b	nA6, $02, nRst, $04, nG6, $02, nRst, $04, nC7, $02, nRst, $04
                    D502 8004           
     154/     4B0 : D402 8004 D202 8004 	dc.b	nB6, $02, nRst, $04, nA6, $02, nRst, $04, nG6, $02, nRst, $04
                    D002 8004           
     155/     4BC : D502 8004 D402 8004 	dc.b	nC7, $02, nRst, $04, nB6, $02, nRst, $04, nA6, $02, nRst, $04
                    D202 8004           
     156/     4C8 : D002 8004 D502 8004 	dc.b	nG6, $02, nRst, $04, nC7, $02, nRst, $04, nB6, $02, nRst, $04
                    D402 8004           
     157/     4D4 : D202 8004 D002 8004 	dc.b	nA6, $02, nRst, $04, nG6, $02, nRst, $04
     158/     4DC : (MACRO)             	smpsAlterVol        $FC
     158/     4DC : E6FC                        dc.b    $E6,$FC
     159/     4DE : D502 8004 D402 8004 	dc.b	nC7, $02, nRst, $04, nB6, $02, nRst, $04, nA6, $02, nRst, $04
                    D202 8004           
     160/     4EA : D002 8004 D502 8004 	dc.b	nG6, $02, nRst, $04, nC7, $02, nRst, $04, nB6, $02, nRst, $04
                    D402 8004           
     161/     4F6 : D202 8004 D002 8004 	dc.b	nA6, $02, nRst, $04, nG6, $02, nRst, $04, nC7, $02, nRst, $04
                    D502 8004           
     162/     502 : D402 8004 D202 8004 	dc.b	nB6, $02, nRst, $04, nA6, $02, nRst, $04, nG6, $02, nRst, $04
                    D002 8004           
     163/     50E : D502 8004 D402 8004 	dc.b	nC7, $02, nRst, $04, nB6, $02, nRst, $04, nA6, $02, nRst, $04
                    D202 8004           
     164/     51A : D002 8004 D502 8004 	dc.b	nG6, $02, nRst, $04, nC7, $02, nRst, $04, nB6, $02, nRst, $04
                    D402 8004           
     165/     526 : D202 8004 D002 8004 	dc.b	nA6, $02, nRst, $04, nG6, $02, nRst, $04, nC7, $02, nRst, $04
                    D502 8004           
     166/     532 : D402 8004 D202 8004 	dc.b	nB6, $02, nRst, $04, nA6, $02, nRst, $04, nG6, $02, nRst, $04
                    D002 8004           
     167/     53E : (MACRO)             	smpsAlterVol        $FA
     167/     53E : E6FA                        dc.b    $E6,$FA
     168/     540 : C403 C603 C803 C903 	dc.b	nG5, $03, nA5, $03, nB5, $03, nC6, $03, nA5, $03, nB5, $03
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 23 - 2/2/2019 16:35:13


                    C603 C803           
     169/     54C : C903 CB03 C803 C903 	dc.b	nC6, $03, nD6, $03, nB5, $03, nC6, $03, nD6, $03, nE6, $03
                    CB03 CD03           
     170/     558 : C903 CB03 CD03 CE03 	dc.b	nC6, $03, nD6, $03, nE6, $03, nF6, $03, nG6, $06, nRst, $7F
                    D006 807F           
     171/     564 : 807F 805E           	dc.b	nRst, $7F, nRst, $5E
     172/     568 : (MACRO)             	smpsSetvoice        $04
     172/     568 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     172/     568 :                                     dc.b    $EF,$04|$80,+$81
     172/     568 : =>TRUE                      else
     172/     568 : EF04                                dc.b    $EF,$04
     172/     56A : [172]                       endif
     173/     56A : 801E                	dc.b	nRst, $1E
     174/     56C : (MACRO)             	smpsAlterVol        $02
     174/     56C : E602                        dc.b    $E6,$02
     175/     56E : BC02 BD39 BE01 BF0B 	dc.b	nB4, $02, nC5, $39, nCs5, $01, nD5, $0B, nC5, $01, nB4, $0B
                    BD01 BC0B           
     176/     57A : BA01 B80B 8001 BD3C 	dc.b	nA4, $01, nG4, $0B, nRst, $01, nC5, $3C, nB4, $0B, nA4, $01
                    BC0B BA01           
     177/     586 : B80B B701 B50B B801 	dc.b	nG4, $0B, nFs4, $01, nE4, $0B, nG4, $01, nA4, $39, nB4, $02
                    BA39 BC02           
     178/     592 : BD01 BF0B BD01 BC0B 	dc.b	nC5, $01, nD5, $0B, nC5, $01, nB4, $0B, nA4, $01, nG4, $0B
                    BA01 B80B           
     179/     59E : B701 B62F B701 B81E 	dc.b	nFs4, $01, nF4, $2F, nFs4, $01, nG4, $1E, nG4, $09, nFs4, $09
                    B809 B709           
     180/     5AA : B609 B802           	dc.b	nF4, $09, nG4, $02
     181/     5AE : (MACRO)             	smpsAlterVol        $FF
     181/     5AE : E6FF                        dc.b    $E6,$FF
     182/     5B0 : BA01                	dc.b	nA4, $01
     183/     5B2 : (MACRO)             	smpsAlterVol        $FF
     183/     5B2 : E6FF                        dc.b    $E6,$FF
     184/     5B4 : BB03 8003 BD03 8003 	dc.b	nBb4, $03, nRst, $03, nC5, $03, nRst, $03, nD5, $06, nE5, $03
                    BF06 C103           
     185/     5C0 : C203 8003 C202 C407 	dc.b	nF5, $03, nRst, $03, nF5, $02, nG5, $07, nRst, $05, nAb5, $01
                    8005 C501           
     186/     5CC : C606 C106 C603 C506 	dc.b	nA5, $06, nE5, $06, nA5, $03, nAb5, $06, nE5, $05, nEb5, $01
                    C105 C001           
     187/     5D8 : C105 C001 C105 C201 	dc.b	nE5, $05, nEb5, $01, nE5, $05, nF5, $01, nG5, $0B, nRst, $01
                    C40B 8001           
     188/     5E4 : BD03 8003 C403 8003 	dc.b	nC5, $03, nRst, $03, nG5, $03, nRst, $03, nE5, $09, nG5, $03
                    C109 C403           
     189/     5F0 : 8003 C103 C403 8003 	dc.b	nRst, $03, nE5, $03, nG5, $03, nRst, $03, nC5, $02, nD5, $01
                    BD02 BF01           
     190/     5FC : C103 C003 BF03 BE03 	dc.b	nE5, $03, nEb5, $03, nD5, $03, nCs5, $03, nEb5, $03, nD5, $03
                    C003 BF03           
     191/     608 : BE03 BD03 BE03 BF03 	dc.b	nCs5, $03, nC5, $03, nCs5, $03, nD5, $03, nE5, $03, nD5, $03
                    C103 BF03           
     192/     614 : C203 C403 C503 C803 	dc.b	nF5, $03, nG5, $03, nAb5, $03, nB5, $03, nC6, $06, nRst, $03
                    C906 8003           
     193/     620 : C703 8003 C903 8003 	dc.b	nBb5, $03, nRst, $03, nC6, $03, nRst, $03, nF5, $0C, nC5, $02
                    C20C BD02           
     194/     62C : 8001 C003 C203 C403 	dc.b	nRst, $01, nEb5, $03, nF5, $03, nG5, $03, nBb5, $03, nB5, $02
                    C703 C802           
     195/     638 : C907 C403 8003 C903 	dc.b	nC6, $07, nG5, $03, nRst, $03, nC6, $03, nRst, $03, nB5, $06
                    8003 C806           
     196/     644 : C302 C401 C303 C403 	dc.b	nFs5, $02, nG5, $01, nFs5, $03, nG5, $03, nAb5, $03, nG5, $03
                    C503 C403           
     197/     650 : C503 C603 C708 C301 	dc.b	nAb5, $03, nA5, $03, nBb5, $08, nFs5, $01, nRst, $06, nBb5, $03
                    8006 C703           
     198/     65C : 8003 C406 C008 8001 	dc.b	nRst, $03, nG5, $06, nEb5, $08, nRst, $01, nF5, $03, nRst, $03
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 24 - 2/2/2019 16:35:13


                    C203 8003           
     199/     668 : C303 8003 C403 8003 	dc.b	nFs5, $03, nRst, $03, nG5, $03, nRst, $03, nF5, $03, nE5, $03
                    C203 C103           
     200/     674 : 8003 C203 8003 C403 	dc.b	nRst, $03, nF5, $03, nRst, $03, nG5, $03, nG5, $03, nRst, $7F
                    C403 807F           
     201/     680 : 807F 807F 8018      	dc.b	nRst, $7F, nRst, $7F, nRst, $18
     202/     686 : (MACRO)             	smpsAlterVol        $02
     202/     686 : E602                        dc.b    $E6,$02
     203/     688 : BC02 BD39 BE01 BF0B 	dc.b	nB4, $02, nC5, $39, nCs5, $01, nD5, $0B, nC5, $01, nB4, $0B
                    BD01 BC0B           
     204/     694 : BA01 B80B BA01 BD3C 	dc.b	nA4, $01, nG4, $0B, nA4, $01, nC5, $3C, nB4, $0B, nA4, $01
                    BC0B BA01           
     205/     6A0 : B80B B701 B50B 8001 	dc.b	nG4, $0B, nFs4, $01, nE4, $0B, nRst, $01, nA4, $39, nB4, $02
                    BA39 BC02           
     206/     6AC : BD01 BF0B BD01 BC0B 	dc.b	nC5, $01, nD5, $0B, nC5, $01, nB4, $0B, nA4, $01, nG4, $0B
                    BA01 B80B           
     207/     6B8 : B701 B62F 8001 B81E 	dc.b	nFs4, $01, nF4, $2F, nRst, $01, nG4, $1E, nRst, $7F, nRst, $7F
                    807F 807F           
     208/     6C4 : 8046                	dc.b	nRst, $46
     209/     6C6 : (MACRO)             	smpsSetvoice        $05
     209/     6C6 : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     209/     6C6 :                                     dc.b    $EF,$05|$80,+$81
     209/     6C6 : =>TRUE                      else
     209/     6C6 : EF05                                dc.b    $EF,$05
     209/     6C8 : [209]                       endif
     210/     6C8 : 8012                	dc.b	nRst, $12
     211/     6CA : (MACRO)             	smpsAlterVol        $FE
     211/     6CA : E6FE                        dc.b    $E6,$FE
     212/     6CC : C406 CD09 8003 CD06 	dc.b	nG5, $06, nE6, $09, nRst, $03, nE6, $06, nF6, $06, nE6, $06
                    CE06 CD06           
     213/     6D8 : D006 CD05 8001 CD06 	dc.b	nG6, $06, nE6, $05, nRst, $01, nE6, $06, nC6, $06
                    C906                
     214/     6E2 : (MACRO)             	smpsAlterVol        $0A
     214/     6E2 : E60A                        dc.b    $E6,$0A
     215/     6E4 : (MACRO)             	smpsJump            Maniax_Jump03
     215/     6E4 : F600                        dc.b    $F6
     215/     6E6 : =>TRUE                      if SonicDriverVer<>1
     215/     6E6 : 5C84                                dc.w    z80_ptr(MANIAX_JUMP03)
     215/     6E8 : =>FALSE                     else
     215/     6E8 :                                     dc.w    MANIAX_JUMP03-*-1
     215/     6E8 : [215]                       endif
     216/     6E8 :                     
     217/     6E8 :                     ; FM4 Data
     218/     6E8 :                     Maniax_FM4:
     219/     6E8 : (MACRO)             	smpsPan             panCenter, $00
     219/     6E8 : =$0                 panNone set $00
     219/     6E8 : =$40                panRight set $40
     219/     6E8 : =$80                panLeft set $80
     219/     6E8 : =$C0                panCentre set $C0
     219/     6E8 : =$C0                panCenter set $C0 ; silly Americans :U
     219/     6E8 : E0C0                        dc.b $E0,PANCENTER+$00
     220/     6EA : (MACRO)             	smpsSetvoice        $06
     220/     6EA : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     220/     6EA :                                     dc.b    $EF,$06|$80,+$81
     220/     6EA : =>TRUE                      else
     220/     6EA : EF06                                dc.b    $EF,$06
     220/     6EC : [220]                       endif
     221/     6EC : 801E                	dc.b	nRst, $1E
     222/     6EE :                     
     223/     6EE :                     Maniax_Jump02:
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 25 - 2/2/2019 16:35:13


     224/     6EE : B102 8007 B102 8007 	dc.b	nC4, $02, nRst, $07, nC4, $02, nRst, $07, nC4, $02, nRst, $04
                    B102 8004           
     225/     6FA : B102 8004 AE02 8001 	dc.b	nC4, $02, nRst, $04, nA3, $02, nRst, $01, nG3, $02, nRst, $04
                    AC02 8004           
     226/     706 : B102 8007 B102 8007 	dc.b	nC4, $02, nRst, $07, nC4, $02, nRst, $07, nC4, $02, nRst, $07
                    B102 8007           
     227/     712 : B102 8004 B102 8004 	dc.b	nC4, $02, nRst, $04, nC4, $02, nRst, $04, nA3, $02, nRst, $01
                    AE02 8001           
     228/     71E : AC02 8004 B102 8001 	dc.b	nG3, $02, nRst, $04, nC4, $02, nRst, $01, nD4, $02, nRst, $01
                    B302 8001           
     229/     72A : B502 8001 B102 8007 	dc.b	nE4, $02, nRst, $01, nC4, $02, nRst, $07, nC4, $02, nRst, $07
                    B102 8007           
     230/     736 : B102 8004 B102 8004 	dc.b	nC4, $02, nRst, $04, nC4, $02, nRst, $04, nA3, $02, nRst, $01
                    AE02 8001           
     231/     742 : AC02 8004 B102 8007 	dc.b	nG3, $02, nRst, $04, nC4, $02, nRst, $07, nC4, $02, nRst, $04
                    B102 8004           
     232/     74E : B102 8001 AE02 8001 	dc.b	nC4, $02, nRst, $01, nA3, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     233/     75A : AE02 8001 B102 8001 	dc.b	nA3, $02, nRst, $01, nC4, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     234/     766 : B102 8004 B102 8001 	dc.b	nC4, $02, nRst, $04, nC4, $02, nRst, $01, nA3, $02, nRst, $01
                    AE02 8001           
     235/     772 : B102 8001 AE02 8001 	dc.b	nC4, $02, nRst, $01, nA3, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     236/     77E : B302 8001 B102 8007 	dc.b	nD4, $02, nRst, $01, nC4, $02, nRst, $07, nC4, $02, nRst, $07
                    B102 8007           
     237/     78A : B102 8004 B102 8004 	dc.b	nC4, $02, nRst, $04, nC4, $02, nRst, $04, nA3, $02, nRst, $01
                    AE02 8001           
     238/     796 : AC02 8004 B102 8007 	dc.b	nG3, $02, nRst, $04, nC4, $02, nRst, $07, nC4, $02, nRst, $07
                    B102 8007           
     239/     7A2 : B102 8007 B102 8004 	dc.b	nC4, $02, nRst, $07, nC4, $02, nRst, $04, nC4, $02, nRst, $04
                    B102 8004           
     240/     7AE : AE02 8001 AC02 8004 	dc.b	nA3, $02, nRst, $01, nG3, $02, nRst, $04, nC4, $02, nRst, $01
                    B102 8001           
     241/     7BA : B302 8001 B502 8001 	dc.b	nD4, $02, nRst, $01, nE4, $02, nRst, $01, nC4, $02, nRst, $07
                    B102 8007           
     242/     7C6 : B102 8007 B102 8004 	dc.b	nC4, $02, nRst, $07, nC4, $02, nRst, $04, nC4, $02, nRst, $04
                    B102 8004           
     243/     7D2 : AE02 8001 AC02 8004 	dc.b	nA3, $02, nRst, $01, nG3, $02, nRst, $04, nC4, $02, nRst, $07
                    B102 8007           
     244/     7DE : B102 8004 B102 8001 	dc.b	nC4, $02, nRst, $04, nC4, $02, nRst, $01, nA3, $02, nRst, $01
                    AE02 8001           
     245/     7EA : B102 8001 AE02 8001 	dc.b	nC4, $02, nRst, $01, nA3, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     246/     7F6 : B102 8001 B102 8004 	dc.b	nC4, $02, nRst, $01, nC4, $02, nRst, $04, nC4, $02, nRst, $01
                    B102 8001           
     247/     802 : AE02 8001 B102 8001 	dc.b	nA3, $02, nRst, $01, nC4, $02, nRst, $01, nA3, $02, nRst, $01
                    AE02 8001           
     248/     80E : B102 8001 B302      	dc.b	nC4, $02, nRst, $01, nD4, $02
     249/     814 : (MACRO)             	smpsAlterNote       $00
     249/     814 : E100                        dc.b    $E1,$00
     250/     816 : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     251/     822 : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     252/     82E : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     253/     83A : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     254/     846 : 8001                	dc.b	nRst, $01
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 26 - 2/2/2019 16:35:13


     255/     848 : (MACRO)             	smpsJump            Maniax_Jump02
     255/     848 : F600                        dc.b    $F6
     255/     84A : =>TRUE                      if SonicDriverVer<>1
     255/     84A : EE86                                dc.w    z80_ptr(MANIAX_JUMP02)
     255/     84C : =>FALSE                     else
     255/     84C :                                     dc.w    MANIAX_JUMP02-*-1
     255/     84C : [255]                       endif
     256/     84C :                     
     257/     84C :                     ; FM5 Data
     258/     84C :                     Maniax_FM5:
     259/     84C : (MACRO)             	smpsPan             panCenter, $00
     259/     84C : =$0                 panNone set $00
     259/     84C : =$40                panRight set $40
     259/     84C : =$80                panLeft set $80
     259/     84C : =$C0                panCentre set $C0
     259/     84C : =$C0                panCenter set $C0 ; silly Americans :U
     259/     84C : E0C0                        dc.b $E0,PANCENTER+$00
     260/     84E : (MACRO)             	smpsSetvoice        $07
     260/     84E : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     260/     84E :                                     dc.b    $EF,$07|$80,+$81
     260/     84E : =>TRUE                      else
     260/     84E : EF07                                dc.b    $EF,$07
     260/     850 : [260]                       endif
     261/     850 : 801E                	dc.b	nRst, $1E
     262/     852 :                     
     263/     852 :                     Maniax_Jump01:
     264/     852 : B012 AE12 B012 AE12 	dc.b	nB3, $12, nA3, $12, nB3, $12, nA3, $12, nB3, $0C, nA3, $0C
                    B00C AE0C           
     265/     85E : B112 B012 AE3C AE12 	dc.b	nC4, $12, nB3, $12, nA3, $3C, nA3, $12, nC4, $12, nC4, $0C
                    B112 B10C           
     266/     86A : AE12 B012 B10C B112 	dc.b	nA3, $12, nB3, $12, nC4, $0C, nC4, $12, nB3, $4E, nRst, $60
                    B04E 8060           
     267/     876 : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     268/     882 : 8060 B330 B530 B530 	dc.b	nRst, $60, nD4, $30, nE4, $30, nE4, $30, nFs4, $30, nF4, $30
                    B730 B630           
     269/     88E : B430 B430 B606 B603 	dc.b	nEb4, $30, nEb4, $30, nF4, $06, nF4, $03, nF4, $06, nF4, $06
                    B606 B606           
     270/     89A : B603 B606           	dc.b	nF4, $03, nF4, $06
     271/     89E : (MACRO)             	smpsAlterNote       $00
     271/     89E : E100                        dc.b    $E1,$00
     272/     8A0 : 8075 8075 8075 8075 	dc.b	nRst, $75, nRst, $75, nRst, $75, nRst, $75, nRst, $75, nRst, $75
                    8075 8075           
     273/     8AC : 8075 8075 8075 8075 	dc.b	nRst, $75, nRst, $75, nRst, $75, nRst, $75
     274/     8B4 : (MACRO)             	smpsJump            Maniax_Jump01
     274/     8B4 : F600                        dc.b    $F6
     274/     8B6 : =>TRUE                      if SonicDriverVer<>1
     274/     8B6 : 5288                                dc.w    z80_ptr(MANIAX_JUMP01)
     274/     8B8 : =>FALSE                     else
     274/     8B8 :                                     dc.w    MANIAX_JUMP01-*-1
     274/     8B8 : [274]                       endif
     275/     8B8 :                     
     276/     8B8 :                     ; FM6 Data
     277/     8B8 :                     Maniax_FM6:
     278/     8B8 : (MACRO)             	smpsPan             panCenter, $00
     278/     8B8 : =$0                 panNone set $00
     278/     8B8 : =$40                panRight set $40
     278/     8B8 : =$80                panLeft set $80
     278/     8B8 : =$C0                panCentre set $C0
     278/     8B8 : =$C0                panCenter set $C0 ; silly Americans :U
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 27 - 2/2/2019 16:35:13


     278/     8B8 : E0C0                        dc.b $E0,PANCENTER+$00
     279/     8BA : (MACRO)             	smpsSetvoice        $08
     279/     8BA : =>FALSE                     if (SonicDriverVer>=3)&&(""<>"")
     279/     8BA :                                     dc.b    $EF,$08|$80,+$81
     279/     8BA : =>TRUE                      else
     279/     8BA : EF08                                dc.b    $EF,$08
     279/     8BC : [279]                       endif
     280/     8BC : 801E                	dc.b	nRst, $1E
     281/     8BE :                     
     282/     8BE :                     Maniax_Jump00:
     283/     8BE : 807F 801D AE03 8003 	dc.b	nRst, $7F, nRst, $1D, nA3, $03, nRst, $03, nG3, $03, nRst, $03
                    AC03 8003           
     284/     8CA : B103 8003 B003 B103 	dc.b	nC4, $03, nRst, $03, nB3, $03, nC4, $03, nRst, $06, nG3, $03
                    8006 AC03           
     285/     8D6 : AE03 B130 8030 B106 	dc.b	nA3, $03, nC4, $30, nRst, $30, nC4, $06, nRst, $0C, nD4, $4E
                    800C B34E           
     286/     8E2 : 804E AC03 AE03 B106 	dc.b	nRst, $4E, nG3, $03, nA3, $03, nC4, $06, nA3, $02, nRst, $52
                    AE02 8052           
     287/     8EE : AC03 AE03 B102 8001 	dc.b	nG3, $03, nA3, $03, nC4, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     288/     8FA : AE03 AC03 8048 B103 	dc.b	nA3, $03, nG3, $03, nRst, $48, nC4, $03, nRst, $03, nA3, $03
                    8003 AE03           
     289/     906 : 8003 B303 B503 8003 	dc.b	nRst, $03, nD4, $03, nE4, $03, nRst, $03, nE4, $03, nRst, $36
                    B503 8036           
     290/     912 : B503 8009 B103 8009 	dc.b	nE4, $03, nRst, $09, nC4, $03, nRst, $09, nG3, $02, nRst, $01
                    AC02 8001           
     291/     91E : AC02 8001 B003 B103 	dc.b	nG3, $02, nRst, $01, nB3, $03, nC4, $03, nFs3, $03, nG3, $03
                    AB03 AC03           
     292/     92A : 804E AC03 AE03 B106 	dc.b	nRst, $4E, nG3, $03, nA3, $03, nC4, $06, nA3, $02, nRst, $52
                    AE02 8052           
     293/     936 : AC02 8001 AC02 8001 	dc.b	nG3, $02, nRst, $01, nG3, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     294/     942 : B102 8001 B303 B503 	dc.b	nC4, $02, nRst, $01, nD4, $03, nE4, $03, nRst, $47, nD5, $01
                    8047 BF01           
     295/     94E : 8003 B302 8001 AE03 	dc.b	nRst, $03, nD4, $02, nRst, $01, nA3, $03, nC4, $03, nRst, $03
                    B103 8003           
     296/     95A : B103 AE06 8036 AC02 	dc.b	nC4, $03, nA3, $06, nRst, $36, nG3, $02, nRst, $01, nG3, $02
                    8001 AC02           
     297/     966 : 8001 B102 8001 B102 	dc.b	nRst, $01, nC4, $02, nRst, $01, nC4, $02, nRst, $01, nG3, $02
                    8001 AC02           
     298/     972 : 8001 AC02 8001 B103 	dc.b	nRst, $01, nG3, $02, nRst, $01, nC4, $03, nRst, $03, nC4, $03
                    8003 B103           
     299/     97E : 8006 B003 8006 AF06 	dc.b	nRst, $06, nB3, $03, nRst, $06, nBb3, $06, nRst, $7F, nRst, $1A
                    807F 801A           
     300/     98A : BF03 8003 BF03 8027 	dc.b	nD5, $03, nRst, $03, nD5, $03, nRst, $27, nF4, $03, nRst, $03
                    B603 8003           
     301/     996 : B203 8027 B803 8003 	dc.b	nCs4, $03, nRst, $27, nG4, $03, nRst, $03, nG4, $03, nRst, $27
                    B803 8027           
     302/     9A2 : B803 8003 B403 8018 	dc.b	nG4, $03, nRst, $03, nEb4, $03, nRst, $18, nG4, $03, nRst, $03
                    B803 8003           
     303/     9AE : B603 B503 8003 B603 	dc.b	nF4, $03, nE4, $03, nRst, $03, nF4, $03, nRst, $03, nG4, $03
                    8003 B803           
     304/     9BA : B803 8063 AC03 AE03 	dc.b	nG4, $03, nRst, $63, nG3, $03, nA3, $03, nC4, $06, nA3, $02
                    B106 AE02           
     305/     9C6 : 8052 AC03 AE03 B102 	dc.b	nRst, $52, nG3, $03, nA3, $03, nC4, $02, nRst, $01, nC4, $02
                    8001 B102           
     306/     9D2 : 8001 AE03 AC03 8045 	dc.b	nRst, $01, nA3, $03, nG3, $03, nRst, $45, nA3, $02, nC5, $01
                    AE02 BD01           
     307/     9DE : 8003 B103 AC03 B103 	dc.b	nRst, $03, nC4, $03, nG3, $03, nC4, $03, nRst, $03, nC4, $03
                    8003 B103           
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 28 - 2/2/2019 16:35:13


     308/     9EA : AE06 8036 B103 8003 	dc.b	nA3, $06, nRst, $36, nC4, $03, nRst, $03, nD4, $03, nRst, $03
                    B303 8003           
     309/     9F6 : B503 8003 B603 8003 	dc.b	nE4, $03, nRst, $03, nF4, $03, nRst, $03, nE4, $03, nD4, $03
                    B503 B303           
     310/     A02 : 8003 B503 8003 B133 	dc.b	nRst, $03, nE4, $03, nRst, $03, nC4, $33, nRst, $1E, nG3, $03
                    801E AC03           
     311/     A0E : AE03 B106 AE02 8052 	dc.b	nA3, $03, nC4, $06, nA3, $02, nRst, $52, nG3, $02, nRst, $01
                    AC02 8001           
     312/     A1A : AC02 8001 B102 8001 	dc.b	nG3, $02, nRst, $01, nC4, $02, nRst, $01, nC4, $02, nRst, $01
                    B102 8001           
     313/     A26 : B303 B503 8047 BF01 	dc.b	nD4, $03, nE4, $03, nRst, $47, nD5, $01, nRst, $03, nC5, $02
                    8003 BD02           
     314/     A32 : 8001 AC03 B103 8003 	dc.b	nRst, $01, nG3, $03, nC4, $03, nRst, $03, nG3, $03, nA3, $06
                    AC03 AE06           
     315/     A3E : 802A B505 8007 B105 	dc.b	nRst, $2A, nE4, $05, nRst, $07, nC4, $05, nRst, $07, nA3, $05
                    8007 AE05           
     316/     A4A : 8007 AC0C AE03 8003 	dc.b	nRst, $07, nG3, $0C, nA3, $03, nRst, $03, nBb3, $0F, nRst, $03
                    AF0F 8003           
     317/     A56 : AE0F 8003 AC0F 8003 	dc.b	nA3, $0F, nRst, $03, nG3, $0F, nRst, $03, nF3, $0F, nRst, $03
                    AA0F 8003           
     318/     A62 : B503 8009 B303 8009 	dc.b	nE4, $03, nRst, $09, nD4, $03, nRst, $09, nA3, $0F, nRst, $03
                    AE0F 8003           
     319/     A6E : B00F 8003 B10F 8003 	dc.b	nB3, $0F, nRst, $03, nC4, $0F, nRst, $03, nD4, $0F, nRst, $03
                    B30F 8003           
     320/     A7A : B503 8009 BA03 8009 	dc.b	nE4, $03, nRst, $09, nA4, $03, nRst, $09, nAb4, $0F, nRst, $03
                    B90F 8003           
     321/     A86 : B80F 8003 B60F 8003 	dc.b	nG4, $0F, nRst, $03, nF4, $0F, nRst, $03, nEb4, $0F, nRst, $03
                    B40F 8003           
     322/     A92 : B303 8009 B103 800F 	dc.b	nD4, $03, nRst, $09, nC4, $03, nRst, $0F, nG3, $06, nA3, $06
                    AC06 AE06           
     323/     A9E : AC0C 8006 AC06 B509 	dc.b	nG3, $0C, nRst, $06, nG3, $06, nE4, $09, nRst, $03, nE4, $06
                    8003 B506           
     324/     AAA : B606 B506 B806 B503 	dc.b	nF4, $06, nE4, $06, nG4, $06, nE4, $03, nRst, $03, nE4, $06
                    8003 B506           
     325/     AB6 : B106                	dc.b	nC4, $06
     326/     AB8 : (MACRO)             	smpsJump            Maniax_Jump00
     326/     AB8 : F600                        dc.b    $F6
     326/     ABA : =>TRUE                      if SonicDriverVer<>1
     326/     ABA : BE88                                dc.w    z80_ptr(MANIAX_JUMP00)
     326/     ABC : =>FALSE                     else
     326/     ABC :                                     dc.w    MANIAX_JUMP00-*-1
     326/     ABC : [326]                       endif
     327/     ABC :                     
     328/     ABC :                     ; PSG1 Data
     329/     ABC :                     Maniax_PSG1:
     330/     ABC : 801E                	dc.b	nRst, $1E
     331/     ABE :                     
     332/     ABE :                     Maniax_Jump08:
     333/     ABE : A902 8001 A702 8001 	dc.b	nE3, $02, nRst, $01, nD3, $02, nRst, $01, nE3, $02, nRst, $01
                    A902 8001           
     334/     ACA : (MACRO)             	smpsPSGAlterVol     $01
     334/     ACA : EC01                        dc.b    $EC,$01
     335/     ACC : A702 8001 A902 8001 	dc.b	nD3, $02, nRst, $01, nE3, $02, nRst, $01, nD3, $02, nRst, $01
                    A702 8001           
     336/     AD8 : A902 8001           	dc.b	nE3, $02, nRst, $01
     337/     ADC : (MACRO)             	smpsPSGAlterVol     $01
     337/     ADC : EC01                        dc.b    $EC,$01
     338/     ADE : A702 8001 A902 8001 	dc.b	nD3, $02, nRst, $01, nE3, $02, nRst, $01
     339/     AE6 : (MACRO)             	smpsPSGAlterVol     $01
     339/     AE6 : EC01                        dc.b    $EC,$01
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 29 - 2/2/2019 16:35:13


     340/     AE8 : A702 8001 A902 8001 	dc.b	nD3, $02, nRst, $01, nE3, $02, nRst, $01, nD3, $02, nRst, $01
                    A702 8001           
     341/     AF4 : (MACRO)             	smpsPSGAlterVol     $01
     341/     AF4 : EC01                        dc.b    $EC,$01
     342/     AF6 : A902 8001 A702 8001 	dc.b	nE3, $02, nRst, $01, nD3, $02, nRst, $01, nE3, $02, nRst, $01
                    A902 8001           
     343/     B02 : A702 8001 A902 8001 	dc.b	nD3, $02, nRst, $01, nE3, $02, nRst, $01, nD3, $02, nRst, $01
                    A702 8001           
     344/     B0E : A902 8001 A702 8001 	dc.b	nE3, $02, nRst, $01, nD3, $02, nRst, $01
     345/     B16 : (MACRO)             	smpsPSGAlterVol     $01
     345/     B16 : EC01                        dc.b    $EC,$01
     346/     B18 : A902 8001 A702 8001 	dc.b	nE3, $02, nRst, $01, nD3, $02, nRst, $01, nE3, $02, nRst, $01
                    A902 8001           
     347/     B24 : A702 8001 A902 8001 	dc.b	nD3, $02, nRst, $01, nE3, $02, nRst, $01, nRst, $02, nRst, $01
                    8002 8001           
     348/     B30 : 8002 8001 8002 8001 	dc.b	nRst, $02, nRst, $01, nRst, $02, nRst, $01, nRst, $02, nRst, $01
                    8002 8001           
     349/     B3C : 8002 8001 8002 8001 	dc.b	nRst, $02, nRst, $01, nRst, $02, nRst, $01, nRst, $02, nRst, $60
                    8002 8060           
     350/     B48 : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     351/     B54 : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     352/     B60 : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $60
                    8060 8060           
     353/     B6C : 8060 8060 8060 8060 	dc.b	nRst, $60, nRst, $60, nRst, $60, nRst, $60, nRst, $01
                    8001                
     354/     B76 : (MACRO)             	smpsPSGAlterVol     $F7
     354/     B76 : ECF7                        dc.b    $EC,$F7
     355/     B78 : 9B02 8001 9E02 8001 	dc.b	nD2, $02, nRst, $01, nF2, $02, nRst, $01, nA2, $02, nRst, $01
                    A202 8001           
     356/     B84 : A302 8001 A702 8001 	dc.b	nBb2, $02, nRst, $01, nD3, $02, nRst, $01, nBb2, $02, nRst, $01
                    A302 8001           
     357/     B90 : A202 8001 9E02 8001 	dc.b	nA2, $02, nRst, $01, nF2, $02, nRst, $01, nD2, $02, nRst, $01
                    9B02 8001           
     358/     B9C : 9E02 8001 A202 8001 	dc.b	nF2, $02, nRst, $01, nA2, $02, nRst, $01, nBb2, $02, nRst, $01
                    A302 8001           
     359/     BA8 : A702 8001 A302 8001 	dc.b	nD3, $02, nRst, $01, nBb2, $02, nRst, $01, nA2, $02, nRst, $01
                    A202 8001           
     360/     BB4 : 9E02 8001 9B02 8001 	dc.b	nF2, $02, nRst, $01, nD2, $02, nRst, $01, nF2, $02, nRst, $01
                    9E02 8001           
     361/     BC0 : A202 8001 A302 8001 	dc.b	nA2, $02, nRst, $01, nBb2, $02, nRst, $01, nD3, $02, nRst, $01
                    A702 8001           
     362/     BCC : A302 8001 A202 8001 	dc.b	nBb2, $02, nRst, $01, nA2, $02, nRst, $01, nF2, $02, nRst, $01
                    9E02 8001           
     363/     BD8 : 9B02 8001 9E02 8001 	dc.b	nD2, $02, nRst, $01, nF2, $02, nRst, $01, nA2, $02, nRst, $01
                    A202 8001           
     364/     BE4 : A302 8001 A702 8001 	dc.b	nBb2, $02, nRst, $01, nD3, $02, nRst, $01, nBb2, $02, nRst, $01
                    A302 8001           
     365/     BF0 : A202 8001 9E02 8001 	dc.b	nA2, $02, nRst, $01, nF2, $02, nRst, $01, nE2, $02, nRst, $01
                    9D02 8001           
     366/     BFC : A002 8001 A402 8001 	dc.b	nG2, $02, nRst, $01, nB2, $02, nRst, $01, nC3, $02, nRst, $01
                    A502 8001           
     367/     C08 : A902 8001 A502 8001 	dc.b	nE3, $02, nRst, $01, nC3, $02, nRst, $01, nB2, $02, nRst, $01
                    A402 8001           
     368/     C14 : A002 8001 9D02 8001 	dc.b	nG2, $02, nRst, $01, nE2, $02, nRst, $01, nG2, $02, nRst, $01
                    A002 8001           
     369/     C20 : A402 8001 A502 8001 	dc.b	nB2, $02, nRst, $01, nC3, $02, nRst, $01, nE3, $02, nRst, $01
                    A902 8001           
     370/     C2C : A502 8001 A402 8001 	dc.b	nC3, $02, nRst, $01, nB2, $02, nRst, $01, nG2, $02, nRst, $01
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 30 - 2/2/2019 16:35:13


                    A002 8001           
     371/     C38 : 9D02 8001 A002 8001 	dc.b	nE2, $02, nRst, $01, nG2, $02, nRst, $01, nB2, $02, nRst, $01
                    A402 8001           
     372/     C44 : A502 8001 A902 8001 	dc.b	nC3, $02, nRst, $01, nE3, $02, nRst, $01, nC3, $02, nRst, $01
                    A502 8001           
     373/     C50 : A402 8001 A002 8001 	dc.b	nB2, $02, nRst, $01, nG2, $02, nRst, $01, nE2, $02, nRst, $01
                    9D02 8001           
     374/     C5C : A002 8001 A402 8001 	dc.b	nG2, $02, nRst, $01, nB2, $02, nRst, $01, nC3, $02, nRst, $01
                    A502 8001           
     375/     C68 : A902 8001 A502 8001 	dc.b	nE3, $02, nRst, $01, nC3, $02, nRst, $01, nB2, $02, nRst, $01
                    A402 8001           
     376/     C74 : A002 8001 9C02 8001 	dc.b	nG2, $02, nRst, $01, nEb2, $02, nRst, $01, nG2, $02, nRst, $01
                    A002 8001           
     377/     C80 : A102 8001 A502 8001 	dc.b	nAb2, $02, nRst, $01, nC3, $02, nRst, $01, nEb3, $02, nRst, $01
                    A802 8001           
     378/     C8C : A502 8001 A102 8001 	dc.b	nC3, $02, nRst, $01, nAb2, $02, nRst, $01, nG2, $02, nRst, $01
                    A002 8001           
     379/     C98 : 9C02 8001 A002 8001 	dc.b	nEb2, $02, nRst, $01, nG2, $02, nRst, $01, nAb2, $02, nRst, $01
                    A102 8001           
     380/     CA4 : A502 8001 A802 8001 	dc.b	nC3, $02, nRst, $01, nEb3, $02, nRst, $01, nC3, $02, nRst, $01
                    A502 8001           
     381/     CB0 : A102 8001 A002 8001 	dc.b	nAb2, $02, nRst, $01, nG2, $02, nRst, $01, nEb2, $02, nRst, $01
                    9C02 8001           
     382/     CBC : A002 8001 A102 8001 	dc.b	nG2, $02, nRst, $01, nAb2, $02, nRst, $01, nC3, $02, nRst, $01
                    A502 8001           
     383/     CC8 : A802 8001 A502 8001 	dc.b	nEb3, $02, nRst, $01, nC3, $02, nRst, $01, nAb2, $02, nRst, $01
                    A102 8001           
     384/     CD4 : A002 8001 9C02 8001 	dc.b	nG2, $02, nRst, $01, nEb2, $02, nRst, $01, nG2, $02, nRst, $01
                    A002 8001           
     385/     CE0 : A102 8001 A502 8001 	dc.b	nAb2, $02, nRst, $01, nC3, $02, nRst, $01, nEb3, $02, nRst, $01
                    A802 8001           
     386/     CEC : A502 8001 A102 8001 	dc.b	nC3, $02, nRst, $01, nAb2, $02, nRst, $01, nG2, $02, nRst, $01
                    A002 8001           
     387/     CF8 : A903 8003 A903 8003 	dc.b	nE3, $03, nRst, $03, nE3, $03, nRst, $03, nE3, $03, nRst, $03
                    A903 8003           
     388/     D04 : A903 8003 A903 8003 	dc.b	nE3, $03, nRst, $03, nE3, $03, nRst, $03, nE3, $03, nRst, $03
                    A903 8003           
     389/     D10 : A903 8003 A903 8003 	dc.b	nE3, $03, nRst, $03, nE3, $03, nRst, $03, nE3, $03, nRst, $03
                    A903 8003           
     390/     D1C : A903 8003 A903 8003 	dc.b	nE3, $03, nRst, $03, nE3, $03, nRst, $03, nE3, $03, nRst, $03
                    A903 8003           
     391/     D28 : A903 8003 A903 8003 	dc.b	nE3, $03, nRst, $03, nE3, $03, nRst, $03, nE3, $03, nRst, $03
                    A903 8003           
     392/     D34 : A903                	dc.b	nE3, $03
     393/     D36 : (MACRO)             	smpsAlterNote       $00
     393/     D36 : E100                        dc.b    $E1,$00
     394/     D38 : 8003                	dc.b	nRst, $03
     395/     D3A : (MACRO)             	smpsPSGAlterVol     $04
     395/     D3A : EC04                        dc.b    $EC,$04
     396/     D3C : (MACRO)             	smpsJump            Maniax_Jump08
     396/     D3C : F600                        dc.b    $F6
     396/     D3E : =>TRUE                      if SonicDriverVer<>1
     396/     D3E : BE8A                                dc.w    z80_ptr(MANIAX_JUMP08)
     396/     D40 : =>FALSE                     else
     396/     D40 :                                     dc.w    MANIAX_JUMP08-*-1
     396/     D40 : [396]                       endif
     397/     D40 :                     
     398/     D40 :                     ; PSG2 Data
     399/     D40 :                     Maniax_PSG2:
     400/     D40 : (MACRO)             	smpsModSet          $00, $02, $00, $02
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 31 - 2/2/2019 16:35:13


     400/     D40 : F000                        dc.b    $F0
     400/     D42 : =>TRUE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
     400/     D42 : 0102 0005                           dc.b    $00+1,$02,$00,($02*$02+1)&$FF
     400/     D46 : =>FALSE                     elseif (SonicDriverVer<3)&&(SourceDriver>=3)
     400/     D46 :                                     dc.b    $00-1,$02,$00,conv0To256($02)/conv0To256($02)-1
     400/     D46 : =>FALSE                     else
     400/     D46 :                                     dc.b    $00,$02,$00,$02
     400/     D46 : [400]                       endif
     400/     D46 :                             ;dc.b   $02,$00,$02
     401/     D46 : 801E                	dc.b	nRst, $1E
     402/     D48 :                     
     403/     D48 :                     Maniax_Jump07:
     404/     D48 : 807F 807F 807F 801B 	dc.b	nRst, $7F, nRst, $7F, nRst, $7F, nRst, $1B, nC3, $06, nA2, $0C
                    A506 A20C           
     405/     D54 : A506 A40C A506 A40C 	dc.b	nC3, $06, nB2, $0C, nC3, $06, nB2, $0C, nG2, $24, nA2, $06
                    A024 A206           
     406/     D60 : A906 A70C A506 A40C 	dc.b	nE3, $06, nD3, $0C, nC3, $06, nB2, $0C, nC3, $06, nB2, $0C
                    A506 A40C           
     407/     D6C : A02A A506 A20C A506 	dc.b	nG2, $2A, nC3, $06, nA2, $0C, nC3, $06, nB2, $0C, nC3, $06
                    A40C A506           
     408/     D78 : A40C A024 A206 A206 	dc.b	nB2, $0C, nG2, $24, nA2, $06, nA2, $06, nF2, $0C, nA2, $06
                    9E0C A206           
     409/     D84 : A00C A206 A00C 992A 	dc.b	nG2, $0C, nA2, $06, nG2, $0C, nC2, $2A, nC3, $06, nA2, $0C
                    A506 A20C           
     410/     D90 : A506 A40C A506 A40C 	dc.b	nC3, $06, nB2, $0C, nC3, $06, nB2, $0C, nG2, $24, nA2, $06
                    A024 A206           
     411/     D9C : A206 A00C A506 A40C 	dc.b	nA2, $06, nG2, $0C, nC3, $06, nB2, $0C, nC3, $06, nB2, $0C
                    A506 A40C           
     412/     DA8 : A02A A506 A20C A506 	dc.b	nG2, $2A, nC3, $06, nA2, $0C, nC3, $06, nB2, $0C, nC3, $06
                    A40C A506           
     413/     DB4 : A40C A024 A206 A206 	dc.b	nB2, $0C, nG2, $24, nA2, $06, nA2, $06, nF2, $0C, nA2, $06
                    9E0C A206           
     414/     DC0 : A00C A206 A00C 9909 	dc.b	nG2, $0C, nA2, $06, nG2, $0C, nC2, $09, nE2, $09, nD2, $0C
                    9D09 9B0C           
     415/     DCC : 807F 807F 807F 800F 	dc.b	nRst, $7F, nRst, $7F, nRst, $7F, nRst, $0F, nC3, $06, nA2, $0C
                    A506 A20C           
     416/     DD8 : A506 A40C A506 A40C 	dc.b	nC3, $06, nB2, $0C, nC3, $06, nB2, $0C, nG2, $24, nA2, $06
                    A024 A206           
     417/     DE4 : A906 A70C A506 A40C 	dc.b	nE3, $06, nD3, $0C, nC3, $06, nB2, $0C, nC3, $06, nB2, $0C
                    A506 A40C           
     418/     DF0 : A02A A506 A20C A506 	dc.b	nG2, $2A, nC3, $06, nA2, $0C, nC3, $06, nB2, $0C, nC3, $06
                    A40C A506           
     419/     DFC : A40C A024 A206 A206 	dc.b	nB2, $0C, nG2, $24, nA2, $06, nA2, $06, nF2, $0C, nA2, $06
                    9E0C A206           
     420/     E08 : A00C A206 A00C 992A 	dc.b	nG2, $0C, nA2, $06, nG2, $0C, nC2, $2A, nC3, $06, nA2, $0C
                    A506 A20C           
     421/     E14 : A506 A40C A506 A40C 	dc.b	nC3, $06, nB2, $0C, nC3, $06, nB2, $0C, nG2, $24, nA2, $06
                    A024 A206           
     422/     E20 : A206 A00C A506 A40C 	dc.b	nA2, $06, nG2, $0C, nC3, $06, nB2, $0C, nC3, $06, nB2, $0C
                    A506 A40C           
     423/     E2C : A02A A506 A20C A506 	dc.b	nG2, $2A, nC3, $06, nA2, $0C, nC3, $06, nB2, $0C, nC3, $06
                    A40C A506           
     424/     E38 : A40C A024 A206 A206 	dc.b	nB2, $0C, nG2, $24, nA2, $06, nA2, $06, nF2, $0C, nA2, $06
                    9E0C A206           
     425/     E44 : A00C A206 A00C 990C 	dc.b	nG2, $0C, nA2, $06, nG2, $0C, nC2, $0C, nE2, $06, nD2, $47
                    9D06 9B47           
     426/     E50 : 8007 9906 9B06 9D4E 	dc.b	nRst, $07, nC2, $06, nD2, $06, nE2, $4E, nRst, $06, nC2, $06
                    8006 9906           
     427/     E5C : A206 9D06 9C48 8006 	dc.b	nA2, $06, nE2, $06, nEb2, $48, nRst, $06, nC2, $06, nEb2, $06
                    9906 9C06           
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 32 - 2/2/2019 16:35:13


     428/     E68 : 9B66                	dc.b	nD2, $66
     429/     E6A : (MACRO)             	smpsJump            Maniax_Jump07
     429/     E6A : F600                        dc.b    $F6
     429/     E6C : =>TRUE                      if SonicDriverVer<>1
     429/     E6C : 488D                                dc.w    z80_ptr(MANIAX_JUMP07)
     429/     E6E : =>FALSE                     else
     429/     E6E :                                     dc.w    MANIAX_JUMP07-*-1
     429/     E6E : [429]                       endif
     430/     E6E :                     
     431/     E6E :                     ; PSG3 Data
     432/     E6E :                     Maniax_PSG3:
     433/     E6E : (MACRO)             	smpsAlterNote       $00
     433/     E6E : E100                        dc.b    $E1,$00
     434/     E70 : (MACRO)             	smpsPSGvoice        $0C
     434/     E70 : F50C                        dc.b    $F5,$0C
     435/     E72 : 801E                	dc.b	nRst, $1E
     436/     E74 :                     
     437/     E74 :                     Maniax_Jump06:
     438/     E74 : 9803 8006 9803 8006 	dc.b	nB1, $03, nRst, $06, nB1, $03, nRst, $06, nA1, $03, nRst, $06
                    9603 8006           
     439/     E80 : 9603 8006 9803 8006 	dc.b	nA1, $03, nRst, $06, nB1, $03, nRst, $06, nB1, $03, nRst, $06
                    9803 8006           
     440/     E8C : 9603 8006 9603 8006 	dc.b	nA1, $03, nRst, $06, nA1, $03, nRst, $06, nB1, $03, nRst, $09
                    9803 8009           
     441/     E98 : 9603 8009 9903 8006 	dc.b	nA1, $03, nRst, $09, nC2, $03, nRst, $06, nC2, $03, nRst, $06
                    9903 8006           
     442/     EA4 : 9803 8006 9803 8006 	dc.b	nB1, $03, nRst, $06, nB1, $03, nRst, $06, nA1, $03, nRst, $06
                    9603 8006           
     443/     EB0 : 9603 8006           	dc.b	nA1, $03, nRst, $06
     444/     EB4 : (MACRO)             	smpsPSGAlterVol     $01
     444/     EB4 : EC01                        dc.b    $EC,$01
     445/     EB6 : 9603 8006           	dc.b	nA1, $03, nRst, $06
     446/     EBA : (MACRO)             	smpsPSGAlterVol     $02
     446/     EBA : EC02                        dc.b    $EC,$02
     447/     EBC : 9603 8006           	dc.b	nA1, $03, nRst, $06
     448/     EC0 : (MACRO)             	smpsPSGAlterVol     $02
     448/     EC0 : EC02                        dc.b    $EC,$02
     449/     EC2 : 9603 8006 9603 8006 	dc.b	nA1, $03, nRst, $06, nA1, $03, nRst, $06
     450/     ECA : (MACRO)             	smpsPSGAlterVol     $01
     450/     ECA : EC01                        dc.b    $EC,$01
     451/     ECC : 9603 8003           	dc.b	nA1, $03, nRst, $03
     452/     ED0 : (MACRO)             	smpsPSGAlterVol     $FA
     452/     ED0 : ECFA                        dc.b    $EC,$FA
     453/     ED2 : 9603 8006 9603 8006 	dc.b	nA1, $03, nRst, $06, nA1, $03, nRst, $06, nB1, $03, nRst, $06
                    9803 8006           
     454/     EDE : 9803 8006 9903 8009 	dc.b	nB1, $03, nRst, $06, nC2, $03, nRst, $09, nA1, $03, nRst, $06
                    9603 8006           
     455/     EEA : 9603 8006 9803 8006 	dc.b	nA1, $03, nRst, $06, nB1, $03, nRst, $06, nB1, $03, nRst, $06
                    9803 8006           
     456/     EF6 : 9903 8009 9903 8006 	dc.b	nC2, $03, nRst, $09, nC2, $03, nRst, $06, nC2, $03, nRst, $06
                    9903 8006           
     457/     F02 : 9803 8006 9803 8006 	dc.b	nB1, $03, nRst, $06, nB1, $03, nRst, $06, nB1, $03, nB1, $03
                    9803 9803           
     458/     F0E : 8003 9803 8006      	dc.b	nRst, $03, nB1, $03, nRst, $06
     459/     F14 : (MACRO)             	smpsPSGAlterVol     $01
     459/     F14 : EC01                        dc.b    $EC,$01
     460/     F16 : 9803 8006           	dc.b	nB1, $03, nRst, $06
     461/     F1A : (MACRO)             	smpsPSGAlterVol     $02
     461/     F1A : EC02                        dc.b    $EC,$02
     462/     F1C : 9803 8006           	dc.b	nB1, $03, nRst, $06
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 33 - 2/2/2019 16:35:13


     463/     F20 : (MACRO)             	smpsPSGAlterVol     $02
     463/     F20 : EC02                        dc.b    $EC,$02
     464/     F22 : 9803 8006           	dc.b	nB1, $03, nRst, $06
     465/     F26 : (MACRO)             	smpsPSGAlterVol     $01
     465/     F26 : EC01                        dc.b    $EC,$01
     466/     F28 : 9803 8006 9803 806B 	dc.b	nB1, $03, nRst, $06, nB1, $03, nRst, $6B, nRst, $6B, nRst, $6B
                    806B 806B           
     467/     F34 : 806B 806B 806B 806B 	dc.b	nRst, $6B, nRst, $6B, nRst, $6B, nRst, $6B, nRst, $6B, nRst, $6B
                    806B 806B           
     468/     F40 : 806B 806B 806B 806B 	dc.b	nRst, $6B, nRst, $6B, nRst, $6B, nRst, $6B, nRst, $6B, nRst, $6B
                    806B 806B           
     469/     F4C : 806B 806B 806B 8003 	dc.b	nRst, $6B, nRst, $6B, nRst, $6B, nRst, $03
     470/     F54 : (MACRO)             	smpsPSGAlterVol     $FA
     470/     F54 : ECFA                        dc.b    $EC,$FA
     471/     F56 : 9703 8003 9703 8009 	dc.b	nBb1, $03, nRst, $03, nBb1, $03, nRst, $09, nBb1, $03, nRst, $06
                    9703 8006           
     472/     F62 : 9703 8006 9703 8003 	dc.b	nBb1, $03, nRst, $06, nBb1, $03, nRst, $03, nBb1, $03, nRst, $03
                    9703 8003           
     473/     F6E : 9703 8003 9703 9703 	dc.b	nBb1, $03, nRst, $03, nBb1, $03, nBb1, $03, nRst, $03, nBb1, $03
                    8003 9703           
     474/     F7A : 8006 9703 8009 9703 	dc.b	nRst, $06, nBb1, $03, nRst, $09, nBb1, $03, nRst, $09, nC2, $03
                    8009 9903           
     475/     F86 : 8003 9903 8009 9903 	dc.b	nRst, $03, nC2, $03, nRst, $09, nC2, $03, nRst, $06, nC2, $03
                    8006 9903           
     476/     F92 : 8006 9903 8003 9903 	dc.b	nRst, $06, nC2, $03, nRst, $03, nC2, $03, nRst, $03, nC2, $03
                    8003 9903           
     477/     F9E : 8003 9903 9903 8003 	dc.b	nRst, $03, nC2, $03, nC2, $03, nRst, $03, nC2, $03, nRst, $06
                    9903 8006           
     478/     FAA : 9903 8009 9903 8009 	dc.b	nC2, $03, nRst, $09, nC2, $03, nRst, $09, nC2, $03, nRst, $03
                    9903 8003           
     479/     FB6 : 9903 8009 9903 8006 	dc.b	nC2, $03, nRst, $09, nC2, $03, nRst, $06, nC2, $03, nRst, $06
                    9903 8006           
     480/     FC2 : 9903 8003 9903 8003 	dc.b	nC2, $03, nRst, $03, nC2, $03, nRst, $03, nC2, $03, nRst, $03
                    9903 8003           
     481/     FCE : 9903 9903 8003 9903 	dc.b	nC2, $03, nC2, $03, nRst, $03, nC2, $03, nRst, $06, nC2, $03
                    8006 9903           
     482/     FDA : 8009 9903 8009 9903 	dc.b	nRst, $09, nC2, $03, nRst, $09, nC2, $03, nRst, $03, nC2, $03
                    8003 9903           
     483/     FE6 : 8009 9903 8006 9903 	dc.b	nRst, $09, nC2, $03, nRst, $06, nC2, $03, nRst, $06, nC2, $03
                    8006 9903           
     484/     FF2 : 8009 9903 8003 9903 	dc.b	nRst, $09, nC2, $03, nRst, $03, nC2, $03, nRst, $03, nC2, $03
                    8003 9903           
     485/     FFE : 8003 9903 8003 9903 	dc.b	nRst, $03, nC2, $03, nRst, $03, nC2, $03, nRst, $03, nC2, $03
                    8003 9903           
     486/    100A : 8003 9903           	dc.b	nRst, $03, nC2, $03
     487/    100E : (MACRO)             	smpsAlterNote       $00
     487/    100E : E100                        dc.b    $E1,$00
     488/    1010 : 8003                	dc.b	nRst, $03
     489/    1012 : (MACRO)             	smpsJump            Maniax_Jump06
     489/    1012 : F600                        dc.b    $F6
     489/    1014 : =>TRUE                      if SonicDriverVer<>1
     489/    1014 : 748E                                dc.w    z80_ptr(MANIAX_JUMP06)
     489/    1016 : =>FALSE                     else
     489/    1016 :                                     dc.w    MANIAX_JUMP06-*-1
     489/    1016 : [489]                       endif
     490/    1016 :                     
     491/    1016 :                     ; DAC Data
     492/    1016 :                     Maniax_DAC:
     493/    1016 : (MACRO)             	smpsStop
     493/    1016 : F200                        dc.b    $F2
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 34 - 2/2/2019 16:35:13


     494/    1018 :                     
     495/    1018 :                     Maniax_Voices:
     496/    1018 :                     ;	Voice $00
     497/    1018 :                     ;	$2C
     498/    1018 :                     ;	$31, $31, $71, $71, 	$5F, $54, $5F, $5F, 	$05, $0A, $03, $0C
     499/    1018 :                     ;	$00, $03, $03, $03, 	$00, $87, $00, $A7, 	$17, $06, $19, $06
     500/    1018 : (MACRO)             	smpsVcAlgorithm     $04
     500/    1018 : =$4                 vcAlgorithm set $04
     501/    1018 : (MACRO)             	smpsVcFeedback      $05
     501/    1018 : =$5                 vcFeedback set $05
     502/    1018 : (MACRO)             	smpsVcUnusedBits    $00
     502/    1018 : =$0                 vcUnusedBits set $00
     503/    1018 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
     503/    1018 : =$7                 vcDT1 set $07
     503/    1018 : =$7                 vcDT2 set $07
     503/    1018 : =$3                 vcDT3 set $03
     503/    1018 : =$3                 vcDT4 set $03
     504/    1018 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
     504/    1018 : =$1                 vcCF1 set $01
     504/    1018 : =$1                 vcCF2 set $01
     504/    1018 : =$1                 vcCF3 set $01
     504/    1018 : =$1                 vcCF4 set $01
     505/    1018 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
     505/    1018 : =$1                 vcRS1 set $01
     505/    1018 : =$1                 vcRS2 set $01
     505/    1018 : =$1                 vcRS3 set $01
     505/    1018 : =$1                 vcRS4 set $01
     506/    1018 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $14, $1F
     506/    1018 : =$1F                vcAR1 set $1F
     506/    1018 : =$1F                vcAR2 set $1F
     506/    1018 : =$14                vcAR3 set $14
     506/    1018 : =$1F                vcAR4 set $1F
     507/    1018 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     507/    1018 : =$0                 vcAM1 set $00
     507/    1018 : =$0                 vcAM2 set $00
     507/    1018 : =$0                 vcAM3 set $00
     507/    1018 : =$0                 vcAM4 set $00
     508/    1018 : (MACRO)             	smpsVcDecayRate1    $0C, $03, $0A, $05
     508/    1018 : =$C                 vcD1R1 set $0C
     508/    1018 : =$3                 vcD1R2 set $03
     508/    1018 : =$A                 vcD1R3 set $0A
     508/    1018 : =$5                 vcD1R4 set $05
     509/    1018 : (MACRO)             	smpsVcDecayRate2    $03, $03, $03, $00
     509/    1018 : =$3                 vcD2R1 set $03
     509/    1018 : =$3                 vcD2R2 set $03
     509/    1018 : =$3                 vcD2R3 set $03
     509/    1018 : =$0                 vcD2R4 set $00
     510/    1018 : (MACRO)             	smpsVcDecayLevel    $0A, $00, $08, $00
     510/    1018 : =$A                 vcDL1 set $0A
     510/    1018 : =$0                 vcDL2 set $00
     510/    1018 : =$8                 vcDL3 set $08
     510/    1018 : =$0                 vcDL4 set $00
     511/    1018 : (MACRO)             	smpsVcReleaseRate   $07, $00, $07, $00
     511/    1018 : =$7                 vcRR1 set $07
     511/    1018 : =$0                 vcRR2 set $00
     511/    1018 : =$7                 vcRR3 set $07
     511/    1018 : =$0                 vcRR4 set $00
     512/    1018 : (MACRO)             	smpsVcTotalLevel    $06, $19, $06, $17
     512/    1018 : =$6                 vcTL1 set $06
     512/    1018 : =$19                vcTL2 set $19
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 35 - 2/2/2019 16:35:13


     512/    1018 : =$6                 vcTL3 set $06
     512/    1018 : =$17                vcTL4 set $17
     512/    1018 : 2C00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     512/    101A :                     ;   0     1     2     3     4     5     6     7
     512/    101A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     512/    101A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     512/    101A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
     512/    101A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     512/    101A : =$80                vcTLMask1 set $80
     512/    101A : =>FALSE                     if SonicDriverVer==2
     512/    101A :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     512/    101A :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     512/    101A :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     512/    101A :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     512/    101A :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     512/    101A :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     512/    101A : =>TRUE                      else
     512/    101A : 3131 7171                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     512/    101E : 5F54 5F5F                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     512/    1022 : 050A 030C                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     512/    1026 : 0003 0303                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     512/    102A : 0087 00A7                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     512/    102E : 1786 1986                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     512/    1032 : [512]                       endif
     513/    1032 :                     
     514/    1032 :                     ;	Voice $01
     515/    1032 :                     ;	$2C
     516/    1032 :                     ;	$31, $31, $71, $71, 	$5F, $54, $5F, $5F, 	$05, $0A, $03, $0C
     517/    1032 :                     ;	$00, $03, $03, $03, 	$00, $87, $00, $A7, 	$17, $06, $19, $06
     518/    1032 : (MACRO)             	smpsVcAlgorithm     $04
     518/    1032 : =$4                 vcAlgorithm set $04
     519/    1032 : (MACRO)             	smpsVcFeedback      $05
     519/    1032 : =$5                 vcFeedback set $05
     520/    1032 : (MACRO)             	smpsVcUnusedBits    $00
     520/    1032 : =$0                 vcUnusedBits set $00
     521/    1032 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
     521/    1032 : =$7                 vcDT1 set $07
     521/    1032 : =$7                 vcDT2 set $07
     521/    1032 : =$3                 vcDT3 set $03
     521/    1032 : =$3                 vcDT4 set $03
     522/    1032 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
     522/    1032 : =$1                 vcCF1 set $01
     522/    1032 : =$1                 vcCF2 set $01
     522/    1032 : =$1                 vcCF3 set $01
     522/    1032 : =$1                 vcCF4 set $01
     523/    1032 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
     523/    1032 : =$1                 vcRS1 set $01
     523/    1032 : =$1                 vcRS2 set $01
     523/    1032 : =$1                 vcRS3 set $01
     523/    1032 : =$1                 vcRS4 set $01
     524/    1032 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $14, $1F
     524/    1032 : =$1F                vcAR1 set $1F
     524/    1032 : =$1F                vcAR2 set $1F
     524/    1032 : =$14                vcAR3 set $14
     524/    1032 : =$1F                vcAR4 set $1F
     525/    1032 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     525/    1032 : =$0                 vcAM1 set $00
     525/    1032 : =$0                 vcAM2 set $00
     525/    1032 : =$0                 vcAM3 set $00
     525/    1032 : =$0                 vcAM4 set $00
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 36 - 2/2/2019 16:35:13


     526/    1032 : (MACRO)             	smpsVcDecayRate1    $0C, $03, $0A, $05
     526/    1032 : =$C                 vcD1R1 set $0C
     526/    1032 : =$3                 vcD1R2 set $03
     526/    1032 : =$A                 vcD1R3 set $0A
     526/    1032 : =$5                 vcD1R4 set $05
     527/    1032 : (MACRO)             	smpsVcDecayRate2    $03, $03, $03, $00
     527/    1032 : =$3                 vcD2R1 set $03
     527/    1032 : =$3                 vcD2R2 set $03
     527/    1032 : =$3                 vcD2R3 set $03
     527/    1032 : =$0                 vcD2R4 set $00
     528/    1032 : (MACRO)             	smpsVcDecayLevel    $0A, $00, $08, $00
     528/    1032 : =$A                 vcDL1 set $0A
     528/    1032 : =$0                 vcDL2 set $00
     528/    1032 : =$8                 vcDL3 set $08
     528/    1032 : =$0                 vcDL4 set $00
     529/    1032 : (MACRO)             	smpsVcReleaseRate   $07, $00, $07, $00
     529/    1032 : =$7                 vcRR1 set $07
     529/    1032 : =$0                 vcRR2 set $00
     529/    1032 : =$7                 vcRR3 set $07
     529/    1032 : =$0                 vcRR4 set $00
     530/    1032 : (MACRO)             	smpsVcTotalLevel    $06, $19, $06, $17
     530/    1032 : =$6                 vcTL1 set $06
     530/    1032 : =$19                vcTL2 set $19
     530/    1032 : =$6                 vcTL3 set $06
     530/    1032 : =$17                vcTL4 set $17
     530/    1032 : 2C00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     530/    1034 :                     ;   0     1     2     3     4     5     6     7
     530/    1034 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     530/    1034 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     530/    1034 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
     530/    1034 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     530/    1034 : =$80                vcTLMask1 set $80
     530/    1034 : =>FALSE                     if SonicDriverVer==2
     530/    1034 :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     530/    1034 :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     530/    1034 :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     530/    1034 :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     530/    1034 :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     530/    1034 :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     530/    1034 : =>TRUE                      else
     530/    1034 : 3131 7171                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     530/    1038 : 5F54 5F5F                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     530/    103C : 050A 030C                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     530/    1040 : 0003 0303                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     530/    1044 : 0087 00A7                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     530/    1048 : 1786 1986                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     530/    104C : [530]                       endif
     531/    104C :                     
     532/    104C :                     ;	Voice $02
     533/    104C :                     ;	$36
     534/    104C :                     ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
     535/    104C :                     ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $12, $12, $12
     536/    104C : (MACRO)             	smpsVcAlgorithm     $06
     536/    104C : =$6                 vcAlgorithm set $06
     537/    104C : (MACRO)             	smpsVcFeedback      $06
     537/    104C : =$6                 vcFeedback set $06
     538/    104C : (MACRO)             	smpsVcUnusedBits    $00
     538/    104C : =$0                 vcUnusedBits set $00
     539/    104C : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
     539/    104C : =$0                 vcDT1 set $00
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 37 - 2/2/2019 16:35:13


     539/    104C : =$0                 vcDT2 set $00
     539/    104C : =$0                 vcDT3 set $00
     539/    104C : =$0                 vcDT4 set $00
     540/    104C : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $0F
     540/    104C : =$1                 vcCF1 set $01
     540/    104C : =$1                 vcCF2 set $01
     540/    104C : =$1                 vcCF3 set $01
     540/    104C : =$F                 vcCF4 set $0F
     541/    104C : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
     541/    104C : =$0                 vcRS1 set $00
     541/    104C : =$0                 vcRS2 set $00
     541/    104C : =$0                 vcRS3 set $00
     541/    104C : =$0                 vcRS4 set $00
     542/    104C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
     542/    104C : =$1F                vcAR1 set $1F
     542/    104C : =$1F                vcAR2 set $1F
     542/    104C : =$1F                vcAR3 set $1F
     542/    104C : =$1F                vcAR4 set $1F
     543/    104C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     543/    104C : =$0                 vcAM1 set $00
     543/    104C : =$0                 vcAM2 set $00
     543/    104C : =$0                 vcAM3 set $00
     543/    104C : =$0                 vcAM4 set $00
     544/    104C : (MACRO)             	smpsVcDecayRate1    $00, $0E, $11, $12
     544/    104C : =$0                 vcD1R1 set $00
     544/    104C : =$E                 vcD1R2 set $0E
     544/    104C : =$11                vcD1R3 set $11
     544/    104C : =$12                vcD1R4 set $12
     545/    104C : (MACRO)             	smpsVcDecayRate2    $09, $07, $0A, $00
     545/    104C : =$9                 vcD2R1 set $09
     545/    104C : =$7                 vcD2R2 set $07
     545/    104C : =$A                 vcD2R3 set $0A
     545/    104C : =$0                 vcD2R4 set $00
     546/    104C : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $0F
     546/    104C : =$0                 vcDL1 set $00
     546/    104C : =$1                 vcDL2 set $01
     546/    104C : =$0                 vcDL3 set $00
     546/    104C : =$F                 vcDL4 set $0F
     547/    104C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
     547/    104C : =$F                 vcRR1 set $0F
     547/    104C : =$F                 vcRR2 set $0F
     547/    104C : =$F                 vcRR3 set $0F
     547/    104C : =$F                 vcRR4 set $0F
     548/    104C : (MACRO)             	smpsVcTotalLevel    $12, $12, $12, $18
     548/    104C : =$12                vcTL1 set $12
     548/    104C : =$12                vcTL2 set $12
     548/    104C : =$12                vcTL3 set $12
     548/    104C : =$18                vcTL4 set $18
     548/    104C : 3600                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     548/    104E :                     ;   0     1     2     3     4     5     6     7
     548/    104E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     548/    104E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     548/    104E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
     548/    104E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
     548/    104E : =$80                vcTLMask1 set $80
     548/    104E : =>FALSE                     if SonicDriverVer==2
     548/    104E :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     548/    104E :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     548/    104E :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     548/    104E :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 38 - 2/2/2019 16:35:13


     548/    104E :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     548/    104E :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     548/    104E : =>TRUE                      else
     548/    104E : 0F01 0101                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     548/    1052 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     548/    1056 : 1211 0E00                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     548/    105A : 000A 0709                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     548/    105E : FF0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     548/    1062 : 1892 9292                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     548/    1066 : [548]                       endif
     549/    1066 :                     
     550/    1066 :                     ;	Voice $03
     551/    1066 :                     ;	$3F
     552/    1066 :                     ;	$00, $32, $00, $76, 	$1F, $1F, $1F, $1F, 	$0E, $0E, $0E, $10
     553/    1066 :                     ;	$0A, $0A, $0A, $0A, 	$03, $58, $38, $38, 	$16, $0B, $0A, $0B
     554/    1066 : (MACRO)             	smpsVcAlgorithm     $07
     554/    1066 : =$7                 vcAlgorithm set $07
     555/    1066 : (MACRO)             	smpsVcFeedback      $07
     555/    1066 : =$7                 vcFeedback set $07
     556/    1066 : (MACRO)             	smpsVcUnusedBits    $00
     556/    1066 : =$0                 vcUnusedBits set $00
     557/    1066 : (MACRO)             	smpsVcDetune        $07, $00, $03, $00
     557/    1066 : =$7                 vcDT1 set $07
     557/    1066 : =$0                 vcDT2 set $00
     557/    1066 : =$3                 vcDT3 set $03
     557/    1066 : =$0                 vcDT4 set $00
     558/    1066 : (MACRO)             	smpsVcCoarseFreq    $06, $00, $02, $00
     558/    1066 : =$6                 vcCF1 set $06
     558/    1066 : =$0                 vcCF2 set $00
     558/    1066 : =$2                 vcCF3 set $02
     558/    1066 : =$0                 vcCF4 set $00
     559/    1066 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
     559/    1066 : =$0                 vcRS1 set $00
     559/    1066 : =$0                 vcRS2 set $00
     559/    1066 : =$0                 vcRS3 set $00
     559/    1066 : =$0                 vcRS4 set $00
     560/    1066 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
     560/    1066 : =$1F                vcAR1 set $1F
     560/    1066 : =$1F                vcAR2 set $1F
     560/    1066 : =$1F                vcAR3 set $1F
     560/    1066 : =$1F                vcAR4 set $1F
     561/    1066 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     561/    1066 : =$0                 vcAM1 set $00
     561/    1066 : =$0                 vcAM2 set $00
     561/    1066 : =$0                 vcAM3 set $00
     561/    1066 : =$0                 vcAM4 set $00
     562/    1066 : (MACRO)             	smpsVcDecayRate1    $10, $0E, $0E, $0E
     562/    1066 : =$10                vcD1R1 set $10
     562/    1066 : =$E                 vcD1R2 set $0E
     562/    1066 : =$E                 vcD1R3 set $0E
     562/    1066 : =$E                 vcD1R4 set $0E
     563/    1066 : (MACRO)             	smpsVcDecayRate2    $0A, $0A, $0A, $0A
     563/    1066 : =$A                 vcD2R1 set $0A
     563/    1066 : =$A                 vcD2R2 set $0A
     563/    1066 : =$A                 vcD2R3 set $0A
     563/    1066 : =$A                 vcD2R4 set $0A
     564/    1066 : (MACRO)             	smpsVcDecayLevel    $03, $03, $05, $00
     564/    1066 : =$3                 vcDL1 set $03
     564/    1066 : =$3                 vcDL2 set $03
     564/    1066 : =$5                 vcDL3 set $05
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 39 - 2/2/2019 16:35:13


     564/    1066 : =$0                 vcDL4 set $00
     565/    1066 : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $03
     565/    1066 : =$8                 vcRR1 set $08
     565/    1066 : =$8                 vcRR2 set $08
     565/    1066 : =$8                 vcRR3 set $08
     565/    1066 : =$3                 vcRR4 set $03
     566/    1066 : (MACRO)             	smpsVcTotalLevel    $0B, $0A, $0B, $16
     566/    1066 : =$B                 vcTL1 set $0B
     566/    1066 : =$A                 vcTL2 set $0A
     566/    1066 : =$B                 vcTL3 set $0B
     566/    1066 : =$16                vcTL4 set $16
     566/    1066 : 3F00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     566/    1068 :                     ;   0     1     2     3     4     5     6     7
     566/    1068 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     566/    1068 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
     566/    1068 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
     566/    1068 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
     566/    1068 : =$80                vcTLMask1 set $80
     566/    1068 : =>FALSE                     if SonicDriverVer==2
     566/    1068 :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     566/    1068 :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     566/    1068 :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     566/    1068 :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     566/    1068 :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     566/    1068 :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     566/    1068 : =>TRUE                      else
     566/    1068 : 0032 0076                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     566/    106C : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     566/    1070 : 0E0E 0E10                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     566/    1074 : 0A0A 0A0A                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     566/    1078 : 0358 3838                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     566/    107C : 968B 8A8B                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     566/    1080 : [566]                       endif
     567/    1080 :                     
     568/    1080 :                     ;	Voice $04
     569/    1080 :                     ;	$2C
     570/    1080 :                     ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
     571/    1080 :                     ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$17, $08, $17, $12
     572/    1080 : (MACRO)             	smpsVcAlgorithm     $04
     572/    1080 : =$4                 vcAlgorithm set $04
     573/    1080 : (MACRO)             	smpsVcFeedback      $05
     573/    1080 : =$5                 vcFeedback set $05
     574/    1080 : (MACRO)             	smpsVcUnusedBits    $00
     574/    1080 : =$0                 vcUnusedBits set $00
     575/    1080 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
     575/    1080 : =$3                 vcDT1 set $03
     575/    1080 : =$3                 vcDT2 set $03
     575/    1080 : =$7                 vcDT3 set $07
     575/    1080 : =$7                 vcDT4 set $07
     576/    1080 : (MACRO)             	smpsVcCoarseFreq    $04, $04, $08, $02
     576/    1080 : =$4                 vcCF1 set $04
     576/    1080 : =$4                 vcCF2 set $04
     576/    1080 : =$8                 vcCF3 set $08
     576/    1080 : =$2                 vcCF4 set $02
     577/    1080 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
     577/    1080 : =$0                 vcRS1 set $00
     577/    1080 : =$0                 vcRS2 set $00
     577/    1080 : =$0                 vcRS3 set $00
     577/    1080 : =$0                 vcRS4 set $00
     578/    1080 : (MACRO)             	smpsVcAttackRate    $12, $1F, $12, $1F
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 40 - 2/2/2019 16:35:13


     578/    1080 : =$12                vcAR1 set $12
     578/    1080 : =$1F                vcAR2 set $1F
     578/    1080 : =$12                vcAR3 set $12
     578/    1080 : =$1F                vcAR4 set $1F
     579/    1080 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     579/    1080 : =$0                 vcAM1 set $00
     579/    1080 : =$0                 vcAM2 set $00
     579/    1080 : =$0                 vcAM3 set $00
     579/    1080 : =$0                 vcAM4 set $00
     580/    1080 : (MACRO)             	smpsVcDecayRate1    $0A, $00, $0A, $00
     580/    1080 : =$A                 vcD1R1 set $0A
     580/    1080 : =$0                 vcD1R2 set $00
     580/    1080 : =$A                 vcD1R3 set $0A
     580/    1080 : =$0                 vcD1R4 set $00
     581/    1080 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
     581/    1080 : =$0                 vcD2R1 set $00
     581/    1080 : =$0                 vcD2R2 set $00
     581/    1080 : =$0                 vcD2R3 set $00
     581/    1080 : =$0                 vcD2R4 set $00
     582/    1080 : (MACRO)             	smpsVcDecayLevel    $01, $00, $01, $00
     582/    1080 : =$1                 vcDL1 set $01
     582/    1080 : =$0                 vcDL2 set $00
     582/    1080 : =$1                 vcDL3 set $01
     582/    1080 : =$0                 vcDL4 set $00
     583/    1080 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
     583/    1080 : =$F                 vcRR1 set $0F
     583/    1080 : =$F                 vcRR2 set $0F
     583/    1080 : =$F                 vcRR3 set $0F
     583/    1080 : =$F                 vcRR4 set $0F
     584/    1080 : (MACRO)             	smpsVcTotalLevel    $12, $17, $08, $17
     584/    1080 : =$12                vcTL1 set $12
     584/    1080 : =$17                vcTL2 set $17
     584/    1080 : =$8                 vcTL3 set $08
     584/    1080 : =$17                vcTL4 set $17
     584/    1080 : 2C00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     584/    1082 :                     ;   0     1     2     3     4     5     6     7
     584/    1082 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     584/    1082 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     584/    1082 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
     584/    1082 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     584/    1082 : =$80                vcTLMask1 set $80
     584/    1082 : =>FALSE                     if SonicDriverVer==2
     584/    1082 :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     584/    1082 :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     584/    1082 :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     584/    1082 :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     584/    1082 :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     584/    1082 :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     584/    1082 : =>TRUE                      else
     584/    1082 : 7278 3434                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     584/    1086 : 1F12 1F12                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     584/    108A : 000A 000A                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     584/    108E : 0000 0000                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     584/    1092 : 0F1F 0F1F                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     584/    1096 : 1788 1792                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     584/    109A : [584]                       endif
     585/    109A :                     
     586/    109A :                     ;	Voice $05
     587/    109A :                     ;	$2B
     588/    109A :                     ;	$32, $32, $04, $72, 	$14, $0E, $12, $4E, 	$00, $10, $12, $0C
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 41 - 2/2/2019 16:35:13


     589/    109A :                     ;	$00, $00, $00, $00, 	$0A, $5A, $3A, $1A, 	$1C, $28, $22, $00
     590/    109A : (MACRO)             	smpsVcAlgorithm     $03
     590/    109A : =$3                 vcAlgorithm set $03
     591/    109A : (MACRO)             	smpsVcFeedback      $05
     591/    109A : =$5                 vcFeedback set $05
     592/    109A : (MACRO)             	smpsVcUnusedBits    $00
     592/    109A : =$0                 vcUnusedBits set $00
     593/    109A : (MACRO)             	smpsVcDetune        $07, $00, $03, $03
     593/    109A : =$7                 vcDT1 set $07
     593/    109A : =$0                 vcDT2 set $00
     593/    109A : =$3                 vcDT3 set $03
     593/    109A : =$3                 vcDT4 set $03
     594/    109A : (MACRO)             	smpsVcCoarseFreq    $02, $04, $02, $02
     594/    109A : =$2                 vcCF1 set $02
     594/    109A : =$4                 vcCF2 set $04
     594/    109A : =$2                 vcCF3 set $02
     594/    109A : =$2                 vcCF4 set $02
     595/    109A : (MACRO)             	smpsVcRateScale     $01, $00, $00, $00
     595/    109A : =$1                 vcRS1 set $01
     595/    109A : =$0                 vcRS2 set $00
     595/    109A : =$0                 vcRS3 set $00
     595/    109A : =$0                 vcRS4 set $00
     596/    109A : (MACRO)             	smpsVcAttackRate    $0E, $12, $0E, $14
     596/    109A : =$E                 vcAR1 set $0E
     596/    109A : =$12                vcAR2 set $12
     596/    109A : =$E                 vcAR3 set $0E
     596/    109A : =$14                vcAR4 set $14
     597/    109A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     597/    109A : =$0                 vcAM1 set $00
     597/    109A : =$0                 vcAM2 set $00
     597/    109A : =$0                 vcAM3 set $00
     597/    109A : =$0                 vcAM4 set $00
     598/    109A : (MACRO)             	smpsVcDecayRate1    $0C, $12, $10, $00
     598/    109A : =$C                 vcD1R1 set $0C
     598/    109A : =$12                vcD1R2 set $12
     598/    109A : =$10                vcD1R3 set $10
     598/    109A : =$0                 vcD1R4 set $00
     599/    109A : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
     599/    109A : =$0                 vcD2R1 set $00
     599/    109A : =$0                 vcD2R2 set $00
     599/    109A : =$0                 vcD2R3 set $00
     599/    109A : =$0                 vcD2R4 set $00
     600/    109A : (MACRO)             	smpsVcDecayLevel    $01, $03, $05, $00
     600/    109A : =$1                 vcDL1 set $01
     600/    109A : =$3                 vcDL2 set $03
     600/    109A : =$5                 vcDL3 set $05
     600/    109A : =$0                 vcDL4 set $00
     601/    109A : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $0A
     601/    109A : =$A                 vcRR1 set $0A
     601/    109A : =$A                 vcRR2 set $0A
     601/    109A : =$A                 vcRR3 set $0A
     601/    109A : =$A                 vcRR4 set $0A
     602/    109A : (MACRO)             	smpsVcTotalLevel    $00, $22, $28, $1C
     602/    109A : =$0                 vcTL1 set $00
     602/    109A : =$22                vcTL2 set $22
     602/    109A : =$28                vcTL3 set $28
     602/    109A : =$1C                vcTL4 set $1C
     602/    109A : 2B00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     602/    109C :                     ;   0     1     2     3     4     5     6     7
     602/    109C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 42 - 2/2/2019 16:35:13


     602/    109C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     602/    109C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
     602/    109C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     602/    109C : =$80                vcTLMask1 set $80
     602/    109C : =>FALSE                     if SonicDriverVer==2
     602/    109C :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     602/    109C :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     602/    109C :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     602/    109C :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     602/    109C :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     602/    109C :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     602/    109C : =>TRUE                      else
     602/    109C : 3232 0472                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     602/    10A0 : 140E 124E                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     602/    10A4 : 0010 120C                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     602/    10A8 : 0000 0000                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     602/    10AC : 0A5A 3A1A                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     602/    10B0 : 1C28 2280                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     602/    10B4 : [602]                       endif
     603/    10B4 :                     
     604/    10B4 :                     ;	Voice $06
     605/    10B4 :                     ;	$08
     606/    10B4 :                     ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
     607/    10B4 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $06
     608/    10B4 : (MACRO)             	smpsVcAlgorithm     $00
     608/    10B4 : =$0                 vcAlgorithm set $00
     609/    10B4 : (MACRO)             	smpsVcFeedback      $01
     609/    10B4 : =$1                 vcFeedback set $01
     610/    10B4 : (MACRO)             	smpsVcUnusedBits    $00
     610/    10B4 : =$0                 vcUnusedBits set $00
     611/    10B4 : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
     611/    10B4 : =$0                 vcDT1 set $00
     611/    10B4 : =$3                 vcDT2 set $03
     611/    10B4 : =$7                 vcDT3 set $07
     611/    10B4 : =$0                 vcDT4 set $00
     612/    10B4 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $0A
     612/    10B4 : =$0                 vcCF1 set $00
     612/    10B4 : =$0                 vcCF2 set $00
     612/    10B4 : =$0                 vcCF3 set $00
     612/    10B4 : =$A                 vcCF4 set $0A
     613/    10B4 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
     613/    10B4 : =$1                 vcRS1 set $01
     613/    10B4 : =$1                 vcRS2 set $01
     613/    10B4 : =$0                 vcRS3 set $00
     613/    10B4 : =$0                 vcRS4 set $00
     614/    10B4 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
     614/    10B4 : =$1F                vcAR1 set $1F
     614/    10B4 : =$1F                vcAR2 set $1F
     614/    10B4 : =$1F                vcAR3 set $1F
     614/    10B4 : =$1F                vcAR4 set $1F
     615/    10B4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     615/    10B4 : =$0                 vcAM1 set $00
     615/    10B4 : =$0                 vcAM2 set $00
     615/    10B4 : =$0                 vcAM3 set $00
     615/    10B4 : =$0                 vcAM4 set $00
     616/    10B4 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
     616/    10B4 : =$A                 vcD1R1 set $0A
     616/    10B4 : =$A                 vcD1R2 set $0A
     616/    10B4 : =$E                 vcD1R3 set $0E
     616/    10B4 : =$12                vcD1R4 set $12
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 43 - 2/2/2019 16:35:13


     617/    10B4 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
     617/    10B4 : =$3                 vcD2R1 set $03
     617/    10B4 : =$4                 vcD2R2 set $04
     617/    10B4 : =$4                 vcD2R3 set $04
     617/    10B4 : =$0                 vcD2R4 set $00
     618/    10B4 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
     618/    10B4 : =$2                 vcDL1 set $02
     618/    10B4 : =$2                 vcDL2 set $02
     618/    10B4 : =$2                 vcDL3 set $02
     618/    10B4 : =$2                 vcDL4 set $02
     619/    10B4 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
     619/    10B4 : =$F                 vcRR1 set $0F
     619/    10B4 : =$F                 vcRR2 set $0F
     619/    10B4 : =$F                 vcRR3 set $0F
     619/    10B4 : =$F                 vcRR4 set $0F
     620/    10B4 : (MACRO)             	smpsVcTotalLevel    $06, $13, $2D, $24
     620/    10B4 : =$6                 vcTL1 set $06
     620/    10B4 : =$13                vcTL2 set $13
     620/    10B4 : =$2D                vcTL3 set $2D
     620/    10B4 : =$24                vcTL4 set $24
     620/    10B4 : 0800                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     620/    10B6 :                     ;   0     1     2     3     4     5     6     7
     620/    10B6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     620/    10B6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     620/    10B6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
     620/    10B6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     620/    10B6 : =$80                vcTLMask1 set $80
     620/    10B6 : =>FALSE                     if SonicDriverVer==2
     620/    10B6 :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     620/    10B6 :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     620/    10B6 :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     620/    10B6 :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     620/    10B6 :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     620/    10B6 :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     620/    10B6 : =>TRUE                      else
     620/    10B6 : 0A70 3000                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     620/    10BA : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     620/    10BE : 120E 0A0A                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     620/    10C2 : 0004 0403                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     620/    10C6 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     620/    10CA : 242D 1386                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     620/    10CE : [620]                       endif
     621/    10CE :                     
     622/    10CE :                     ;	Voice $07
     623/    10CE :                     ;	$2C
     624/    10CE :                     ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
     625/    10CE :                     ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $12, $17, $00
     626/    10CE : (MACRO)             	smpsVcAlgorithm     $04
     626/    10CE : =$4                 vcAlgorithm set $04
     627/    10CE : (MACRO)             	smpsVcFeedback      $05
     627/    10CE : =$5                 vcFeedback set $05
     628/    10CE : (MACRO)             	smpsVcUnusedBits    $00
     628/    10CE : =$0                 vcUnusedBits set $00
     629/    10CE : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
     629/    10CE : =$3                 vcDT1 set $03
     629/    10CE : =$3                 vcDT2 set $03
     629/    10CE : =$7                 vcDT3 set $07
     629/    10CE : =$7                 vcDT4 set $07
     630/    10CE : (MACRO)             	smpsVcCoarseFreq    $04, $04, $04, $04
     630/    10CE : =$4                 vcCF1 set $04
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 44 - 2/2/2019 16:35:13


     630/    10CE : =$4                 vcCF2 set $04
     630/    10CE : =$4                 vcCF3 set $04
     630/    10CE : =$4                 vcCF4 set $04
     631/    10CE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
     631/    10CE : =$0                 vcRS1 set $00
     631/    10CE : =$0                 vcRS2 set $00
     631/    10CE : =$0                 vcRS3 set $00
     631/    10CE : =$0                 vcRS4 set $00
     632/    10CE : (MACRO)             	smpsVcAttackRate    $1F, $1F, $12, $1F
     632/    10CE : =$1F                vcAR1 set $1F
     632/    10CE : =$1F                vcAR2 set $1F
     632/    10CE : =$12                vcAR3 set $12
     632/    10CE : =$1F                vcAR4 set $1F
     633/    10CE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     633/    10CE : =$0                 vcAM1 set $00
     633/    10CE : =$0                 vcAM2 set $00
     633/    10CE : =$0                 vcAM3 set $00
     633/    10CE : =$0                 vcAM4 set $00
     634/    10CE : (MACRO)             	smpsVcDecayRate1    $07, $00, $07, $00
     634/    10CE : =$7                 vcD1R1 set $07
     634/    10CE : =$0                 vcD1R2 set $00
     634/    10CE : =$7                 vcD1R3 set $07
     634/    10CE : =$0                 vcD1R4 set $00
     635/    10CE : (MACRO)             	smpsVcDecayRate2    $07, $00, $07, $00
     635/    10CE : =$7                 vcD2R1 set $07
     635/    10CE : =$0                 vcD2R2 set $00
     635/    10CE : =$7                 vcD2R3 set $07
     635/    10CE : =$0                 vcD2R4 set $00
     636/    10CE : (MACRO)             	smpsVcDecayLevel    $03, $00, $03, $00
     636/    10CE : =$3                 vcDL1 set $03
     636/    10CE : =$0                 vcDL2 set $00
     636/    10CE : =$3                 vcDL3 set $03
     636/    10CE : =$0                 vcDL4 set $00
     637/    10CE : (MACRO)             	smpsVcReleaseRate   $08, $00, $08, $00
     637/    10CE : =$8                 vcRR1 set $08
     637/    10CE : =$0                 vcRR2 set $00
     637/    10CE : =$8                 vcRR3 set $08
     637/    10CE : =$0                 vcRR4 set $00
     638/    10CE : (MACRO)             	smpsVcTotalLevel    $00, $17, $12, $16
     638/    10CE : =$0                 vcTL1 set $00
     638/    10CE : =$17                vcTL2 set $17
     638/    10CE : =$12                vcTL3 set $12
     638/    10CE : =$16                vcTL4 set $16
     638/    10CE : 2C00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     638/    10D0 :                     ;   0     1     2     3     4     5     6     7
     638/    10D0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     638/    10D0 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     638/    10D0 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
     638/    10D0 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     638/    10D0 : =$80                vcTLMask1 set $80
     638/    10D0 : =>FALSE                     if SonicDriverVer==2
     638/    10D0 :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     638/    10D0 :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     638/    10D0 :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     638/    10D0 :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     638/    10D0 :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     638/    10D0 :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     638/    10D0 : =>TRUE                      else
     638/    10D0 : 7474 3434                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     638/    10D4 : 1F12 1F1F                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 45 - 2/2/2019 16:35:13


     638/    10D8 : 0007 0007                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     638/    10DC : 0007 0007                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     638/    10E0 : 0038 0038                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     638/    10E4 : 1692 1780                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     638/    10E8 : [638]                       endif
     639/    10E8 :                     
     640/    10E8 :                     ;	Voice $08
     641/    10E8 :                     ;	$3A
     642/    10E8 :                     ;	$32, $08, $72, $02, 	$12, $4E, $14, $11, 	$04, $0E, $00, $04
     643/    10E8 :                     ;	$06, $04, $08, $07, 	$18, $58, $08, $3F, 	$1B, $21, $24, $00
     644/    10E8 : (MACRO)             	smpsVcAlgorithm     $02
     644/    10E8 : =$2                 vcAlgorithm set $02
     645/    10E8 : (MACRO)             	smpsVcFeedback      $07
     645/    10E8 : =$7                 vcFeedback set $07
     646/    10E8 : (MACRO)             	smpsVcUnusedBits    $00
     646/    10E8 : =$0                 vcUnusedBits set $00
     647/    10E8 : (MACRO)             	smpsVcDetune        $00, $07, $00, $03
     647/    10E8 : =$0                 vcDT1 set $00
     647/    10E8 : =$7                 vcDT2 set $07
     647/    10E8 : =$0                 vcDT3 set $00
     647/    10E8 : =$3                 vcDT4 set $03
     648/    10E8 : (MACRO)             	smpsVcCoarseFreq    $02, $02, $08, $02
     648/    10E8 : =$2                 vcCF1 set $02
     648/    10E8 : =$2                 vcCF2 set $02
     648/    10E8 : =$8                 vcCF3 set $08
     648/    10E8 : =$2                 vcCF4 set $02
     649/    10E8 : (MACRO)             	smpsVcRateScale     $00, $00, $01, $00
     649/    10E8 : =$0                 vcRS1 set $00
     649/    10E8 : =$0                 vcRS2 set $00
     649/    10E8 : =$1                 vcRS3 set $01
     649/    10E8 : =$0                 vcRS4 set $00
     650/    10E8 : (MACRO)             	smpsVcAttackRate    $11, $14, $0E, $12
     650/    10E8 : =$11                vcAR1 set $11
     650/    10E8 : =$14                vcAR2 set $14
     650/    10E8 : =$E                 vcAR3 set $0E
     650/    10E8 : =$12                vcAR4 set $12
     651/    10E8 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
     651/    10E8 : =$0                 vcAM1 set $00
     651/    10E8 : =$0                 vcAM2 set $00
     651/    10E8 : =$0                 vcAM3 set $00
     651/    10E8 : =$0                 vcAM4 set $00
     652/    10E8 : (MACRO)             	smpsVcDecayRate1    $04, $00, $0E, $04
     652/    10E8 : =$4                 vcD1R1 set $04
     652/    10E8 : =$0                 vcD1R2 set $00
     652/    10E8 : =$E                 vcD1R3 set $0E
     652/    10E8 : =$4                 vcD1R4 set $04
     653/    10E8 : (MACRO)             	smpsVcDecayRate2    $07, $08, $04, $06
     653/    10E8 : =$7                 vcD2R1 set $07
     653/    10E8 : =$8                 vcD2R2 set $08
     653/    10E8 : =$4                 vcD2R3 set $04
     653/    10E8 : =$6                 vcD2R4 set $06
     654/    10E8 : (MACRO)             	smpsVcDecayLevel    $03, $00, $05, $01
     654/    10E8 : =$3                 vcDL1 set $03
     654/    10E8 : =$0                 vcDL2 set $00
     654/    10E8 : =$5                 vcDL3 set $05
     654/    10E8 : =$1                 vcDL4 set $01
     655/    10E8 : (MACRO)             	smpsVcReleaseRate   $0F, $08, $08, $08
     655/    10E8 : =$F                 vcRR1 set $0F
     655/    10E8 : =$8                 vcRR2 set $08
     655/    10E8 : =$8                 vcRR3 set $08
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 46 - 2/2/2019 16:35:13


     655/    10E8 : =$8                 vcRR4 set $08
     656/    10E8 : (MACRO)             	smpsVcTotalLevel    $00, $24, $21, $1B
     656/    10E8 : =$0                 vcTL1 set $00
     656/    10E8 : =$24                vcTL2 set $24
     656/    10E8 : =$21                vcTL3 set $21
     656/    10E8 : =$1B                vcTL4 set $1B
     656/    10E8 : 3A00                        dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
     656/    10EA :                     ;   0     1     2     3     4     5     6     7
     656/    10EA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
     656/    10EA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
     656/    10EA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
     656/    10EA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
     656/    10EA : =$80                vcTLMask1 set $80
     656/    10EA : =>FALSE                     if SonicDriverVer==2
     656/    10EA :                                     dc.b    (vcDT4<<4)+vcCF4 ,(vcDT2<<4)+vcCF2 ,(vcDT3<<4)+vcCF3 ,(vcDT1<<4)+vcCF1
     656/    10EA :                                     dc.b    (vcRS4<<6)+vcAR4 ,(vcRS2<<6)+vcAR2 ,(vcRS3<<6)+vcAR3 ,(vcRS1<<6)+vcAR1
     656/    10EA :                                     dc.b    (vcAM4<<5)+vcD1R4,(vcAM2<<5)+vcD1R2,(vcAM3<<5)+vcD1R3,(vcAM1<<5)+vcD1R1
     656/    10EA :                                     dc.b    vcD2R4           ,vcD2R2           ,vcD2R3           ,vcD2R1
     656/    10EA :                                     dc.b    (vcDL4<<4)+vcRR4 ,(vcDL2<<4)+vcRR2 ,(vcDL3<<4)+vcRR3 ,(vcDL1<<4)+vcRR1
     656/    10EA :                                     dc.b    vcTL4|vcTLMask4  ,vcTL2|vcTLMask2  ,vcTL3|vcTLMask3  ,vcTL1|vcTLMask1
     656/    10EA : =>TRUE                      else
     656/    10EA : 3208 7202                           dc.b    (vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
     656/    10EE : 124E 1411                           dc.b    (vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
     656/    10F2 : 040E 0004                           dc.b    (vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
     656/    10F6 : 0604 0807                           dc.b    vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
     656/    10FA : 1858 083F                           dc.b    (vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
     656/    10FE : 1B21 2480                           dc.b    vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
     656/    1102 : [656]                       endif
     657/    1102 :                     
     658/    1102 :                     
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 47 - 2/2/2019 16:35:13


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CFM3 :                           2 - | *CFM4 :                           4 - |
*CFM5 :                           5 - | *CFM6 :                           6 - |
*CNOISE :                        E0 - | *CONSTPI :        3.141592653589793 - |
*CPSG1 :                         80 - | *CPSG2 :                         A0 - |
*CPSG3 :                         C0 - | *DATE :                    2/2/2019 - |
*DBASSHEY :                      B6 - | *DCLAP :                         C7 - |
*DCLAPS3 :                       8F - | *DCLICK :                        9C - |
*DCOMEON :                       A5 - | *DCRASHCYMBAL :                  88 - |
*DCRASHINGNOISEWOO :             BE - | *DDANCESNARE :                   A6 - |
*DDANCESTYLEKICK :               B7 - |  DECHOEDCLAPHIT :                B2 - |
*DECHOEDCLAPHIT_S3 :             D8 - |  DELECTRICFLOORTOM :             93 - |
 DELECTRICHIGHTOM :              90 - | *DELECTRICLOWTOM :               92 - |
*DELECTRICMIDTOM :               91 - | *DFINALFIGHTMETALCRASH :         D6 - |
*DFLOORTOM :                     D2 - | *DFLOORTOMS3 :                   85 - |
*DGLASSCRASH :                   A0 - | *DGLASSCRASHKICK :               A1 - |
*DGLASSCRASHSNARE :              9F - | *DGO :                           AA - |
 DHICLAP :                       D3 - | *DHIGHERMETALHIT :               8D - |
 DHIGHMETALHIT :                 8C - | *DHIGHTOM :                      82 - |
*DHIHITDRUM :                    AF - | *DHIPHOPHITKICK :                B4 - |
*DHIPHOPHITKICK2 :               B8 - |  DHIPHOPHITKICK3 :               B9 - |
 DHIPHOPHITPOWERKICK :           B5 - | *DHITIMPANI :                    CC - |
*DHITIMPANIS3 :                  98 - | *DHITOM :                        CA - |
*DHIWOODBLOCK :                  AD - |  DINTROKICK :                    D7 - |
 DKICK :                         C5 - | *DKICKEXTRABASS :                A4 - |
*DKICKHEY :                      C0 - | *DKICKS3 :                       86 - |
 DLOOSEKICK :                    A7 - |  DLOOSERSNARE :                  97 - |
*DLOOSESNARE :                   96 - | *DLOOSESNARENOISE :              BC - |
 DLOWCLAP :                      D5 - | *DLOWERECHOEDCLAPHIT :           B3 - |
*DLOWERECHOEDCLAPHIT_S3 :        D9 - | *DLOWERPOWERKICKHIT :            C3 - |
 DLOWESTPOWERKICKHIT :           C4 - | *DLOWHITDRUM :                   B0 - |
*DLOWMETALHIT :                  8A - | *DLOWPOWERKICKHIT :              C2 - |
*DLOWTIMPANI :                   CE - | *DLOWTIMPANIS3 :                 99 - |
*DLOWTOM :                       D1 - | *DLOWTOMS3 :                     84 - |
 DLOWWOODBLOCK :                 AE - | *DMETALCRASHHIT :                B1 - |
*DMETALHIT :                     8B - | *DMIDCLAP :                      D4 - |
*DMIDMETALHIT :                  8E - | *DMIDPITCHSNARE :                95 - |
 DMIDTIMPANI :                   CD - | *DMIDTIMPANIS3 :                 9A - |
*DMIDTOM :                       D0 - | *DMIDTOMS3 :                     83 - |
*DMODLOOSEKICK :                 A8 - |  DMUFFLEDSNARE :                 87 - |
*DODDSNAREKICK :                 A3 - | *DPOWERKICK :                    9D - |
 DPOWERKICK2 :                   BD - |  DPOWERKICKHIT :                 C1 - |
*DPOWERTOM :                     AC - |  DQUICKGLASSCRASH :              9E - |
*DQUICKHIT :                     BF - |  DQUICKLOOSESNARE :              9B - |
 DQUIETGLASSCRASH :              A2 - | *DREVERSEFADINGWIND :            BA - |
*DRIDECYMBAL :                   89 - | *DSCRATCH :                      C8 - |
*DSCRATCHS3 :                    BB - | *DSNARE :                        C6 - |
*DSNAREGO :                      AB - | *DSNARES3 :                      81 - |
*DTIGHTSNARE :                   94 - | *DTIMPANI :                      C9 - |
*DVLOWCLAP :                     CB - | *DVLOWTIMPANI :                  CF - |
*DWOO :                          A9 - | *FALSE :                          0 - |
*FTONE_01 :                      28 - | *FTONE_02 :                      29 - |
*FTONE_03 :                      2A - | *FTONE_04 :                      2B - |
*FTONE_05 :                      2C - |  FTONE_06 :                      2D - |
*FTONE_07 :                      2E - | *FTONE_08 :                      2F - |
*FTONE_09 :                      30 - | *FTONE_0A :                      31 - |
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 48 - 2/2/2019 16:35:13


*FTONE_0B :                      32 - |  FTONE_0C :                      33 - |
*FTONE_0D :                      34 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - |  MANIAX_DAC :                  1016 C |
 MANIAX_FM1 :                    50 C |  MANIAX_FM2 :                   2CE C |
 MANIAX_FM3 :                   456 C |  MANIAX_FM4 :                   6E8 C |
 MANIAX_FM5 :                   84C C |  MANIAX_FM6 :                   8B8 C |
*MANIAX_HEADER :                  0 C |  MANIAX_JUMP00 :                8BE C |
 MANIAX_JUMP01 :                852 C |  MANIAX_JUMP02 :                6EE C |
 MANIAX_JUMP03 :                45C C |  MANIAX_JUMP04 :                2E0 C |
 MANIAX_JUMP05 :                 62 C |  MANIAX_JUMP06 :                E74 C |
 MANIAX_JUMP07 :                D48 C |  MANIAX_JUMP08 :                ABE C |
 MANIAX_PSG1 :                  ABC C |  MANIAX_PSG2 :                  D40 C |
 MANIAX_PSG3 :                  E6E C |  MANIAX_VOICES :               1018 C |
*MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
*NA0 :                           8A - |  NA1 :                           96 - |
 NA2 :                           A2 - |  NA3 :                           AE - |
 NA4 :                           BA - |  NA5 :                           C6 - |
 NA6 :                           D2 - | *NA7 :                           DE - |
*NAB0 :                          89 - | *NAB1 :                          95 - |
 NAB2 :                          A1 - | *NAB3 :                          AD - |
 NAB4 :                          B9 - |  NAB5 :                          C5 - |
*NAB6 :                          D1 - | *NAB7 :                          DD - |
*NB0 :                           8C - |  NB1 :                           98 - |
 NB2 :                           A4 - |  NB3 :                           B0 - |
 NB4 :                           BC - |  NB5 :                           C8 - |
 NB6 :                           D4 - | *NBB0 :                          8B - |
 NBB1 :                          97 - |  NBB2 :                          A3 - |
 NBB3 :                          AF - |  NBB4 :                          BB - |
 NBB5 :                          C7 - |  NBB6 :                          D3 - |
*NBB7 :                          DF - | *NC0 :                           81 - |
*NC1 :                           8D - |  NC2 :                           99 - |
 NC3 :                           A5 - |  NC4 :                           B1 - |
 NC5 :                           BD - |  NC6 :                           C9 - |
 NC7 :                           D5 - | *NCS0 :                          82 - |
*NCS1 :                          8E - | *NCS2 :                          9A - |
*NCS3 :                          A6 - |  NCS4 :                          B2 - |
 NCS5 :                          BE - | *NCS6 :                          CA - |
*NCS7 :                          D6 - | *ND0 :                           83 - |
 ND1 :                           8F - |  ND2 :                           9B - |
 ND3 :                           A7 - |  ND4 :                           B3 - |
 ND5 :                           BF - |  ND6 :                           CB - |
*ND7 :                           D7 - | *NE0 :                           85 - |
*NE1 :                           91 - |  NE2 :                           9D - |
 NE3 :                           A9 - |  NE4 :                           B5 - |
 NE5 :                           C1 - |  NE6 :                           CD - |
*NE7 :                           D9 - | *NEB0 :                          84 - |
*NEB1 :                          90 - |  NEB2 :                          9C - |
 NEB3 :                          A8 - |  NEB4 :                          B4 - |
 NEB5 :                          C0 - | *NEB6 :                          CC - |
*NEB7 :                          D8 - | *NESTMAX :                      100 - |
*NF0 :                           86 - | *NF1 :                           92 - |
 NF2 :                           9E - |  NF3 :                           AA - |
 NF4 :                           B6 - |  NF5 :                           C2 - |
 NF6 :                           CE - | *NF7 :                           DA - |
*NFS0 :                          87 - | *NFS1 :                          93 - |
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 49 - 2/2/2019 16:35:13


 NFS2 :                          9F - |  NFS3 :                          AB - |
 NFS4 :                          B7 - |  NFS5 :                          C3 - |
 NFS6 :                          CF - | *NFS7 :                          DB - |
*NG0 :                           88 - | *NG1 :                           94 - |
 NG2 :                           A0 - |  NG3 :                           AC - |
 NG4 :                           B8 - |  NG5 :                           C4 - |
 NG6 :                           D0 - | *NG7 :                           DC - |
*NMAXPSG :                       C7 - | *NMAXPSG1 :                      D3 - |
*NMAXPSG2 :                      D4 - |  NRST :                          80 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PANCENTER :                     C0 - | *PANCENTRE :                     C0 - |
 PANLEFT :                       80 - | *PANNONE :                        0 - |
*PANRIGHT :                      40 - |  PSGDELTA :                       C - |
*RELAXED :                        0 - | *SMPSNOATTACK :                  E7 - |
*SMPSPITCH00 :                    0 - | *SMPSPITCH01HI :                  C - |
*SMPSPITCH01LO :                 F4 - | *SMPSPITCH02HI :                 18 - |
*SMPSPITCH02LO :                 E8 - | *SMPSPITCH03HI :                 24 - |
*SMPSPITCH03LO :                 DC - | *SMPSPITCH04HI :                 30 - |
*SMPSPITCH04LO :                 D0 - | *SMPSPITCH05HI :                 3C - |
*SMPSPITCH05LO :                 C4 - | *SMPSPITCH06HI :                 48 - |
*SMPSPITCH06LO :                 B8 - | *SMPSPITCH07HI :                 54 - |
*SMPSPITCH07LO :                 AC - | *SMPSPITCH08HI :                 60 - |
*SMPSPITCH08LO :                 A0 - | *SMPSPITCH09HI :                 6C - |
*SMPSPITCH09LO :                 94 - | *SMPSPITCH10HI :                 78 - |
*SMPSPITCH10LO :                 88 - |  SONGSTART :                      0 - |
*SONIC3_COMPLETE :                0 - |  SONICDRIVERVER :                 5 - |
 SOURCEDRIVER :                   1 - | *STONE_01 :                       1 - |
*STONE_02 :                       2 - | *STONE_03 :                       3 - |
*STONE_04 :                       4 - | *STONE_05 :                       5 - |
 STONE_06 :                       6 - | *STONE_07 :                       7 - |
*STONE_08 :                       8 - | *STONE_09 :                       9 - |
*STONE_0A :                       A - | *STONE_0B :                       B - |
 STONE_0C :                       C - | *STONE_0D :                       D - |
*STONE_0E :                       E - | *STONE_0F :                       F - |
*STONE_10 :                      10 - | *STONE_11 :                      11 - |
 STONE_12 :                      12 - | *STONE_13 :                      13 - |
*STONE_14 :                      14 - | *STONE_15 :                      15 - |
*STONE_16 :                      16 - | *STONE_17 :                      17 - |
 STONE_18 :                      18 - | *STONE_19 :                      19 - |
*STONE_1A :                      1A - | *STONE_1B :                      1B - |
*STONE_1C :                      1C - | *STONE_1D :                      1D - |
 STONE_1E :                      1E - | *STONE_1F :                      1F - |
*STONE_20 :                      20 - | *STONE_21 :                      21 - |
*STONE_22 :                      22 - | *STONE_23 :                      23 - |
 STONE_24 :                      24 - | *STONE_25 :                      25 - |
*STONE_26 :                      26 - | *STONE_27 :                      27 - |
*TIME :                    16:35:12 - | *TRUE :                           1 - |
 USE_S2_SAMPLES :                 1 - |  USE_S3D_SAMPLES :                1 - |
 USE_S3_SAMPLES :                 1 - |  USE_SK_SAMPLES :                 0 - |
 VCALGORITHM :                    2 - |  VCAM1 :                          0 - |
 VCAM2 :                          0 - |  VCAM3 :                          0 - |
 VCAM4 :                          0 - |  VCAR1 :                         11 - |
 VCAR2 :                         14 - |  VCAR3 :                          E - |
 VCAR4 :                         12 - |  VCCF1 :                          2 - |
 VCCF2 :                          2 - |  VCCF3 :                          8 - |
 VCCF4 :                          2 - |  VCD1R1 :                         4 - |
 VCD1R2 :                         0 - |  VCD1R3 :                         E - |
 VCD1R4 :                         4 - |  VCD2R1 :                         7 - |
 VCD2R2 :                         8 - |  VCD2R3 :                         4 - |
 VCD2R4 :                         6 - |  VCDL1 :                          3 - |
 AS V1.42 Beta [Bld 89] - source file S1.asm - page 50 - 2/2/2019 16:35:13


 VCDL2 :                          0 - |  VCDL3 :                          5 - |
 VCDL4 :                          1 - |  VCDT1 :                          0 - |
 VCDT2 :                          7 - |  VCDT3 :                          0 - |
 VCDT4 :                          3 - |  VCFEEDBACK :                     7 - |
 VCRR1 :                          F - |  VCRR2 :                          8 - |
 VCRR3 :                          8 - |  VCRR4 :                          8 - |
 VCRS1 :                          0 - |  VCRS2 :                          0 - |
 VCRS3 :                          1 - |  VCRS4 :                          0 - |
 VCTL1 :                          0 - |  VCTL2 :                         24 - |
 VCTL3 :                         21 - |  VCTL4 :                         1B - |
 VCTLMASK1 :                     80 - |  VCTLMASK2 :                      0 - |
 VCTLMASK3 :                      0 - |  VCTLMASK4 :                      0 - |
 VCUNUSEDBITS :                   0 - | *VERSION :                     142F - |

    380 symbols
    214 unused symbols

 AS V1.42 Beta [Bld 89] - source file S1.asm - page 51 - 2/2/2019 16:35:13


  defined macros:
  ---------------

CONVERTMAINTEMPOMOD                   | PSGPITCHCONVERT                      
ROM_PTR_Z80                           | SMPSALTERNATESMPS                    
SMPSALTERNOTE                         | SMPSALTERPITCH                       
SMPSALTERVOL                          | SMPSCALL                             
SMPSCHANFMCOMMAND                     | SMPSCHANTEMPODIV                     
SMPSCLEARPUSH                         | SMPSCONDITIONALJUMP                  
SMPSCONTINUOUSLOOP                    | SMPSCOPYDATA                         
SMPSFADE                              | SMPSFM3SPECIALMODE                   
SMPSFMALTERVOL                        | SMPSFMFLUTTER                        
SMPSFMICOMMAND                        | SMPSFMVOLENV                         
SMPSHALTMUSIC                         | SMPSHEADERCHAN                       
SMPSHEADERCHANSFX                     | SMPSHEADERDAC                        
SMPSHEADERFM                          | SMPSHEADERPSG                        
SMPSHEADERSFXCHANNEL                  | SMPSHEADERSTARTSONG                  
SMPSHEADERSTARTSONGCONVERT            | SMPSHEADERTEMPO                      
SMPSHEADERTEMPOSFX                    | SMPSHEADERVOICE                      
SMPSHEADERVOICENULL                   | SMPSHEADERVOICEUVB                   
SMPSJUMP                              | SMPSLOOP                             
SMPSMODCHANGE                         | SMPSMODCHANGE2                       
SMPSMODOFF                            | SMPSMODON                            
SMPSMODSET                            | SMPSNOP                              
SMPSNOTEFILL                          | SMPSPAN                              
SMPSPITCHSLIDE                        | SMPSPLAYDACSAMPLE                    
SMPSPLAYSOUND                         | SMPSPSGALTERVOL                      
SMPSPSGFORM                           | SMPSPSGVOICE                         
SMPSRESETSPINDASHREV                  | SMPSRETURN                           
SMPSSETLFO                            | SMPSSETNOTE                          
SMPSSETTEMPODIV                       | SMPSSETTEMPOMOD                      
SMPSSETVOICE                          | SMPSSETVOL                           
SMPSSPINDASHREV                       | SMPSSSGEG                            
SMPSSTOP                              | SMPSSTOPFM                           
SMPSSTOPSPECIAL                       | SMPSVCALGORITHM                      
SMPSVCAMPMOD                          | SMPSVCATTACKRATE                     
SMPSVCCOARSEFREQ                      | SMPSVCDECAYLEVEL                     
SMPSVCDECAYRATE1                      | SMPSVCDECAYRATE2                     
SMPSVCDETUNE                          | SMPSVCFEEDBACK                       
SMPSVCRATESCALE                       | SMPSVCRELEASERATE                    
SMPSVCTOTALLEVEL                      | SMPSVCUNUSEDBITS                     
SMPSWEIRDD1LRR                        |

     77 macros

 AS V1.42 Beta [Bld 89] - source file S1.asm - page 52 - 2/2/2019 16:35:13


  defined functions:
  ------------------

S3TEMPOTOS2                           | S3TEMPOTOS1                          
S1TEMPOTOS3                           | S1TEMPOTOS2                          
S2TEMPOTOS3                           | S2TEMPOTOS1                          
CONV0TO256                            | Z80_PTR                              

 AS V1.42 Beta [Bld 89] - source file S1.asm - page 53 - 2/2/2019 16:35:13


  codepages:
  ----------

STANDARD (0 changed characters)


0.26 seconds assembly time

   1455 lines source file
   2420 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
