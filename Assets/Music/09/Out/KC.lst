                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D

                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E

       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96


                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        ;smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	
                        	if \0==4
                        		dc.b	volL
                        	else
                        		dc.b	(volL<<4)+volR
                        	endif	
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000005         PSGVol	EQU $05
       = 000000         PSGModCtrl EQU $00
                        ;PSGVoi1	EQU	$2B
                        ;PSGVoi2	EQU	PSGVoi1
                        ;PSGVoi3	EQU	$2D
       = 000004         PSGVoi1	EQU	$04
       = 000004         PSGVoi2	EQU	PSGVoi1
       = 000006         PSGVoi3	EQU	$06

       = 000000         PWMPitch EQU $00
       = 000009         PWMVolL	EQU	$09
       = 000009         PWMVolR	EQU	PWMVolL

000000                  	smpsHeaderVoice	SB_City_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SB_City_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 288E             	dc.w  (((((SB_City_Patches+Target))<<8)&$FF00)|((((SB_City_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan	$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempo	$02, $20
000004 0220             	dc.b	$02,$20
000006                  	smpsHeaderFM	SB_City_FM1, Target, $00, $10
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SB_City_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SB_City_FM1+Target))<<8)&$FF00)|((((SB_City_FM1+Target))>>8)&$7F)|$80)
000008 0010             	dc.b	$00,$10
00000A                  	smpsHeaderFM	SB_City_FM2, Target, $00, $10
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SB_City_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A 6B80             	dc.w  (((((SB_City_FM2+Target))<<8)&$FF00)|((((SB_City_FM2+Target))>>8)&$7F)|$80)
00000C 0010             	dc.b	$00,$10
00000E                  	smpsHeaderFM	SB_City_FM3, Target, $00, $1D
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SB_City_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 7381             	dc.w  (((((SB_City_FM3+Target))<<8)&$FF00)|((((SB_City_FM3+Target))>>8)&$7F)|$80)
000010 001D             	dc.b	$00,$1D
000012                  	smpsHeaderFM	SB_City_FM4, Target, $00, $10
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SB_City_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 7B82             	dc.w  (((((SB_City_FM4+Target))<<8)&$FF00)|((((SB_City_FM4+Target))>>8)&$7F)|$80)
000014 0010             	dc.b	$00,$10
000016                  	smpsHeaderFM	SB_City_FM5, Target, $00, $10
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SB_City_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 5383             	dc.w  (((((SB_City_FM5+Target))<<8)&$FF00)|((((SB_City_FM5+Target))>>8)&$7F)|$80)
000018 0010             	dc.b	$00,$10
00001A                  	smpsHeaderFM	SB_City_FM6, Target, $00, $0F
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SB_City_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A AE83             	dc.w  (((((SB_City_FM6+Target))<<8)&$FF00)|((((SB_City_FM6+Target))>>8)&$7F)|$80)
00001C 000F             	dc.b	$00,$0F
00001E                  	smpsHeaderPSG	SB_City_PSG1, Target, PSGDelta, PSGVol, PSGModCtrl, PSGVoi1
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SB_City_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E 9584             	dc.w  (((((SB_City_PSG1+Target))<<8)&$FF00)|((((SB_City_PSG1+Target))>>8)&$7F)|$80)
000020 0C05             	dc.b	PSGDelta,PSGVol
                        	;dc.w	voice
000022 0004             	dc.b	PSGModCtrl,PSGVoi1
000024                  	smpsHeaderPSG	SB_City_PSG2, Target, PSGDelta, PSGVol, PSGModCtrl, PSGVoi2
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SB_City_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 5285             	dc.w  (((((SB_City_PSG2+Target))<<8)&$FF00)|((((SB_City_PSG2+Target))>>8)&$7F)|$80)
000026 0C05             	dc.b	PSGDelta,PSGVol
                        	;dc.w	voice
000028 0004             	dc.b	PSGModCtrl,PSGVoi2
00002A                  	smpsHeaderPSG	SB_City_PSG3, Target, $00, PSGVol, PSGModCtrl, PSGVoi3
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SB_City_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 4280             	dc.w  (((((SB_City_PSG3+Target))<<8)&$FF00)|((((SB_City_PSG3+Target))>>8)&$7F)|$80)
00002C 0005             	dc.b	$00,PSGVol
                        	;dc.w	voice
00002E 0006             	dc.b	PSGModCtrl,PSGVoi3
000030                  	smpsHeaderPWM	SB_City_PWM1, Target, PWMPitch, PWMVolL, PWMVolR
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SB_City_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 2686             	dc.w  (((((SB_City_PWM1+Target))<<8)&$FF00)|((((SB_City_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
                        	
                        	if 5==4
                        	else
000033 99               		dc.b	(PWMVolL<<4)+PWMVolR
                        	endif	
000034                  	smpsHeaderPWM	SB_City_PWM2, Target, PWMPitch, PWMVolL, PWMVolR
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SB_City_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 4A89             	dc.w  (((((SB_City_PWM2+Target))<<8)&$FF00)|((((SB_City_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
                        	
                        	if 5==4
                        	else
000037 99               		dc.b	(PWMVolL<<4)+PWMVolR
                        	endif	
000038                  	smpsHeaderPWM	SB_City_PWM3, Target, PWMPitch, PWMVolL, PWMVolR
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SB_City_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 1D8C             	dc.w  (((((SB_City_PWM3+Target))<<8)&$FF00)|((((SB_City_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
                        	
                        	if 5==4
                        	else
00003B 99               		dc.b	(PWMVolL<<4)+PWMVolR
                        	endif	
00003C                  	smpsHeaderPWM	SB_City_PWM4, Target, PWMPitch, PWMVolL, PWMVolR
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SB_City_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 8A8D             	dc.w  (((((SB_City_PWM4+Target))<<8)&$FF00)|((((SB_City_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
                        	
                        	if 5==4
                        	else
00003F 99               		dc.b	(PWMVolL<<4)+PWMVolR
                        	endif	

000040                  SB_City_FM1:
000040                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000040 EF00             		dc.b $EF,$00
                        	endif

000042                  SB_City_PSG3:
000042                  SB_City_Jump1:
000042                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000042 E040             		dc.b $E0,panRight
                        	endif

000044                  SB_City_Loop1:
000044 9906970980039980 	dc.b	nC2, $06, nBb1, $09, nRst, $03, nC2, nRst
00004C 9406900980039080 	dc.b	nG1, $06, nEb1, $09, nRst, $03, nEb1, nRst
000054 9206930980039280 	dc.b	nF1, $06, nFs1, $09, nRst, $03, nF1, nRst
00005C 90068D09030380   	dc.b	nEb1, $06, nC1, $09, $03, $03, nRst
000063                  	smpsLoop		$00, $14, SB_City_Loop1, Target
000063 F7               	dc.b	$F7
000064 0014             	dc.b	$00,$14
                        	if (SB_City_Loop1<*)
000066                  		rom_ptr_z80(SB_City_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000066 4480             	dc.w  (((((SB_City_Loop1+Target))<<8)&$FF00)|((((SB_City_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000068                  	smpsJump		SB_City_Jump1, Target
000068 F6               	dc.b	$F6
                        	if (SB_City_Jump1<*)
000069                  		rom_ptr_z80(SB_City_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000069 4280             	dc.w  (((((SB_City_Jump1+Target))<<8)&$FF00)|((((SB_City_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00006B                  SB_City_FM2:
00006B                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
00006B EF01             		dc.b $EF,$01
                        	endif
00006D                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00006D E0C0             		dc.b $E0,panCenter
                        	endif
00006F 800CB10380B106B4 	dc.b	nRst, $0C, nC4, $03, nRst, nC4, $06, nEb4
000077 B680B603B7B60980 	dc.b	nF4, nRst, nF4, $03, nFs4, nF4, $09, nRst
00007F B48003B60680AF80 	dc.b	nEb4, nRst, $03, nF4, $06, nRst, nBb3, nRst
000087 0CB10380B106B4B6 	dc.b	$0C, nC4, $03, nRst, nC4, $06, nEb4, nF4
00008F 80B603B7B60980B4 	dc.b	nRst, nF4, $03, nFs4, nF4, $09, nRst, nEb4
000097 8003B8098015B103 	dc.b	nRst, $03, nG4, $09, nRst, $15, nC4, $03
00009F 80B106B4B680B603 	dc.b	nRst, nC4, $06, nEb4, nF4, nRst, nF4, $03
0000A7 B7B60980B40C8012 	dc.b	nFs4, nF4, $09, nRst, nEb4, $0C, nRst, $12
0000AF B403B602B4038004 	dc.b	nEb4, $03, nF4, $02, nEb4, $03, nRst, $04
0000B7 AF06B180B4098003 	dc.b	nBb3, $06, nC4, nRst, nEb4, $09, nRst, $03
0000BF B606801EB806807F 	dc.b	nF4, $06, nRst, $1E, nG4, $06, nRst, $7F
0000C7 807F807F801B     	dc.b	nRst, $7F, nRst, $7F, nRst, $1B

0000CD                  SB_City_Loop2:
0000CD B10380B106B4B680 	dc.b	nC4, $03, nRst, nC4, $06, nEb4, nF4, nRst
0000D5 B603B7B60980B480 	dc.b	nF4, $03, nFs4, nF4, $09, nRst, nEb4, nRst
0000DD 03B60680AF800CB1 	dc.b	$03, nF4, $06, nRst, nBb3, nRst, $0C, nC4
0000E5 0380B106B4B680B6 	dc.b	$03, nRst, nC4, $06, nEb4, nF4, nRst, nF4
0000ED 03B7B60980B48003 	dc.b	$03, nFs4, nF4, $09, nRst, nEb4, nRst, $03
0000F5 B8098015B10380B1 	dc.b	nG4, $09, nRst, $15, nC4, $03, nRst, nC4
0000FD 06B4B680B603B7B6 	dc.b	$06, nEb4, nF4, nRst, nF4, $03, nFs4, nF4
000105 0980B40C8012B403 	dc.b	$09, nRst, nEb4, $0C, nRst, $12, nEb4, $03
00010D B602B4038004AF06 	dc.b	nF4, $02, nEb4, $03, nRst, $04, nBb3, $06
000115 B180B4098003B606 	dc.b	nC4, nRst, nEb4, $09, nRst, $03, nF4, $06
00011D 801EB8068018     	dc.b	nRst, $1E, nG4, $06, nRst, $18
000123                  	smpsLoop		$00, $02, SB_City_Loop2, Target
000123 F7               	dc.b	$F7
000124 0002             	dc.b	$00,$02
                        	if (SB_City_Loop2<*)
000126                  		rom_ptr_z80(SB_City_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000126 CD80             	dc.w  (((((SB_City_Loop2+Target))<<8)&$FF00)|((((SB_City_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000128 AD03AFB0B1B406B6 	dc.b	nAb3, $03, nBb3, nB3, nC4, nEb4, $06, nF4
000130 80B603B7B60C8006 	dc.b	nRst, nF4, $03, nFs4, nF4, $0C, nRst, $06
000138 B40F8021B403B6B8 	dc.b	nEb4, $0F, nRst, $21, nEb4, $03, nF4, nG4
000140 09BB038006B603B7 	dc.b	$09, nBb4, $03, nRst, $06, nF4, $03, nFs4
000148 B60C8030AD03AFB0 	dc.b	nF4, $0C, nRst, $30, nAb3, $03, nBb3, nB3
000150 B1B406B680B603B7 	dc.b	nC4, nEb4, $06, nF4, nRst, nF4, $03, nFs4
000158 B60C8006B40F8021 	dc.b	nF4, $0C, nRst, $06, nEb4, $0F, nRst, $21
000160 B403B6B809BB0380 	dc.b	nEb4, $03, nF4, nG4, $09, nBb4, $03, nRst
000168 06B603B7B60C8024 	dc.b	$06, nF4, $03, nFs4, nF4, $0C, nRst, $24
000170                  	smpsJump		SB_City_FM2, Target
000170 F6               	dc.b	$F6
                        	if (SB_City_FM2<*)
000171                  		rom_ptr_z80(SB_City_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000171 6B80             	dc.w  (((((SB_City_FM2+Target))<<8)&$FF00)|((((SB_City_FM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000173                  SB_City_FM3:
000173                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000173 E080             		dc.b $E0,panLeft
                        	endif
000175                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000175 EF01             		dc.b $EF,$01
                        	endif
000177 8012B10380B106B4 	dc.b	nRst, $12, nC4, $03, nRst, nC4, $06, nEb4
00017F B680B603B7B60980 	dc.b	nF4, nRst, nF4, $03, nFs4, nF4, $09, nRst
000187 B48003B60680AF80 	dc.b	nEb4, nRst, $03, nF4, $06, nRst, nBb3, nRst
00018F 0CB10380B106B4B6 	dc.b	$0C, nC4, $03, nRst, nC4, $06, nEb4, nF4
000197 80B603B7B60980B4 	dc.b	nRst, nF4, $03, nFs4, nF4, $09, nRst, nEb4
00019F 8003B8098015B103 	dc.b	nRst, $03, nG4, $09, nRst, $15, nC4, $03
0001A7 80B106B4B680B603 	dc.b	nRst, nC4, $06, nEb4, nF4, nRst, nF4, $03
0001AF B7B60980B40C8012 	dc.b	nFs4, nF4, $09, nRst, nEb4, $0C, nRst, $12
0001B7 B403B602B4038004 	dc.b	nEb4, $03, nF4, $02, nEb4, $03, nRst, $04
0001BF AF06B180B4098003 	dc.b	nBb3, $06, nC4, nRst, nEb4, $09, nRst, $03
0001C7 B606801EB806807F 	dc.b	nF4, $06, nRst, $1E, nG4, $06, nRst, $7F
0001CF 807F807F801B     	dc.b	nRst, $7F, nRst, $7F, nRst, $1B

0001D5                  SB_City_Loop3:
0001D5 B10380B106B4B680 	dc.b	nC4, $03, nRst, nC4, $06, nEb4, nF4, nRst
0001DD B603B7B60980B480 	dc.b	nF4, $03, nFs4, nF4, $09, nRst, nEb4, nRst
0001E5 03B60680AF800CB1 	dc.b	$03, nF4, $06, nRst, nBb3, nRst, $0C, nC4
0001ED 0380B106B4B680B6 	dc.b	$03, nRst, nC4, $06, nEb4, nF4, nRst, nF4
0001F5 03B7B60980B48003 	dc.b	$03, nFs4, nF4, $09, nRst, nEb4, nRst, $03
0001FD B8098015B10380B1 	dc.b	nG4, $09, nRst, $15, nC4, $03, nRst, nC4
000205 06B4B680B603B7B6 	dc.b	$06, nEb4, nF4, nRst, nF4, $03, nFs4, nF4
00020D 0980B40C8012B403 	dc.b	$09, nRst, nEb4, $0C, nRst, $12, nEb4, $03
000215 B602B4038004AF06 	dc.b	nF4, $02, nEb4, $03, nRst, $04, nBb3, $06
00021D B180B4098003B606 	dc.b	nC4, nRst, nEb4, $09, nRst, $03, nF4, $06
000225 801EB8068018     	dc.b	nRst, $1E, nG4, $06, nRst, $18
00022B                  	smpsLoop		$00, $02, SB_City_Loop3, Target
00022B F7               	dc.b	$F7
00022C 0002             	dc.b	$00,$02
                        	if (SB_City_Loop3<*)
00022E                  		rom_ptr_z80(SB_City_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00022E D581             	dc.w  (((((SB_City_Loop3+Target))<<8)&$FF00)|((((SB_City_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000230 AD03AFB0B1B406B6 	dc.b	nAb3, $03, nBb3, nB3, nC4, nEb4, $06, nF4
000238 80B603B7B60C8006 	dc.b	nRst, nF4, $03, nFs4, nF4, $0C, nRst, $06
000240 B40F8021B403B6B8 	dc.b	nEb4, $0F, nRst, $21, nEb4, $03, nF4, nG4
000248 09BB038006B603B7 	dc.b	$09, nBb4, $03, nRst, $06, nF4, $03, nFs4
000250 B60C8030AD03AFB0 	dc.b	nF4, $0C, nRst, $30, nAb3, $03, nBb3, nB3
000258 B1B406B680B603B7 	dc.b	nC4, nEb4, $06, nF4, nRst, nF4, $03, nFs4
000260 B60C8006B40F8021 	dc.b	nF4, $0C, nRst, $06, nEb4, $0F, nRst, $21
000268 B403B6B809BB0380 	dc.b	nEb4, $03, nF4, nG4, $09, nBb4, $03, nRst
000270 06B603B7B60C801E 	dc.b	$06, nF4, $03, nFs4, nF4, $0C, nRst, $1E
000278                  	smpsJump		SB_City_FM3, Target
000278 F6               	dc.b	$F6
                        	if (SB_City_FM3<*)
000279                  		rom_ptr_z80(SB_City_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000279 7381             	dc.w  (((((SB_City_FM3+Target))<<8)&$FF00)|((((SB_City_FM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00027B                  SB_City_FM4:
00027B                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00027B E040             		dc.b $E0,panRight
                        	endif
00027D                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
00027D EF02             		dc.b $EF,$02
                        	endif
00027F 807F807F807F8003 	dc.b	nRst, $7F, nRst, $7F, nRst, $7F, nRst, $03
000287 A50680A3A580A580 	dc.b	nC3, $06, nRst, nBb2, nC3, nRst, nC3, nRst
00028F A3A580A3A880A880 	dc.b	nBb2, nC3, nRst, nBb2, nEb3, nRst, nEb3, nRst
000297 A3A580A3A580A580 	dc.b	nBb2, nC3, nRst, nBb2, nC3, nRst, nC3, nRst
00029F A3A5A3809F809F80 	dc.b	nBb2, nC3, nBb2, nRst, nFs2, nRst, nFs2, nRst
0002A7 9FA580A3A580A580 	dc.b	nFs2, nC3, nRst, nBb2, nC3, nRst, nC3, nRst
0002AF A3A580A3A880A880 	dc.b	nBb2, nC3, nRst, nBb2, nEb3, nRst, nEb3, nRst
0002B7 A3A580A3A580A580 	dc.b	nBb2, nC3, nRst, nBb2, nC3, nRst, nC3, nRst
0002BF A3A5A380AA80A880 	dc.b	nBb2, nC3, nBb2, nRst, nF3, nRst, nEb3, nRst
0002C7 0CA50680A3A580A5 	dc.b	$0C, nC3, $06, nRst, nBb2, nC3, nRst, nC3
0002CF 80A3A580A3A880A8 	dc.b	nRst, nBb2, nC3, nRst, nBb2, nEb3, nRst, nEb3
0002D7 80A3A580A3A580A5 	dc.b	nRst, nBb2, nC3, nRst, nBb2, nC3, nRst, nC3
0002DF 80A3A5A3809F809F 	dc.b	nRst, nBb2, nC3, nBb2, nRst, nFs2, nRst, nFs2
0002E7 809FA580A3A580A5 	dc.b	nRst, nFs2, nC3, nRst, nBb2, nC3, nRst, nC3
0002EF 80A3A580A3A880A8 	dc.b	nRst, nBb2, nC3, nRst, nBb2, nEb3, nRst, nEb3
0002F7 80A3A580A3A580A5 	dc.b	nRst, nBb2, nC3, nRst, nBb2, nC3, nRst, nC3
0002FF 80A3A5A3809F809C 	dc.b	nRst, nBb2, nC3, nBb2, nRst, nFs2, nRst, nEb2
000307 800CA50680A3A580 	dc.b	nRst, $0C, nC3, $06, nRst, nBb2, nC3, nRst
00030F A580A3A580A3A880 	dc.b	nC3, nRst, nBb2, nC3, nRst, nBb2, nEb3, nRst
000317 A880A3A580A3A580 	dc.b	nEb3, nRst, nBb2, nC3, nRst, nBb2, nC3, nRst
00031F A580A3A5A3809F80 	dc.b	nC3, nRst, nBb2, nC3, nBb2, nRst, nFs2, nRst
000327 9F809FA580A3A580 	dc.b	nFs2, nRst, nFs2, nC3, nRst, nBb2, nC3, nRst
00032F A580A3A580A3A880 	dc.b	nC3, nRst, nBb2, nC3, nRst, nBb2, nEb3, nRst
000337 A880A3A580A3A580 	dc.b	nEb3, nRst, nBb2, nC3, nRst, nBb2, nC3, nRst
00033F A580A3A5A380AA80 	dc.b	nC3, nRst, nBb2, nC3, nBb2, nRst, nF3, nRst
000347 A8807F807F807F80 	dc.b	nEb3, nRst, $7F, nRst, $7F, nRst, $7F, nRst
00034F 0F               	dc.b	$0F
000350                  	smpsJump		SB_City_FM4, Target
000350 F6               	dc.b	$F6
                        	if (SB_City_FM4<*)
000351                  		rom_ptr_z80(SB_City_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000351 7B82             	dc.w  (((((SB_City_FM4+Target))<<8)&$FF00)|((((SB_City_FM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000353                  SB_City_FM5:
000353                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000353 E080             		dc.b $E0,panLeft
                        	endif
000355                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
000355 EF03             		dc.b $EF,$03
                        	endif
000357 807F807F807F8003 	dc.b	nRst, $7F, nRst, $7F, nRst, $7F, nRst, $03

00035F                  SB_City_Loop4:
00035F 9906809799809980 	dc.b	nC2, $06, nRst, nBb1, nC2, nRst, nC2, nRst
000367 979980979C809C80 	dc.b	nBb1, nC2, nRst, nBb1, nEb2, nRst, nEb2, nRst
00036F 9799809799809980 	dc.b	nBb1, nC2, nRst, nBb1, nC2, nRst, nC2, nRst
000377 9799978093809380 	dc.b	nBb1, nC2, nBb1, nRst, nFs1, nRst, nFs1, nRst
00037F 9399809799809980 	dc.b	nFs1, nC2, nRst, nBb1, nC2, nRst, nC2, nRst
000387 979980979C809C80 	dc.b	nBb1, nC2, nRst, nBb1, nEb2, nRst, nEb2, nRst
00038F 9799809799809980 	dc.b	nBb1, nC2, nRst, nBb1, nC2, nRst, nC2, nRst
000397 979997809E809C80 	dc.b	nBb1, nC2, nBb1, nRst, nF2, nRst, nEb2, nRst
00039F 7F807F807F800F   	dc.b	$7F, nRst, $7F, nRst, $7F, nRst, $0F
0003A6                  	smpsLoop		$00, $02, SB_City_Loop4, Target
0003A6 F7               	dc.b	$F7
0003A7 0002             	dc.b	$00,$02
                        	if (SB_City_Loop4<*)
0003A9                  		rom_ptr_z80(SB_City_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003A9 5F83             	dc.w  (((((SB_City_Loop4+Target))<<8)&$FF00)|((((SB_City_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003AB                  	smpsJump		SB_City_FM5, Target
0003AB F6               	dc.b	$F6
                        	if (SB_City_FM5<*)
0003AC                  		rom_ptr_z80(SB_City_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003AC 5383             	dc.w  (((((SB_City_FM5+Target))<<8)&$FF00)|((((SB_City_FM5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0003AE                  SB_City_FM6:
0003AE                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
0003AE EF04             		dc.b $EF,$04
                        	endif

0003B0                  SB_City_Jump2:
0003B0                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0003B0 E0C0             		dc.b $E0,panCenter
                        	endif
0003B2 B821800FB621800F 	dc.b	nG4, $21, nRst, $0F, nF4, $21, nRst, $0F
0003BA BB158003B8158003 	dc.b	nBb4, $15, nRst, $03, nG4, $15, nRst, $03
0003C2 B4278009B821800F 	dc.b	nEb4, $27, nRst, $09, nG4, $21, nRst, $0F
0003CA B621800FBB158003 	dc.b	nF4, $21, nRst, $0F, nBb4, $15, nRst, $03
0003D2 B8158003B4278057 	dc.b	nG4, $15, nRst, $03, nEb4, $27, nRst, $57
0003DA AA03ACAFB1B480B4 	dc.b	nF3, $03, nG3, nBb3, nC4, nEb4, nRst, nEb4
0003E2 06B62A801EB603B7 	dc.b	$06, nF4, $2A, nRst, $1E, nF4, $03, nFs4
0003EA B6B4AF80AF2AB603 	dc.b	nF4, nEb4, nBb3, nRst, nBb3, $2A, nF4, $03
0003F2 B5B41EB303B4B3B2 	dc.b	nE4, nEb4, $1E, nD4, $03, nEb4, nD4, nCs4
0003FA AC80B1278003ACAB 	dc.b	nG3, nRst, nC4, $27, nRst, $03, nG3, nFs3
000402 AA06ACAFB1B4B680 	dc.b	nF3, $06, nG3, nBb3, nC4, nEb4, nF4, nRst
00040A 0C               	dc.b	$0C

00040B                  SB_City_Loop5:
00040B B821800FB621800F 	dc.b	nG4, $21, nRst, $0F, nF4, $21, nRst, $0F
000413 BB158003B8158003 	dc.b	nBb4, $15, nRst, $03, nG4, $15, nRst, $03
00041B B4278009         	dc.b	nEb4, $27, nRst, $09
00041F                  	smpsLoop		$00, $04, SB_City_Loop5, Target
00041F F7               	dc.b	$F7
000420 0004             	dc.b	$00,$04
                        	if (SB_City_Loop5<*)
000422                  		rom_ptr_z80(SB_City_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000422 0B84             	dc.w  (((((SB_City_Loop5+Target))<<8)&$FF00)|((((SB_City_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000424                  SB_City_Loop6:
000424 B8038006B8038006 	dc.b	nG4, $03, nRst, $06, nG4, $03, nRst, $06
00042C                  	smpsAlterVol		$04
00042C E604             	dc.b	$E6,$04
00042E B80380           	dc.b	nG4, $03, nRst
000431                  	smpsAlterVol		$05
000431 E605             	dc.b	$E6,$05
000433 B88006B8038006   	dc.b	nG4, nRst, $06, nG4, $03, nRst, $06
00043A                  	smpsAlterVol		$04
00043A E604             	dc.b	$E6,$04
00043C B80380B88006     	dc.b	nG4, $03, nRst, nG4, nRst, $06
000442                  	smpsAlterVol		$0A
000442 E60A             	dc.b	$E6,$0A
000444 B8038006B80380   	dc.b	nG4, $03, nRst, $06, nG4, $03, nRst
00044B                  	smpsAlterVol		$14
00044B E614             	dc.b	$E6,$14
00044D B88006B8038006   	dc.b	nG4, nRst, $06, nG4, $03, nRst, $06
000454                  	smpsAlterVol		$15
000454 E615             	dc.b	$E6,$15
000456 B80380           	dc.b	nG4, $03, nRst
000459                  	smpsAlterVol		$C0
000459 E6C0             	dc.b	$E6,$C0
00045B B880B88006B80380 	dc.b	nG4, nRst, nG4, nRst, $06, nG4, $03, nRst
000463 06               	dc.b	$06
000464                  	smpsAlterVol		$09
000464 E609             	dc.b	$E6,$09
000466 B8038006         	dc.b	nG4, $03, nRst, $06
00046A                  	smpsAlterVol		$0B
00046A E60B             	dc.b	$E6,$0B
00046C B8038006         	dc.b	nG4, $03, nRst, $06
000470                  	smpsAlterVol		$06
000470 E606             	dc.b	$E6,$06
000472 B80380B880       	dc.b	nG4, $03, nRst, nG4, nRst
000477                  	smpsAlterVol		$0C
000477 E60C             	dc.b	$E6,$0C
000479 B880B88006       	dc.b	nG4, nRst, nG4, nRst, $06
00047E                  	smpsAlterVol		$0B
00047E E60B             	dc.b	$E6,$0B
000480 B8038006B80380B8 	dc.b	nG4, $03, nRst, $06, nG4, $03, nRst, nG4
000488 80B880           	dc.b	nRst, nG4, nRst
00048B                  	smpsAlterVol		$CF
00048B E6CF             	dc.b	$E6,$CF
00048D                  	smpsLoop		$00, $02, SB_City_Loop6, Target
00048D F7               	dc.b	$F7
00048E 0002             	dc.b	$00,$02
                        	if (SB_City_Loop6<*)
000490                  		rom_ptr_z80(SB_City_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
000490 2484             	dc.w  (((((SB_City_Loop6+Target))<<8)&$FF00)|((((SB_City_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000492                  	smpsJump		SB_City_Jump2, Target
000492 F6               	dc.b	$F6
                        	if (SB_City_Jump2<*)
000493                  		rom_ptr_z80(SB_City_Jump2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000493 B083             	dc.w  (((((SB_City_Jump2+Target))<<8)&$FF00)|((((SB_City_Jump2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000495                  SB_City_PSG1:
000495 902780099024800C 	dc.b	nEb1, $27, nRst, $09, nEb1, $24, nRst, $0C
00049D 941280068F158003 	dc.b	nG1, $12, nRst, $06, nD1, $15, nRst, $03
0004A5 8E24800C90278009 	dc.b	nCs1, $24, nRst, $0C, nEb1, $27, nRst, $09
0004AD 9024800C94128006 	dc.b	nEb1, $24, nRst, $0C, nG1, $12, nRst, $06
0004B5 8F1580038E24806C 	dc.b	nD1, $15, nRst, $03, nCs1, $24, nRst, $6C
0004BD 8B068D338027882D 	dc.b	nBb0, $06, nC1, $33, nRst, $27, nG0, $2D
0004C5 80038D21800F8B2A 	dc.b	nRst, $03, nC1, $21, nRst, $0F, nBb0, $2A
0004CD 80249006         	dc.b	nRst, $24, nEb1, $06

0004D1                  SB_City_Loop7:
0004D1 800C902780099024 	dc.b	nRst, $0C, nEb1, $27, nRst, $09, nEb1, $24
0004D9 800C941280068F15 	dc.b	nRst, $0C, nG1, $12, nRst, $06, nD1, $15
0004E1 80038E24         	dc.b	nRst, $03, nCs1, $24
0004E5                  	smpsLoop		$00, $04, SB_City_Loop7, Target
0004E5 F7               	dc.b	$F7
0004E6 0004             	dc.b	$00,$04
                        	if (SB_City_Loop7<*)
0004E8                  		rom_ptr_z80(SB_City_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004E8 D184             	dc.w  (((((SB_City_Loop7+Target))<<8)&$FF00)|((((SB_City_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004EA 800C             	dc.b	nRst, $0C

0004EC                  SB_City_Loop8:
0004EC 9003800690038006 	dc.b	nEb1, $03, nRst, $06, nEb1, $03, nRst, $06
0004F4 900380           	dc.b	nEb1, $03, nRst
0004F7                  	smpsSetVol	$03
0004F7 EC03             	dc.b	$EC,$03
0004F9 90800690038006   	dc.b	nEb1, nRst, $06, nEb1, $03, nRst, $06
000500                  	smpsSetVol	$02
000500 EC02             	dc.b	$EC,$02
000502 900380908006     	dc.b	nEb1, $03, nRst, nEb1, nRst, $06
000508                  	smpsSetVol	$04
000508 EC04             	dc.b	$EC,$04
00050A 90038006900380   	dc.b	nEb1, $03, nRst, $06, nEb1, $03, nRst
000511                  	smpsSetVol	$01
000511 EC01             	dc.b	$EC,$01
000513 9080069003800C   	dc.b	nEb1, nRst, $06, nEb1, $03, nRst, $0C
00051A                  	smpsSetVol	$F6
00051A ECF6             	dc.b	$EC,$F6
00051C 8E03808E80068E03 	dc.b	nCs1, $03, nRst, nCs1, nRst, $06, nCs1, $03
000524 8006             	dc.b	nRst, $06
000526                  	smpsSetVol	$03
000526 EC03             	dc.b	$EC,$03
000528 8E038006         	dc.b	nCs1, $03, nRst, $06
00052C                  	smpsSetVol	$05
00052C EC05             	dc.b	$EC,$05
00052E 8E038006         	dc.b	nCs1, $03, nRst, $06
000532                  	smpsSetVol	$01
000532 EC01             	dc.b	$EC,$01
000534 8E03808E80       	dc.b	nCs1, $03, nRst, nCs1, nRst
000539                  	smpsSetVol	$01
000539 EC01             	dc.b	$EC,$01
00053B 8E80808015800380 	dc.b	nCs1, nRst, nRst, nRst, $15, nRst, $03, nRst
000543 0380038003       	dc.b	$03, nRst, $03, nRst, $03
000548                  	smpsSetVol	$F6
000548 ECF6             	dc.b	$EC,$F6
00054A                  	smpsLoop		$00, $02, SB_City_Loop8, Target
00054A F7               	dc.b	$F7
00054B 0002             	dc.b	$00,$02
                        	if (SB_City_Loop8<*)
00054D                  		rom_ptr_z80(SB_City_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
00054D EC84             	dc.w  (((((SB_City_Loop8+Target))<<8)&$FF00)|((((SB_City_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00054F                  	smpsJump		SB_City_PSG1, Target
00054F F6               	dc.b	$F6
                        	if (SB_City_PSG1<*)
000550                  		rom_ptr_z80(SB_City_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000550 9584             	dc.w  (((((SB_City_PSG1+Target))<<8)&$FF00)|((((SB_City_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000552                  SB_City_PSG2:
000552 892A80068B278009 	dc.b	nAb0, $2A, nRst, $06, nBb0, $27, nRst, $09
00055A 8D1580038B128006 	dc.b	nC1, $15, nRst, $03, nBb0, $12, nRst, $06
000562 8B278009892A8006 	dc.b	nBb0, $27, nRst, $09, nAb0, $2A, nRst, $06
00056A 8B2780098D158003 	dc.b	nBb0, $27, nRst, $09, nC1, $15, nRst, $03
000572 8B1280068B278069 	dc.b	nBb0, $12, nRst, $06, nBb0, $27, nRst, $69
00057A 8824803C8D308824 	dc.b	nG0, $24, nRst, $3C, nC1, $30, nG0, $24
000582 800C882A80248D06 	dc.b	nRst, $0C, nG0, $2A, nRst, $24, nC1, $06
00058A 800C892A80068B27 	dc.b	nRst, $0C, nAb0, $2A, nRst, $06, nBb0, $27
000592 80098D1580038B12 	dc.b	nRst, $09, nC1, $15, nRst, $03, nBb0, $12
00059A 80068B278009892A 	dc.b	nRst, $06, nBb0, $27, nRst, $09, nAb0, $2A
0005A2 80068B2780098D15 	dc.b	nRst, $06, nBb0, $27, nRst, $09, nC1, $15
0005AA 80038B1280068B27 	dc.b	nRst, $03, nBb0, $12, nRst, $06, nBb0, $27
0005B2 807F801A8B27807F 	dc.b	nRst, $7F, nRst, $1A, nBb0, $27, nRst, $7F
0005BA 801A8B278009     	dc.b	nRst, $1A, nBb0, $27, nRst, $09

0005C0                  SB_City_Loop9:
0005C0 8903800689038006 	dc.b	nAb0, $03, nRst, $06, nAb0, $03, nRst, $06
0005C8 890380           	dc.b	nAb0, $03, nRst
0005CB                  	smpsSetVol	$03
0005CB EC03             	dc.b	$EC,$03
0005CD 89800689038006   	dc.b	nAb0, nRst, $06, nAb0, $03, nRst, $06
0005D4                  	smpsSetVol	$02
0005D4 EC02             	dc.b	$EC,$02
0005D6 890380898006     	dc.b	nAb0, $03, nRst, nAb0, nRst, $06
0005DC                  	smpsSetVol	$04
0005DC EC04             	dc.b	$EC,$04
0005DE 89038006890380   	dc.b	nAb0, $03, nRst, $06, nAb0, $03, nRst
0005E5                  	smpsSetVol	$01
0005E5 EC01             	dc.b	$EC,$01
0005E7 8980068903800C   	dc.b	nAb0, nRst, $06, nAb0, $03, nRst, $0C
0005EE                  	smpsSetVol	$F6
0005EE ECF6             	dc.b	$EC,$F6
0005F0 8903808980068903 	dc.b	nAb0, $03, nRst, nAb0, nRst, $06, nAb0, $03
0005F8 8006             	dc.b	nRst, $06
0005FA                  	smpsSetVol	$03
0005FA EC03             	dc.b	$EC,$03
0005FC 89038006         	dc.b	nAb0, $03, nRst, $06
000600                  	smpsSetVol	$05
000600 EC05             	dc.b	$EC,$05
000602 89038006         	dc.b	nAb0, $03, nRst, $06
000606                  	smpsSetVol	$01
000606 EC01             	dc.b	$EC,$01
000608 8903808980       	dc.b	nAb0, $03, nRst, nAb0, nRst
00060D                  	smpsSetVol	$01
00060D EC01             	dc.b	$EC,$01
00060F 8980808015800380 	dc.b	nAb0, nRst, nRst, nRst, $15, nRst, $03, nRst
000617 0380038003       	dc.b	$03, nRst, $03, nRst, $03
00061C                  	smpsSetVol	$F6
00061C ECF6             	dc.b	$EC,$F6
00061E                  	smpsLoop		$00, $02, SB_City_Loop9, Target
00061E F7               	dc.b	$F7
00061F 0002             	dc.b	$00,$02
                        	if (SB_City_Loop9<*)
000621                  		rom_ptr_z80(SB_City_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000621 C085             	dc.w  (((((SB_City_Loop9+Target))<<8)&$FF00)|((((SB_City_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000623                  	smpsJump		SB_City_PSG2, Target
000623 F6               	dc.b	$F6
                        	if (SB_City_PSG2<*)
000624                  		rom_ptr_z80(SB_City_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000624 5285             	dc.w  (((((SB_City_PSG2+Target))<<8)&$FF00)|((((SB_City_PSG2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

                        ;!@
                        ;SB_City_PSG3:	
                        	;dc.b	nC0, $06, $09, nRst

                        ;SB_City_Loop10:
                        	;dc.b	$03, nC0, nRst
                        	;smpsLoop		$00, $03, SB_City_PSG3, Target

                        ;SB_City_Loop11:
                        	;dc.b	nC0, $06, $09
                        	;smpsLoop		$01, $02, SB_City_Loop10, Target
                        	;dc.b	nRst, $03, nC0, nRst
                        	;smpsLoop		$02, $13, SB_City_Loop11, Target
                        	;dc.b	nC0, $06, $09, $03, $03, nRst
                        	;smpsJump		SB_City_PSG3, Target
                        	
000626                  SB_City_PWM1:
000626 81038099808A8099 	dc.b	pEKick, $03, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, pClap, pClosedHH, nRst, pOpenHH
00062E 8A988099
000632 8A               	dc.b	pClap
000633                  	smpsAlterVol        $08
000633 E608             	dc.b	$E6,$08
000635 98               	dc.b	pClosedHH
000636                  	smpsAlterVol        $F8
000636 E6F8             	dc.b	$E6,$F8
000638 039998818099808A 	dc.b	$03, pOpenHH, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, nRst, pEKick
000640 80998081
000644 80998A           	dc.b	nRst, pOpenHH, pClap
000647                  	smpsAlterVol        $08
000647 E608             	dc.b	$E6,$08
000649 98               	dc.b	pClosedHH
00064A                  	smpsAlterVol        $F8
00064A E6F8             	dc.b	$E6,$F8
00064C 039998988099808A 	dc.b	$03, pOpenHH, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, pClap, pEKick
000654 80998A81
000658 80998A           	dc.b	nRst, pOpenHH, pClap
00065B                  	smpsAlterVol        $08
00065B E608             	dc.b	$E6,$08
00065D 98               	dc.b	pClosedHH
00065E                  	smpsAlterVol        $F8
00065E E6F8             	dc.b	$E6,$F8
000660 039998988099808A 	dc.b	$03, pOpenHH, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, nRst, pClosedHH
000668 80998098
00066C 80998A           	dc.b	nRst, pOpenHH, pClap
00066F                  	smpsAlterVol        $08
00066F E608             	dc.b	$E6,$08
000671 98               	dc.b	pClosedHH
000672                  	smpsAlterVol        $F8
000672 E6F8             	dc.b	$E6,$F8
000674 0381988180998098 	dc.b	$03, pEKick, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH, pClap, pEKick
00067C 80998A81
000680 80998A           	dc.b	nRst, pOpenHH, pClap
000683                  	smpsAlterVol        $08
000683 E608             	dc.b	$E6,$08
000685 98               	dc.b	pClosedHH
000686                  	smpsAlterVol        $F8
000686 E6F8             	dc.b	$E6,$F8
000688 0399988180998098 	dc.b	$03, pOpenHH, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH, nRst, pClosedHH
000690 80998098
000694 80998A           	dc.b	nRst, pOpenHH, pClap
000697                  	smpsAlterVol        $08
000697 E608             	dc.b	$E6,$08
000699 98               	dc.b	pClosedHH
00069A                  	smpsAlterVol        $F8
00069A E6F8             	dc.b	$E6,$F8
00069C 039998818099808A 	dc.b	$03, pOpenHH, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, pClap, pEKick
0006A4 80998A81
0006A8 80998A           	dc.b	nRst, pOpenHH, pClap
0006AB                  	smpsAlterVol        $08
0006AB E608             	dc.b	$E6,$08
0006AD 98               	dc.b	pClosedHH
0006AE                  	smpsAlterVol        $F8
0006AE E6F8             	dc.b	$E6,$F8
0006B0 039998818099808A 	dc.b	$03, pOpenHH, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, nRst, pClosedHH
0006B8 80998098
0006BC 8A99808A98999881 	dc.b	pClap, pOpenHH, nRst, pClap, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH
0006C4 98999898
0006C8 9899             	dc.b	pClosedHH, pOpenHH
0006CA                  	smpsAlterVol        $06
0006CA E606             	dc.b	$E6,$06
0006CC 88               	dc.b	pEHiHat
0006CD                  	smpsAlterVol        $FA
0006CD E6FA             	dc.b	$E6,$FA
0006CF 819899           	dc.b	pEKick, pClosedHH, pOpenHH
0006D2                  	smpsAlterVol        $0C
0006D2 E60C             	dc.b	$E6,$0C
0006D4 82               	dc.b	pESnare
0006D5                  	smpsAlterVol        $F4
0006D5 E6F4             	dc.b	$E6,$F4
0006D7 8198999881989998 	dc.b	pEKick, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH
0006DF                  	smpsAlterVol        $0E
0006DF E60E             	dc.b	$E6,$0E
0006E1 82               	dc.b	pESnare
0006E2                  	smpsAlterVol        $F2
0006E2 E6F2             	dc.b	$E6,$F2
0006E4 989998989899     	dc.b	pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH
0006EA                  	smpsAlterVol        $06
0006EA E606             	dc.b	$E6,$06
0006EC 88               	dc.b	pEHiHat
0006ED                  	smpsAlterVol        $FA
0006ED E6FA             	dc.b	$E6,$FA
0006EF 8198999898989998 	dc.b	pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick
0006F7 81

0006F8                  SB_City_PWM1_Loop03:
0006F8 9899             	dc.b	pClosedHH, pOpenHH
0006FA                  	smpsAlterVol        $0C
0006FA E60C             	dc.b	$E6,$0C
0006FC 82               	dc.b	pESnare
0006FD                  	smpsAlterVol        $F4
0006FD E6F4             	dc.b	$E6,$F4
0006FF 98               	dc.b	pClosedHH
000700                  	smpsLoop            $00, $02, SB_City_PWM1_Loop03, Target
000700 F7               	dc.b	$F7
000701 0002             	dc.b	$00,$02
                        	if (SB_City_PWM1_Loop03<*)
000703                  		rom_ptr_z80(SB_City_PWM1_Loop03+Target)
                        	;dc.w z80_ptr(ptr,addr)
000703 F886             	dc.w  (((((SB_City_PWM1_Loop03+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop03+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000705 98999898         	dc.b	pClosedHH, pOpenHH, pClosedHH, pClosedHH

000709                  SB_City_PWM1_Loop04:
000709 98999881         	dc.b	pClosedHH, pOpenHH, pClosedHH, pEKick
00070D                  	smpsLoop            $00, $03, SB_City_PWM1_Loop04, Target
00070D F7               	dc.b	$F7
00070E 0003             	dc.b	$00,$03
                        	if (SB_City_PWM1_Loop04<*)
000710                  		rom_ptr_z80(SB_City_PWM1_Loop04+Target)
                        	;dc.w z80_ptr(ptr,addr)
000710 0987             	dc.w  (((((SB_City_PWM1_Loop04+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop04+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000712 9881989898999898 	dc.b	pClosedHH, pEKick, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick
00071A 98999881
00071E 9899988198819898 	dc.b	pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pEKick, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pClosedHH
000726 98999898
00072A 9899988198999898 	dc.b	pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pEKick, pClosedHH, pEKick
000732 98819881
000736 988198           	dc.b	pClosedHH, pEKick, pClosedHH
000739                  	smpsAlterVol        $06
000739 E606             	dc.b	$E6,$06
00073B 88               	dc.b	pEHiHat
00073C                  	smpsAlterVol        $FA
00073C E6FA             	dc.b	$E6,$FA
00073E 9899             	dc.b	pClosedHH, pOpenHH
000740                  	smpsAlterVol        $06
000740 E606             	dc.b	$E6,$06
000742 88               	dc.b	pEHiHat
000743                  	smpsAlterVol        $FA
000743 E6FA             	dc.b	$E6,$FA
000745 8198999881988198 	dc.b	pEKick, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pEKick, pClosedHH, nRst, $0C, pEHiHat, $03
00074D 800C8803
000751 800C880380       	dc.b	nRst, $0C, pEHiHat, $03, nRst
000756                  	smpsAlterVol        $08
000756 E608             	dc.b	$E6,$08
000758 82               	dc.b	pESnare
000759                  	smpsAlterVol        $FD
000759 E6FD             	dc.b	$E6,$FD
00075B 8A8009           	dc.b	pClap, nRst, $09
00075E                  	smpsAlterVol        $FB
00075E E6FB             	dc.b	$E6,$FB
000760 8103989998       	dc.b	pEKick, $03, pClosedHH, pOpenHH, pClosedHH
000765                  	smpsAlterVol        $0C
000765 E60C             	dc.b	$E6,$0C
000767 82               	dc.b	pESnare
000768                  	smpsAlterVol        $F4
000768 E6F4             	dc.b	$E6,$F4
00076A 9899             	dc.b	pClosedHH, pOpenHH
00076C                  	smpsAlterVol        $06
00076C E606             	dc.b	$E6,$06
00076E 88               	dc.b	pEHiHat
00076F                  	smpsAlterVol        $FA
00076F E6FA             	dc.b	$E6,$FA
000771 989899           	dc.b	pClosedHH, pClosedHH, pOpenHH
000774                  	smpsAlterVol        $06
000774 E606             	dc.b	$E6,$06
000776 88               	dc.b	pEHiHat
000777                  	smpsAlterVol        $FA
000777 E6FA             	dc.b	$E6,$FA
000779 8198999898989998 	dc.b	pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH
000781 98989998
000785 819899           	dc.b	pEKick, pClosedHH, pOpenHH
000788                  	smpsAlterVol        $06
000788 E606             	dc.b	$E6,$06
00078A 88               	dc.b	pEHiHat
00078B                  	smpsAlterVol        $FA
00078B E6FA             	dc.b	$E6,$FA
00078D 9898999881989998 	dc.b	pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH
000795 989899
000798                  	smpsAlterVol        $0C
000798 E60C             	dc.b	$E6,$0C
00079A 82               	dc.b	pESnare
00079B                  	smpsAlterVol        $F4
00079B E6F4             	dc.b	$E6,$F4
00079D 989899           	dc.b	pClosedHH, pClosedHH, pOpenHH
0007A0                  	smpsAlterVol        $06
0007A0 E606             	dc.b	$E6,$06
0007A2 88               	dc.b	pEHiHat
0007A3                  	smpsAlterVol        $FA
0007A3 E6FA             	dc.b	$E6,$FA

0007A5                  SB_City_PWM1_Loop05:
0007A5 8198999898989998 	dc.b	pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH
0007AD                  	smpsLoop            $00, $03, SB_City_PWM1_Loop05, Target
0007AD F7               	dc.b	$F7
0007AE 0003             	dc.b	$00,$03
                        	if (SB_City_PWM1_Loop05<*)
0007B0                  		rom_ptr_z80(SB_City_PWM1_Loop05+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007B0 A587             	dc.w  (((((SB_City_PWM1_Loop05+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop05+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007B2                  	smpsAlterVol        $0C
0007B2 E60C             	dc.b	$E6,$0C
0007B4 82               	dc.b	pESnare
0007B5                  	smpsAlterVol        $F4
0007B5 E6F4             	dc.b	$E6,$F4

0007B7                  SB_City_PWM1_Loop06:
0007B7 9899             	dc.b	pClosedHH, pOpenHH
0007B9                  	smpsAlterVol        $0C
0007B9 E60C             	dc.b	$E6,$0C
0007BB 82               	dc.b	pESnare
0007BC                  	smpsAlterVol        $F4
0007BC E6F4             	dc.b	$E6,$F4
0007BE 81               	dc.b	pEKick
0007BF                  	smpsLoop            $00, $02, SB_City_PWM1_Loop06, Target
0007BF F7               	dc.b	$F7
0007C0 0002             	dc.b	$00,$02
                        	if (SB_City_PWM1_Loop06<*)
0007C2                  		rom_ptr_z80(SB_City_PWM1_Loop06+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007C2 B787             	dc.w  (((((SB_City_PWM1_Loop06+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop06+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007C4 9881988198999898 	dc.b	pClosedHH, pEKick, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick
0007CC 98999881
0007D0 9899             	dc.b	pClosedHH, pOpenHH
0007D2                  	smpsAlterVol        $06
0007D2 E606             	dc.b	$E6,$06
0007D4 88               	dc.b	pEHiHat
0007D5                  	smpsAlterVol        $FA
0007D5 E6FA             	dc.b	$E6,$FA
0007D7 9898819881989998 	dc.b	pClosedHH, pClosedHH, pEKick, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH
0007DF 81989998
0007E3 9898999881988198 	dc.b	pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pEKick, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH
0007EB 98989998
0007EF 819899           	dc.b	pEKick, pClosedHH, pOpenHH
0007F2                  	smpsAlterVol        $05
0007F2 E605             	dc.b	$E6,$05
0007F4 88               	dc.b	pEHiHat
0007F5                  	smpsAlterVol        $FB
0007F5 E6FB             	dc.b	$E6,$FB
0007F7 819899           	dc.b	pEKick, pClosedHH, pOpenHH
0007FA                  	smpsAlterVol        $0E
0007FA E60E             	dc.b	$E6,$0E
0007FC 82               	dc.b	pESnare
0007FD                  	smpsAlterVol        $F7
0007FD E6F7             	dc.b	$E6,$F7
0007FF 88               	dc.b	pEHiHat
000800                  	smpsAlterVol        $FB
000800 E6FB             	dc.b	$E6,$FB
000802 98               	dc.b	pClosedHH
000803                  	smpsAlterVol        $05
000803 E605             	dc.b	$E6,$05
000805 81               	dc.b	pEKick
000806                  	smpsAlterVol        $FB
000806 E6FB             	dc.b	$E6,$FB
000808 9898989998       	dc.b	pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH
00080D                  	smpsAlterVol        $0C
00080D E60C             	dc.b	$E6,$0C
00080F 82               	dc.b	pESnare
000810                  	smpsAlterVol        $F4
000810 E6F4             	dc.b	$E6,$F4

000812                  SB_City_PWM1_Loop07:
000812 9899             	dc.b	pClosedHH, pOpenHH
000814                  	smpsAlterVol        $0C
000814 E60C             	dc.b	$E6,$0C
000816 82               	dc.b	pESnare
000817                  	smpsAlterVol        $F4
000817 E6F4             	dc.b	$E6,$F4
000819 98               	dc.b	pClosedHH
00081A                  	smpsLoop            $00, $02, SB_City_PWM1_Loop07, Target
00081A F7               	dc.b	$F7
00081B 0002             	dc.b	$00,$02
                        	if (SB_City_PWM1_Loop07<*)
00081D                  		rom_ptr_z80(SB_City_PWM1_Loop07+Target)
                        	;dc.w z80_ptr(ptr,addr)
00081D 1288             	dc.w  (((((SB_City_PWM1_Loop07+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop07+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00081F 9899989898999881 	dc.b	pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pEKick
000827 98999881
00082B 9899             	dc.b	pClosedHH, pOpenHH
00082D                  	smpsAlterVol        $0E
00082D E60E             	dc.b	$E6,$0E
00082F 82               	dc.b	pESnare
000830                  	smpsAlterVol        $F2
000830 E6F2             	dc.b	$E6,$F2
000832 9898999881989998 	dc.b	pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH
00083A 989899
00083D                  	smpsAlterVol        $0C
00083D E60C             	dc.b	$E6,$0C
00083F 82               	dc.b	pESnare
000840                  	smpsAlterVol        $F4
000840 E6F4             	dc.b	$E6,$F4
000842 819899           	dc.b	pEKick, pClosedHH, pOpenHH
000845                  	smpsAlterVol        $06
000845 E606             	dc.b	$E6,$06
000847 88               	dc.b	pEHiHat
000848                  	smpsAlterVol        $FA
000848 E6FA             	dc.b	$E6,$FA
00084A 9898999898       	dc.b	pClosedHH, pClosedHH, pOpenHH, pClosedHH, pClosedHH

00084F                  SB_City_PWM1_Loop08:
00084F 9899988198999881 	dc.b	pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH
000857 9899
000859                  	smpsAlterVol        $06
000859 E606             	dc.b	$E6,$06
00085B 88               	dc.b	pEHiHat
00085C                  	smpsAlterVol        $FA
00085C E6FA             	dc.b	$E6,$FA
00085E 81               	dc.b	pEKick
00085F                  	smpsLoop            $00, $02, SB_City_PWM1_Loop08, Target
00085F F7               	dc.b	$F7
000860 0002             	dc.b	$00,$02
                        	if (SB_City_PWM1_Loop08<*)
000862                  		rom_ptr_z80(SB_City_PWM1_Loop08+Target)
                        	;dc.w z80_ptr(ptr,addr)
000862 4F88             	dc.w  (((((SB_City_PWM1_Loop08+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop08+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000864 989998819881     	dc.b	pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pEKick

00086A                  SB_City_PWM1_Loop09:
00086A 98819899         	dc.b	pClosedHH, pEKick, pClosedHH, pOpenHH
00086E                  	smpsLoop            $00, $03, SB_City_PWM1_Loop09, Target
00086E F7               	dc.b	$F7
00086F 0003             	dc.b	$00,$03
                        	if (SB_City_PWM1_Loop09<*)
000871                  		rom_ptr_z80(SB_City_PWM1_Loop09+Target)
                        	;dc.w z80_ptr(ptr,addr)
000871 6A88             	dc.w  (((((SB_City_PWM1_Loop09+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop09+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000873 9898             	dc.b	pClosedHH, pClosedHH

000875                  SB_City_PWM1_Loop0A:
000875 98999881         	dc.b	pClosedHH, pOpenHH, pClosedHH, pEKick
000879                  	smpsLoop            $00, $03, SB_City_PWM1_Loop0A, Target
000879 F7               	dc.b	$F7
00087A 0003             	dc.b	$00,$03
                        	if (SB_City_PWM1_Loop0A<*)
00087C                  		rom_ptr_z80(SB_City_PWM1_Loop0A+Target)
                        	;dc.w z80_ptr(ptr,addr)
00087C 7588             	dc.w  (((((SB_City_PWM1_Loop0A+Target))<<8)&$FF00)|((((SB_City_PWM1_Loop0A+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00087E 9899             	dc.b	pClosedHH, pOpenHH
000880                  	smpsAlterVol        $0C
000880 E60C             	dc.b	$E6,$0C
000882 82               	dc.b	pESnare
000883                  	smpsAlterVol        $F4
000883 E6F4             	dc.b	$E6,$F4
000885 9898999898989998 	dc.b	pClosedHH, pClosedHH, pOpenHH, pClosedHH, pClosedHH, pClosedHH, pOpenHH, pClosedHH, pEKick, pClosedHH, pOpenHH
00088D 819899
000890                  	smpsAlterVol        $05
000890 E605             	dc.b	$E6,$05
000892 88               	dc.b	pEHiHat
000893                  	smpsAlterVol        $FB
000893 E6FB             	dc.b	$E6,$FB
000895 989899           	dc.b	pClosedHH, pClosedHH, pOpenHH
000898                  	smpsAlterVol        $0E
000898 E60E             	dc.b	$E6,$0E
00089A 82               	dc.b	pESnare
00089B                  	smpsAlterVol        $F2
00089B E6F2             	dc.b	$E6,$F2
00089D 8198888198809980 	dc.b	pEKick, pClosedHH, pEHiHat, pEKick, pClosedHH, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, pClap
0008A5 8A80998A
0008A9 9880998A         	dc.b	pClosedHH, nRst, pOpenHH, pClap
0008AD                  	smpsAlterVol        $08
0008AD E608             	dc.b	$E6,$08
0008AF 98               	dc.b	pClosedHH
0008B0                  	smpsAlterVol        $F8
0008B0 E6F8             	dc.b	$E6,$F8
0008B2 039998818099808A 	dc.b	$03, pOpenHH, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, nRst, pEKick
0008BA 80998081
0008BE 80998A           	dc.b	nRst, pOpenHH, pClap
0008C1                  	smpsAlterVol        $08
0008C1 E608             	dc.b	$E6,$08
0008C3 98               	dc.b	pClosedHH
0008C4                  	smpsAlterVol        $F8
0008C4 E6F8             	dc.b	$E6,$F8
0008C6 039998988099808A 	dc.b	$03, pOpenHH, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, pClap, pEKick
0008CE 80998A81
0008D2 80998A           	dc.b	nRst, pOpenHH, pClap
0008D5                  	smpsAlterVol        $08
0008D5 E608             	dc.b	$E6,$08
0008D7 98               	dc.b	pClosedHH
0008D8                  	smpsAlterVol        $F8
0008D8 E6F8             	dc.b	$E6,$F8
0008DA 0399988180998098 	dc.b	$03, pOpenHH, pClosedHH, pEKick, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH, nRst, pEKick
0008E2 80998081
0008E6 80998A           	dc.b	nRst, pOpenHH, pClap
0008E9                  	smpsAlterVol        $08
0008E9 E608             	dc.b	$E6,$08
0008EB 98               	dc.b	pClosedHH
0008EC                  	smpsAlterVol        $F8
0008EC E6F8             	dc.b	$E6,$F8
0008EE 038198988099808A 	dc.b	$03, pEKick, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClap, nRst, pOpenHH, pClap, pClosedHH
0008F6 80998A98
0008FA 80998A           	dc.b	nRst, pOpenHH, pClap
0008FD                  	smpsAlterVol        $08
0008FD E608             	dc.b	$E6,$08
0008FF 98               	dc.b	pClosedHH
000900                  	smpsAlterVol        $F8
000900 E6F8             	dc.b	$E6,$F8
000902 0399989880998098 	dc.b	$03, pOpenHH, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH, nRst, pClosedHH
00090A 80998098
00090E 80998A           	dc.b	nRst, pOpenHH, pClap
000911                  	smpsAlterVol        $08
000911 E608             	dc.b	$E6,$08
000913 98               	dc.b	pClosedHH
000914                  	smpsAlterVol        $F8
000914 E6F8             	dc.b	$E6,$F8
000916 0399989880998098 	dc.b	$03, pOpenHH, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH, pClap, pClosedHH
00091E 80998A98
000922 80998A           	dc.b	nRst, pOpenHH, pClap
000925                  	smpsAlterVol        $08
000925 E608             	dc.b	$E6,$08
000927 98               	dc.b	pClosedHH
000928                  	smpsAlterVol        $F8
000928 E6F8             	dc.b	$E6,$F8
00092A 0399989880998098 	dc.b	$03, pOpenHH, pClosedHH, pClosedHH, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH
000932 8099
000934                  	smpsAlterVol        $07
000934 E607             	dc.b	$E6,$07
000936 8A               	dc.b	pClap
000937                  	smpsAlterVol        $F9
000937 E6F9             	dc.b	$E6,$F9
000939 98               	dc.b	pClosedHH
00093A                  	smpsAlterVol        $07
00093A E607             	dc.b	$E6,$07
00093C 8A8A80           	dc.b	pClap, pClap, nRst
00093F                  	smpsAlterVol        $01
00093F E601             	dc.b	$E6,$01
000941 98               	dc.b	pClosedHH
000942                  	smpsAlterVol        $F8
000942 E6F8             	dc.b	$E6,$F8
000944 039998           	dc.b	$03, pOpenHH, pClosedHH
000947                  	smpsJump            SB_City_PWM1, Target
000947 F6               	dc.b	$F6
                        	if (SB_City_PWM1<*)
000948                  		rom_ptr_z80(SB_City_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000948 2686             	dc.w  (((((SB_City_PWM1+Target))<<8)&$FF00)|((((SB_City_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00094A                  SB_City_PWM2:
00094A 9803800998038009 	dc.b	pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $09, pEKick, $03, nRst, $15
000952 81038015
000956 9803             	dc.b	pClosedHH, $03

000958                  SB_City_PWM2_Loop00:
000958 8009980380099803 	dc.b	nRst, $09, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $15, pEKick, $03
000960 80158103
000964                  	smpsLoop            $00, $02, SB_City_PWM2_Loop00, Target
000964 F7               	dc.b	$F7
000965 0002             	dc.b	$00,$02
                        	if (SB_City_PWM2_Loop00<*)
000967                  		rom_ptr_z80(SB_City_PWM2_Loop00+Target)
                        	;dc.w z80_ptr(ptr,addr)
000967 5889             	dc.w  (((((SB_City_PWM2_Loop00+Target))<<8)&$FF00)|((((SB_City_PWM2_Loop00+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000969 8009980380098103 	dc.b	nRst, $09, pClosedHH, $03, nRst, $09, pEKick, $03, nRst, $0F, pOpenHH, $03
000971 800F9903
000975 809880098A038009 	dc.b	nRst, pClosedHH, nRst, $09, pClap, $03, nRst, $09, pClosedHH, $03, nRst, $15
00097D 98038015
000981 980380098A038009 	dc.b	pClosedHH, $03, nRst, $09, pClap, $03, nRst, $09, pEKick, $03, nRst, $15
000989 81038015
00098D 9803800998038009 	dc.b	pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $15
000995 98038015
000999 9803800998038009 	dc.b	pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $09, pEKick, $03, nRst, $09
0009A1 81038009
0009A5                  	smpsAlterVol        $08
0009A5 E608             	dc.b	$E6,$08
0009A7 980380           	dc.b	pClosedHH, $03, nRst
0009AA                  	smpsAlterVol        $F8
0009AA E6F8             	dc.b	$E6,$F8
0009AC 8180988009       	dc.b	pEKick, nRst, pClosedHH, nRst, $09
0009B1                  	smpsAlterVol        $06
0009B1 E606             	dc.b	$E6,$06
0009B3 88038006         	dc.b	pEHiHat, $03, nRst, $06
0009B7                  	smpsAlterVol        $FA
0009B7 E6FA             	dc.b	$E6,$FA
0009B9 9803038006       	dc.b	pClosedHH, $03, $03, nRst, $06
0009BE                  	smpsAlterVol        $06
0009BE E606             	dc.b	$E6,$06
0009C0 8803             	dc.b	pEHiHat, $03
0009C2                  	smpsAlterVol        $FA
0009C2 E6FA             	dc.b	$E6,$FA
0009C4 9880099803800998 	dc.b	pClosedHH, nRst, $09, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $09, pEKick
0009CC 03800981
0009D0 0380069803038009 	dc.b	$03, nRst, $06, pClosedHH, $03, $03, nRst, $09, pEKick, $03, nRst, $09
0009D8 81038009
0009DC                  	smpsAlterVol        $06
0009DC E606             	dc.b	$E6,$06
0009DE 880380068803     	dc.b	pEHiHat, $03, nRst, $06, pEHiHat, $03
0009E4                  	smpsAlterVol        $FA
0009E4 E6FA             	dc.b	$E6,$FA
0009E6 818006           	dc.b	pEKick, nRst, $06
0009E9                  	smpsAlterVol        $06
0009E9 E606             	dc.b	$E6,$06
0009EB 8803             	dc.b	pEHiHat, $03
0009ED                  	smpsAlterVol        $FA
0009ED E6FA             	dc.b	$E6,$FA
0009EF 8180098103800998 	dc.b	pEKick, nRst, $09, pEKick, $03, nRst, $09, pClosedHH, $03, nRst, $09, pClosedHH
0009F7 03800998
0009FB 038006           	dc.b	$03, nRst, $06
0009FE                  	smpsAlterVol        $0E
0009FE E60E             	dc.b	$E6,$0E
000A00 8203             	dc.b	pESnare, $03
000A02                  	smpsAlterVol        $F2
000A02 E6F2             	dc.b	$E6,$F2
000A04 9880998081800981 	dc.b	pClosedHH, nRst, pOpenHH, nRst, pEKick, nRst, $09, pEKick, $03
000A0C 03

000A0D                  SB_City_PWM2_Loop01:
000A0D 8006             	dc.b	nRst, $06
000A0F                  	smpsAlterVol        $06
000A0F E606             	dc.b	$E6,$06
000A11 8803             	dc.b	pEHiHat, $03
000A13                  	smpsAlterVol        $FA
000A13 E6FA             	dc.b	$E6,$FA
000A15 98               	dc.b	pClosedHH
000A16                  	smpsLoop            $00, $02, SB_City_PWM2_Loop01, Target
000A16 F7               	dc.b	$F7
000A17 0002             	dc.b	$00,$02
                        	if (SB_City_PWM2_Loop01<*)
000A19                  		rom_ptr_z80(SB_City_PWM2_Loop01+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A19 0D8A             	dc.w  (((((SB_City_PWM2_Loop01+Target))<<8)&$FF00)|((((SB_City_PWM2_Loop01+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A1B 809980818009     	dc.b	nRst, pOpenHH, nRst, pEKick, nRst, $09
000A21                  	smpsAlterVol        $0E
000A21 E60E             	dc.b	$E6,$0E
000A23 82038009         	dc.b	pESnare, $03, nRst, $09
000A27                  	smpsAlterVol        $F2
000A27 E6F2             	dc.b	$E6,$F2
000A29 98038006         	dc.b	pClosedHH, $03, nRst, $06
000A2D                  	smpsAlterVol        $0E
000A2D E60E             	dc.b	$E6,$0E
000A2F 8203             	dc.b	pESnare, $03
000A31                  	smpsAlterVol        $F2
000A31 E6F2             	dc.b	$E6,$F2
000A33 8180998098809980 	dc.b	pEKick, nRst, pOpenHH, nRst, pClosedHH, nRst, pOpenHH, nRst, pEKick, nRst, $06, pClosedHH
000A3B 81800698
000A3F 03038006         	dc.b	$03, $03, nRst, $06
000A43                  	smpsAlterVol        $06
000A43 E606             	dc.b	$E6,$06
000A45 8803             	dc.b	pEHiHat, $03
000A47                  	smpsAlterVol        $FA
000A47 E6FA             	dc.b	$E6,$FA
000A49 988099800F       	dc.b	pClosedHH, nRst, pOpenHH, nRst, $0F
000A4E                  	smpsAlterVol        $05
000A4E E605             	dc.b	$E6,$05
000A50 8A03800C         	dc.b	pClap, $03, nRst, $0C
000A54                  	smpsAlterVol        $03
000A54 E603             	dc.b	$E6,$03
000A56 820380           	dc.b	pESnare, $03, nRst
000A59                  	smpsAlterVol        $F8
000A59 E6F8             	dc.b	$E6,$F8
000A5B 88               	dc.b	pEHiHat
000A5C                  	smpsAlterVol        $08
000A5C E608             	dc.b	$E6,$08
000A5E 828009           	dc.b	pESnare, nRst, $09
000A61                  	smpsAlterVol        $F8
000A61 E6F8             	dc.b	$E6,$F8
000A63 9803800981038006 	dc.b	pClosedHH, $03, nRst, $09, pEKick, $03, nRst, $06, pClosedHH, $03, pEKick, nRst
000A6B 98038180
000A6F 0698030380098103 	dc.b	$06, pClosedHH, $03, $03, nRst, $09, pEKick, $03, nRst, $09
000A77 8009
000A79                  	smpsAlterVol        $06
000A79 E606             	dc.b	$E6,$06
000A7B 88038009         	dc.b	pEHiHat, $03, nRst, $09
000A7F                  	smpsAlterVol        $FA
000A7F E6FA             	dc.b	$E6,$FA
000A81 9803800698038180 	dc.b	pClosedHH, $03, nRst, $06, pClosedHH, $03, pEKick, nRst, $09, pClosedHH, $03, nRst
000A89 09980380
000A8D 0981038006980381 	dc.b	$09, pEKick, $03, nRst, $06, pClosedHH, $03, pEKick, nRst, $06, pClosedHH, $03
000A95 80069803
000A99 0380098103800998 	dc.b	$03, nRst, $09, pEKick, $03, nRst, $09, pClosedHH, $03, nRst, $09, pEKick
000AA1 03800981
000AA5 038006           	dc.b	$03, nRst, $06
000AA8                  	smpsAlterVol        $06
000AA8 E606             	dc.b	$E6,$06
000AAA 8803             	dc.b	pEHiHat, $03
000AAC                  	smpsAlterVol        $FA
000AAC E6FA             	dc.b	$E6,$FA
000AAE 98808180818009   	dc.b	pClosedHH, nRst, pEKick, nRst, pEKick, nRst, $09
000AB5                  	smpsAlterVol        $06
000AB5 E606             	dc.b	$E6,$06
000AB7 88038006         	dc.b	pEHiHat, $03, nRst, $06
000ABB                  	smpsAlterVol        $FA
000ABB E6FA             	dc.b	$E6,$FA
000ABD 9803038006       	dc.b	pClosedHH, $03, $03, nRst, $06
000AC2                  	smpsAlterVol        $06
000AC2 E606             	dc.b	$E6,$06
000AC4 8803             	dc.b	pEHiHat, $03
000AC6                  	smpsAlterVol        $FA
000AC6 E6FA             	dc.b	$E6,$FA
000AC8 98809980988009   	dc.b	pClosedHH, nRst, pOpenHH, nRst, pClosedHH, nRst, $09
000ACF                  	smpsAlterVol        $06
000ACF E606             	dc.b	$E6,$06
000AD1 88038009         	dc.b	pEHiHat, $03, nRst, $09
000AD5                  	smpsAlterVol        $FA
000AD5 E6FA             	dc.b	$E6,$FA
000AD7 9803800698038180 	dc.b	pClosedHH, $03, nRst, $06, pClosedHH, $03, pEKick, nRst, pOpenHH, nRst, pClosedHH, nRst
000ADF 99809880
000AE3 8180             	dc.b	pEKick, nRst
000AE5                  	smpsAlterVol        $06
000AE5 E606             	dc.b	$E6,$06
000AE7 888006           	dc.b	pEHiHat, nRst, $06
000AEA                  	smpsAlterVol        $06
000AEA E606             	dc.b	$E6,$06
000AEC 8203             	dc.b	pESnare, $03
000AEE                  	smpsAlterVol        $F4
000AEE E6F4             	dc.b	$E6,$F4
000AF0 818006           	dc.b	pEKick, nRst, $06
000AF3                  	smpsAlterVol        $0C
000AF3 E60C             	dc.b	$E6,$0C
000AF5 8203             	dc.b	pESnare, $03
000AF7                  	smpsAlterVol        $F4
000AF7 E6F4             	dc.b	$E6,$F4
000AF9 98809980818009   	dc.b	pClosedHH, nRst, pOpenHH, nRst, pEKick, nRst, $09
000B00                  	smpsAlterVol        $06
000B00 E606             	dc.b	$E6,$06
000B02 88038006         	dc.b	pEHiHat, $03, nRst, $06
000B06                  	smpsAlterVol        $FA
000B06 E6FA             	dc.b	$E6,$FA
000B08 9803038006       	dc.b	pClosedHH, $03, $03, nRst, $06
000B0D                  	smpsAlterVol        $05
000B0D E605             	dc.b	$E6,$05
000B0F 8803             	dc.b	pEHiHat, $03
000B11                  	smpsAlterVol        $FB
000B11 E6FB             	dc.b	$E6,$FB
000B13 81809980818009   	dc.b	pEKick, nRst, pOpenHH, nRst, pEKick, nRst, $09
000B1A                  	smpsAlterVol        $06
000B1A E606             	dc.b	$E6,$06
000B1C 880380068803     	dc.b	pEHiHat, $03, nRst, $06, pEHiHat, $03
000B22                  	smpsAlterVol        $FA
000B22 E6FA             	dc.b	$E6,$FA
000B24 8180069803818009 	dc.b	pEKick, nRst, $06, pClosedHH, $03, pEKick, nRst, $09, pEKick, $03, nRst, $09
000B2C 81038009
000B30                  	smpsAlterVol        $0E
000B30 E60E             	dc.b	$E6,$0E
000B32 82038009         	dc.b	pESnare, $03, nRst, $09
000B36                  	smpsAlterVol        $F2
000B36 E6F2             	dc.b	$E6,$F2
000B38 9803800698038180 	dc.b	pClosedHH, $03, nRst, $06, pClosedHH, $03, pEKick, nRst, $09, pClosedHH, $03, nRst
000B40 09980380
000B44 09               	dc.b	$09
000B45                  	smpsAlterVol        $06
000B45 E606             	dc.b	$E6,$06
000B47 880380068803     	dc.b	pEHiHat, $03, nRst, $06, pEHiHat, $03
000B4D                  	smpsAlterVol        $FA
000B4D E6FA             	dc.b	$E6,$FA
000B4F 988006           	dc.b	pClosedHH, nRst, $06
000B52                  	smpsAlterVol        $0C
000B52 E60C             	dc.b	$E6,$0C
000B54 8203             	dc.b	pESnare, $03
000B56                  	smpsAlterVol        $F4
000B56 E6F4             	dc.b	$E6,$F4
000B58 81800981038009   	dc.b	pEKick, nRst, $09, pEKick, $03, nRst, $09
000B5F                  	smpsAlterVol        $06
000B5F E606             	dc.b	$E6,$06
000B61 88038009         	dc.b	pEHiHat, $03, nRst, $09
000B65                  	smpsAlterVol        $FA
000B65 E6FA             	dc.b	$E6,$FA
000B67 98038006         	dc.b	pClosedHH, $03, nRst, $06
000B6B                  	smpsAlterVol        $0E
000B6B E60E             	dc.b	$E6,$0E
000B6D 8203             	dc.b	pESnare, $03
000B6F                  	smpsAlterVol        $F2
000B6F E6F2             	dc.b	$E6,$F2
000B71 98808180988009   	dc.b	pClosedHH, nRst, pEKick, nRst, pClosedHH, nRst, $09
000B78                  	smpsAlterVol        $0C
000B78 E60C             	dc.b	$E6,$0C
000B7A 820380068203     	dc.b	pESnare, $03, nRst, $06, pESnare, $03
000B80                  	smpsAlterVol        $F4
000B80 E6F4             	dc.b	$E6,$F4
000B82 988006           	dc.b	pClosedHH, nRst, $06
000B85                  	smpsAlterVol        $06
000B85 E606             	dc.b	$E6,$06
000B87 8803             	dc.b	pEHiHat, $03
000B89                  	smpsAlterVol        $FA
000B89 E6FA             	dc.b	$E6,$FA
000B8B 98809980988009   	dc.b	pClosedHH, nRst, pOpenHH, nRst, pClosedHH, nRst, $09
000B92                  	smpsAlterVol        $06
000B92 E606             	dc.b	$E6,$06
000B94 88038009         	dc.b	pEHiHat, $03, nRst, $09
000B98                  	smpsAlterVol        $FA
000B98 E6FA             	dc.b	$E6,$FA
000B9A 98038006         	dc.b	pClosedHH, $03, nRst, $06
000B9E                  	smpsAlterVol        $0E
000B9E E60E             	dc.b	$E6,$0E
000BA0 8203             	dc.b	pESnare, $03
000BA2                  	smpsAlterVol        $F2
000BA2 E6F2             	dc.b	$E6,$F2
000BA4 8180818098808180 	dc.b	pEKick, nRst, pEKick, nRst, pClosedHH, nRst, pEKick, nRst
000BAC                  	smpsAlterVol        $0C
000BAC E60C             	dc.b	$E6,$0C
000BAE 8280068203       	dc.b	pESnare, nRst, $06, pESnare, $03
000BB3                  	smpsAlterVol        $F4
000BB3 E6F4             	dc.b	$E6,$F4
000BB5 9880069803818081 	dc.b	pClosedHH, nRst, $06, pClosedHH, $03, pEKick, nRst, pEKick, nRst, pEKick, nRst, $09
000BBD 80818009
000BC1                  	smpsAlterVol        $06
000BC1 E606             	dc.b	$E6,$06
000BC3 88038006         	dc.b	pEHiHat, $03, nRst, $06
000BC7                  	smpsAlterVol        $FA
000BC7 E6FA             	dc.b	$E6,$FA
000BC9 9803818006980303 	dc.b	pClosedHH, $03, pEKick, nRst, $06, pClosedHH, $03, $03, nRst, pOpenHH, pESnare, pEKick
000BD1 80998281
000BD5 8009980380098103 	dc.b	nRst, $09, pClosedHH, $03, nRst, $09, pEKick, $03, nRst, $15, pClosedHH, $03
000BDD 80159803
000BE1 8009980380099803 	dc.b	nRst, $09, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $15, pEKick, $03
000BE9 80158103
000BED 8009980380099803 	dc.b	nRst, $09, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $15, pClosedHH, $03
000BF5 80159803
000BF9 80098A0380099803 	dc.b	nRst, $09, pClap, $03, nRst, $09, pClosedHH, $03, nRst, $0F, pOpenHH, $03
000C01 800F9903
000C05 800F9803         	dc.b	nRst, $0F, pClosedHH, $03

000C09                  SB_City_PWM2_Loop02:
000C09 802D8A03         	dc.b	nRst, $2D, pClap, $03
000C0D                  	smpsLoop            $00, $03, SB_City_PWM2_Loop02, Target
000C0D F7               	dc.b	$F7
000C0E 0003             	dc.b	$00,$03
                        	if (SB_City_PWM2_Loop02<*)
000C10                  		rom_ptr_z80(SB_City_PWM2_Loop02+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C10 098C             	dc.w  (((((SB_City_PWM2_Loop02+Target))<<8)&$FF00)|((((SB_City_PWM2_Loop02+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C12 800F9903808A8009 	dc.b	nRst, $0F, pOpenHH, $03, nRst, pClap, nRst, $09
000C1A                  	smpsJump            SB_City_PWM2, Target
000C1A F6               	dc.b	$F6
                        	if (SB_City_PWM2<*)
000C1B                  		rom_ptr_z80(SB_City_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C1B 4A89             	dc.w  (((((SB_City_PWM2+Target))<<8)&$FF00)|((((SB_City_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000C1D                  SB_City_PWM3:
000C1D 807F7F7F0F810380 	dc.b	nRst, $7F, $7F, $7F, $0F, pEKick, $03, nRst, $06
000C25 06
000C26                  	smpsAlterVol        $0C
000C26 E60C             	dc.b	$E6,$0C
000C28 82038009         	dc.b	pESnare, $03, nRst, $09
000C2C                  	smpsAlterVol        $F4
000C2C E6F4             	dc.b	$E6,$F4
000C2E 9803801881038012 	dc.b	pClosedHH, $03, nRst, $18, pEKick, $03, nRst, $12
000C36                  	smpsAlterVol        $0E
000C36 E60E             	dc.b	$E6,$0E
000C38 82038018         	dc.b	pESnare, $03, nRst, $18
000C3C                  	smpsAlterVol        $F2
000C3C E6F2             	dc.b	$E6,$F2
000C3E 9803800698038009 	dc.b	pClosedHH, $03, nRst, $06, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $18
000C46 98038018
000C4A                  	smpsAlterVol        $06
000C4A E606             	dc.b	$E6,$06
000C4C 8803801288038018 	dc.b	pEHiHat, $03, nRst, $12, pEHiHat, $03, nRst, $18
000C54                  	smpsAlterVol        $06
000C54 E606             	dc.b	$E6,$06
000C56 8203800682038009 	dc.b	pESnare, $03, nRst, $06, pESnare, $03, nRst, $09, pESnare, $03, nRst, $18
000C5E 82038018
000C62                  	smpsAlterVol        $F4
000C62 E6F4             	dc.b	$E6,$F4
000C64 81038012         	dc.b	pEKick, $03, nRst, $12
000C68                  	smpsAlterVol        $06
000C68 E606             	dc.b	$E6,$06
000C6A 88038018         	dc.b	pEHiHat, $03, nRst, $18
000C6E                  	smpsAlterVol        $FA
000C6E E6FA             	dc.b	$E6,$FA
000C70 98038006         	dc.b	pClosedHH, $03, nRst, $06
000C74                  	smpsAlterVol        $0C
000C74 E60C             	dc.b	$E6,$0C
000C76 8203800982038018 	dc.b	pESnare, $03, nRst, $09, pESnare, $03, nRst, $18
000C7E                  	smpsAlterVol        $FC
000C7E E6FC             	dc.b	$E6,$FC
000C80 8203800C         	dc.b	pESnare, $03, nRst, $0C
000C84                  	smpsAlterVol        $FD
000C84 E6FD             	dc.b	$E6,$FD
000C86 8A03808A         	dc.b	pClap, $03, nRst, pClap
000C8A                  	smpsAlterVol        $FB
000C8A E6FB             	dc.b	$E6,$FB
000C8C 888015           	dc.b	pEHiHat, nRst, $15
000C8F                  	smpsAlterVol        $06
000C8F E606             	dc.b	$E6,$06
000C91 88038006         	dc.b	pEHiHat, $03, nRst, $06
000C95                  	smpsAlterVol        $06
000C95 E606             	dc.b	$E6,$06
000C97 8203800982038018 	dc.b	pESnare, $03, nRst, $09, pESnare, $03, nRst, $18
000C9F                  	smpsAlterVol        $F4
000C9F E6F4             	dc.b	$E6,$F4
000CA1 81038012         	dc.b	pEKick, $03, nRst, $12
000CA5                  	smpsAlterVol        $0E
000CA5 E60E             	dc.b	$E6,$0E
000CA7 82038018         	dc.b	pESnare, $03, nRst, $18
000CAB                  	smpsAlterVol        $FE
000CAB E6FE             	dc.b	$E6,$FE
000CAD 82038006         	dc.b	pESnare, $03, nRst, $06
000CB1                  	smpsAlterVol        $FA
000CB1 E6FA             	dc.b	$E6,$FA
000CB3 88038009         	dc.b	pEHiHat, $03, nRst, $09
000CB7                  	smpsAlterVol        $06
000CB7 E606             	dc.b	$E6,$06
000CB9 82038018         	dc.b	pESnare, $03, nRst, $18
000CBD                  	smpsAlterVol        $FA
000CBD E6FA             	dc.b	$E6,$FA
000CBF 88038012         	dc.b	pEHiHat, $03, nRst, $12
000CC3                  	smpsAlterVol        $08
000CC3 E608             	dc.b	$E6,$08
000CC5 82038018         	dc.b	pESnare, $03, nRst, $18
000CC9                  	smpsAlterVol        $F2
000CC9 E6F2             	dc.b	$E6,$F2
000CCB 98038006         	dc.b	pClosedHH, $03, nRst, $06
000CCF                  	smpsAlterVol        $06
000CCF E606             	dc.b	$E6,$06
000CD1 88038009         	dc.b	pEHiHat, $03, nRst, $09
000CD5                  	smpsAlterVol        $FA
000CD5 E6FA             	dc.b	$E6,$FA
000CD7 9803801881038012 	dc.b	pClosedHH, $03, nRst, $18, pEKick, $03, nRst, $12
000CDF                  	smpsAlterVol        $0E
000CDF E60E             	dc.b	$E6,$0E
000CE1 82038018         	dc.b	pESnare, $03, nRst, $18
000CE5                  	smpsAlterVol        $F2
000CE5 E6F2             	dc.b	$E6,$F2
000CE7 98038006         	dc.b	pClosedHH, $03, nRst, $06
000CEB                  	smpsAlterVol        $06
000CEB E606             	dc.b	$E6,$06
000CED 8803800988038018 	dc.b	pEHiHat, $03, nRst, $09, pEHiHat, $03, nRst, $18
000CF5                  	smpsAlterVol        $08
000CF5 E608             	dc.b	$E6,$08
000CF7 82038006         	dc.b	pESnare, $03, nRst, $06
000CFB                  	smpsAlterVol        $F7
000CFB E6F7             	dc.b	$E6,$F7
000CFD 82038009         	dc.b	pESnare, $03, nRst, $09
000D01                  	smpsAlterVol        $FB
000D01 E6FB             	dc.b	$E6,$FB
000D03 9803             	dc.b	pClosedHH, $03
000D05                  	smpsAlterVol        $05
000D05 E605             	dc.b	$E6,$05
000D07 828015           	dc.b	pESnare, nRst, $15
000D0A                  	smpsAlterVol        $FB
000D0A E6FB             	dc.b	$E6,$FB
000D0C 8103800698038009 	dc.b	pEKick, $03, nRst, $06, pClosedHH, $03, nRst, $09
000D14                  	smpsAlterVol        $06
000D14 E606             	dc.b	$E6,$06
000D16 88038018         	dc.b	pEHiHat, $03, nRst, $18
000D1A                  	smpsAlterVol        $FA
000D1A E6FA             	dc.b	$E6,$FA
000D1C 98038012         	dc.b	pClosedHH, $03, nRst, $12
000D20                  	smpsAlterVol        $06
000D20 E606             	dc.b	$E6,$06
000D22 88038018         	dc.b	pEHiHat, $03, nRst, $18
000D26                  	smpsAlterVol        $FA
000D26 E6FA             	dc.b	$E6,$FA
000D28 8103800698038009 	dc.b	pEKick, $03, nRst, $06, pClosedHH, $03, nRst, $09, pClosedHH, $03, nRst, $18
000D30 98038018
000D34                  	smpsAlterVol        $0E
000D34 E60E             	dc.b	$E6,$0E
000D36 82038012         	dc.b	pESnare, $03, nRst, $12
000D3A                  	smpsAlterVol        $F2
000D3A E6F2             	dc.b	$E6,$F2
000D3C 98038018         	dc.b	pClosedHH, $03, nRst, $18
000D40                  	smpsAlterVol        $06
000D40 E606             	dc.b	$E6,$06
000D42 88038006         	dc.b	pEHiHat, $03, nRst, $06
000D46                  	smpsAlterVol        $FA
000D46 E6FA             	dc.b	$E6,$FA
000D48 98038009         	dc.b	pClosedHH, $03, nRst, $09
000D4C                  	smpsAlterVol        $0C
000D4C E60C             	dc.b	$E6,$0C
000D4E 82038018         	dc.b	pESnare, $03, nRst, $18
000D52                  	smpsAlterVol        $F4
000D52 E6F4             	dc.b	$E6,$F4
000D54 98038012         	dc.b	pClosedHH, $03, nRst, $12
000D58                  	smpsAlterVol        $06
000D58 E606             	dc.b	$E6,$06
000D5A 88038018         	dc.b	pEHiHat, $03, nRst, $18
000D5E                  	smpsAlterVol        $FA
000D5E E6FA             	dc.b	$E6,$FA
000D60 98038006         	dc.b	pClosedHH, $03, nRst, $06
000D64                  	smpsAlterVol        $06
000D64 E606             	dc.b	$E6,$06
000D66 8803800988038018 	dc.b	pEHiHat, $03, nRst, $09, pEHiHat, $03, nRst, $18
000D6E                  	smpsAlterVol        $08
000D6E E608             	dc.b	$E6,$08
000D70 82038006         	dc.b	pESnare, $03, nRst, $06
000D74                  	smpsAlterVol        $F7
000D74 E6F7             	dc.b	$E6,$F7
000D76 8203800988030380 	dc.b	pESnare, $03, nRst, $09, pEHiHat, $03, $03, nRst
000D7E                  	smpsAlterVol        $FB
000D7E E6FB             	dc.b	$E6,$FB
000D80 8188807F7F7F03   	dc.b	pEKick, pEHiHat, nRst, $7F, $7F, $7F, $03
000D87                  	smpsJump            SB_City_PWM3, Target
000D87 F6               	dc.b	$F6
                        	if (SB_City_PWM3<*)
000D88                  		rom_ptr_z80(SB_City_PWM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D88 1D8C             	dc.w  (((((SB_City_PWM3+Target))<<8)&$FF00)|((((SB_City_PWM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000D8A                  SB_City_PWM4:
000D8A 807F7F7F0F820380 	dc.b	nRst, $7F, $7F, $7F, $0F, pESnare, $03, nRst, $2D
000D92 2D
000D93                  	smpsAlterVol        $FA
000D93 E6FA             	dc.b	$E6,$FA
000D95 8803802D         	dc.b	pEHiHat, $03, nRst, $2D
000D99                  	smpsAlterVol        $06
000D99 E606             	dc.b	$E6,$06
000D9B 8203802D         	dc.b	pESnare, $03, nRst, $2D
000D9F                  	smpsAlterVol        $02
000D9F E602             	dc.b	$E6,$02
000DA1 8203802D         	dc.b	pESnare, $03, nRst, $2D
000DA5                  	smpsAlterVol        $F8
000DA5 E6F8             	dc.b	$E6,$F8
000DA7 8803802D8803802D 	dc.b	pEHiHat, $03, nRst, $2D, pEHiHat, $03, nRst, $2D
000DAF                  	smpsAlterVol        $06
000DAF E606             	dc.b	$E6,$06
000DB1 8203805D         	dc.b	pESnare, $03, nRst, $5D
000DB5                  	smpsAlterVol        $F4
000DB5 E6F4             	dc.b	$E6,$F4
000DB7 9803802D         	dc.b	pClosedHH, $03, nRst, $2D
000DBB                  	smpsAlterVol        $0E
000DBB E60E             	dc.b	$E6,$0E
000DBD 8203802D         	dc.b	pESnare, $03, nRst, $2D
000DC1                  	smpsAlterVol        $F8
000DC1 E6F8             	dc.b	$E6,$F8
000DC3 8803802D         	dc.b	pEHiHat, $03, nRst, $2D
000DC7                  	smpsAlterVol        $08
000DC7 E608             	dc.b	$E6,$08
000DC9 8203802D         	dc.b	pESnare, $03, nRst, $2D
000DCD                  	smpsAlterVol        $F2
000DCD E6F2             	dc.b	$E6,$F2
000DCF 8103802D         	dc.b	pEKick, $03, nRst, $2D
000DD3                  	smpsAlterVol        $0E
000DD3 E60E             	dc.b	$E6,$0E
000DD5 8203802D         	dc.b	pESnare, $03, nRst, $2D
000DD9                  	smpsAlterVol        $FE
000DD9 E6FE             	dc.b	$E6,$FE
000DDB 8203802D         	dc.b	pESnare, $03, nRst, $2D
000DDF                  	smpsAlterVol        $F4
000DDF E6F4             	dc.b	$E6,$F4
000DE1 9803801598038015 	dc.b	pClosedHH, $03, nRst, $15, pClosedHH, $03, nRst, $15, pClosedHH, $03, nRst, $2D
000DE9 9803802D
000DED                  	smpsAlterVol        $06
000DED E606             	dc.b	$E6,$06
000DEF 8803802D         	dc.b	pEHiHat, $03, nRst, $2D
000DF3                  	smpsAlterVol        $06
000DF3 E606             	dc.b	$E6,$06
000DF5 8203802D         	dc.b	pESnare, $03, nRst, $2D
000DF9                  	smpsAlterVol        $F4
000DF9 E6F4             	dc.b	$E6,$F4
000DFB 9803802D9803802D 	dc.b	pClosedHH, $03, nRst, $2D, pClosedHH, $03, nRst, $2D
000E03                  	smpsAlterVol        $0E
000E03 E60E             	dc.b	$E6,$0E
000E05 8203802D         	dc.b	pESnare, $03, nRst, $2D
000E09                  	smpsAlterVol        $F8
000E09 E6F8             	dc.b	$E6,$F8
000E0B 8803802D         	dc.b	pEHiHat, $03, nRst, $2D
000E0F                  	smpsAlterVol        $FA
000E0F E6FA             	dc.b	$E6,$FA
000E11 98038015         	dc.b	pClosedHH, $03, nRst, $15
000E15                  	smpsAlterVol        $05
000E15 E605             	dc.b	$E6,$05
000E17 820380           	dc.b	pESnare, $03, nRst
000E1A                  	smpsAlterVol        $FB
000E1A E6FB             	dc.b	$E6,$FB
000E1C 8298807F7F7F03   	dc.b	pESnare, pClosedHH, nRst, $7F, $7F, $7F, $03
000E23                  	smpsAlterVol        $0C
000E23 E60C             	dc.b	$E6,$0C
000E25                  	smpsJump            SB_City_PWM4, Target
000E25 F6               	dc.b	$F6
                        	if (SB_City_PWM4<*)
000E26                  		rom_ptr_z80(SB_City_PWM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000E26 8A8D             	dc.w  (((((SB_City_PWM4+Target))<<8)&$FF00)|((((SB_City_PWM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000E28                  SB_City_Patches:
                        	;Voice $00
000E28 38               	dc.b	$38
000E29 72137111D1521414 	dc.b	$72, $13, $71, $11,	$D1, $52, $14, $14
000E31 0107010100000000 	dc.b	$01, $07, $01, $01,	$00, $00, $00, $00
000E39 FFFFFFFF1E1E1E80 	dc.b	$FF, $FF, $FF, $FF,	$1E, $1E, $1E, $80

                        	;Voice $01
000E41 2A               	dc.b	$2A
000E42 01080604531F1F50 	dc.b	$01, $08, $06, $04,	$53, $1F, $1F, $50
000E4A 1214111F00000000 	dc.b	$12, $14, $11, $1F,	$00, $00, $00, $00
000E52 2915360B17331C80 	dc.b	$29, $15, $36, $0B,	$17, $33, $1C, $80

                        	;Voice $02
000E5A 3B               	dc.b	$3B
000E5B 3E424133DE141E14 	dc.b	$3E, $42, $41, $33,	$DE, $14, $1E, $14
000E63 140F0F0001000000 	dc.b	$14, $0F, $0F, $00,	$01, $00, $00, $00
000E6B 3625262914130A80 	dc.b	$36, $25, $26, $29,	$14, $13, $0A, $80

                        	;Voice $03
000E73 3A               	dc.b	$3A
000E74 010731718E8E8D53 	dc.b	$01, $07, $31, $71,	$8E, $8E, $8D, $53
000E7C 0E0E0E0600000000 	dc.b	$0E, $0E, $0E, $06,	$00, $00, $00, $00
000E84 1FFF1F2F18282780 	dc.b	$1F, $FF, $1F, $2F,	$18, $28, $27, $80

                        	;Voice $04
000E8C 3A               	dc.b	$3A
000E8D 710C33011C161D1F 	dc.b	$71, $0C, $33, $01,	$1C, $16, $1D, $1F
000E95 0406040800010300 	dc.b	$04, $06, $04, $08,	$00, $01, $03, $00
000E9D 161716A6252F2580 	dc.b	$16, $17, $16, $A6,	$25, $2F, $25, $80

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PCRA_D81           00000081 E  PCRA_D82           0000008C E  PCRA_D83           00000085 E
PCRA_D84           00000086 E  PCRA_D85           00000087 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
PFINGSNAPHI        0000008E E  PFINGSNAPLO        0000009E E  PNEPDADA           0000009D E
POPENHH            00000099 E  PRIDEBELL          00000084 E  PSEGA              00000097 E
PSGDELTA           0000000C E  PSGMODCTRL         00000000 E  PSGVOI1            00000004 E
PSGVOI2            00000004 E  PSGVOI3            00000006 E  PSGVOL             00000005 E
PSILENCE           00000096 E  PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E
PTIMPANILO         00000095 E  PTOMHI             00000085 E  PTOMLOW            00000087 E
PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E
PTOMMID            00000086 E  PWMPITCH           00000000 E  PWMVOLL            00000009 E
PWMVOLR            00000009 E  SB_CITY_FM1        00000040    SB_CITY_FM2        0000006B
SB_CITY_FM3        00000173    SB_CITY_FM4        0000027B    SB_CITY_FM5        00000353
SB_CITY_FM6        000003AE    SB_CITY_JUMP1      00000042    SB_CITY_JUMP2      000003B0
SB_CITY_LOOP1      00000044    SB_CITY_LOOP2      000000CD    SB_CITY_LOOP3      000001D5
SB_CITY_LOOP4      0000035F    SB_CITY_LOOP5      0000040B    SB_CITY_LOOP6      00000424
SB_CITY_LOOP7      000004D1    SB_CITY_LOOP8      000004EC    SB_CITY_LOOP9      000005C0
SB_CITY_PATCHES    00000E28    SB_CITY_PSG1       00000495    SB_CITY_PSG2       00000552
SB_CITY_PSG3       00000042    SB_CITY_PWM1       00000626    
SB_CITY_PWM1_LOOP03                           000006F8    
SB_CITY_PWM1_LOOP04                           00000709    
SB_CITY_PWM1_LOOP05                           000007A5    
SB_CITY_PWM1_LOOP06                           000007B7    
SB_CITY_PWM1_LOOP07                           00000812    
SB_CITY_PWM1_LOOP08                           0000084F    
SB_CITY_PWM1_LOOP09                           0000086A    
SB_CITY_PWM1_LOOP0A                           00000875    SB_CITY_PWM2       0000094A
SB_CITY_PWM2_LOOP00                           00000958    
SB_CITY_PWM2_LOOP01                           00000A0D    
SB_CITY_PWM2_LOOP02                           00000C09    SB_CITY_PWM3       00000C1D
SB_CITY_PWM4       00000D8A    SMPSED             000000ED E  SMPSEE             000000EE E
SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E  SMPSMODON          000000F1 E
SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E  SMPSPITCH01HI      0000000C E
SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E  SMPSPITCH02LO      000000E8 E
SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E  SMPSPITCH04HI      00000030 E
SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E  SMPSPITCH05LO      000000C4 E
SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E  SMPSPITCH07HI      00000054 E
SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E  SMPSPITCH08LO      000000A0 E
SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E  SMPSPITCH10HI      00000078 E
SMPSPITCH10LO      00000088 E  TARGET             00040000 E
