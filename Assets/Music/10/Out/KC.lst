                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
       = 00008E         pFingSnap	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm

                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000
000000                  	smpsHeaderVoice	SA3_Factory_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SA3_Factory_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 4593             	dc.w  (((((SA3_Factory_Patches+Target))<<8)&$FF00)|((((SA3_Factory_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan	$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $06
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($06)
                        		if ($06)==0
                        		else
000005 2B               			dc.b	((256 - ((((($06))-1)*256 + ((($06))/2)) / (($06)))) % 256)
                        		endif
000006                  	smpsHeaderFM	SA3_Factory_FM1, Target, $00, $08
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SA3_Factory_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SA3_Factory_FM1+Target))<<8)&$FF00)|((((SA3_Factory_FM1+Target))>>8)&$7F)|$80)
000008 0008             	dc.b	$00,$08
00000A                  	smpsHeaderFM	SA3_Factory_FM2, Target, $00, $08
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SA3_Factory_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A 1E82             	dc.w  (((((SA3_Factory_FM2+Target))<<8)&$FF00)|((((SA3_Factory_FM2+Target))>>8)&$7F)|$80)
00000C 0008             	dc.b	$00,$08
00000E                  	smpsHeaderFM	SA3_Factory_FM3, Target, $00, $09
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SA3_Factory_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 0C83             	dc.w  (((((SA3_Factory_FM3+Target))<<8)&$FF00)|((((SA3_Factory_FM3+Target))>>8)&$7F)|$80)
000010 0009             	dc.b	$00,$09
                        	;!@ smpsHeaderFM	SA3_Factory_FM4, Target, $00, $13
000012                  	smpsHeaderFM	SA3_Factory_FM4, Target, $F4, $23
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SA3_Factory_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 C984             	dc.w  (((((SA3_Factory_FM4+Target))<<8)&$FF00)|((((SA3_Factory_FM4+Target))>>8)&$7F)|$80)
000014 F423             	dc.b	$F4,$23
000016                  	smpsHeaderFM	SA3_Factory_FM5, Target, $00, $08
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SA3_Factory_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 1887             	dc.w  (((((SA3_Factory_FM5+Target))<<8)&$FF00)|((((SA3_Factory_FM5+Target))>>8)&$7F)|$80)
000018 0008             	dc.b	$00,$08
00001A                  	smpsHeaderFM	SA3_Factory_FM6, Target, $00, $08
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SA3_Factory_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A F688             	dc.w  (((((SA3_Factory_FM6+Target))<<8)&$FF00)|((((SA3_Factory_FM6+Target))>>8)&$7F)|$80)
00001C 0008             	dc.b	$00,$08
00001E                  	smpsHeaderPSG	SA3_Factory_PSG1, Target, $00, $05, $00, $00
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SA3_Factory_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E EA89             	dc.w  (((((SA3_Factory_PSG1+Target))<<8)&$FF00)|((((SA3_Factory_PSG1+Target))>>8)&$7F)|$80)
000020 0005             	dc.b	$00,$05
                        	;dc.w	voice
000022 0000             	dc.b	$00,$00
000024                  	smpsHeaderPSG	SA3_Factory_PSG2, Target, $00, $03, $00, $00
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SA3_Factory_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 738C             	dc.w  (((((SA3_Factory_PSG2+Target))<<8)&$FF00)|((((SA3_Factory_PSG2+Target))>>8)&$7F)|$80)
000026 0003             	dc.b	$00,$03
                        	;dc.w	voice
000028 0000             	dc.b	$00,$00
00002A                  	smpsHeaderPSG	SA3_Factory_PSG3, Target, $00, $04, $00, $00
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SA3_Factory_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A A48D             	dc.w  (((((SA3_Factory_PSG3+Target))<<8)&$FF00)|((((SA3_Factory_PSG3+Target))>>8)&$7F)|$80)
00002C 0004             	dc.b	$00,$04
                        	;dc.w	voice
00002E 0000             	dc.b	$00,$00
000030                  	smpsHeaderPWM	SA3_Factory_PWM1, Target, $00, $8F
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SA3_Factory_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 928E             	dc.w  (((((SA3_Factory_PWM1+Target))<<8)&$FF00)|((((SA3_Factory_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	$00
000033 8F               	dc.b	$8F
000034                  	smpsHeaderPWM	SA3_Factory_PWM2, Target, $00, $8F
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SA3_Factory_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 A191             	dc.w  (((((SA3_Factory_PWM2+Target))<<8)&$FF00)|((((SA3_Factory_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	$00
000037 8F               	dc.b	$8F
000038                  	smpsHeaderPWM	SA3_Factory_PWM3, Target, $00, $8F
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SA3_Factory_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 BF92             	dc.w  (((((SA3_Factory_PWM3+Target))<<8)&$FF00)|((((SA3_Factory_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	$00
00003B 8F               	dc.b	$8F
00003C                  	smpsHeaderPWM	SA3_Factory_PWM4, Target, $00, $8F
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SA3_Factory_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 0993             	dc.w  (((((SA3_Factory_PWM4+Target))<<8)&$FF00)|((((SA3_Factory_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	$00
00003F 8F               	dc.b	$8F

000040                  SA3_Factory_FM1:
000040                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E040             		dc.b $E0,panRight
                        	endif
000042                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,$00
                        	endif
000044 CF0280019F03B7AB 	dc.b	nFs6, $02, nRst, $01, nFs2, $03, nFs4, nFs3
00004C 9F93028001CF0280 	dc.b	nFs2, nFs1, $02, nRst, $01, nFs6, $02, nRst
000054 01B7039FAB9F9302 	dc.b	$01, nFs4, $03, nFs2, nFs3, nFs2, nFs1, $02
00005C 80019F028001AB03 	dc.b	nRst, $01, nFs2, $02, nRst, $01, nFs3, $03
000064 CF028001B7039F02 	dc.b	nFs6, $02, nRst, $01, nFs4, $03, nFs2, $02
00006C 8001AB03CF028001 	dc.b	nRst, $01, nFs3, $03, nFs6, $02, nRst, $01
000074 93039F0280019302 	dc.b	nFs1, $03, nFs2, $02, nRst, $01, nFs1, $02
00007C 8001AB039F939F02 	dc.b	nRst, $01, nFs3, $03, nFs2, nFs1, nFs2, $02
000084 80019303         	dc.b	nRst, $01, nFs1, $03

000088                  SA3_Factory_Loop1:
000088 ABCF0280019F03B7 	dc.b	nFs3, nFs6, $02, nRst, $01, nFs2, $03, nFs4
000090                  	smpsLoop		$00, $02, SA3_Factory_Loop1, Target
000090 F7               	dc.b	$F7
000091 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop1<*)
000093                  		rom_ptr_z80(SA3_Factory_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000093 8880             	dc.w  (((((SA3_Factory_Loop1+Target))<<8)&$FF00)|((((SA3_Factory_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000095 AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
00009D 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
0000A5 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
0000AD 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
0000B5 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
0000BD 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
0000C5 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
0000CD 0280019303ABCF02 	dc.b	$02, nRst, $01, nFs1, $03, nFs3, nFs6, $02
0000D5 80019F03B7AB8060 	dc.b	nRst, $01, nFs2, $03, nFs4, nFs3, nRst, $60
0000DD CF0280019F03B7   	dc.b	nFs6, $02, nRst, $01, nFs2, $03, nFs4

0000E4                  SA3_Factory_Loop3:
0000E4 AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
0000EC 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
0000F4 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
0000FC 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
000104 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
00010C 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
000114 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
00011C 0280019303       	dc.b	$02, nRst, $01, nFs1, $03

000121                  SA3_Factory_Loop2:
000121 ABCF0280019F03B7 	dc.b	nFs3, nFs6, $02, nRst, $01, nFs2, $03, nFs4
000129                  	smpsLoop		$00, $02, SA3_Factory_Loop2, Target
000129 F7               	dc.b	$F7
00012A 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop2<*)
00012C                  		rom_ptr_z80(SA3_Factory_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00012C 2181             	dc.w  (((((SA3_Factory_Loop2+Target))<<8)&$FF00)|((((SA3_Factory_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00012E                  	smpsLoop		$01, $05, SA3_Factory_Loop3, Target
00012E F7               	dc.b	$F7
00012F 0105             	dc.b	$01,$05
                        	if (SA3_Factory_Loop3<*)
000131                  		rom_ptr_z80(SA3_Factory_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000131 E480             	dc.w  (((((SA3_Factory_Loop3+Target))<<8)&$FF00)|((((SA3_Factory_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000133 AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
00013B 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
000143 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
00014B 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
000153 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
00015B 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
000163 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
00016B 0280019303ABCF02 	dc.b	$02, nRst, $01, nFs1, $03, nFs3, nFs6, $02
000173 80019F03B7AB807F 	dc.b	nRst, $01, nFs2, $03, nFs4, nFs3, nRst, $7F
                        	;!@ dc.b	$41, nFs6, $02, nRst, $01, nFs2, $03, nFs4
00017B 8041CF0280019F03 	dc.b	nRst, $41, nFs6, $02, nRst, $01, nFs2, $03, nFs4
000183 B7

000184                  SA3_Factory_Loop5:
000184 AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
00018C 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
000194 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
00019C 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
0001A4 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
0001AC 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
0001B4 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
0001BC 0280019303       	dc.b	$02, nRst, $01, nFs1, $03

0001C1                  SA3_Factory_Loop4:
0001C1 ABCF0280019F03B7 	dc.b	nFs3, nFs6, $02, nRst, $01, nFs2, $03, nFs4
0001C9                  	smpsLoop		$00, $02, SA3_Factory_Loop4, Target
0001C9 F7               	dc.b	$F7
0001CA 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop4<*)
0001CC                  		rom_ptr_z80(SA3_Factory_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001CC C181             	dc.w  (((((SA3_Factory_Loop4+Target))<<8)&$FF00)|((((SA3_Factory_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001CE                  	smpsLoop		$01, $05, SA3_Factory_Loop5, Target
0001CE F7               	dc.b	$F7
0001CF 0105             	dc.b	$01,$05
                        	if (SA3_Factory_Loop5<*)
0001D1                  		rom_ptr_z80(SA3_Factory_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001D1 8481             	dc.w  (((((SA3_Factory_Loop5+Target))<<8)&$FF00)|((((SA3_Factory_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001D3 AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
0001DB 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
0001E3 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
0001EB 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
0001F3 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
0001FB 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
000203 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
00020B 0280019303ABCF02 	dc.b	$02, nRst, $01, nFs1, $03, nFs3, nFs6, $02
000213 80019F03B7AB800C 	dc.b	nRst, $01, nFs2, $03, nFs4, nFs3, nRst, $0C
00021B                  	smpsJump		SA3_Factory_FM1, Target
00021B F6               	dc.b	$F6
                        	if (SA3_Factory_FM1<*)
00021C                  		rom_ptr_z80(SA3_Factory_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00021C 4080             	dc.w  (((((SA3_Factory_FM1+Target))<<8)&$FF00)|((((SA3_Factory_FM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00021E                  SA3_Factory_FM2:
00021E                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
00021E EF01             		dc.b $EF,$01
                        	endif
000220 B2038009BCBB0380 	dc.b	nCs4, $03, nRst, $09, nB4, nBb4, $03, nRst
000228 0FB70380B5B7B5B7 	dc.b	$0F, nFs4, $03, nRst, nE4, nFs4, nE4, nFs4
000230 BB8024B2038009BC 	dc.b	nBb4, nRst, $24, nCs4, $03, nRst, $09, nB4
000238 BB03800FB70380B5 	dc.b	nBb4, $03, nRst, $0F, nFs4, $03, nRst, nE4
000240 B7B5B7BB8006BC03 	dc.b	nFs4, nE4, nFs4, nBb4, nRst, $06, nB4, $03
                        	;!@ dc.b	nBb4, nB4, nCs5, nRst, $7F, $7F, $34, nCs5
000248 BBBCBE807F807F80 	dc.b	nBb4, nB4, nCs5, nRst, $7F, nRst, $7F, nRst, $34, nCs5
000250 34BE
000252 038009BCBB03800F 	dc.b	$03, nRst, $09, nB4, nBb4, $03, nRst, $0F
00025A B70380B5B7B5B7BB 	dc.b	nFs4, $03, nRst, nE4, nFs4, nE4, nFs4, nBb4
000262 8024BE038009BCBB 	dc.b	nRst, $24, nCs5, $03, nRst, $09, nB4, nBb4
00026A 03800FB70380B5B7 	dc.b	$03, nRst, $0F, nFs4, $03, nRst, nE4, nFs4
000272 B5B7BB8006BC03BB 	dc.b	nE4, nFs4, nBb4, nRst, $06, nB4, $03, nBb4
00027A BCBE8012BE038009 	dc.b	nB4, nCs5, nRst, $12, nCs5, $03, nRst, $09
000282 BCBB03800FB70380 	dc.b	nB4, nBb4, $03, nRst, $0F, nFs4, $03, nRst
00028A B5B7B5B7BB8024BE 	dc.b	nE4, nFs4, nE4, nFs4, nBb4, nRst, $24, nCs5
000292 038009BCBB03800F 	dc.b	$03, nRst, $09, nB4, nBb4, $03, nRst, $0F
00029A B70380B5B7B5B7BB 	dc.b	nFs4, $03, nRst, nE4, nFs4, nE4, nFs4, nBb4
0002A2 8006BC03BBBCBE80 	dc.b	nRst, $06, nB4, $03, nBb4, nB4, nCs5, nRst
                        	;!@ dc.b	$7F, $53, nCs5, $03, nRst, $09, nB4, nBb4
0002AA 7F8053BE038009BC 	dc.b	$7F, nRst, $53, nCs5, $03, nRst, $09, nB4, nBb4
0002B2 BB
0002B3 03800FB70380B5B7 	dc.b	$03, nRst, $0F, nFs4, $03, nRst, nE4, nFs4
0002BB B5B7BB8024BE0380 	dc.b	nE4, nFs4, nBb4, nRst, $24, nCs5, $03, nRst
0002C3 09BCBB03800FB703 	dc.b	$09, nB4, nBb4, $03, nRst, $0F, nFs4, $03
0002CB 80B5B7B5B7BB8006 	dc.b	nRst, nE4, nFs4, nE4, nFs4, nBb4, nRst, $06
0002D3 BC03BBBCBE8012BE 	dc.b	nB4, $03, nBb4, nB4, nCs5, nRst, $12, nCs5
0002DB 038009BCBB03800F 	dc.b	$03, nRst, $09, nB4, nBb4, $03, nRst, $0F
0002E3 B70380B5B7B5B7BB 	dc.b	nFs4, $03, nRst, nE4, nFs4, nE4, nFs4, nBb4
0002EB 8024BE038009BCBB 	dc.b	nRst, $24, nCs5, $03, nRst, $09, nB4, nBb4
0002F3 03800FB70380B5B7 	dc.b	$03, nRst, $0F, nFs4, $03, nRst, nE4, nFs4
0002FB B5B7BB8006BC03BB 	dc.b	nE4, nFs4, nBb4, nRst, $06, nB4, $03, nBb4
                        	;!@ dc.b	nB4, nCs5, nRst, $7F, $5F
000303 BCBE807F805F     	dc.b	nB4, nCs5, nRst, $7F, nRst, $5F
000309                  	smpsJump		SA3_Factory_FM2, Target
000309 F6               	dc.b	$F6
                        	if (SA3_Factory_FM2<*)
00030A                  		rom_ptr_z80(SA3_Factory_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00030A 1E82             	dc.w  (((((SA3_Factory_FM2+Target))<<8)&$FF00)|((((SA3_Factory_FM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00030C                  SA3_Factory_FM3:
00030C                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00030C E080             		dc.b $E0,panLeft
                        	endif
00030E                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
00030E EF02             		dc.b $EF,$02
                        	endif
                        	;!@ dc.b	nRst, $7F, $29
000310 807F8029         	dc.b	nRst, $7F, nRst, $29
000314                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
000314 EF02             		dc.b $EF,$02
                        	endif
                        	;!@ dc.b	$18, nA4, $02, nRst, $01, nEb4, $02, nRst
000316 8018BA028001B402 	dc.b	nRst, $18, nA4, $02, nRst, $01, nEb4, $02, nRst
00031E 80
00031F 01B0028001AD0280 	dc.b	$01, nB3, $02, nRst, $01, nAb3, $02, nRst
000327 01B4028001B10280 	dc.b	$01, nEb4, $02, nRst, $01, nC4, $02, nRst
00032F 01B8028001B50280 	dc.b	$01, nG4, $02, nRst, $01, nE4, $02, nRst
000337 01B5028001B20280 	dc.b	$01, nE4, $02, nRst, $01, nCs4, $02, nRst
00033F 01B4028001B00280 	dc.b	$01, nEb4, $02, nRst, $01, nB3, $02, nRst
000347 01B2028001AF0280 	dc.b	$01, nCs4, $02, nRst, $01, nBb3, $02, nRst
00034F 01BA028001B00280 	dc.b	$01, nA4, $02, nRst, $01, nB3, $02, nRst
000357 01AF028001AC0280 	dc.b	$01, nBb3, $02, nRst, $01, nG3, $02, nRst
00035F 01B8028001B50280 	dc.b	$01, nG4, $02, nRst, $01, nE4, $02, nRst
000367 01B0028001AD0280 	dc.b	$01, nB3, $02, nRst, $01, nAb3, $02, nRst
00036F 01B5028001B20280 	dc.b	$01, nE4, $02, nRst, $01, nCs4, $02, nRst
000377 01B4028001B10280 	dc.b	$01, nEb4, $02, nRst, $01, nC4, $02, nRst
00037F 01B3028001B00280 	dc.b	$01, nD4, $02, nRst, $01, nB3, $02, nRst
000387 01B8028001B50280 	dc.b	$01, nG4, $02, nRst, $01, nE4, $02, nRst
00038F 07B7028001BB0280 	dc.b	$07, nFs4, $02, nRst, $01, nBb4, $02, nRst
000397 01BE028001C30280 	dc.b	$01, nCs5, $02, nRst, $01, nFs5, $02, nRst
00039F 01BE028001BB0280 	dc.b	$01, nCs5, $02, nRst, $01, nBb4, $02, nRst
0003A7 01B7028001B502   	dc.b	$01, nFs4, $02, nRst, $01, nE4, $02

0003AE                  SA3_Factory_Loop6:
0003AE 8001B7028001BB02 	dc.b	nRst, $01, nFs4, $02, nRst, $01, nBb4, $02
0003B6 8001BE028001C302 	dc.b	nRst, $01, nCs5, $02, nRst, $01, nFs5, $02
0003BE 8001BE028001BB02 	dc.b	nRst, $01, nCs5, $02, nRst, $01, nBb4, $02
0003C6 8001B7028001B202 	dc.b	nRst, $01, nFs4, $02, nRst, $01, nCs4, $02
0003CE                  	smpsLoop		$00, $02, SA3_Factory_Loop6, Target
0003CE F7               	dc.b	$F7
0003CF 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop6<*)
0003D1                  		rom_ptr_z80(SA3_Factory_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003D1 AE83             	dc.w  (((((SA3_Factory_Loop6+Target))<<8)&$FF00)|((((SA3_Factory_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003D3 8001B0028001B502 	dc.b	nRst, $01, nB3, $02, nRst, $01, nE4, $02
0003DB 8001BC028001C102 	dc.b	nRst, $01, nB4, $02, nRst, $01, nE5, $02
0003E3 8001BC028001B502 	dc.b	nRst, $01, nB4, $02, nRst, $01, nE4, $02
0003EB 8001B0028001AD02 	dc.b	nRst, $01, nB3, $02, nRst, $01, nAb3, $02
0003F3 8001B7028001BB02 	dc.b	nRst, $01, nFs4, $02, nRst, $01, nBb4, $02
0003FB 8001BE028001C302 	dc.b	nRst, $01, nCs5, $02, nRst, $01, nFs5, $02
000403 8001BE028001BB02 	dc.b	nRst, $01, nCs5, $02, nRst, $01, nBb4, $02
00040B 8001B7028001B502 	dc.b	nRst, $01, nFs4, $02, nRst, $01, nE4, $02

000413                  SA3_Factory_Loop7:
000413 8001B7028001BB02 	dc.b	nRst, $01, nFs4, $02, nRst, $01, nBb4, $02
00041B 8001BE028001C302 	dc.b	nRst, $01, nCs5, $02, nRst, $01, nFs5, $02
000423 8001BE028001BB02 	dc.b	nRst, $01, nCs5, $02, nRst, $01, nBb4, $02
00042B 8001B7028001B202 	dc.b	nRst, $01, nFs4, $02, nRst, $01, nCs4, $02
000433                  	smpsLoop		$00, $02, SA3_Factory_Loop7, Target
000433 F7               	dc.b	$F7
000434 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop7<*)
000436                  		rom_ptr_z80(SA3_Factory_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000436 1384             	dc.w  (((((SA3_Factory_Loop7+Target))<<8)&$FF00)|((((SA3_Factory_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000438 8001B0028001B502 	dc.b	nRst, $01, nB3, $02, nRst, $01, nE4, $02
000440 8001BC028001C102 	dc.b	nRst, $01, nB4, $02, nRst, $01, nE5, $02
000448 8001BC028001B502 	dc.b	nRst, $01, nB4, $02, nRst, $01, nE4, $02
000450 8001B0028001AD02 	dc.b	nRst, $01, nB3, $02, nRst, $01, nAb3, $02
                        	;!@ dc.b	nRst, $04, $7F, $7F, $67
000458 8004807F807F8067 	dc.b	nRst, $04, nRst, $7F, nRst, $7F, nRst, $67
000460                  	smpsFMvoice		$05
                        	;if song<>""
                        	if 1==2
                        	else
000460 EF05             		dc.b $EF,$05
                        	endif
                        	;!@ dc.b	$18
000462 8018             	dc.b	nRst, $18
000464                  	smpsAlterVol		$0A
000464 E60A             	dc.b	$E6,$0A
000466 B42F8001B62AB403 	dc.b	nEb4, $2F, nRst, $01, nF4, $2A, nEb4, $03
00046E B6B730B92F8007   	dc.b	nF4, nFs4, $30, nAb4, $2F, nRst, $07
000475                  	smpsAlterVol		$F6
000475 E6F6             	dc.b	$E6,$F6

000477                  SA3_Factory_Loop8:
000477 C703800C         	dc.b	nBb5, $03, nRst, $0C
00047B                  	smpsAlterVol		$08
00047B E608             	dc.b	$E6,$08
                        	;!@ ?
00047D C708             	dc.b	nBb5, $08
00047F                  	smpsAlterVol		$0F
00047F E60F             	dc.b	$E6,$0F
000481 01               	dc.b	$01
000482                  	smpsAlterVol		$E9
000482 E6E9             	dc.b	$E6,$E9
000484 028016C703800CC5 	dc.b	$02, nRst, $16, nBb5, $03, nRst, $0C, nAb5
                        	;!@ ?
00048C 06028001C5028004 	dc.b	$06, $02, nRst, $01, nAb5, $02, nRst, $04
000494 C5028004CA038009 	dc.b	nAb5, $02, nRst, $04, nCs6, $03, nRst, $09
00049C                  	smpsLoop		$00, $05, SA3_Factory_Loop8, Target
00049C F7               	dc.b	$F7
00049D 0005             	dc.b	$00,$05
                        	if (SA3_Factory_Loop8<*)
00049F                  		rom_ptr_z80(SA3_Factory_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
00049F 7784             	dc.w  (((((SA3_Factory_Loop8+Target))<<8)&$FF00)|((((SA3_Factory_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004A1 C703800C         	dc.b	nBb5, $03, nRst, $0C
0004A5                  	smpsAlterVol		$08
0004A5 E608             	dc.b	$E6,$08
                        	;!@ ?
0004A7 C708             	dc.b	nBb5, $08
0004A9                  	smpsAlterVol		$0F
0004A9 E60F             	dc.b	$E6,$0F
0004AB 01               	dc.b	$01
0004AC                  	smpsAlterVol		$E9
0004AC E6E9             	dc.b	$E6,$E9
0004AE 028016C703800CC5 	dc.b	$02, nRst, $16, nBb5, $03, nRst, $0C, nAb5
0004B6 06028001C5028004 	dc.b	$06, $02, nRst, $01, nAb5, $02, nRst, $04
0004BE C5028004CA03800F 	dc.b	nAb5, $02, nRst, $04, nCs6, $03, nRst, $0F
0004C6                  	smpsJump		SA3_Factory_FM3, Target
0004C6 F6               	dc.b	$F6
                        	if (SA3_Factory_FM3<*)
0004C7                  		rom_ptr_z80(SA3_Factory_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004C7 0C83             	dc.w  (((((SA3_Factory_FM3+Target))<<8)&$FF00)|((((SA3_Factory_FM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0004C9                  SA3_Factory_FM4:
0004C9                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0004C9 E080             		dc.b $E0,panLeft
                        	endif
0004CB                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
0004CB EF03             		dc.b $EF,$03
                        	endif
0004CD 8015C708         	dc.b	nRst, $15, nBb5, $08
0004D1                  	smpsAlterVol		$0E
0004D1 E60E             	dc.b	$E6,$0E
                        	;!@ dc.b	$01
0004D3 C701             	dc.b	nBb5, $01
0004D5                  	smpsAlterVol		$E9
0004D5 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $25
0004D7 C7028025         	dc.b	nBb5, $02, nRst, $25
0004DB                  	smpsAlterVol		$08
0004DB E608             	dc.b	$E6,$08
0004DD C508             	dc.b	nAb5, $08
0004DF                  	smpsAlterVol		$0F
0004DF E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0004E1 C501             	dc.b	nAb5, $01
0004E3                  	smpsAlterVol		$E9
0004E3 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$03, nRst, nAb5, $02, nRst, $04, nCs6, $03
0004E5 C5038003C5028004 	dc.b	nAb5, $03, nRst, $03, nAb5, $02, nRst, $04, nCs6, $03
0004ED CA03
0004EF 80               	dc.b	nRst
0004F0                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0004F0 E080             		dc.b $E0,panLeft
                        	endif
0004F2 15               	dc.b	$15
0004F3                  	smpsAlterVol		$09
0004F3 E609             	dc.b	$E6,$09
0004F5 C708             	dc.b	nBb5, $08
0004F7                  	smpsAlterVol		$0E
0004F7 E60E             	dc.b	$E6,$0E
                        	;!@ dc.b	$01
0004F9 C701             	dc.b	nBb5, $01
0004FB                  	smpsAlterVol		$E9
0004FB E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $25
0004FD C7028025         	dc.b	nBb5, $02, nRst, $25
000501                  	smpsAlterVol		$08
000501 E608             	dc.b	$E6,$08
000503 C508             	dc.b	nAb5, $08
000505                  	smpsAlterVol		$0F
000505 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
000507 C501             	dc.b	nAb5, $01
000509                  	smpsAlterVol		$E9
000509 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$03, nRst, nAb5, $02, nRst, $04, nCs6, $03
00050B C5038003C5028004 	dc.b	nAb5, $03, nRst, $03, nAb5, $02, nRst, $04, nCs6, $03
000513 CA03
000515 80               	dc.b	nRst
000516                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000516 E080             		dc.b $E0,panLeft
                        	endif
000518 D2028001CC028001 	dc.b	nA6, $02, nRst, $01, nEb6, $02, nRst, $01
000520 C8028001C5028001 	dc.b	nB5, $02, nRst, $01, nAb5, $02, nRst, $01
000528 CC028001C9028001 	dc.b	nEb6, $02, nRst, $01, nC6, $02, nRst, $01
000530 D0028001CD028001 	dc.b	nG6, $02, nRst, $01, nE6, $02, nRst, $01
000538 CD028001CA028001 	dc.b	nE6, $02, nRst, $01, nCs6, $02, nRst, $01
000540 CC028001C8028001 	dc.b	nEb6, $02, nRst, $01, nB5, $02, nRst, $01
000548 CA028001C7028001 	dc.b	nCs6, $02, nRst, $01, nBb5, $02, nRst, $01
000550 D2028001C8028001 	dc.b	nA6, $02, nRst, $01, nB5, $02, nRst, $01
000558 C7028001C4028001 	dc.b	nBb5, $02, nRst, $01, nG5, $02, nRst, $01
000560 D0028001CD028001 	dc.b	nG6, $02, nRst, $01, nE6, $02, nRst, $01
000568 C8028001C5028001 	dc.b	nB5, $02, nRst, $01, nAb5, $02, nRst, $01
000570 CD028001CA028001 	dc.b	nE6, $02, nRst, $01, nCs6, $02, nRst, $01
000578 CC028001C9028001 	dc.b	nEb6, $02, nRst, $01, nC6, $02, nRst, $01
000580 CB028001C8028001 	dc.b	nD6, $02, nRst, $01, nB5, $02, nRst, $01
000588 D0028001CD02800D 	dc.b	nG6, $02, nRst, $01, nE6, $02, nRst, $0D
000590                  	smpsAlterVol		$08
000590 E608             	dc.b	$E6,$08
000592 C708             	dc.b	nBb5, $08
000594                  	smpsAlterVol		$0F
000594 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
000596 C701             	dc.b	nBb5, $01
000598                  	smpsAlterVol		$E9
000598 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04
00059A C7028004         	dc.b	nBb5, $02, nRst, $04
00059E                  	smpsAlterVol		$08
00059E E608             	dc.b	$E6,$08
0005A0 C708             	dc.b	nBb5, $08
0005A2                  	smpsAlterVol		$0F
0005A2 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0005A4 C701             	dc.b	nBb5, $01
0005A6                  	smpsAlterVol		$E9
0005A6 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $16
0005A8 C7028016         	dc.b	nBb5, $02, nRst, $16
0005AC                  	smpsAlterVol		$08
0005AC E608             	dc.b	$E6,$08
0005AE C708             	dc.b	nBb5, $08
0005B0                  	smpsAlterVol		$0F
0005B0 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0005B2 C701             	dc.b	nBb5, $01
0005B4                  	smpsAlterVol		$E9
0005B4 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04, nAb5, $06, $02, nRst, $01
0005B6 C7028004C506C502 	dc.b	nBb5, $02, nRst, $04, nAb5, $06, nAb5, $02, nRst, $01
0005BE 8001
0005C0 C5028004C5028004 	dc.b	nAb5, $02, nRst, $04, nAb5, $02, nRst, $04
0005C8 CA038009         	dc.b	nCs6, $03, nRst, $09	
0005CC                  	smpsAlterVol		$08
0005CC E608             	dc.b	$E6,$08
0005CE C708             	dc.b	nBb5, $08
0005D0                  	smpsAlterVol		$0F
0005D0 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0005D2 C701             	dc.b	nBb5, $01
0005D4                  	smpsAlterVol		$E9
0005D4 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04
0005D6 C7028004         	dc.b	nBb5, $02, nRst, $04
0005DA                  	smpsAlterVol		$08
0005DA E608             	dc.b	$E6,$08
0005DC C708             	dc.b	nBb5, $08
0005DE                  	smpsAlterVol		$0F
0005DE E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0005E0 C701             	dc.b	nBb5, $01
0005E2                  	smpsAlterVol		$E9
0005E2 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $16
0005E4 C7028016         	dc.b	nBb5, $02, nRst, $16
0005E8                  	smpsAlterVol		$08
0005E8 E608             	dc.b	$E6,$08
0005EA C708             	dc.b	nBb5, $08
0005EC                  	smpsAlterVol		$0F
0005EC E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0005EE C701             	dc.b	nBb5, $01
0005F0                  	smpsAlterVol		$E9
0005F0 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04, nAb5, $06, $02, nRst, $01
0005F2 C7028004C506C502 	dc.b	nBb5, $02, nRst, $04, nAb5, $06, nAb5, $02, nRst, $01
0005FA 8001
0005FC C5028004         	dc.b	nAb5, $02, nRst, $04

000600                  SA3_Factory_Loop9:
000600 C5028004CA0380   	dc.b	nAb5, $02, nRst, $04, nCs6, $03, nRst
000607                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000607 E080             		dc.b $E0,panLeft
                        	endif
000609 15               	dc.b	$15
00060A                  	smpsAlterVol		$09
00060A E609             	dc.b	$E6,$09
00060C C708             	dc.b	nBb5, $08
00060E                  	smpsAlterVol		$0E
00060E E60E             	dc.b	$E6,$0E
                        	;!@ dc.b	$01
000610 C701             	dc.b	nBb5, $01
000612                  	smpsAlterVol		$E9
000612 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $16
000614 C7028016         	dc.b	nBb5, $02, nRst, $16
000618                  	smpsAlterVol		$09
000618 E609             	dc.b	$E6,$09
00061A C708             	dc.b	nBb5, $08
00061C                  	smpsAlterVol		$0E
00061C E60E             	dc.b	$E6,$0E
                        	;!@ dc.b	$01
00061E C701             	dc.b	nBb5, $01
000620                  	smpsAlterVol		$E9
000620 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04
000622 C7028004         	dc.b	nBb5, $02, nRst, $04
000626                  	smpsAlterVol		$08
000626 E608             	dc.b	$E6,$08
000628 C508             	dc.b	nAb5, $08
00062A                  	smpsAlterVol		$0F
00062A E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
00062C C501             	dc.b	nAb5, $01
00062E                  	smpsAlterVol		$E9
00062E E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$03, nRst, nAb5, $02, nRst, $04, nCs6, $03
000630 C5038003C5028004 	dc.b	nAb5, $03, nRst, $03, nAb5, $02, nRst, $04, nCs6, $03
000638 CA03
00063A 80               	dc.b	nRst
00063B                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00063B E080             		dc.b $E0,panLeft
                        	endif
00063D 15               	dc.b	$15
00063E                  	smpsAlterVol		$09
00063E E609             	dc.b	$E6,$09
000640 C708             	dc.b	nBb5, $08
000642                  	smpsAlterVol		$0E
000642 E60E             	dc.b	$E6,$0E
                        	;!@ dc.b	$01
000644 C701             	dc.b	nBb5, $01
000646                  	smpsAlterVol		$E9
000646 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $25
000648 C7028025         	dc.b	nBb5, $02, nRst, $25
00064C                  	smpsAlterVol		$08
00064C E608             	dc.b	$E6,$08
00064E C508             	dc.b	nAb5, $08
000650                  	smpsAlterVol		$0F
000650 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
000652 C501             	dc.b	nAb5, $01
000654                  	smpsAlterVol		$E9
000654 E6E9             	dc.b	$E6,$E9
000656 BE0380           	dc.b	nCs5, $03, nRst
000659                  	smpsLoop		$00, $02, SA3_Factory_Loop9, Target
000659 F7               	dc.b	$F7
00065A 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop9<*)
00065C                  		rom_ptr_z80(SA3_Factory_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
00065C 0086             	dc.w  (((((SA3_Factory_Loop9+Target))<<8)&$FF00)|((((SA3_Factory_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00065E C5028004CA0380   	dc.b	nAb5, $02, nRst, $04, nCs6, $03, nRst
000665                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000665 E080             		dc.b $E0,panLeft
                        	endif
                        	;!@ dc.b	$7F, $41
000667 7F8041           	dc.b	$7F, nRst, $41

00066A                  SA3_Factory_Loop10:
00066A                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00066A E080             		dc.b $E0,panLeft
                        	endif
                        	;!@ dc.b	$15
00066C 8015             	dc.b	nRst, $15
00066E                  	smpsAlterVol		$09
00066E E609             	dc.b	$E6,$09
000670 C708             	dc.b	nBb5, $08
000672                  	smpsAlterVol		$0E
000672 E60E             	dc.b	$E6,$0E
                        	;!@ dc.b	$01
000674 C701             	dc.b	nBb5, $01
000676                  	smpsAlterVol		$E9
000676 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $25
000678 C7028025         	dc.b	nBb5, $02, nRst, $25
00067C                  	smpsAlterVol		$08
00067C E608             	dc.b	$E6,$08
00067E C508             	dc.b	nAb5, $08
000680                  	smpsAlterVol		$0F
000680 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
000682 C501             	dc.b	nAb5, $01
000684                  	smpsAlterVol		$E9
000684 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$03, nRst, nAb5, $02, nRst, $04, nCs6, $03
000686 C5038003C5028004 	dc.b	nAb5, $03, nRst, $03, nAb5, $02, nRst, $04, nCs6, $03
00068E CA03
000690 80               	dc.b	nRst
000691                  	smpsLoop		$00, $04, SA3_Factory_Loop10, Target
000691 F7               	dc.b	$F7
000692 0004             	dc.b	$00,$04
                        	if (SA3_Factory_Loop10<*)
000694                  		rom_ptr_z80(SA3_Factory_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
000694 6A86             	dc.w  (((((SA3_Factory_Loop10+Target))<<8)&$FF00)|((((SA3_Factory_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000696                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000696 E080             		dc.b $E0,panLeft
                        	endif
000698 06               	dc.b	$06
000699                  	smpsAlterVol		$08
000699 E608             	dc.b	$E6,$08
00069B C708             	dc.b	nBb5, $08
00069D                  	smpsAlterVol		$0F
00069D E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
00069F C701             	dc.b	nBb5, $01
0006A1                  	smpsAlterVol		$E9
0006A1 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04
0006A3 C7028004         	dc.b	nBb5, $02, nRst, $04
0006A7                  	smpsAlterVol		$08
0006A7 E608             	dc.b	$E6,$08
0006A9 C708             	dc.b	nBb5, $08
0006AB                  	smpsAlterVol		$0F
0006AB E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0006AD C701             	dc.b	nBb5, $01
0006AF                  	smpsAlterVol		$E9
0006AF E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $16
0006B1 C7028016         	dc.b	nBb5, $02, nRst, $16
0006B5                  	smpsAlterVol		$08
0006B5 E608             	dc.b	$E6,$08
0006B7 C708             	dc.b	nBb5, $08
0006B9                  	smpsAlterVol		$0F
0006B9 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0006BB C701             	dc.b	nBb5, $01
0006BD                  	smpsAlterVol		$E9
0006BD E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04, nAb5, $06, $02, nRst, $01
0006BF C7028004C506C502 	dc.b	nBb5, $02, nRst, $04, nAb5, $06, nAb5, $02, nRst, $01
0006C7 8001
0006C9 C5028004C5028004 	dc.b	nAb5, $02, nRst, $04, nAb5, $02, nRst, $04
0006D1 CA038009         	dc.b	nCs6, $03, nRst, $09
0006D5                  	smpsAlterVol		$08
0006D5 E608             	dc.b	$E6,$08
0006D7 C708             	dc.b	nBb5, $08
0006D9                  	smpsAlterVol		$0F
0006D9 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0006DB C701             	dc.b	nBb5, $01
0006DD                  	smpsAlterVol		$E9
0006DD E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04
0006DF C7028004         	dc.b	nBb5, $02, nRst, $04
0006E3                  	smpsAlterVol		$08
0006E3 E608             	dc.b	$E6,$08
0006E5 C708             	dc.b	nBb5, $08
0006E7                  	smpsAlterVol		$0F
0006E7 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0006E9 C701             	dc.b	nBb5, $01
0006EB                  	smpsAlterVol		$E9
0006EB E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $16
0006ED C7028016         	dc.b	nBb5, $02, nRst, $16
0006F1                  	smpsAlterVol		$08
0006F1 E608             	dc.b	$E6,$08
0006F3 C708             	dc.b	nBb5, $08
0006F5                  	smpsAlterVol		$0F
0006F5 E60F             	dc.b	$E6,$0F
                        	;!@ dc.b	$01
0006F7 C701             	dc.b	nBb5, $01
0006F9                  	smpsAlterVol		$E9
0006F9 E6E9             	dc.b	$E6,$E9
                        	;!@ dc.b	$02, nRst, $04, nAb5, $06, $02, nRst, $01
0006FB C7028004C506C502 	dc.b	nBb5, $02, nRst, $04, nAb5, $06, nAb5, $02, nRst, $01
000703 8001
000705 C5028004C5028004 	dc.b	nAb5, $02, nRst, $04, nAb5, $02, nRst, $04
00070D CA0380           	dc.b	nCs6, $03, nRst
000710                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000710 E080             		dc.b $E0,panLeft
                        	endif
000712 0C               	dc.b	$0C
000713                  	smpsAlterVol		$09
000713 E609             	dc.b	$E6,$09
000715                  	smpsJump		SA3_Factory_FM4, Target
000715 F6               	dc.b	$F6
                        	if (SA3_Factory_FM4<*)
000716                  		rom_ptr_z80(SA3_Factory_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000716 C984             	dc.w  (((((SA3_Factory_FM4+Target))<<8)&$FF00)|((((SA3_Factory_FM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000718                  SA3_Factory_FM5:
000718                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000718 E080             		dc.b $E0,panLeft
                        	endif
00071A                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
00071A EF04             		dc.b $EF,$04
                        	endif
00071C CF0280019F03B7AB 	dc.b	nFs6, $02, nRst, $01, nFs2, $03, nFs4, nFs3
000724 9F93028001CF0280 	dc.b	nFs2, nFs1, $02, nRst, $01, nFs6, $02, nRst
00072C 01B7039FAB9F9302 	dc.b	$01, nFs4, $03, nFs2, nFs3, nFs2, nFs1, $02
000734 80019F028001AB03 	dc.b	nRst, $01, nFs2, $02, nRst, $01, nFs3, $03
00073C CF028001B7039F02 	dc.b	nFs6, $02, nRst, $01, nFs4, $03, nFs2, $02
000744 8001AB03CF028001 	dc.b	nRst, $01, nFs3, $03, nFs6, $02, nRst, $01
00074C 93039F0280019302 	dc.b	nFs1, $03, nFs2, $02, nRst, $01, nFs1, $02
000754 8001AB039F939F02 	dc.b	nRst, $01, nFs3, $03, nFs2, nFs1, nFs2, $02
00075C 80019303         	dc.b	nRst, $01, nFs1, $03

000760                  SA3_Factory_Loop11:
000760 ABCF0280019F03B7 	dc.b	nFs3, nFs6, $02, nRst, $01, nFs2, $03, nFs4
000768                  	smpsLoop		$00, $02, SA3_Factory_Loop11, Target
000768 F7               	dc.b	$F7
000769 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop11<*)
00076B                  		rom_ptr_z80(SA3_Factory_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
00076B 6087             	dc.w  (((((SA3_Factory_Loop11+Target))<<8)&$FF00)|((((SA3_Factory_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00076D AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
000775 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
00077D 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
000785 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
00078D 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
000795 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
00079D 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
0007A5 0280019303ABCF02 	dc.b	$02, nRst, $01, nFs1, $03, nFs3, nFs6, $02
0007AD 80019F03B7AB8060 	dc.b	nRst, $01, nFs2, $03, nFs4, nFs3, nRst, $60
0007B5 CF0280019F03B7   	dc.b	nFs6, $02, nRst, $01, nFs2, $03, nFs4

0007BC                  SA3_Factory_Loop13:
0007BC AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
0007C4 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
0007CC 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
0007D4 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
0007DC 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
0007E4 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
0007EC 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
0007F4 0280019303       	dc.b	$02, nRst, $01, nFs1, $03

0007F9                  SA3_Factory_Loop12:
0007F9 ABCF0280019F03B7 	dc.b	nFs3, nFs6, $02, nRst, $01, nFs2, $03, nFs4
000801                  	smpsLoop		$00, $02, SA3_Factory_Loop12, Target
000801 F7               	dc.b	$F7
000802 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop12<*)
000804                  		rom_ptr_z80(SA3_Factory_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
000804 F987             	dc.w  (((((SA3_Factory_Loop12+Target))<<8)&$FF00)|((((SA3_Factory_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000806                  	smpsLoop		$01, $05, SA3_Factory_Loop13, Target
000806 F7               	dc.b	$F7
000807 0105             	dc.b	$01,$05
                        	if (SA3_Factory_Loop13<*)
000809                  		rom_ptr_z80(SA3_Factory_Loop13+Target)
                        	;dc.w z80_ptr(ptr,addr)
000809 BC87             	dc.w  (((((SA3_Factory_Loop13+Target))<<8)&$FF00)|((((SA3_Factory_Loop13+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00080B AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
000813 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
00081B 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
000823 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
00082B 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
000833 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
00083B 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
000843 0280019303ABCF02 	dc.b	$02, nRst, $01, nFs1, $03, nFs3, nFs6, $02
00084B 80019F03B7AB807F 	dc.b	nRst, $01, nFs2, $03, nFs4, nFs3, nRst, $7F
                        	;!@ dc.b	$41, nFs6, $02, nRst, $01, nFs2, $03, nFs4
000853 8041CF0280019F03 	dc.b	nRst, $41, nFs6, $02, nRst, $01, nFs2, $03, nFs4
00085B B7

00085C                  SA3_Factory_Loop15:
00085C AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
000864 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
00086C 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
000874 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
00087C 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
000884 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
00088C 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
000894 0280019303       	dc.b	$02, nRst, $01, nFs1, $03

000899                  SA3_Factory_Loop14:
000899 ABCF0280019F03B7 	dc.b	nFs3, nFs6, $02, nRst, $01, nFs2, $03, nFs4
0008A1                  	smpsLoop		$00, $02, SA3_Factory_Loop14, Target
0008A1 F7               	dc.b	$F7
0008A2 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop14<*)
0008A4                  		rom_ptr_z80(SA3_Factory_Loop14+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008A4 9988             	dc.w  (((((SA3_Factory_Loop14+Target))<<8)&$FF00)|((((SA3_Factory_Loop14+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0008A6                  	smpsLoop		$01, $05, SA3_Factory_Loop15, Target
0008A6 F7               	dc.b	$F7
0008A7 0105             	dc.b	$01,$05
                        	if (SA3_Factory_Loop15<*)
0008A9                  		rom_ptr_z80(SA3_Factory_Loop15+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008A9 5C88             	dc.w  (((((SA3_Factory_Loop15+Target))<<8)&$FF00)|((((SA3_Factory_Loop15+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0008AB AB9F93028001CF02 	dc.b	nFs3, nFs2, nFs1, $02, nRst, $01, nFs6, $02
0008B3 8001B7039FAB9F93 	dc.b	nRst, $01, nFs4, $03, nFs2, nFs3, nFs2, nFs1
0008BB 0280019F028001AB 	dc.b	$02, nRst, $01, nFs2, $02, nRst, $01, nFs3
0008C3 03CF028001B7039F 	dc.b	$03, nFs6, $02, nRst, $01, nFs4, $03, nFs2
0008CB 028001AB03CF0280 	dc.b	$02, nRst, $01, nFs3, $03, nFs6, $02, nRst
0008D3 0193039F02800193 	dc.b	$01, nFs1, $03, nFs2, $02, nRst, $01, nFs1
0008DB 028001AB039F939F 	dc.b	$02, nRst, $01, nFs3, $03, nFs2, nFs1, nFs2
0008E3 0280019303ABCF02 	dc.b	$02, nRst, $01, nFs1, $03, nFs3, nFs6, $02
0008EB 80019F03B7AB800C 	dc.b	nRst, $01, nFs2, $03, nFs4, nFs3, nRst, $0C
0008F3                  	smpsJump		SA3_Factory_FM5, Target
0008F3 F6               	dc.b	$F6
                        	if (SA3_Factory_FM5<*)
0008F4                  		rom_ptr_z80(SA3_Factory_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008F4 1887             	dc.w  (((((SA3_Factory_FM5+Target))<<8)&$FF00)|((((SA3_Factory_FM5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0008F6                  SA3_Factory_FM6:
0008F6                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
0008F6 EF04             		dc.b $EF,$04
                        	endif
0008F8                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0008F8 E0C0             		dc.b $E0,panCenter
                        	endif
0008FA                  	smpsAlterVol		$05
0008FA E605             	dc.b	$E6,$05
0008FC BE038009BCBB0380 	dc.b	nCs5, $03, nRst, $09, nB4, nBb4, $03, nRst
000904 0FB70380B5B7B5B7 	dc.b	$0F, nFs4, $03, nRst, nE4, nFs4, nE4, nFs4
00090C BB8024BE038009BC 	dc.b	nBb4, nRst, $24, nCs5, $03, nRst, $09, nB4
000914 BB03800FB70380B5 	dc.b	nBb4, $03, nRst, $0F, nFs4, $03, nRst, nE4
00091C B7B5B7BB8006BC03 	dc.b	nFs4, nE4, nFs4, nBb4, nRst, $06, nB4, $03
                        	;!@ dc.b	nBb4, nB4, nCs5, nRst, $7F, $7F, $34, nCs5
000924 BBBCBE807F807F80 	dc.b	nBb4, nB4, nCs5, nRst, $7F, nRst, $7F, nRst, $34, nCs5
00092C 34BE
00092E 038009BCBB03800F 	dc.b	$03, nRst, $09, nB4, nBb4, $03, nRst, $0F
000936 B70380B5B7B5B7BB 	dc.b	nFs4, $03, nRst, nE4, nFs4, nE4, nFs4, nBb4
00093E 8024BE038009BCBB 	dc.b	nRst, $24, nCs5, $03, nRst, $09, nB4, nBb4
000946 03800FB70380B5B7 	dc.b	$03, nRst, $0F, nFs4, $03, nRst, nE4, nFs4
00094E B5B7BB8006BC03BB 	dc.b	nE4, nFs4, nBb4, nRst, $06, nB4, $03, nBb4
000956 BCBE8012BE038009 	dc.b	nB4, nCs5, nRst, $12, nCs5, $03, nRst, $09
00095E BCBB03800FB70380 	dc.b	nB4, nBb4, $03, nRst, $0F, nFs4, $03, nRst
000966 B5B7B5B7BB8024BE 	dc.b	nE4, nFs4, nE4, nFs4, nBb4, nRst, $24, nCs5
00096E 038009BCBB03800F 	dc.b	$03, nRst, $09, nB4, nBb4, $03, nRst, $0F
000976 B70380B5B7B5B7BB 	dc.b	nFs4, $03, nRst, nE4, nFs4, nE4, nFs4, nBb4
00097E 8006BC03BBBCBE80 	dc.b	nRst, $06, nB4, $03, nBb4, nB4, nCs5, nRst
                        	;!@ dc.b	$7F, $53, nCs5, $03, nRst, $09, nB4, nBb4
000986 7F8053BE038009BC 	dc.b	$7F, nRst, $53, nCs5, $03, nRst, $09, nB4, nBb4
00098E BB
                        	
00098F 03800FB70380B5B7 	dc.b	$03, nRst, $0F, nFs4, $03, nRst, nE4, nFs4
000997 B5B7BB8024BE0380 	dc.b	nE4, nFs4, nBb4, nRst, $24, nCs5, $03, nRst
00099F 09BCBB03800FB703 	dc.b	$09, nB4, nBb4, $03, nRst, $0F, nFs4, $03
0009A7 80B5B7B5B7BB8006 	dc.b	nRst, nE4, nFs4, nE4, nFs4, nBb4, nRst, $06
0009AF BC03BBBCBE8012BE 	dc.b	nB4, $03, nBb4, nB4, nCs5, nRst, $12, nCs5
0009B7 038009BCBB03800F 	dc.b	$03, nRst, $09, nB4, nBb4, $03, nRst, $0F
0009BF B70380B5B7B5B7BB 	dc.b	nFs4, $03, nRst, nE4, nFs4, nE4, nFs4, nBb4
0009C7 8024BE038009BCBB 	dc.b	nRst, $24, nCs5, $03, nRst, $09, nB4, nBb4
0009CF 03800FB70380B5B7 	dc.b	$03, nRst, $0F, nFs4, $03, nRst, nE4, nFs4
0009D7 B5B7BB8006BC03BB 	dc.b	nE4, nFs4, nBb4, nRst, $06, nB4, $03, nBb4
                        	;!@ dc.b	nB4, nCs5, nRst, $7F, $5F
0009DF BCBE807F805F     	dc.b	nB4, nCs5, nRst, $7F, nRst, $5F
0009E5                  	smpsAlterVol		$FB
0009E5 E6FB             	dc.b	$E6,$FB
0009E7                  	smpsJump		SA3_Factory_FM6, Target
0009E7 F6               	dc.b	$F6
                        	if (SA3_Factory_FM6<*)
0009E8                  		rom_ptr_z80(SA3_Factory_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0009E8 F688             	dc.w  (((((SA3_Factory_FM6+Target))<<8)&$FF00)|((((SA3_Factory_FM6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0009EA                  SA3_Factory_PSG1:
0009EA 8012             	dc.b	nRst, $12
0009EC                  	smpsPSGvoice	$00
0009EC F500             	dc.b	$F5,$00
                        	;!@ dc.b	$03, nFs2, $08
0009EE 80039F08         	dc.b	nRst, $03, nFs2, $08
0009F2                  	smpsSetVol	$05
0009F2 EC05             	dc.b	$EC,$05
0009F4 01               	dc.b	$01
0009F5                  	smpsSetVol	$F8
0009F5 ECF8             	dc.b	$EC,$F8
0009F7 028025           	dc.b	$02, nRst, $25
0009FA                  	smpsSetVol	$03
0009FA EC03             	dc.b	$EC,$03
0009FC 9D08             	dc.b	nE2, $08
0009FE                  	smpsSetVol	$05
0009FE EC05             	dc.b	$EC,$05
000A00 01               	dc.b	$01
000A01                  	smpsSetVol	$F8
000A01 ECF8             	dc.b	$EC,$F8
000A03 03809D028004A103 	dc.b	$03, nRst, nE2, $02, nRst, $04, nAb2, $03
000A0B 8018             	dc.b	nRst, $18
000A0D                  	smpsSetVol	$04
000A0D EC04             	dc.b	$EC,$04
000A0F 9F08             	dc.b	nFs2, $08
000A11                  	smpsSetVol	$05
000A11 EC05             	dc.b	$EC,$05
000A13 01               	dc.b	$01
000A14                  	smpsSetVol	$F7
000A14 ECF7             	dc.b	$EC,$F7
000A16 028025           	dc.b	$02, nRst, $25
000A19                  	smpsSetVol	$03
000A19 EC03             	dc.b	$EC,$03
000A1B 9D08             	dc.b	nE2, $08
000A1D                  	smpsSetVol	$06
000A1D EC06             	dc.b	$EC,$06
000A1F 01               	dc.b	$01
000A20                  	smpsSetVol	$F7
000A20 ECF7             	dc.b	$EC,$F7
000A22 03809D028004A103 	dc.b	$03, nRst, nE2, $02, nRst, $04, nAb2, $03
000A2A 80AE0196         	dc.b	nRst, nA3, $01, nA1
000A2E                  	smpsPSGvoice	$03
000A2E F503             	dc.b	$F5,$03
000A30 8002900180028C01 	dc.b	nRst, $02, nEb1, $01, nRst, $02, nB0, $01
000A38 8002890180029001 	dc.b	nRst, $02, nAb0, $01, nRst, $02, nEb1, $01
000A40 80028D0180029401 	dc.b	nRst, $02, nC1, $01, nRst, $02, nG1, $01
000A48 8002910180029101 	dc.b	nRst, $02, nE1, $01, nRst, $02, nE1, $01
000A50 80028E0180029001 	dc.b	nRst, $02, nCs1, $01, nRst, $02, nEb1, $01
000A58 80028C0180028E01 	dc.b	nRst, $02, nB0, $01, nRst, $02, nCs1, $01
000A60 80028B0180029601 	dc.b	nRst, $02, nBb0, $01, nRst, $02, nA1, $01
000A68 80028C0180028B01 	dc.b	nRst, $02, nB0, $01, nRst, $02, nBb0, $01
000A70 8002880180029401 	dc.b	nRst, $02, nG0, $01, nRst, $02, nG1, $01
000A78 8002910180028C01 	dc.b	nRst, $02, nE1, $01, nRst, $02, nB0, $01
000A80 8002890180029101 	dc.b	nRst, $02, nAb0, $01, nRst, $02, nE1, $01
000A88 80028E0180029001 	dc.b	nRst, $02, nCs1, $01, nRst, $02, nEb1, $01
000A90 80028D0180028F01 	dc.b	nRst, $02, nC1, $01, nRst, $02, nD1, $01
000A98 80028C0180029401 	dc.b	nRst, $02, nB0, $01, nRst, $02, nG1, $01
000AA0 8002910180800793 	dc.b	nRst, $02, nE1, $01, nRst, nRst, $07, nFs1
000AA8 018002970180029A 	dc.b	$01, nRst, $02, nBb1, $01, nRst, $02, nCs2
000AB0 0180029F0180029A 	dc.b	$01, nRst, $02, nFs2, $01, nRst, $02, nCs2
000AB8 0180029701800293 	dc.b	$01, nRst, $02, nBb1, $01, nRst, $02, nFs1
000AC0 0180029101       	dc.b	$01, nRst, $02, nE1, $01

000AC5                  SA3_Factory_Loop16:
000AC5 8002930180029701 	dc.b	nRst, $02, nFs1, $01, nRst, $02, nBb1, $01
000ACD 80029A0180029F01 	dc.b	nRst, $02, nCs2, $01, nRst, $02, nFs2, $01
000AD5 80029A0180029701 	dc.b	nRst, $02, nCs2, $01, nRst, $02, nBb1, $01
000ADD 8002930180028E01 	dc.b	nRst, $02, nFs1, $01, nRst, $02, nCs1, $01
000AE5                  	smpsLoop		$00, $02, SA3_Factory_Loop16, Target
000AE5 F7               	dc.b	$F7
000AE6 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop16<*)
000AE8                  		rom_ptr_z80(SA3_Factory_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
000AE8 C58A             	dc.w  (((((SA3_Factory_Loop16+Target))<<8)&$FF00)|((((SA3_Factory_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000AEA 80028C0180029101 	dc.b	nRst, $02, nB0, $01, nRst, $02, nE1, $01
000AF2 8002980180029D01 	dc.b	nRst, $02, nB1, $01, nRst, $02, nE2, $01
000AFA 8002980180029101 	dc.b	nRst, $02, nB1, $01, nRst, $02, nE1, $01
000B02 80028C0180028901 	dc.b	nRst, $02, nB0, $01, nRst, $02, nAb0, $01
000B0A 8002930180029701 	dc.b	nRst, $02, nFs1, $01, nRst, $02, nBb1, $01
000B12 80029A0180029F01 	dc.b	nRst, $02, nCs2, $01, nRst, $02, nFs2, $01
000B1A 80029A0180029701 	dc.b	nRst, $02, nCs2, $01, nRst, $02, nBb1, $01
000B22 8002930180029101 	dc.b	nRst, $02, nFs1, $01, nRst, $02, nE1, $01

000B2A                  SA3_Factory_Loop17:
000B2A 8002930180029701 	dc.b	nRst, $02, nFs1, $01, nRst, $02, nBb1, $01
000B32 80029A0180029F01 	dc.b	nRst, $02, nCs2, $01, nRst, $02, nFs2, $01
000B3A 80029A0180029701 	dc.b	nRst, $02, nCs2, $01, nRst, $02, nBb1, $01
000B42 8002930180028E01 	dc.b	nRst, $02, nFs1, $01, nRst, $02, nCs1, $01
000B4A                  	smpsLoop		$00, $02, SA3_Factory_Loop17, Target
000B4A F7               	dc.b	$F7
000B4B 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop17<*)
000B4D                  		rom_ptr_z80(SA3_Factory_Loop17+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B4D 2A8B             	dc.w  (((((SA3_Factory_Loop17+Target))<<8)&$FF00)|((((SA3_Factory_Loop17+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B4F 80028C0180029101 	dc.b	nRst, $02, nB0, $01, nRst, $02, nE1, $01
000B57 8002980180029D01 	dc.b	nRst, $02, nB1, $01, nRst, $02, nE2, $01
000B5F 8002980180029101 	dc.b	nRst, $02, nB1, $01, nRst, $02, nE1, $01
000B67 80028C0180028901 	dc.b	nRst, $02, nB0, $01, nRst, $02, nAb0, $01
000B6F 8013             	dc.b	nRst, $13
000B71                  	smpsPSGvoice	$00
000B71 F500             	dc.b	$F5,$00
                        	;!@ dc.b	$03
000B73 8003             	dc.b	nRst, $03
000B75                  	smpsSetVol	$04
000B75 EC04             	dc.b	$EC,$04
000B77 9F08             	dc.b	nFs2, $08
000B79                  	smpsSetVol	$05
000B79 EC05             	dc.b	$EC,$05
000B7B 01               	dc.b	$01
000B7C                  	smpsSetVol	$F7
000B7C ECF7             	dc.b	$EC,$F7
000B7E 028016           	dc.b	$02, nRst, $16
000B81                  	smpsSetVol	$04
000B81 EC04             	dc.b	$EC,$04
000B83 9F08             	dc.b	nFs2, $08
000B85                  	smpsSetVol	$05
000B85 EC05             	dc.b	$EC,$05
000B87 01               	dc.b	$01
000B88                  	smpsSetVol	$F7
000B88 ECF7             	dc.b	$EC,$F7
000B8A 028004           	dc.b	$02, nRst, $04
000B8D                  	smpsSetVol	$03
000B8D EC03             	dc.b	$EC,$03
000B8F 9D08             	dc.b	nE2, $08
000B91                  	smpsSetVol	$06
000B91 EC06             	dc.b	$EC,$06
000B93 01               	dc.b	$01
000B94                  	smpsSetVol	$F7
000B94 ECF7             	dc.b	$EC,$F7
000B96 03809D028004A103 	dc.b	$03, nRst, nE2, $02, nRst, $04, nAb2, $03
000B9E 8018             	dc.b	nRst, $18
000BA0                  	smpsSetVol	$04
000BA0 EC04             	dc.b	$EC,$04
000BA2 9F08             	dc.b	nFs2, $08
000BA4                  	smpsSetVol	$05
000BA4 EC05             	dc.b	$EC,$05
000BA6 01               	dc.b	$01
000BA7                  	smpsSetVol	$F7
000BA7 ECF7             	dc.b	$EC,$F7
000BA9 028025           	dc.b	$02, nRst, $25
000BAC                  	smpsSetVol	$03
000BAC EC03             	dc.b	$EC,$03
000BAE 9D08             	dc.b	nE2, $08
000BB0                  	smpsSetVol	$06
000BB0 EC06             	dc.b	$EC,$06
000BB2 01               	dc.b	$01
000BB3                  	smpsSetVol	$F7
000BB3 ECF7             	dc.b	$EC,$F7
000BB5 9503809D028004A1 	dc.b	nAb1, $03, nRst, nE2, $02, nRst, $04, nAb2
000BBD 038018           	dc.b	$03, nRst, $18
000BC0                  	smpsSetVol	$04
000BC0 EC04             	dc.b	$EC,$04
000BC2 9F08             	dc.b	nFs2, $08
000BC4                  	smpsSetVol	$05
000BC4 EC05             	dc.b	$EC,$05
000BC6 01               	dc.b	$01
000BC7                  	smpsSetVol	$F7
000BC7 ECF7             	dc.b	$EC,$F7
000BC9 028016           	dc.b	$02, nRst, $16
000BCC                  	smpsSetVol	$04
000BCC EC04             	dc.b	$EC,$04
000BCE 9F08             	dc.b	nFs2, $08
000BD0                  	smpsSetVol	$05
000BD0 EC05             	dc.b	$EC,$05
000BD2 01               	dc.b	$01
000BD3                  	smpsSetVol	$F7
000BD3 ECF7             	dc.b	$EC,$F7
000BD5 028004           	dc.b	$02, nRst, $04
000BD8                  	smpsSetVol	$03
000BD8 EC03             	dc.b	$EC,$03
000BDA 9D08             	dc.b	nE2, $08
000BDC                  	smpsSetVol	$06
000BDC EC06             	dc.b	$EC,$06
000BDE 01               	dc.b	$01
000BDF                  	smpsSetVol	$F7
000BDF ECF7             	dc.b	$EC,$F7
000BE1 03809D028004A103 	dc.b	$03, nRst, nE2, $02, nRst, $04, nAb2, $03
000BE9 8018             	dc.b	nRst, $18
000BEB                  	smpsSetVol	$04
000BEB EC04             	dc.b	$EC,$04
000BED 9F08             	dc.b	nFs2, $08
000BEF                  	smpsSetVol	$05
000BEF EC05             	dc.b	$EC,$05
000BF1 01               	dc.b	$01
000BF2                  	smpsSetVol	$F7
000BF2 ECF7             	dc.b	$EC,$F7
000BF4 028025           	dc.b	$02, nRst, $25
000BF7                  	smpsSetVol	$03
000BF7 EC03             	dc.b	$EC,$03
000BF9 9D08             	dc.b	nE2, $08
000BFB                  	smpsSetVol	$06
000BFB EC06             	dc.b	$EC,$06
000BFD 01               	dc.b	$01
000BFE                  	smpsSetVol	$F7
000BFE ECF7             	dc.b	$EC,$F7
000C00 9503809D028004A1 	dc.b	nAb1, $03, nRst, nE2, $02, nRst, $04, nAb2
000C08 03               	dc.b	$03
000C09                  	smpsPSGvoice	$05
000C09 F505             	dc.b	$F5,$05
000C0B 80               	dc.b	nRst
000C0C                  	smpsSetVol	$04
000C0C EC04             	dc.b	$EC,$04
000C0E 8C2F80018E2A8C03 	dc.b	nB0, $2F, nRst, $01, nCs1, $2A, nB0, $03
000C16 8E8F30912F8007   	dc.b	nCs1, nD1, $30, nE1, $2F, nRst, $07
000C1D                  	smpsSetVol	$FC
000C1D ECFC             	dc.b	$EC,$FC

000C1F                  SA3_Factory_Loop18:
000C1F 9F03800C         	dc.b	nFs2, $03, nRst, $0C
000C23                  	smpsSetVol	$03
000C23 EC03             	dc.b	$EC,$03
000C25 9F08             	dc.b	nFs2, $08
000C27                  	smpsSetVol	$06
000C27 EC06             	dc.b	$EC,$06
000C29 01               	dc.b	$01
000C2A                  	smpsSetVol	$F7
000C2A ECF7             	dc.b	$EC,$F7
000C2C 0280169F03800C9D 	dc.b	$02, nRst, $16, nFs2, $03, nRst, $0C, nE2
000C34 060280019D028004 	dc.b	$06, $02, nRst, $01, nE2, $02, nRst, $04
000C3C 9D028004A1038009 	dc.b	nE2, $02, nRst, $04, nAb2, $03, nRst, $09
000C44                  	smpsLoop		$00, $05, SA3_Factory_Loop18, Target
000C44 F7               	dc.b	$F7
000C45 0005             	dc.b	$00,$05
                        	if (SA3_Factory_Loop18<*)
000C47                  		rom_ptr_z80(SA3_Factory_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C47 1F8C             	dc.w  (((((SA3_Factory_Loop18+Target))<<8)&$FF00)|((((SA3_Factory_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C49 9F03800C         	dc.b	nFs2, $03, nRst, $0C
000C4D                  	smpsSetVol	$03
000C4D EC03             	dc.b	$EC,$03
000C4F 9F08             	dc.b	nFs2, $08
000C51                  	smpsSetVol	$06
000C51 EC06             	dc.b	$EC,$06
000C53 01               	dc.b	$01
000C54                  	smpsSetVol	$F7
000C54 ECF7             	dc.b	$EC,$F7
000C56 0280169F03800C9D 	dc.b	$02, nRst, $16, nFs2, $03, nRst, $0C, nE2
000C5E 060280019D028004 	dc.b	$06, $02, nRst, $01, nE2, $02, nRst, $04
000C66 9D028004A103800F 	dc.b	nE2, $02, nRst, $04, nAb2, $03, nRst, $0F
000C6E                  	smpsSetVol	$03
000C6E EC03             	dc.b	$EC,$03
000C70                  	smpsJump		SA3_Factory_PSG1, Target
000C70 F6               	dc.b	$F6
                        	if (SA3_Factory_PSG1<*)
000C71                  		rom_ptr_z80(SA3_Factory_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C71 EA89             	dc.w  (((((SA3_Factory_PSG1+Target))<<8)&$FF00)|((((SA3_Factory_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000C73                  SA3_Factory_PSG2:
000C73                  	smpsPSGvoice	$04
000C73 F504             	dc.b	$F5,$04

000C75                  SA3_Factory_Loop19:
000C75 8703818081818187 	dc.b	nFs0, $03, nC0, nRst, nC0, nC0, nC0, nFs0
000C7D 8180818581808185 	dc.b	nC0, nRst, nC0, nE0, nC0, nRst, nC0, nE0
000C85 8181818781808581 	dc.b	nC0, nC0, nC0, nFs0, nC0, nRst, nE0, nC0
000C8D 8081808181878185 	dc.b	nRst, nC0, nRst, nC0, nC0, nFs0, nC0, nE0
000C95 81               	dc.b	nC0
000C96                  	smpsLoop		$00, $02, SA3_Factory_Loop19, Target
000C96 F7               	dc.b	$F7
000C97 0002             	dc.b	$00,$02
                        	if (SA3_Factory_Loop19<*)
000C99                  		rom_ptr_z80(SA3_Factory_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
000C99 758C             	dc.w  (((((SA3_Factory_Loop19+Target))<<8)&$FF00)|((((SA3_Factory_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000C9B 8702             	dc.b	nFs0, $02
000C9D                  	smpsSetVol	$FF
000C9D ECFF             	dc.b	$EC,$FF
000C9F E701810380818181 	dc.b	smpsNoAttack, $01, nC0, $03, nRst, nC0, nC0, nC0
000CA7 8781808185818081 	dc.b	nFs0, nC0, nRst, nC0, nE0, nC0, nRst, nC0
000CAF 8581818187818085 	dc.b	nE0, nC0, nC0, nC0, nFs0, nC0, nRst, nE0
000CB7 8180818081818781 	dc.b	nC0, nRst, nC0, nRst, nC0, nC0, nFs0, nC0
000CBF 8006             	dc.b	nRst, $06
000CC1                  	smpsPSGvoice	$00
000CC1 F500             	dc.b	$F5,$00
                        	;!@ dc.b	$06
000CC3 8006             	dc.b	nRst, $06
000CC5                  	smpsSetVol	$03
000CC5 EC03             	dc.b	$EC,$03
000CC7 9F08             	dc.b	nFs2, $08
000CC9                  	smpsSetVol	$06
000CC9 EC06             	dc.b	$EC,$06
000CCB 01               	dc.b	$01
000CCC                  	smpsSetVol	$F7
000CCC ECF7             	dc.b	$EC,$F7
000CCE 028004           	dc.b	$02, nRst, $04
000CD1                  	smpsSetVol	$03
000CD1 EC03             	dc.b	$EC,$03
000CD3 9F08             	dc.b	nFs2, $08
000CD5                  	smpsSetVol	$06
000CD5 EC06             	dc.b	$EC,$06
000CD7 01               	dc.b	$01
000CD8                  	smpsSetVol	$F7
000CD8 ECF7             	dc.b	$EC,$F7
000CDA 028016           	dc.b	$02, nRst, $16
000CDD                  	smpsSetVol	$03
000CDD EC03             	dc.b	$EC,$03
000CDF 9F08             	dc.b	nFs2, $08
000CE1                  	smpsSetVol	$06
000CE1 EC06             	dc.b	$EC,$06
000CE3 01               	dc.b	$01
000CE4                  	smpsSetVol	$F7
000CE4 ECF7             	dc.b	$EC,$F7
000CE6 0280049D06028001 	dc.b	$02, nRst, $04, nE2, $06, $02, nRst, $01
000CEE 9D0280049D028004 	dc.b	nE2, $02, nRst, $04, nE2, $02, nRst, $04
000CF6 A1038009         	dc.b	nAb2, $03, nRst, $09
000CFA                  	smpsSetVol	$03
000CFA EC03             	dc.b	$EC,$03
000CFC 9F08             	dc.b	nFs2, $08
000CFE                  	smpsSetVol	$06
000CFE EC06             	dc.b	$EC,$06
000D00 01               	dc.b	$01
000D01                  	smpsSetVol	$F7
000D01 ECF7             	dc.b	$EC,$F7
000D03 028004           	dc.b	$02, nRst, $04
000D06                  	smpsSetVol	$03
000D06 EC03             	dc.b	$EC,$03
000D08 9F08             	dc.b	nFs2, $08
000D0A                  	smpsSetVol	$06
000D0A EC06             	dc.b	$EC,$06
000D0C 01               	dc.b	$01
000D0D                  	smpsSetVol	$F7
000D0D ECF7             	dc.b	$EC,$F7
000D0F 028016           	dc.b	$02, nRst, $16
000D12                  	smpsSetVol	$03
000D12 EC03             	dc.b	$EC,$03
000D14 9F08             	dc.b	nFs2, $08
000D16                  	smpsSetVol	$06
000D16 EC06             	dc.b	$EC,$06
000D18 01               	dc.b	$01
000D19                  	smpsSetVol	$F7
000D19 ECF7             	dc.b	$EC,$F7
000D1B 0280049D06028001 	dc.b	$02, nRst, $04, nE2, $06, $02, nRst, $01
000D23 9D0280049D028004 	dc.b	nE2, $02, nRst, $04, nE2, $02, nRst, $04
000D2B A10380           	dc.b	nAb2, $03, nRst
000D2E                  	smpsPSGvoice	$04
000D2E F504             	dc.b	$F5,$04

000D30                  SA3_Factory_Loop20:
000D30 8781808181818781 	dc.b	nFs0, nC0, nRst, nC0, nC0, nC0, nFs0, nC0
000D38 8081858180818581 	dc.b	nRst, nC0, nE0, nC0, nRst, nC0, nE0, nC0
000D40 8181878180858180 	dc.b	nC0, nC0, nFs0, nC0, nRst, nE0, nC0, nRst
000D48 8180818187818581 	dc.b	nC0, nRst, nC0, nC0, nFs0, nC0, nE0, nC0
000D50                  	smpsLoop		$00, $05, SA3_Factory_Loop20, Target
000D50 F7               	dc.b	$F7
000D51 0005             	dc.b	$00,$05
                        	if (SA3_Factory_Loop20<*)
000D53                  		rom_ptr_z80(SA3_Factory_Loop20+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D53 308D             	dc.w  (((((SA3_Factory_Loop20+Target))<<8)&$FF00)|((((SA3_Factory_Loop20+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000D55 8781808181818781 	dc.b	nFs0, nC0, nRst, nC0, nC0, nC0, nFs0, nC0
000D5D 8081858180818581 	dc.b	nRst, nC0, nE0, nC0, nRst, nC0, nE0, nC0
000D65 8181878180858180 	dc.b	nC0, nC0, nFs0, nC0, nRst, nE0, nC0, nRst
000D6D 8180818187818006 	dc.b	nC0, nRst, nC0, nC0, nFs0, nC0, nRst, $06

000D75                  SA3_Factory_Loop21:
000D75 8703818081818187 	dc.b	nFs0, $03, nC0, nRst, nC0, nC0, nC0, nFs0
000D7D 8180818581808185 	dc.b	nC0, nRst, nC0, nE0, nC0, nRst, nC0, nE0
000D85 8181818781808581 	dc.b	nC0, nC0, nC0, nFs0, nC0, nRst, nE0, nC0
000D8D 8081808181878185 	dc.b	nRst, nC0, nRst, nC0, nC0, nFs0, nC0, nE0
000D95 81               	dc.b	nC0
000D96                  	smpsLoop		$00, $04, SA3_Factory_Loop21, Target
000D96 F7               	dc.b	$F7
000D97 0004             	dc.b	$00,$04
                        	if (SA3_Factory_Loop21<*)
000D99                  		rom_ptr_z80(SA3_Factory_Loop21+Target)
                        	;dc.w z80_ptr(ptr,addr)
000D99 758D             	dc.w  (((((SA3_Factory_Loop21+Target))<<8)&$FF00)|((((SA3_Factory_Loop21+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nRst, $7F, $4D
000D9B 807F804D         	dc.b	nRst, $7F, nRst, $4D
000D9F                  	smpsSetVol	$01
000D9F EC01             	dc.b	$EC,$01
000DA1                  	smpsJump		SA3_Factory_Loop19, Target
000DA1 F6               	dc.b	$F6
                        	if (SA3_Factory_Loop19<*)
000DA2                  		rom_ptr_z80(SA3_Factory_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
000DA2 758C             	dc.w  (((((SA3_Factory_Loop19+Target))<<8)&$FF00)|((((SA3_Factory_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000DA4                  SA3_Factory_PSG3:
000DA4                  	smpsPSGvoice	$00
000DA4 F500             	dc.b	$F5,$00
000DA6 B2038009B0AF0380 	dc.b	nCs4, $03, nRst, $09, nB3, nBb3, $03, nRst
000DAE 0FAB0380A9ABA9AB 	dc.b	$0F, nFs3, $03, nRst, nE3, nFs3, nE3, nFs3
000DB6 AF8024B2038009B0 	dc.b	nBb3, nRst, $24, nCs4, $03, nRst, $09, nB3
000DBE AF03800FAB0380A9 	dc.b	nBb3, $03, nRst, $0F, nFs3, $03, nRst, nE3
000DC6 ABA9ABAF8006B003 	dc.b	nFs3, nE3, nFs3, nBb3, nRst, $06, nB3, $03
                        	;!@ dc.b	nBb3, nB3, nCs4, nRst, $7F, $7F, $34, nCs4
000DCE AFB0B2807F807F80 	dc.b	nBb3, nB3, nCs4, nRst, $7F, nRst, $7F, nRst, $34, nCs4
000DD6 34B2
000DD8 038009B0AF03800F 	dc.b	$03, nRst, $09, nB3, nBb3, $03, nRst, $0F
000DE0 AB0380A9ABA9ABAF 	dc.b	nFs3, $03, nRst, nE3, nFs3, nE3, nFs3, nBb3
000DE8 8024B2038009B0AF 	dc.b	nRst, $24, nCs4, $03, nRst, $09, nB3, nBb3
000DF0 03800FAB0380A9AB 	dc.b	$03, nRst, $0F, nFs3, $03, nRst, nE3, nFs3
000DF8 A9ABAF8006B003AF 	dc.b	nE3, nFs3, nBb3, nRst, $06, nB3, $03, nBb3
000E00 B0B28012B2038009 	dc.b	nB3, nCs4, nRst, $12, nCs4, $03, nRst, $09
000E08 B0AF03800FAB0380 	dc.b	nB3, nBb3, $03, nRst, $0F, nFs3, $03, nRst
000E10 A9ABA9ABAF8024B2 	dc.b	nE3, nFs3, nE3, nFs3, nBb3, nRst, $24, nCs4
000E18 038009B0AF03800F 	dc.b	$03, nRst, $09, nB3, nBb3, $03, nRst, $0F
000E20 AB0380A9ABA9ABAF 	dc.b	nFs3, $03, nRst, nE3, nFs3, nE3, nFs3, nBb3
000E28 8006B003AFB0B280 	dc.b	nRst, $06, nB3, $03, nBb3, nB3, nCs4, nRst
                        	;!@ dc.b	$7F, $53, nCs4, $03, nRst, $09, nB3, nBb3
000E30 7F8053B2038009B0 	dc.b	$7F, nRst, $53, nCs4, $03, nRst, $09, nB3, nBb3
000E38 AF
000E39 03800FAB0380A9AB 	dc.b	$03, nRst, $0F, nFs3, $03, nRst, nE3, nFs3
000E41 A9ABAF8024B20380 	dc.b	nE3, nFs3, nBb3, nRst, $24, nCs4, $03, nRst
000E49 09B0AF03800FAB03 	dc.b	$09, nB3, nBb3, $03, nRst, $0F, nFs3, $03
000E51 80A9ABA9ABAF8006 	dc.b	nRst, nE3, nFs3, nE3, nFs3, nBb3, nRst, $06
000E59 B003AFB0B28012B2 	dc.b	nB3, $03, nBb3, nB3, nCs4, nRst, $12, nCs4
000E61 038009B0AF03800F 	dc.b	$03, nRst, $09, nB3, nBb3, $03, nRst, $0F
000E69 AB0380A9ABA9ABAF 	dc.b	nFs3, $03, nRst, nE3, nFs3, nE3, nFs3, nBb3
000E71 8024B2038009B0AF 	dc.b	nRst, $24, nCs4, $03, nRst, $09, nB3, nBb3
000E79 03800FAB0380A9AB 	dc.b	$03, nRst, $0F, nFs3, $03, nRst, nE3, nFs3
000E81 A9ABAF8006B003AF 	dc.b	nE3, nFs3, nBb3, nRst, $06, nB3, $03, nBb3
                        	;!@ dc.b	nB3, nCs4, nRst, $7F, $5F
000E89 B0B2807F805F     	dc.b	nB3, nCs4, nRst, $7F, nRst, $5F
000E8F                  	smpsJump		SA3_Factory_PSG3, Target
000E8F F6               	dc.b	$F6
                        	if (SA3_Factory_PSG3<*)
000E90                  		rom_ptr_z80(SA3_Factory_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000E90 A48D             	dc.w  (((((SA3_Factory_PSG3+Target))<<8)&$FF00)|((((SA3_Factory_PSG3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000E92                  SA3_Factory_PWM1:
000E92 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
000E9A 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
000EA2                  	smpsAlterVol		$1A
000EA2 E61A             	dc.b	$E6,$1A
000EA4 88028001         	dc.b	pEHiHat, $02, nRst, $01
000EA8                  	smpsAlterVol		$F1
000EA8 E6F1             	dc.b	$E6,$F1
000EAA 98028001         	dc.b	pClosedHH, $02, nRst, $01
000EAE                  	smpsAlterVol		$F5
000EAE E6F5             	dc.b	$E6,$F5
000EB0 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
000EB8 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
000EC0                  	smpsAlterVol		$0B
000EC0 E60B             	dc.b	$E6,$0B
000EC2 98028001         	dc.b	pClosedHH, $02, nRst, $01
000EC6                  	smpsAlterVol		$F5
000EC6 E6F5             	dc.b	$E6,$F5
000EC8 82028001         	dc.b	pESnare, $02, nRst, $01

000ECC                  SA3_Factory_PWM1_Loop1:
000ECC 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
000ED4 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
000EDC                  	smpsAlterVol		$1A
000EDC E61A             	dc.b	$E6,$1A
000EDE 88028001         	dc.b	pEHiHat, $02, nRst, $01
000EE2                  	smpsAlterVol		$F1
000EE2 E6F1             	dc.b	$E6,$F1
000EE4 98028001         	dc.b	pClosedHH, $02, nRst, $01
000EE8                  	smpsAlterVol		$F5
000EE8 E6F5             	dc.b	$E6,$F5
000EEA 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
000EF2 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
000EFA                  	smpsAlterVol		$0B
000EFA E60B             	dc.b	$E6,$0B
000EFC 9802800182028001 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $01
000F04                  	smpsAlterVol		$F5
000F04 E6F5             	dc.b	$E6,$F5
000F06                  	smpsLoop		$00, $02, SA3_Factory_PWM1_Loop1, Target
000F06 F7               	dc.b	$F7
000F07 0002             	dc.b	$00,$02
                        	if (SA3_Factory_PWM1_Loop1<*)
000F09                  		rom_ptr_z80(SA3_Factory_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000F09 CC8E             	dc.w  (((((SA3_Factory_PWM1_Loop1+Target))<<8)&$FF00)|((((SA3_Factory_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000F0B 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
000F13 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
000F1B                  	smpsAlterVol		$1A
000F1B E61A             	dc.b	$E6,$1A
000F1D 88028001         	dc.b	pEHiHat, $02, nRst, $01
000F21                  	smpsAlterVol		$F1
000F21 E6F1             	dc.b	$E6,$F1
000F23 98028001         	dc.b	pClosedHH, $02, nRst, $01
000F27                  	smpsAlterVol		$F5
000F27 E6F5             	dc.b	$E6,$F5
000F29 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
000F31 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
000F39                  	smpsAlterVol		$0B
000F39 E60B             	dc.b	$E6,$0B
000F3B 9802800182028055 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $55
000F43                  	smpsAlterVol		$F5
000F43 E6F5             	dc.b	$E6,$F5
000F45 8C0680           	dc.b	pASnare, $06, nRst

000F48                  SA3_Factory_PWM1_Loop2:
000F48 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
000F50 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
000F58                  	smpsAlterVol		$1A
000F58 E61A             	dc.b	$E6,$1A
000F5A 88028001         	dc.b	pEHiHat, $02, nRst, $01
000F5E                  	smpsAlterVol		$F1
000F5E E6F1             	dc.b	$E6,$F1
000F60 98028001         	dc.b	pClosedHH, $02, nRst, $01
000F64                  	smpsAlterVol		$F5
000F64 E6F5             	dc.b	$E6,$F5
000F66 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
000F6E 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
000F76                  	smpsAlterVol		$0B
000F76 E60B             	dc.b	$E6,$0B
000F78 9802800182028001 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $01
000F80                  	smpsAlterVol		$F5
000F80 E6F5             	dc.b	$E6,$F5
000F82                  	smpsLoop		$00, $08, SA3_Factory_PWM1_Loop2, Target
000F82 F7               	dc.b	$F7
000F83 0008             	dc.b	$00,$08
                        	if (SA3_Factory_PWM1_Loop2<*)
000F85                  		rom_ptr_z80(SA3_Factory_PWM1_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000F85 488F             	dc.w  (((((SA3_Factory_PWM1_Loop2+Target))<<8)&$FF00)|((((SA3_Factory_PWM1_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000F87 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
000F8F 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
000F97                  	smpsAlterVol		$1A
000F97 E61A             	dc.b	$E6,$1A
000F99 88028001         	dc.b	pEHiHat, $02, nRst, $01
000F9D                  	smpsAlterVol		$F1
000F9D E6F1             	dc.b	$E6,$F1
000F9F 98028001         	dc.b	pClosedHH, $02, nRst, $01
000FA3                  	smpsAlterVol		$F5
000FA3 E6F5             	dc.b	$E6,$F5
000FA5 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
000FAD 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
000FB5                  	smpsAlterVol		$0B
000FB5 E60B             	dc.b	$E6,$0B
000FB7 98028001         	dc.b	pClosedHH, $02, nRst, $01
000FBB                  	smpsAlterVol		$F5
000FBB E6F5             	dc.b	$E6,$F5
000FBD 82028001         	dc.b	pESnare, $02, nRst, $01

000FC1                  SA3_Factory_PWM1_Loop3:
000FC1 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
000FC9 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
000FD1                  	smpsAlterVol		$1A
000FD1 E61A             	dc.b	$E6,$1A
000FD3 88028001         	dc.b	pEHiHat, $02, nRst, $01
000FD7                  	smpsAlterVol		$F1
000FD7 E6F1             	dc.b	$E6,$F1
000FD9 98028001         	dc.b	pClosedHH, $02, nRst, $01
000FDD                  	smpsAlterVol		$F5
000FDD E6F5             	dc.b	$E6,$F5
000FDF 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
000FE7 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
000FEF                  	smpsAlterVol		$0B
000FEF E60B             	dc.b	$E6,$0B
000FF1 9802800182028001 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $01
000FF9                  	smpsAlterVol		$F5
000FF9 E6F5             	dc.b	$E6,$F5
000FFB                  	smpsLoop		$00, $03, SA3_Factory_PWM1_Loop3, Target
000FFB F7               	dc.b	$F7
000FFC 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM1_Loop3<*)
000FFE                  		rom_ptr_z80(SA3_Factory_PWM1_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000FFE C18F             	dc.w  (((((SA3_Factory_PWM1_Loop3+Target))<<8)&$FF00)|((((SA3_Factory_PWM1_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
001000 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
001008 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
001010                  	smpsAlterVol		$1A
001010 E61A             	dc.b	$E6,$1A
001012 88028001         	dc.b	pEHiHat, $02, nRst, $01
001016                  	smpsAlterVol		$F1
001016 E6F1             	dc.b	$E6,$F1
001018 98028001         	dc.b	pClosedHH, $02, nRst, $01
00101C                  	smpsAlterVol		$F5
00101C E6F5             	dc.b	$E6,$F5
00101E 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
001026 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
00102E                  	smpsAlterVol		$0B
00102E E60B             	dc.b	$E6,$0B
001030 98028001         	dc.b	pClosedHH, $02, nRst, $01
001034                  	smpsAlterVol		$F5
001034 E6F5             	dc.b	$E6,$F5
001036 8202800181028004 	dc.b	pESnare, $02, nRst, $01, pEKick, $02, nRst, $04
00103E 810280048C028001 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $01
001046 82028001         	dc.b	pESnare, $02, nRst, $01
00104A                  	smpsAlterVol		$1A
00104A E61A             	dc.b	$E6,$1A
00104C 88028001         	dc.b	pEHiHat, $02, nRst, $01
001050                  	smpsAlterVol		$F1
001050 E6F1             	dc.b	$E6,$F1
001052 98028001         	dc.b	pClosedHH, $02, nRst, $01
001056                  	smpsAlterVol		$F5
001056 E6F5             	dc.b	$E6,$F5
001058 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
001060 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
001068                  	smpsAlterVol		$0B
001068 E60B             	dc.b	$E6,$0B
00106A 9802800182028001 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $01
001072                  	smpsAlterVol		$F5
001072 E6F5             	dc.b	$E6,$F5
001074 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
00107C 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
001084                  	smpsAlterVol		$1A
001084 E61A             	dc.b	$E6,$1A
001086 88028001         	dc.b	pEHiHat, $02, nRst, $01
00108A                  	smpsAlterVol		$F1
00108A E6F1             	dc.b	$E6,$F1
00108C 98028001         	dc.b	pClosedHH, $02, nRst, $01
001090                  	smpsAlterVol		$F5
001090 E6F5             	dc.b	$E6,$F5
001092 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
00109A 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
0010A2                  	smpsAlterVol		$0B
0010A2 E60B             	dc.b	$E6,$0B
0010A4 9802800182028025 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $25
0010AC                  	smpsAlterVol		$F5
0010AC E6F5             	dc.b	$E6,$F5
0010AE 8C0680           	dc.b	pASnare, $06, nRst

0010B1                  SA3_Factory_PWM1_Loop4:
0010B1 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
0010B9 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
0010C1                  	smpsAlterVol		$1A
0010C1 E61A             	dc.b	$E6,$1A
0010C3 88028001         	dc.b	pEHiHat, $02, nRst, $01
0010C7                  	smpsAlterVol		$F1
0010C7 E6F1             	dc.b	$E6,$F1
0010C9 98028001         	dc.b	pClosedHH, $02, nRst, $01
0010CD                  	smpsAlterVol		$F5
0010CD E6F5             	dc.b	$E6,$F5
0010CF 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
0010D7 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
0010DF                  	smpsAlterVol		$0B
0010DF E60B             	dc.b	$E6,$0B
0010E1 98028001         	dc.b	pClosedHH, $02, nRst, $01
0010E5                  	smpsAlterVol		$F5
0010E5 E6F5             	dc.b	$E6,$F5
0010E7 8202800181028004 	dc.b	pESnare, $02, nRst, $01, pEKick, $02, nRst, $04
0010EF 810280048C028001 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $01
0010F7 82028001         	dc.b	pESnare, $02, nRst, $01
0010FB                  	smpsAlterVol		$1A
0010FB E61A             	dc.b	$E6,$1A
0010FD 88028001         	dc.b	pEHiHat, $02, nRst, $01
001101                  	smpsAlterVol		$F1
001101 E6F1             	dc.b	$E6,$F1
001103 98028001         	dc.b	pClosedHH, $02, nRst, $01
001107                  	smpsAlterVol		$F5
001107 E6F5             	dc.b	$E6,$F5
001109 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
001111 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
001119                  	smpsAlterVol		$0B
001119 E60B             	dc.b	$E6,$0B
00111B 9802800182028001 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $01
001123                  	smpsAlterVol		$F5
001123 E6F5             	dc.b	$E6,$F5
001125                  	smpsLoop		$00, $05, SA3_Factory_PWM1_Loop4, Target
001125 F7               	dc.b	$F7
001126 0005             	dc.b	$00,$05
                        	if (SA3_Factory_PWM1_Loop4<*)
001128                  		rom_ptr_z80(SA3_Factory_PWM1_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
001128 B190             	dc.w  (((((SA3_Factory_PWM1_Loop4+Target))<<8)&$FF00)|((((SA3_Factory_PWM1_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00112A 8102800481028004 	dc.b	pEKick, $02, nRst, $04, pEKick, $02, nRst, $04
001132 8C02800182028001 	dc.b	pASnare, $02, nRst, $01, pESnare, $02, nRst, $01
00113A                  	smpsAlterVol		$1A
00113A E61A             	dc.b	$E6,$1A
00113C 88028001         	dc.b	pEHiHat, $02, nRst, $01
001140                  	smpsAlterVol		$F1
001140 E6F1             	dc.b	$E6,$F1
001142 98028001         	dc.b	pClosedHH, $02, nRst, $01
001146                  	smpsAlterVol		$F5
001146 E6F5             	dc.b	$E6,$F5
001148 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
001150 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
001158                  	smpsAlterVol		$0B
001158 E60B             	dc.b	$E6,$0B
00115A 98028001         	dc.b	pClosedHH, $02, nRst, $01
00115E                  	smpsAlterVol		$F5
00115E E6F5             	dc.b	$E6,$F5
001160 8202800181028004 	dc.b	pESnare, $02, nRst, $01, pEKick, $02, nRst, $04
001168 810280048C028001 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $01
001170 82028001         	dc.b	pESnare, $02, nRst, $01
001174                  	smpsAlterVol		$1A
001174 E61A             	dc.b	$E6,$1A
001176 88028001         	dc.b	pEHiHat, $02, nRst, $01
00117A                  	smpsAlterVol		$F1
00117A E6F1             	dc.b	$E6,$F1
00117C 98028001         	dc.b	pClosedHH, $02, nRst, $01
001180                  	smpsAlterVol		$F5
001180 E6F5             	dc.b	$E6,$F5
001182 8102800182028001 	dc.b	pEKick, $02, nRst, $01, pESnare, $02, nRst, $01
00118A 810280048C028004 	dc.b	pEKick, $02, nRst, $04, pASnare, $02, nRst, $04
001192                  	smpsAlterVol		$0B
001192 E60B             	dc.b	$E6,$0B
001194 980280018202800D 	dc.b	pClosedHH, $02, nRst, $01, pESnare, $02, nRst, $0D
00119C                  	smpsAlterVol		$F5
00119C E6F5             	dc.b	$E6,$F5
00119E                  	smpsJump		SA3_Factory_PWM1, Target
00119E F6               	dc.b	$F6
                        	if (SA3_Factory_PWM1<*)
00119F                  		rom_ptr_z80(SA3_Factory_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00119F 928E             	dc.w  (((((SA3_Factory_PWM1+Target))<<8)&$FF00)|((((SA3_Factory_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
0011A1                  SA3_Factory_PWM2:
0011A1 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0011A9 8802800781028001 	dc.b	pEHiHat, $02, nRst, $07, pEKick, $02, nRst, $01
0011B1 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0011B9 8802800A         	dc.b	pEHiHat, $02, nRst, $0A
0011BD                  	smpsLoop		$00, $03, SA3_Factory_PWM2, Target
0011BD F7               	dc.b	$F7
0011BE 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM2<*)
0011C0                  		rom_ptr_z80(SA3_Factory_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0011C0 A191             	dc.w  (((((SA3_Factory_PWM2+Target))<<8)&$FF00)|((((SA3_Factory_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0011C2 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0011CA 8802800798028001 	dc.b	pEHiHat, $02, nRst, $07, pClosedHH, $02, nRst, $01
0011D2 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0011DA 8802805E820680   	dc.b	pEHiHat, $02, nRst, $5E, pESnare, $06, nRst

0011E1                  SA3_Factory_PWM2_Loop1:
0011E1 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0011E9 8802800781028001 	dc.b	pEHiHat, $02, nRst, $07, pEKick, $02, nRst, $01
0011F1 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0011F9 8802800A98028004 	dc.b	pEHiHat, $02, nRst, $0A, pClosedHH, $02, nRst, $04
001201 9802800488028007 	dc.b	pClosedHH, $02, nRst, $04, pEHiHat, $02, nRst, $07
001209 9802800198028004 	dc.b	pClosedHH, $02, nRst, $01, pClosedHH, $02, nRst, $04
001211 980280048802800A 	dc.b	pClosedHH, $02, nRst, $04, pEHiHat, $02, nRst, $0A
001219                  	smpsLoop		$00, $04, SA3_Factory_PWM2_Loop1, Target
001219 F7               	dc.b	$F7
00121A 0004             	dc.b	$00,$04
                        	if (SA3_Factory_PWM2_Loop1<*)
00121C                  		rom_ptr_z80(SA3_Factory_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00121C E191             	dc.w  (((((SA3_Factory_PWM2_Loop1+Target))<<8)&$FF00)|((((SA3_Factory_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00121E                  SA3_Factory_PWM2_Loop2:
00121E 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
001226 8802800781028001 	dc.b	pEHiHat, $02, nRst, $07, pEKick, $02, nRst, $01
00122E 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
001236 8802800A         	dc.b	pEHiHat, $02, nRst, $0A
00123A                  	smpsLoop		$00, $03, SA3_Factory_PWM2_Loop2, Target
00123A F7               	dc.b	$F7
00123B 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM2_Loop2<*)
00123D                  		rom_ptr_z80(SA3_Factory_PWM2_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00123D 1E92             	dc.w  (((((SA3_Factory_PWM2_Loop2+Target))<<8)&$FF00)|((((SA3_Factory_PWM2_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00123F 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
001247 880280079802     	dc.b	pEHiHat, $02, nRst, $07, pClosedHH, $02

00124D                  SA3_Factory_PWM2_Loop3:
00124D 8001980280049802 	dc.b	nRst, $01, pClosedHH, $02, nRst, $04, pClosedHH, $02
001255 80048802800A9802 	dc.b	nRst, $04, pEHiHat, $02, nRst, $0A, pClosedHH, $02
00125D 8004980280048802 	dc.b	nRst, $04, pClosedHH, $02, nRst, $04, pEHiHat, $02
001265 80078102         	dc.b	nRst, $07, pEKick, $02
001269                  	smpsLoop		$00, $03, SA3_Factory_PWM2_Loop3, Target
001269 F7               	dc.b	$F7
00126A 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM2_Loop3<*)
00126C                  		rom_ptr_z80(SA3_Factory_PWM2_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00126C 4D92             	dc.w  (((((SA3_Factory_PWM2_Loop3+Target))<<8)&$FF00)|((((SA3_Factory_PWM2_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00126E 8001980280049802 	dc.b	nRst, $01, pClosedHH, $02, nRst, $04, pClosedHH, $02
001276 80048802802E8206 	dc.b	nRst, $04, pEHiHat, $02, nRst, $2E, pESnare, $06
00127E 80               	dc.b	nRst

00127F                  SA3_Factory_PWM2_Loop4:
00127F 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
001287 8802800781028001 	dc.b	pEHiHat, $02, nRst, $07, pEKick, $02, nRst, $01
00128F 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
001297 8802800A         	dc.b	pEHiHat, $02, nRst, $0A
00129B                  	smpsLoop		$00, $0B, SA3_Factory_PWM2_Loop4, Target
00129B F7               	dc.b	$F7
00129C 000B             	dc.b	$00,$0B
                        	if (SA3_Factory_PWM2_Loop4<*)
00129E                  		rom_ptr_z80(SA3_Factory_PWM2_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00129E 7F92             	dc.w  (((((SA3_Factory_PWM2_Loop4+Target))<<8)&$FF00)|((((SA3_Factory_PWM2_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0012A0 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0012A8 8802800781028001 	dc.b	pEHiHat, $02, nRst, $07, pEKick, $02, nRst, $01
0012B0 9802800498028004 	dc.b	pClosedHH, $02, nRst, $04, pClosedHH, $02, nRst, $04
0012B8 88028016         	dc.b	pEHiHat, $02, nRst, $16
0012BC                  	smpsJump		SA3_Factory_PWM2, Target
0012BC F6               	dc.b	$F6
                        	if (SA3_Factory_PWM2<*)
0012BD                  		rom_ptr_z80(SA3_Factory_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0012BD A191             	dc.w  (((((SA3_Factory_PWM2+Target))<<8)&$FF00)|((((SA3_Factory_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
0012BF                  SA3_Factory_PWM3:
0012BF 8015             	dc.b	nRst, $15

0012C1                  SA3_Factory_PWM3_Loop1:
0012C1 9802802E         	dc.b	pClosedHH, $02, nRst, $2E
0012C5                  	smpsLoop		$00, $03, SA3_Factory_PWM3_Loop1, Target
0012C5 F7               	dc.b	$F7
0012C6 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM3_Loop1<*)
0012C8                  		rom_ptr_z80(SA3_Factory_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0012C8 C192             	dc.w  (((((SA3_Factory_PWM3_Loop1+Target))<<8)&$FF00)|((((SA3_Factory_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0012CA 8102806D8802801F 	dc.b	pEKick, $02, nRst, $6D, pEHiHat, $02, nRst, $1F

0012D2                  SA3_Factory_PWM3_Loop2:
0012D2 9802802E8102802E 	dc.b	pClosedHH, $02, nRst, $2E, pEKick, $02, nRst, $2E
0012DA                  	smpsLoop		$00, $04, SA3_Factory_PWM3_Loop2, Target
0012DA F7               	dc.b	$F7
0012DB 0004             	dc.b	$00,$04
                        	if (SA3_Factory_PWM3_Loop2<*)
0012DD                  		rom_ptr_z80(SA3_Factory_PWM3_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0012DD D292             	dc.w  (((((SA3_Factory_PWM3_Loop2+Target))<<8)&$FF00)|((((SA3_Factory_PWM3_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0012DF                  SA3_Factory_PWM3_Loop3:
0012DF 9802802E         	dc.b	pClosedHH, $02, nRst, $2E
0012E3                  	smpsLoop		$00, $03, SA3_Factory_PWM3_Loop3, Target
0012E3 F7               	dc.b	$F7
0012E4 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM3_Loop3<*)
0012E6                  		rom_ptr_z80(SA3_Factory_PWM3_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0012E6 DF92             	dc.w  (((((SA3_Factory_PWM3_Loop3+Target))<<8)&$FF00)|((((SA3_Factory_PWM3_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0012E8 8102             	dc.b	pEKick, $02

0012EA                  SA3_Factory_PWM3_Loop4:
0012EA 802E9802         	dc.b	nRst, $2E, pClosedHH, $02
0012EE                  	smpsLoop		$00, $03, SA3_Factory_PWM3_Loop4, Target
0012EE F7               	dc.b	$F7
0012EF 0003             	dc.b	$00,$03
                        	if (SA3_Factory_PWM3_Loop4<*)
0012F1                  		rom_ptr_z80(SA3_Factory_PWM3_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0012F1 EA92             	dc.w  (((((SA3_Factory_PWM3_Loop4+Target))<<8)&$FF00)|((((SA3_Factory_PWM3_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0012F3 803D8806801B     	dc.b	nRst, $3D, pEHiHat, $06, nRst, $1B

0012F9                  SA3_Factory_PWM3_Loop5:
0012F9 9802802E         	dc.b	pClosedHH, $02, nRst, $2E
0012FD                  	smpsLoop		$00, $0B, SA3_Factory_PWM3_Loop5, Target
0012FD F7               	dc.b	$F7
0012FE 000B             	dc.b	$00,$0B
                        	if (SA3_Factory_PWM3_Loop5<*)
001300                  		rom_ptr_z80(SA3_Factory_PWM3_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
001300 F992             	dc.w  (((((SA3_Factory_PWM3_Loop5+Target))<<8)&$FF00)|((((SA3_Factory_PWM3_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
001302 98028025         	dc.b	pClosedHH, $02, nRst, $25
001306                  	smpsJump		SA3_Factory_PWM3, Target
001306 F6               	dc.b	$F6
                        	if (SA3_Factory_PWM3<*)
001307                  		rom_ptr_z80(SA3_Factory_PWM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
001307 BF92             	dc.w  (((((SA3_Factory_PWM3+Target))<<8)&$FF00)|((((SA3_Factory_PWM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
001309                  SA3_Factory_PWM4:
001309                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
001309 EF00             		dc.b $EF,$00
                        	endif

00130B                  SA3_Factory_PWM4_Loop1:
00130B 9802800499028004 	dc.b	pClosedHH, $02, nRst, $04, pOpenHH, $02, nRst, $04
001313                  	smpsLoop		$00, $17, SA3_Factory_PWM4_Loop1, Target
001313 F7               	dc.b	$F7
001314 0017             	dc.b	$00,$17
                        	if (SA3_Factory_PWM4_Loop1<*)
001316                  		rom_ptr_z80(SA3_Factory_PWM4_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
001316 0B93             	dc.w  (((((SA3_Factory_PWM4_Loop1+Target))<<8)&$FF00)|((((SA3_Factory_PWM4_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
001318 9802800A         	dc.b	pClosedHH, $02, nRst, $0A

00131C                  SA3_Factory_PWM4_Loop2:
00131C 9802800499028004 	dc.b	pClosedHH, $02, nRst, $04, pOpenHH, $02, nRst, $04
001324                  	smpsLoop		$00, $3F, SA3_Factory_PWM4_Loop2, Target
001324 F7               	dc.b	$F7
001325 003F             	dc.b	$00,$3F
                        	if (SA3_Factory_PWM4_Loop2<*)
001327                  		rom_ptr_z80(SA3_Factory_PWM4_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
001327 1C93             	dc.w  (((((SA3_Factory_PWM4_Loop2+Target))<<8)&$FF00)|((((SA3_Factory_PWM4_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
001329 9802800A         	dc.b	pClosedHH, $02, nRst, $0A

00132D                  SA3_Factory_PWM4_Loop3:
00132D 9802800499028004 	dc.b	pClosedHH, $02, nRst, $04, pOpenHH, $02, nRst, $04
001335                  	smpsLoop		$00, $2F, SA3_Factory_PWM4_Loop3, Target
001335 F7               	dc.b	$F7
001336 002F             	dc.b	$00,$2F
                        	if (SA3_Factory_PWM4_Loop3<*)
001338                  		rom_ptr_z80(SA3_Factory_PWM4_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
001338 2D93             	dc.w  (((((SA3_Factory_PWM4_Loop3+Target))<<8)&$FF00)|((((SA3_Factory_PWM4_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00133A 9802800499028010 	dc.b	pClosedHH, $02, nRst, $04, pOpenHH, $02, nRst, $10
001342                  	smpsJump		SA3_Factory_PWM4, Target
001342 F6               	dc.b	$F6
                        	if (SA3_Factory_PWM4<*)
001343                  		rom_ptr_z80(SA3_Factory_PWM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
001343 0993             	dc.w  (((((SA3_Factory_PWM4+Target))<<8)&$FF00)|((((SA3_Factory_PWM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

001345                  SA3_Factory_Patches:
001345 20               	dc.b	$20
001346 36353031DFDF9F9F 	dc.b	$36, $35, $30, $31,	$DF, $DF, $9F, $9F
00134E 0706090607060608 	dc.b	$07, $06, $09, $06,	$07, $06, $06, $08
001356 201010F819371308 	dc.b	$20, $10, $10, $F8,	$19, $37, $13, $08
                        	
00135E 2A               	dc.b	$2A
00135F 01080604531F1F50 	dc.b	$01, $08, $06, $04,	$53, $1F, $1F, $50
001367 1214111F00000000 	dc.b	$12, $14, $11, $1F,	$00, $00, $00, $00
00136F 2915360B17331C0A 	dc.b	$29, $15, $36, $0B,	$17, $33, $1C, $0A
                        	
001377 1F               	dc.b	$1F
001378 320101705F1F1F5F 	dc.b	$32, $01, $01, $70,	$5F, $1F, $1F, $5F
001380 1400000001000000 	dc.b	$14, $00, $00, $00,	$01, $00, $00, $00
001388 7B0A0A0A16121216 	dc.b	$7B, $0A, $0A, $0A,	$16, $12, $12, $16
                        	
001390 07               	dc.b	$07
001391 347402011F1F1F1F 	dc.b	$34, $74, $02, $01,	$1F, $1F, $1F, $1F
001399 0A0A050300000000 	dc.b	$0A, $0A, $05, $03,	$00, $00, $00, $00
0013A1 3A3A2A2A0C040606 	dc.b	$3A, $3A, $2A, $2A,	$0C, $04, $06, $06
                        	
0013A9 2C               	dc.b	$2C
0013AA 700021609F1F1F5F 	dc.b	$70, $00, $21, $60,	$9F, $1F, $1F, $5F
0013B2 0C090C1504040606 	dc.b	$0C, $09, $0C, $15,	$04, $04, $06, $06
0013BA 5646464F0C091009 	dc.b	$56, $46, $46, $4F,	$0C, $09, $10, $09
                        	
0013C2 3D               	dc.b	$3D
0013C3 01000102121F1F14 	dc.b	$01, $00, $01, $02,	$12, $1F, $1F, $14
0013CB 0702020A05050505 	dc.b	$07, $02, $02, $0A,	$05, $05, $05, $05
0013D3 2F2F2FAF1C090A09 	dc.b	$2F, $2F, $2F, $AF,	$1C, $09, $0A, $09

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PEHIHAT            00000088 E  PEKICK             00000081 E  PESNARE            00000082 E
PFINGSNAP          0000008E E  POPENHH            00000099 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSILENCE           00000096 E  PSPLASHCYMB        00000083 E
PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E  PTOMHI             00000085 E
PTOMLOW            00000087 E  PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E
PTOMLOWEREST       0000009C E  PTOMMID            00000086 E  SA3_FACTORY_FM1    00000040
SA3_FACTORY_FM2    0000021E    SA3_FACTORY_FM3    0000030C    SA3_FACTORY_FM4    000004C9
SA3_FACTORY_FM5    00000718    SA3_FACTORY_FM6    000008F6    SA3_FACTORY_LOOP1  00000088
SA3_FACTORY_LOOP10 0000066A    SA3_FACTORY_LOOP11 00000760    SA3_FACTORY_LOOP12 000007F9
SA3_FACTORY_LOOP13 000007BC    SA3_FACTORY_LOOP14 00000899    SA3_FACTORY_LOOP15 0000085C
SA3_FACTORY_LOOP16 00000AC5    SA3_FACTORY_LOOP17 00000B2A    SA3_FACTORY_LOOP18 00000C1F
SA3_FACTORY_LOOP19 00000C75    SA3_FACTORY_LOOP2  00000121    SA3_FACTORY_LOOP20 00000D30
SA3_FACTORY_LOOP21 00000D75    SA3_FACTORY_LOOP3  000000E4    SA3_FACTORY_LOOP4  000001C1
SA3_FACTORY_LOOP5  00000184    SA3_FACTORY_LOOP6  000003AE    SA3_FACTORY_LOOP7  00000413
SA3_FACTORY_LOOP8  00000477    SA3_FACTORY_LOOP9  00000600    
SA3_FACTORY_PATCHES                           00001345    SA3_FACTORY_PSG1   000009EA
SA3_FACTORY_PSG2   00000C73    SA3_FACTORY_PSG3   00000DA4    SA3_FACTORY_PWM1   00000E92
SA3_FACTORY_PWM1_LOOP1                        00000ECC    
SA3_FACTORY_PWM1_LOOP2                        00000F48    
SA3_FACTORY_PWM1_LOOP3                        00000FC1    
SA3_FACTORY_PWM1_LOOP4                        000010B1    SA3_FACTORY_PWM2   000011A1
SA3_FACTORY_PWM2_LOOP1                        000011E1    
SA3_FACTORY_PWM2_LOOP2                        0000121E    
SA3_FACTORY_PWM2_LOOP3                        0000124D    
SA3_FACTORY_PWM2_LOOP4                        0000127F    SA3_FACTORY_PWM3   000012BF
SA3_FACTORY_PWM3_LOOP1                        000012C1    
SA3_FACTORY_PWM3_LOOP2                        000012D2    
SA3_FACTORY_PWM3_LOOP3                        000012DF    
SA3_FACTORY_PWM3_LOOP4                        000012EA    
SA3_FACTORY_PWM3_LOOP5                        000012F9    SA3_FACTORY_PWM4   00001309
SA3_FACTORY_PWM4_LOOP1                        0000130B    
SA3_FACTORY_PWM4_LOOP2                        0000131C    
SA3_FACTORY_PWM4_LOOP3                        0000132D    SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  TARGET             00040000 E
TEMPDIV            00000002 S
