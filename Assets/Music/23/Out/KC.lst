                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
       = 00008E         pFingSnap	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm

                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000
       = 00007F         PWMVol	EQU	$7F
                        ;!@ FMVol	EQU	$08
       = 000004         FMVol	EQU	$04
000000                  	smpsHeaderVoice	SA2_Eggman_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SA2_Eggman_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 2D81             	dc.w  (((((SA2_Eggman_Patches+Target))<<8)&$FF00)|((((SA2_Eggman_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$03, $05
       = 000003         TempDiv set $03
000004 03               	dc.b	$03
000005                  	tempo_conv($05)
                        		if ($05)==0
                        		else
000005 33               			dc.b	((256 - ((((($05))-1)*256 + ((($05))/2)) / (($05)))) % 256)
                        		endif
000006                  	smpsHeaderFM	SA2_Eggman_FM1, Target, $00, FMVol
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SA2_Eggman_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SA2_Eggman_FM1+Target))<<8)&$FF00)|((((SA2_Eggman_FM1+Target))>>8)&$7F)|$80)
000008 0004             	dc.b	$00,FMVol
00000A                  	smpsHeaderFM	SA2_Eggman_FM2, Target, $00, FMVol+$01
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SA2_Eggman_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A 4D80             	dc.w  (((((SA2_Eggman_FM2+Target))<<8)&$FF00)|((((SA2_Eggman_FM2+Target))>>8)&$7F)|$80)
00000C 0005             	dc.b	$00,FMVol+$01
00000E                  	smpsHeaderFM	SA2_Eggman_FM3, Target, $00, FMVol
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SA2_Eggman_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 5D80             	dc.w  (((((SA2_Eggman_FM3+Target))<<8)&$FF00)|((((SA2_Eggman_FM3+Target))>>8)&$7F)|$80)
000010 0004             	dc.b	$00,FMVol
000012                  	smpsHeaderFM	SA2_Eggman_FM4, Target, $00, FMVol
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SA2_Eggman_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 8C80             	dc.w  (((((SA2_Eggman_FM4+Target))<<8)&$FF00)|((((SA2_Eggman_FM4+Target))>>8)&$7F)|$80)
000014 0004             	dc.b	$00,FMVol
000016                  	smpsHeaderFM	SA2_Eggman_FM5, Target, $00, FMVol
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SA2_Eggman_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 9980             	dc.w  (((((SA2_Eggman_FM5+Target))<<8)&$FF00)|((((SA2_Eggman_FM5+Target))>>8)&$7F)|$80)
000018 0004             	dc.b	$00,FMVol
00001A                  	smpsHeaderFM	SA2_Eggman_FM6, Target, $00, FMVol+$01
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SA2_Eggman_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A B880             	dc.w  (((((SA2_Eggman_FM6+Target))<<8)&$FF00)|((((SA2_Eggman_FM6+Target))>>8)&$7F)|$80)
00001C 0005             	dc.b	$00,FMVol+$01
00001E                  	smpsHeaderPSG	SA2_Eggman_PSG1, Target, $00, $00, $00, $00
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SA2_Eggman_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E C780             	dc.w  (((((SA2_Eggman_PSG1+Target))<<8)&$FF00)|((((SA2_Eggman_PSG1+Target))>>8)&$7F)|$80)
000020 0000             	dc.b	$00,$00
                        	;dc.w	voice
000022 0000             	dc.b	$00,$00
000024                  	smpsHeaderPSG	SA2_Eggman_PSG2, Target, $00, $00, $00, $00
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SA2_Eggman_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 C780             	dc.w  (((((SA2_Eggman_PSG2+Target))<<8)&$FF00)|((((SA2_Eggman_PSG2+Target))>>8)&$7F)|$80)
000026 0000             	dc.b	$00,$00
                        	;dc.w	voice
000028 0000             	dc.b	$00,$00
00002A                  	smpsHeaderPSG	SA2_Eggman_PSG3, Target, $00, $00, $00, $00
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SA2_Eggman_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A C780             	dc.w  (((((SA2_Eggman_PSG3+Target))<<8)&$FF00)|((((SA2_Eggman_PSG3+Target))>>8)&$7F)|$80)
00002C 0000             	dc.b	$00,$00
                        	;dc.w	voice
00002E 0000             	dc.b	$00,$00
000030                  	smpsHeaderPWM	SA2_Eggman_PWM1, Target, $00, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SA2_Eggman_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 C880             	dc.w  (((((SA2_Eggman_PWM1+Target))<<8)&$FF00)|((((SA2_Eggman_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	$00
000033 7F               	dc.b	PWMVol
000034                  	smpsHeaderPWM	SA2_Eggman_PWM2, Target, $00, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SA2_Eggman_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 0781             	dc.w  (((((SA2_Eggman_PWM2+Target))<<8)&$FF00)|((((SA2_Eggman_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	$00
000037 7F               	dc.b	PWMVol
000038                  	smpsHeaderPWM	SA2_Eggman_PWM3, Target, $00, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SA2_Eggman_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 2C81             	dc.w  (((((SA2_Eggman_PWM3+Target))<<8)&$FF00)|((((SA2_Eggman_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	$00
00003B 7F               	dc.b	PWMVol
00003C                  	smpsHeaderPWM	SA2_Eggman_PWM4, Target, $00, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SA2_Eggman_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 2C81             	dc.w  (((((SA2_Eggman_PWM4+Target))<<8)&$FF00)|((((SA2_Eggman_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	$00
00003F 7F               	dc.b	PWMVol

000040                  SA2_Eggman_FM1:
000040                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000040 EF00             		dc.b $EF,$00
                        	endif
000042                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000042 E080             		dc.b $E0,panLeft
                        	endif
                        	;!@ dc.b	nRst, $55, $02, nA2, $06, nB2, $03
000044 80558002A206A403 	dc.b	nRst, $55, nRst, $02, nA2, $06, nB2, $03
00004C                  	smpsStop
00004C F2               	dc.b	$F2

00004D                  SA2_Eggman_FM2:
00004D                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
00004D EF01             		dc.b $EF,$01
                        	endif
00004F                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00004F E0C0             		dc.b $E0,panCenter
                        	endif
000051 8024A70698802796 	dc.b	nRst, $24, nD3, $06, nB1, nRst, $27, nA1
000059 069803           	dc.b	$06, nB1, $03
00005C                  	smpsStop
00005C F2               	dc.b	$F2

00005D                  SA2_Eggman_FM3:
00005D                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00005D E0C0             		dc.b $E0,panCenter
                        	endif
00005F                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
00005F EF02             		dc.b $EF,$02
                        	endif
000061 A603ABADA6B0B2A6 	dc.b	nCs3, $03, nFs3, nAb3, nCs3, nB3, nCs4, nCs3
000069 ABADA6B3B2A70698 	dc.b	nFs3, nAb3, nCs3, nD4, nCs4, nD3, $06, nB1

000071                  SA2_Eggman_Loop1:
000071 A603ABADA6B0B2   	dc.b	nCs3, $03, nFs3, nAb3, nCs3, nB3, nCs4
000078                  	smpsLoop		$00, $02, SA2_Eggman_Loop1, Target
000078 F7               	dc.b	$F7
000079 0002             	dc.b	$00,$02
                        	if (SA2_Eggman_Loop1<*)
00007B                  		rom_ptr_z80(SA2_Eggman_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00007B 7180             	dc.w  (((((SA2_Eggman_Loop1+Target))<<8)&$FF00)|((((SA2_Eggman_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nRst, nA1, $06, nB1, $03, nCs3, nFs3, nAb3
00007D 800396069803A6AB 	dc.b	nRst, $03, nA1, $06, nB1, $03, nCs3, nFs3, nAb3
000085 AD
000086 A6B0B2B3B2       	dc.b	nCs3, nB3, nCs4, nD4, nCs4
00008B                  	smpsStop
00008B F2               	dc.b	$F2

00008C                  SA2_Eggman_FM4:
00008C                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
00008C EF00             		dc.b $EF,$00
                        	endif
00008E                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00008E E040             		dc.b $E0,panRight
                        	endif
                        	;!@ dc.b	nRst, $55, $02, nA2, $06, nB2, $03
000090 80558002A206A403 	dc.b	nRst, $55, nRst, $02, nA2, $06, nB2, $03
000098                  	smpsStop
000098 F2               	dc.b	$F2

000099                  SA2_Eggman_FM5:
000099                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000099 E0C0             		dc.b $E0,panCenter
                        	endif
00009B                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
00009B EF03             		dc.b $EF,$03
                        	endif
00009D A60CA9A606ACA7A4 	dc.b	nCs3, $0C, nE3, nCs3, $06, nG3, nD3, nB2
0000A5 A60CA9A606AB0880 	dc.b	nCs3, $0C, nE3, nCs3, $06, nFs3, $08, nRst
0000AD 01A206A403A60CA9 	dc.b	$01, nA2, $06, nB2, $03, nCs3, $0C, nE3
0000B5 06A6             	dc.b	$06, nCs3
0000B7                  	smpsStop
0000B7 F2               	dc.b	$F2

0000B8                  SA2_Eggman_FM6:
0000B8                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0000B8 EF01             		dc.b $EF,$01
                        	endif
0000BA                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000BA E0C0             		dc.b $E0,panCenter
                        	endif
0000BC 80249B06A48027A2 	dc.b	nRst, $24, nD2, $06, nB2, nRst, $27, nA2
0000C4 06A403           	dc.b	$06, nB2, $03
0000C7                  SA2_Eggman_PSG1:
0000C7                  SA2_Eggman_PSG2:
0000C7                  SA2_Eggman_PSG3:
0000C7                  	smpsStop
0000C7 F2               	dc.b	$F2
                        	
0000C8                  SA2_Eggman_PWM1:
0000C8 8B03988C98028B04 	dc.b	pAKick, $03, pClosedHH, pASnare, pClosedHH, $02, pAKick, $04
0000D0 0298018C03980203 	dc.b	$02, pClosedHH, $01, pASnare, $03, pClosedHH, $02, $03
0000D8 01020301028B0403 	dc.b	$01, $02, $03, $01, $02, pAKick, $04, $03
0000E0 8C8B8B988C989898 	dc.b	pASnare, pAKick, pAKick, pClosedHH, pASnare, pClosedHH, pClosedHH, pClosedHH
0000E8 0201030203010201 	dc.b	$02, $01, $03, $02, $03, $01, $02, $01
0000F0 0201028B01980303 	dc.b	$02, $01, $02, pAKick, $01, pClosedHH, $03, $03
0000F8 8C9889988C989898 	dc.b	pASnare, pClosedHH, pCrashCymb, pClosedHH, pASnare, pClosedHH, pClosedHH, pClosedHH
000100 02018C039801     	dc.b	$02, $01, pASnare, $03, pClosedHH, $01
000106                  	smpsStop
000106 F2               	dc.b	$F2
                        	
000107                  SA2_Eggman_PWM2:
000107 890C9803068B0306 	dc.b	pCrashCymb, $0C, pClosedHH, $03, $06, pAKick, $03, $06
00010F 8C05980403030389 	dc.b	pASnare, $05, pClosedHH, $04, $03, $03, $03, pCrashCymb
000117 0B8B04038C8B8B06 	dc.b	$0B, pAKick, $04, $03, pASnare, pAKick, pAKick, $06
00011F 8C0598048B03988B 	dc.b	pASnare, $05, pClosedHH, $04, pAKick, $03, pClosedHH, pAKick
000127 8B0B040602       	dc.b	pAKick, $0B, $04, $06, $02
00012C                  SA2_Eggman_PWM3:
00012C                  SA2_Eggman_PWM4:
00012C                  	smpsStop	
00012C F2               	dc.b	$F2

00012D                  SA2_Eggman_Patches:
                        	;Slap Bass1
00012D 39               	dc.b	$39
00012E 330151015F5F5F5F 	dc.b	$33, $01, $51, $01,	$5F, $5F, $5F, $5F
000136 0F00000D01010101 	dc.b	$0F, $00, $00, $0D,	$01, $01, $01, $01
00013E 331A1A171E19160C 	dc.b	$33, $1A, $1A, $17,	$1E, $19, $16, $11-$05
                        	
                        	;Overdrive Guitar
000146 02               	dc.b	$02
000147 000000000C0C1616 	dc.b	$00, $00, $00, $00,	$0C, $0C, $16, $16
00014F 1717000009090909 	dc.b	$17, $17, $00, $00,	$09, $09, $09, $09
000157 020202022110120C 	dc.b	$02, $02, $02, $02,	$21, $10, $12, $12-$06
                        	
                        	;Distortion Guitar (lead)
00015F 02               	dc.b	$02
000160 3134717116171717 	dc.b	$31, $34, $71, $71,	$16, $17, $17, $17
000168 0505050507070707 	dc.b	$05, $05, $05, $05,	$07, $07, $07, $07
000170 131313131C1C1C0C 	dc.b	$13, $13, $13, $13,	$1C, $1C, $1C, $14-$08
                        	
                        	;Fretless Bass (bass)
000178 26               	dc.b	$26
000179 000001029F1F9F1F 	dc.b	$00, $00, $01, $02,	$9F, $1F, $9F, $1F
000181 080111140E020E0A 	dc.b	$08, $01, $11, $14,	$0E, $02, $0E, $0A
000189 D848F8F81414120E 	dc.b	$D8, $48, $F8, $F8,	$14, $14, $12, $0E
000191  (000001)        	even

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  FMVOL              00000004 E
NA0                0000008A E  NA1                00000096 E  NA2                000000A2 E
NA3                000000AE E  NA4                000000BA E  NA5                000000C6 E
NA6                000000D2 E  NA7                000000DE E  NAB0               00000089 E
NAB1               00000095 E  NAB2               000000A1 E  NAB3               000000AD E
NAB4               000000B9 E  NAB5               000000C5 E  NAB6               000000D1 E
NAB7               000000DD E  NB0                0000008C E  NB1                00000098 E
NB2                000000A4 E  NB3                000000B0 E  NB4                000000BC E
NB5                000000C8 E  NB6                000000D4 E  NBB0               0000008B E
NBB1               00000097 E  NBB2               000000A3 E  NBB3               000000AF E
NBB4               000000BB E  NBB5               000000C7 E  NBB6               000000D3 E
NBB7               000000DF E  NC0                00000081 E  NC1                0000008D E
NC2                00000099 E  NC3                000000A5 E  NC4                000000B1 E
NC5                000000BD E  NC6                000000C9 E  NC7                000000D5 E
NCS0               00000082 E  NCS1               0000008E E  NCS2               0000009A E
NCS3               000000A6 E  NCS4               000000B2 E  NCS5               000000BE E
NCS6               000000CA E  NCS7               000000D6 E  ND0                00000083 E
ND1                0000008F E  ND2                0000009B E  ND3                000000A7 E
ND4                000000B3 E  ND5                000000BF E  ND6                000000CB E
ND7                000000D7 E  NE0                00000085 E  NE1                00000091 E
NE2                0000009D E  NE3                000000A9 E  NE4                000000B5 E
NE5                000000C1 E  NE6                000000CD E  NE7                000000D9 E
NEB0               00000084 E  NEB1               00000090 E  NEB2               0000009C E
NEB3               000000A8 E  NEB4               000000B4 E  NEB5               000000C0 E
NEB6               000000CC E  NEB7               000000D8 E  NF0                00000086 E
NF1                00000092 E  NF2                0000009E E  NF3                000000AA E
NF4                000000B6 E  NF5                000000C2 E  NF6                000000CE E
NF7                000000DA E  NFS0               00000087 E  NFS1               00000093 E
NFS2               0000009F E  NFS3               000000AB E  NFS4               000000B7 E
NFS5               000000C3 E  NFS6               000000CF E  NFS7               000000DB E
NG0                00000088 E  NG1                00000094 E  NG2                000000A0 E
NG3                000000AC E  NG4                000000B8 E  NG5                000000C4 E
NG6                000000D0 E  NG7                000000DC E  NRST               00000080 E
PAKICK             0000008B E  PANCENTER          000000C0 S  PANCENTRE          000000C0 S
PANLEFT            00000080 S  PANNONE            00000000 S  PANRIGHT           00000040 S
PASNARE            0000008C E  PBELL              0000008D E  PBONGOHI           00000092 E
PBONGOLO           00000093 E  PCLAP              0000008A E  PCLICKHI           00000090 E
PCLICKLO           00000091 E  PCLOSEDHH          00000098 E  PCOWBELL           0000008F E
PCRASHCYMB         00000089 E  PEHIHAT            00000088 E  PEKICK             00000081 E
PESNARE            00000082 E  PFINGSNAP          0000008E E  POPENHH            00000099 E
PRIDEBELL          00000084 E  PSEGA              00000097 E  PSILENCE           00000096 E
PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E
PTOMHI             00000085 E  PTOMLOW            00000087 E  PTOMLOWER          0000009A E
PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E  PTOMMID            00000086 E
PWMVOL             0000007F E  SA2_EGGMAN_FM1     00000040    SA2_EGGMAN_FM2     0000004D
SA2_EGGMAN_FM3     0000005D    SA2_EGGMAN_FM4     0000008C    SA2_EGGMAN_FM5     00000099
SA2_EGGMAN_FM6     000000B8    SA2_EGGMAN_LOOP1   00000071    SA2_EGGMAN_PATCHES 0000012D
SA2_EGGMAN_PSG1    000000C7    SA2_EGGMAN_PSG2    000000C7    SA2_EGGMAN_PSG3    000000C7
SA2_EGGMAN_PWM1    000000C8    SA2_EGGMAN_PWM2    00000107    SA2_EGGMAN_PWM3    0000012C
SA2_EGGMAN_PWM4    0000012C    SMPSED             000000ED E  SMPSEE             000000EE E
SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E  SMPSMODON          000000F1 E
SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E  SMPSPITCH01HI      0000000C E
SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E  SMPSPITCH02LO      000000E8 E
SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E  SMPSPITCH04HI      00000030 E
SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E  SMPSPITCH05LO      000000C4 E
SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E  SMPSPITCH07HI      00000054 E
SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E  SMPSPITCH08LO      000000A0 E
SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E  SMPSPITCH10HI      00000078 E
SMPSPITCH10LO      00000088 E  TARGET             00040000 E  TEMPDIV            00000003 S
