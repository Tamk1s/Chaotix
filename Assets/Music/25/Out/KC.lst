                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
       = 00008E         pFingSnap	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96


                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000
       = 00004F         PWMVol 		EQU	$4F
       = 000000         PWMPitch	EQU	$00
       = 000004         PSGVol1		EQU	$04
       = 000006         PSGVol2		EQU	PSGVol1+$02
       = 000003         PSGVoi		EQU	$03
000000                  	smpsHeaderVoice	XVSF_Breakout_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(XVSF_Breakout_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 8C83             	dc.w  (((((XVSF_Breakout_Patches+Target))<<8)&$FF00)|((((XVSF_Breakout_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $06
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($06)
                        		if ($06)==0
                        		else
000005 2B               			dc.b	((256 - ((((($06))-1)*256 + ((($06))/2)) / (($06)))) % 256)
                        		endif
000006                  	smpsHeaderFM	XVSF_Breakout_FM1, Target, $00, $08+$04
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(XVSF_Breakout_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((XVSF_Breakout_FM1+Target))<<8)&$FF00)|((((XVSF_Breakout_FM1+Target))>>8)&$7F)|$80)
000008 000C             	dc.b	$00,$08+$04
00000A                  	smpsHeaderFM	XVSF_Breakout_FM2, Target, $00, $14+$04
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(XVSF_Breakout_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A BE80             	dc.w  (((((XVSF_Breakout_FM2+Target))<<8)&$FF00)|((((XVSF_Breakout_FM2+Target))>>8)&$7F)|$80)
00000C 0018             	dc.b	$00,$14+$04
00000E                  	smpsHeaderFM	XVSF_Breakout_FM3, Target, $00, $08
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(XVSF_Breakout_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 3C81             	dc.w  (((((XVSF_Breakout_FM3+Target))<<8)&$FF00)|((((XVSF_Breakout_FM3+Target))>>8)&$7F)|$80)
000010 0008             	dc.b	$00,$08
000012                  	smpsHeaderFM	XVSF_Breakout_FM4, Target, $00, $08+$0D
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(XVSF_Breakout_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 A781             	dc.w  (((((XVSF_Breakout_FM4+Target))<<8)&$FF00)|((((XVSF_Breakout_FM4+Target))>>8)&$7F)|$80)
000014 0015             	dc.b	$00,$08+$0D
000016                  	smpsHeaderFM	XVSF_Breakout_FM5, Target, $00, $08
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(XVSF_Breakout_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 1082             	dc.w  (((((XVSF_Breakout_FM5+Target))<<8)&$FF00)|((((XVSF_Breakout_FM5+Target))>>8)&$7F)|$80)
000018 0008             	dc.b	$00,$08
00001A                  	smpsHeaderFM	XVSF_Breakout_FM6, Target, $00, $14
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(XVSF_Breakout_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 5982             	dc.w  (((((XVSF_Breakout_FM6+Target))<<8)&$FF00)|((((XVSF_Breakout_FM6+Target))>>8)&$7F)|$80)
00001C 0014             	dc.b	$00,$14
00001E                  	smpsHeaderPSG	XVSF_Breakout_PSG1, Target, PSGDelta, PSGVol1, $00, PSGVoi
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(XVSF_Breakout_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E A282             	dc.w  (((((XVSF_Breakout_PSG1+Target))<<8)&$FF00)|((((XVSF_Breakout_PSG1+Target))>>8)&$7F)|$80)
000020 0C04             	dc.b	PSGDelta,PSGVol1
                        	;dc.w	voice
000022 0003             	dc.b	$00,PSGVoi
000024                  	smpsHeaderPSG	XVSF_Breakout_PSG2, Target, PSGDelta, PSGVol2, $00, PSGVoi
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(XVSF_Breakout_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 E982             	dc.w  (((((XVSF_Breakout_PSG2+Target))<<8)&$FF00)|((((XVSF_Breakout_PSG2+Target))>>8)&$7F)|$80)
000026 0C06             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
000028 0003             	dc.b	$00,PSGVoi
00002A                  	smpsHeaderPSG	XVSF_Breakout_PSG3, Target, PSGDelta, PSGVol2, $00, PSGVoi
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(XVSF_Breakout_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 3083             	dc.w  (((((XVSF_Breakout_PSG3+Target))<<8)&$FF00)|((((XVSF_Breakout_PSG3+Target))>>8)&$7F)|$80)
00002C 0C06             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
00002E 0003             	dc.b	$00,PSGVoi
000030                  	smpsHeaderPWM	XVSF_Breakout_PWM1, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(XVSF_Breakout_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 3183             	dc.w  (((((XVSF_Breakout_PWM1+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
000033 4F               	dc.b	PWMVol
000034                  	smpsHeaderPWM	XVSF_Breakout_PWM2, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(XVSF_Breakout_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 5A83             	dc.w  (((((XVSF_Breakout_PWM2+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
000037 4F               	dc.b	PWMVol
000038                  	smpsHeaderPWM	XVSF_Breakout_PWM3, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(XVSF_Breakout_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 7583             	dc.w  (((((XVSF_Breakout_PWM3+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
00003B 4F               	dc.b	PWMVol
00003C                  	smpsHeaderPWM	XVSF_Breakout_PWM4, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(XVSF_Breakout_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 8383             	dc.w  (((((XVSF_Breakout_PWM4+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
00003F 4F               	dc.b	PWMVol

000040                  XVSF_Breakout_FM1:
000040                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E080             		dc.b $E0,panLeft
                        	endif
000042                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,$00
                        	endif
000044 A203A0A2A58002   	dc.b	nA2, $03, nG2, nA2, nC3, nRst, $02
00004B                  	smpsAlterNote	$05
00004B E105             	dc.b	$E1,$05
00004D 01               	dc.b	$01
00004E                  	smpsAlterNote	$F1
00004E E1F1             	dc.b	$E1,$F1
000050 A2               	dc.b	nA2
000051                  	smpsAlterNote	$F8
000051 E1F8             	dc.b	$E1,$F8
000053 E701             	dc.b	smpsNoAttack, $01
000055                  	smpsAlterNote	$00
000055 E100             	dc.b	$E1,$00
000057 E704A503A780A580 	dc.b	smpsNoAttack, $04, nC3, $03, nD3, nRst, nC3, nRst
00005F A280A080A2A0A2A5 	dc.b	nA2, nRst, nG2, nRst, nA2, nG2, nA2, nC3
000067 80A206A503A780A8 	dc.b	nRst, nA2, $06, nC3, $03, nD3, nRst, nEb3
00006F 80A9             	dc.b	nRst, nE3
000071                  	smpsAlterNote	$ED
000071 E1ED             	dc.b	$E1,$ED
000073 E701             	dc.b	smpsNoAttack, $01
000075                  	smpsAlterNote	$06
000075 E106             	dc.b	$E1,$06
000077 E7A8             	dc.b	smpsNoAttack, nEb3
000079                  	smpsAlterNote	$F6
000079 E1F6             	dc.b	$E1,$F6
00007B E701             	dc.b	smpsNoAttack, $01
00007D                  	smpsAlterNote	$00
00007D E100             	dc.b	$E1,$00
00007F 8006A203A0A2A580 	dc.b	nRst, $06, nA2, $03, nG2, nA2, nC3, nRst
000087 A206A503A780A580 	dc.b	nA2, $06, nC3, $03, nD3, nRst, nC3, nRst
00008F A280A080A206     	dc.b	nA2, nRst, nG2, nRst, nA2, $06
000095                  	smpsAlterNote	$E9
000095 E1E9             	dc.b	$E1,$E9
000097 E701             	dc.b	smpsNoAttack, $01
000099                  	smpsAlterNote	$10
000099 E110             	dc.b	$E1,$10
00009B E7A102           	dc.b	smpsNoAttack, nAb2, $02
00009E                  	smpsAlterNote	$EC
00009E E1EC             	dc.b	$E1,$EC
0000A0 8001             	dc.b	nRst, $01
0000A2                  	smpsAlterNote	$0A
0000A2 E10A             	dc.b	$E1,$0A
                        	;!@dc.b	$02
0000A4 8002             	dc.b	nRst, $02
0000A6                  	smpsAlterNote	$00
0000A6 E100             	dc.b	$E1,$00
                        	;!@ dc.b	$12, nE2, $03, $03, nE3, $01
0000A8 80129D0303A901   	dc.b	nRst, $12, nE2, $03, $03, nE3, $01
0000AF                  	smpsAlterNote	$0F
0000AF E10F             	dc.b	$E1,$0F
0000B1 E7A8             	dc.b	smpsNoAttack, nEb3
0000B3                  	smpsAlterNote	$00
0000B3 E100             	dc.b	$E1,$00
0000B5 E7A99D068003     	dc.b	smpsNoAttack, nE3, nE2, $06, nRst, $03
0000BB                  	smpsJump		XVSF_Breakout_FM1, Target
0000BB F6               	dc.b	$F6
                        	if (XVSF_Breakout_FM1<*)
0000BC                  		rom_ptr_z80(XVSF_Breakout_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000BC 4080             	dc.w  (((((XVSF_Breakout_FM1+Target))<<8)&$FF00)|((((XVSF_Breakout_FM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000BE                  XVSF_Breakout_FM2:
0000BE                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000BE E040             		dc.b $E0,panRight
                        	endif
0000C0                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
0000C0 EF00             		dc.b $EF,$00
                        	endif
0000C2 8006A203A0A2A580 	dc.b	nRst, $06, nA2, $03, nG2, nA2, nC3, nRst
0000CA 02               	dc.b	$02
0000CB                  	smpsAlterNote	$05
0000CB E105             	dc.b	$E1,$05
0000CD 01               	dc.b	$01
0000CE                  	smpsAlterNote	$F1
0000CE E1F1             	dc.b	$E1,$F1
0000D0 A2               	dc.b	nA2
0000D1                  	smpsAlterNote	$F8
0000D1 E1F8             	dc.b	$E1,$F8
0000D3 E701             	dc.b	smpsNoAttack, $01
0000D5                  	smpsAlterNote	$00
0000D5 E100             	dc.b	$E1,$00
0000D7 E704A503A780A580 	dc.b	smpsNoAttack, $04, nC3, $03, nD3, nRst, nC3, nRst
0000DF A280A080A2A0A2A5 	dc.b	nA2, nRst, nG2, nRst, nA2, nG2, nA2, nC3
0000E7 80A206A503A780A8 	dc.b	nRst, nA2, $06, nC3, $03, nD3, nRst, nEb3
0000EF 80A9             	dc.b	nRst, nE3
0000F1                  	smpsAlterNote	$ED
0000F1 E1ED             	dc.b	$E1,$ED
0000F3 E701             	dc.b	smpsNoAttack, $01
0000F5                  	smpsAlterNote	$06
0000F5 E106             	dc.b	$E1,$06
0000F7 E7A8             	dc.b	smpsNoAttack, nEb3
0000F9                  	smpsAlterNote	$F6
0000F9 E1F6             	dc.b	$E1,$F6
0000FB E701             	dc.b	smpsNoAttack, $01
0000FD                  	smpsAlterNote	$00
0000FD E100             	dc.b	$E1,$00
0000FF 8006A203A0A2A580 	dc.b	nRst, $06, nA2, $03, nG2, nA2, nC3, nRst
000107 A206A503A780A580 	dc.b	nA2, $06, nC3, $03, nD3, nRst, nC3, nRst
00010F A280A080A206     	dc.b	nA2, nRst, nG2, nRst, nA2, $06
000115                  	smpsAlterNote	$E9
000115 E1E9             	dc.b	$E1,$E9
000117 E701             	dc.b	smpsNoAttack, $01
000119                  	smpsAlterNote	$10
000119 E110             	dc.b	$E1,$10
00011B E7A102           	dc.b	smpsNoAttack, nAb2, $02
00011E                  	smpsAlterNote	$EC
00011E E1EC             	dc.b	$E1,$EC
000120 8001             	dc.b	nRst, $01
000122                  	smpsAlterNote	$0A
000122 E10A             	dc.b	$E1,$0A
                        	;!@ dc.b	$02
000124 8002             	dc.b	nRst, $02
000126                  	smpsAlterNote	$00
000126 E100             	dc.b	$E1,$00
                        	;!@ dc.b	$12, nE2, $03, $03, nE3, $01
000128 80129D0303A901   	dc.b	nRst, $12, nE2, $03, $03, nE3, $01
00012F                  	smpsAlterNote	$0F
00012F E10F             	dc.b	$E1,$0F
000131 E7A8             	dc.b	smpsNoAttack, nEb3
000133                  	smpsAlterNote	$00
000133 E100             	dc.b	$E1,$00
000135 E7A98003         	dc.b	smpsNoAttack, nE3, nRst, $03
000139                  	smpsJump		XVSF_Breakout_FM2, Target
000139 F6               	dc.b	$F6
                        	if (XVSF_Breakout_FM2<*)
00013A                  		rom_ptr_z80(XVSF_Breakout_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00013A BE80             	dc.w  (((((XVSF_Breakout_FM2+Target))<<8)&$FF00)|((((XVSF_Breakout_FM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00013C                  XVSF_Breakout_FM3:
00013C                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00013C E080             		dc.b $E0,panLeft
                        	endif
00013E                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
00013E EF01             		dc.b $EF,$01
                        	endif
000140 A203A0A2A580A206 	dc.b	nA2, $03, nG2, nA2, nC3, nRst, nA2, $06
000148 A503A780A580A280 	dc.b	nC3, $03, nD3, nRst, nC3, nRst, nA2, nRst
000150 A080A2A0A2A580A2 	dc.b	nG2, nRst, nA2, nG2, nA2, nC3, nRst, nA2
000158 06A503A780A880A9 	dc.b	$06, nC3, $03, nD3, nRst, nEb3, nRst, nE3
000160                  	smpsAlterNote	$04
000160 E104             	dc.b	$E1,$04
000162 E7A801           	dc.b	smpsNoAttack, nEb3, $01
000165                  	smpsAlterNote	$EE
000165 E1EE             	dc.b	$E1,$EE
000167 E701             	dc.b	smpsNoAttack, $01
000169                  	smpsAlterNote	$11
000169 E111             	dc.b	$E1,$11
00016B E7A78002         	dc.b	smpsNoAttack, nD3, nRst, $02
                        	;!@ smpsAlterNote	$00
                        	;!@ dc.b	$04, nA2, $03, nG2, nA2, nC3, nRst, nA2
00016F 8004A203A0A2A580 	dc.b	nRst, $04, nA2, $03, nG2, nA2, nC3, nRst, nA2
000177 A2
000178 06A503A780A580A2 	dc.b	$06, nC3, $03, nD3, nRst, nC3, nRst, nA2
000180 80A080A206       	dc.b	nRst, nG2, nRst, nA2, $06
000185                  	smpsAlterNote	$14
000185 E114             	dc.b	$E1,$14
000187 E7A102           	dc.b	smpsNoAttack, nAb2, $02
00018A                  	smpsAlterNote	$F7
00018A E1F7             	dc.b	$E1,$F7
00018C E70180           	dc.b	smpsNoAttack, $01, nRst
                        	;!@ smpsAlterNote	$00
                        	;!@ dc.b	$14, nE2, $03, $03
00018F 149D039D03       	dc.b	$14, nE2, $03, nE2, $03
000194                  	smpsAlterNote	$01
000194 E101             	dc.b	$E1,$01
000196 A801             	dc.b	nEb3, $01
000198                  	smpsAlterNote	$0C
000198 E10C             	dc.b	$E1,$0C
                        	;!@ dc.b	smpsNoAttack, $01
00019A E7A801           	dc.b	smpsNoAttack, nEb3, $01
                        	;!@ smpsAlterNote	$00
                        	;!@ dc.b	smpsNoAttack, nE3, nE2, $06, nRst, $03
00019D E7A9019D068003   	dc.b	smpsNoAttack, nE3, $01, nE2, $06, nRst, $03
0001A4                  	smpsJump		XVSF_Breakout_FM3, Target
0001A4 F6               	dc.b	$F6
                        	if (XVSF_Breakout_FM3<*)
0001A5                  		rom_ptr_z80(XVSF_Breakout_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001A5 3C81             	dc.w  (((((XVSF_Breakout_FM3+Target))<<8)&$FF00)|((((XVSF_Breakout_FM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001A7                  XVSF_Breakout_FM4:
0001A7                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001A7 E040             		dc.b $E0,panRight
                        	endif
0001A9                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
0001A9 EF02             		dc.b $EF,$02
                        	endif
0001AB A203A0A2A580A206 	dc.b	nA2, $03, nG2, nA2, nC3, nRst, nA2, $06
0001B3 A503A780A580A280 	dc.b	nC3, $03, nD3, nRst, nC3, nRst, nA2, nRst
0001BB A080A2A0A2A580A2 	dc.b	nG2, nRst, nA2, nG2, nA2, nC3, nRst, nA2
0001C3 06A503A780A880A9 	dc.b	$06, nC3, $03, nD3, nRst, nEb3, nRst, nE3
0001CB                  	smpsAlterNote	$04
0001CB E104             	dc.b	$E1,$04
0001CD E7A801           	dc.b	smpsNoAttack, nEb3, $01
0001D0                  	smpsAlterNote	$EE
0001D0 E1EE             	dc.b	$E1,$EE
0001D2 E701             	dc.b	smpsNoAttack, $01
0001D4                  	smpsAlterNote	$11
0001D4 E111             	dc.b	$E1,$11
0001D6 E7A78002         	dc.b	smpsNoAttack, nD3, nRst, $02
                        	;!@ smpsAlterNote	$00
                        	;!@ dc.b	$04, nA2, $03, nG2, nA2, nC3, nRst, nA2
0001DA 8004A203A0A2A580 	dc.b	nRst, $04, nA2, $03, nG2, nA2, nC3, nRst, nA2
0001E2 A2
0001E3 06A503A780A580A2 	dc.b	$06, nC3, $03, nD3, nRst, nC3, nRst, nA2
0001EB 80A080A206       	dc.b	nRst, nG2, nRst, nA2, $06
0001F0                  	smpsAlterNote	$14
0001F0 E114             	dc.b	$E1,$14
0001F2 E7A102           	dc.b	smpsNoAttack, nAb2, $02
0001F5                  	smpsAlterNote	$F7
0001F5 E1F7             	dc.b	$E1,$F7
0001F7 E70180           	dc.b	smpsNoAttack, $01, nRst
                        	;!@ smpsAlterNote	$00
                        	;!@ dc.b	$14, nE2, $03, $03
0001FA 149D039D03       	dc.b	$14, nE2, $03, nE2, $03
0001FF                  	smpsAlterNote	$01
0001FF E101             	dc.b	$E1,$01
000201 A801             	dc.b	nEb3, $01
000203                  	smpsAlterNote	$0C
000203 E10C             	dc.b	$E1,$0C
000205 E701             	dc.b	smpsNoAttack, $01
                        	;!@ smpsAlterNote	$00
000207 E7A99D068003     	dc.b	smpsNoAttack, nE3, nE2, $06, nRst, $03
00020D                  	smpsJump		XVSF_Breakout_FM4, Target
00020D F6               	dc.b	$F6
                        	if (XVSF_Breakout_FM4<*)
00020E                  		rom_ptr_z80(XVSF_Breakout_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00020E A781             	dc.w  (((((XVSF_Breakout_FM4+Target))<<8)&$FF00)|((((XVSF_Breakout_FM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000210                  XVSF_Breakout_FM5:
000210                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000210 E080             		dc.b $E0,panLeft
                        	endif
000212                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
000212 EF03             		dc.b $EF,$03
                        	endif
000214 800C             	dc.b	nRst, $0C

000216                  XVSF_Breakout_Loop1:
000216 C6028001         	dc.b	nA5, $02, nRst, $01
00021A                  	smpsLoop		$00, $04, XVSF_Breakout_Loop1, Target
00021A F7               	dc.b	$F7
00021B 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop1<*)
00021D                  		rom_ptr_z80(XVSF_Breakout_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00021D 1682             	dc.w  (((((XVSF_Breakout_Loop1+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00021F                  	smpsAlterVol		$05
00021F E605             	dc.b	$E6,$05
000221 C6028001         	dc.b	nA5, $02, nRst, $01
000225                  	smpsAlterVol		$0E
000225 E60E             	dc.b	$E6,$0E
000227 C6028037         	dc.b	nA5, $02, nRst, $37
00022B                  	smpsAlterVol		$ED
00022B E6ED             	dc.b	$E6,$ED
00022D C8038001         	dc.b	nB5, $03, nRst, $01
000231                  	smpsAlterVol		$0B
000231 E60B             	dc.b	$E6,$0B
000233 C8038001         	dc.b	nB5, $03, nRst, $01
000237                  	smpsAlterVol		$0A
000237 E60A             	dc.b	$E6,$0A
000239 C803800D         	dc.b	nB5, $03, nRst, $0D
00023D                  	smpsAlterVol		$EB
00023D E6EB             	dc.b	$E6,$EB

00023F                  XVSF_Breakout_Loop2:
00023F C6028001         	dc.b	nA5, $02, nRst, $01
000243                  	smpsLoop		$00, $04, XVSF_Breakout_Loop2, Target
000243 F7               	dc.b	$F7
000244 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop2<*)
000246                  		rom_ptr_z80(XVSF_Breakout_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000246 3F82             	dc.w  (((((XVSF_Breakout_Loop2+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000248                  	smpsAlterVol		$05
000248 E605             	dc.b	$E6,$05
00024A C6028001         	dc.b	nA5, $02, nRst, $01
00024E                  	smpsAlterVol		$0E
00024E E60E             	dc.b	$E6,$0E
000250 C6028043         	dc.b	nA5, $02, nRst, $43
000254                  	smpsAlterVol		$ED
000254 E6ED             	dc.b	$E6,$ED
000256                  	smpsJump		XVSF_Breakout_FM5, Target
000256 F6               	dc.b	$F6
                        	if (XVSF_Breakout_FM5<*)
000257                  		rom_ptr_z80(XVSF_Breakout_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000257 1082             	dc.w  (((((XVSF_Breakout_FM5+Target))<<8)&$FF00)|((((XVSF_Breakout_FM5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000259                  XVSF_Breakout_FM6:
000259                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000259 E040             		dc.b $E0,panRight
                        	endif
00025B                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
00025B EF03             		dc.b $EF,$03
                        	endif
00025D 8012             	dc.b	nRst, $12

00025F                  XVSF_Breakout_Loop3:
00025F C6028001         	dc.b	nA5, $02, nRst, $01
000263                  	smpsLoop		$00, $04, XVSF_Breakout_Loop3, Target
000263 F7               	dc.b	$F7
000264 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop3<*)
000266                  		rom_ptr_z80(XVSF_Breakout_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000266 5F82             	dc.w  (((((XVSF_Breakout_Loop3+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000268                  	smpsAlterVol		$09
000268 E609             	dc.b	$E6,$09
00026A C6028001         	dc.b	nA5, $02, nRst, $01
00026E                  	smpsAlterVol		$0E
00026E E60E             	dc.b	$E6,$0E
000270 C6028037         	dc.b	nA5, $02, nRst, $37
000274                  	smpsAlterVol		$E9
000274 E6E9             	dc.b	$E6,$E9
000276 C8038001         	dc.b	nB5, $03, nRst, $01
00027A                  	smpsAlterVol		$0F
00027A E60F             	dc.b	$E6,$0F
00027C C8038001         	dc.b	nB5, $03, nRst, $01
000280                  	smpsAlterVol		$09
000280 E609             	dc.b	$E6,$09
000282 C803800D         	dc.b	nB5, $03, nRst, $0D
000286                  	smpsAlterVol		$E8
000286 E6E8             	dc.b	$E6,$E8

000288                  XVSF_Breakout_Loop4:
000288 C6028001         	dc.b	nA5, $02, nRst, $01
00028C                  	smpsLoop		$00, $04, XVSF_Breakout_Loop4, Target
00028C F7               	dc.b	$F7
00028D 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop4<*)
00028F                  		rom_ptr_z80(XVSF_Breakout_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00028F 8882             	dc.w  (((((XVSF_Breakout_Loop4+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000291                  	smpsAlterVol		$09
000291 E609             	dc.b	$E6,$09
000293 C6028001         	dc.b	nA5, $02, nRst, $01
000297                  	smpsAlterVol		$0E
000297 E60E             	dc.b	$E6,$0E
000299 C602803D         	dc.b	nA5, $02, nRst, $3D
00029D                  	smpsAlterVol		$E9
00029D E6E9             	dc.b	$E6,$E9
00029F                  	smpsJump		XVSF_Breakout_FM6, Target
00029F F6               	dc.b	$F6
                        	if (XVSF_Breakout_FM6<*)
0002A0                  		rom_ptr_z80(XVSF_Breakout_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002A0 5982             	dc.w  (((((XVSF_Breakout_FM6+Target))<<8)&$FF00)|((((XVSF_Breakout_FM6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002A2                  XVSF_Breakout_PSG1:
0002A2                  	smpsPSGvoice	PSGVoi
0002A2 F503             	dc.b	$F5,PSGVoi
0002A4 800C             	dc.b	nRst, $0C

0002A6                  XVSF_Breakout_Loop5:
0002A6 9D028001         	dc.b	nE2, $02, nRst, $01
0002AA                  	smpsLoop		$00, $04, XVSF_Breakout_Loop5, Target
0002AA F7               	dc.b	$F7
0002AB 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop5<*)
0002AD                  		rom_ptr_z80(XVSF_Breakout_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002AD A682             	dc.w  (((((XVSF_Breakout_Loop5+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002AF                  	smpsSetVol	$03
0002AF EC03             	dc.b	$EC,$03
0002B1 9D028001         	dc.b	nE2, $02, nRst, $01
0002B5                  	smpsSetVol	$06
0002B5 EC06             	dc.b	$EC,$06
0002B7 9D028037         	dc.b	nE2, $02, nRst, $37
0002BB                  	smpsSetVol	$F7
0002BB ECF7             	dc.b	$EC,$F7
0002BD A9038001         	dc.b	nE3, $03, nRst, $01
0002C1                  	smpsSetVol	$06
0002C1 EC06             	dc.b	$EC,$06
0002C3 A9038001         	dc.b	nE3, $03, nRst, $01
0002C7                  	smpsSetVol	$03
0002C7 EC03             	dc.b	$EC,$03
0002C9 A903800D         	dc.b	nE3, $03, nRst, $0D
0002CD                  	smpsSetVol	$F7
0002CD ECF7             	dc.b	$EC,$F7

0002CF                  XVSF_Breakout_Loop6:
0002CF 9D028001         	dc.b	nE2, $02, nRst, $01
0002D3                  	smpsLoop		$00, $04, XVSF_Breakout_Loop6, Target
0002D3 F7               	dc.b	$F7
0002D4 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop6<*)
0002D6                  		rom_ptr_z80(XVSF_Breakout_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002D6 CF82             	dc.w  (((((XVSF_Breakout_Loop6+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002D8                  	smpsSetVol	$03
0002D8 EC03             	dc.b	$EC,$03
0002DA 9D028001         	dc.b	nE2, $02, nRst, $01
0002DE                  	smpsSetVol	$06
0002DE EC06             	dc.b	$EC,$06
0002E0 9D028043         	dc.b	nE2, $02, nRst, $43
0002E4                  	smpsSetVol	$F7
0002E4 ECF7             	dc.b	$EC,$F7
0002E6                  	smpsJump		XVSF_Breakout_PSG1, Target
0002E6 F6               	dc.b	$F6
                        	if (XVSF_Breakout_PSG1<*)
0002E7                  		rom_ptr_z80(XVSF_Breakout_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002E7 A282             	dc.w  (((((XVSF_Breakout_PSG1+Target))<<8)&$FF00)|((((XVSF_Breakout_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002E9                  XVSF_Breakout_PSG2:
0002E9                  	smpsPSGvoice	PSGVoi
0002E9 F503             	dc.b	$F5,PSGVoi

0002EB                  XVSF_Breakout_Jump1:
0002EB 8012             	dc.b	nRst, $12

0002ED                  XVSF_Breakout_Loop7:
0002ED 9D028001         	dc.b	nE2, $02, nRst, $01
0002F1                  	smpsLoop		$00, $04, XVSF_Breakout_Loop7, Target
0002F1 F7               	dc.b	$F7
0002F2 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop7<*)
0002F4                  		rom_ptr_z80(XVSF_Breakout_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002F4 ED82             	dc.w  (((((XVSF_Breakout_Loop7+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002F6                  	smpsSetVol	$03
0002F6 EC03             	dc.b	$EC,$03
0002F8 9D028001         	dc.b	nE2, $02, nRst, $01
0002FC                  	smpsSetVol	$06
0002FC EC06             	dc.b	$EC,$06
0002FE 9D028037         	dc.b	nE2, $02, nRst, $37
000302                  	smpsSetVol	$F7
000302 ECF7             	dc.b	$EC,$F7
000304 A9038001         	dc.b	nE3, $03, nRst, $01
000308                  	smpsSetVol	$05
000308 EC05             	dc.b	$EC,$05
00030A A9038001         	dc.b	nE3, $03, nRst, $01
00030E                  	smpsSetVol	$04
00030E EC04             	dc.b	$EC,$04
000310 A903800D         	dc.b	nE3, $03, nRst, $0D
000314                  	smpsSetVol	$F7
000314 ECF7             	dc.b	$EC,$F7

000316                  XVSF_Breakout_Loop8:
000316 9D028001         	dc.b	nE2, $02, nRst, $01
00031A                  	smpsLoop		$00, $04, XVSF_Breakout_Loop8, Target
00031A F7               	dc.b	$F7
00031B 0004             	dc.b	$00,$04
                        	if (XVSF_Breakout_Loop8<*)
00031D                  		rom_ptr_z80(XVSF_Breakout_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
00031D 1683             	dc.w  (((((XVSF_Breakout_Loop8+Target))<<8)&$FF00)|((((XVSF_Breakout_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00031F                  	smpsSetVol	$03
00031F EC03             	dc.b	$EC,$03
000321 9D028001         	dc.b	nE2, $02, nRst, $01
000325                  	smpsSetVol	$06
000325 EC06             	dc.b	$EC,$06
000327 9D02803D         	dc.b	nE2, $02, nRst, $3D
00032B                  	smpsSetVol	$F7
00032B ECF7             	dc.b	$EC,$F7
00032D                  	smpsJump		XVSF_Breakout_Jump1, Target
00032D F6               	dc.b	$F6
                        	if (XVSF_Breakout_Jump1<*)
00032E                  		rom_ptr_z80(XVSF_Breakout_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00032E EB82             	dc.w  (((((XVSF_Breakout_Jump1+Target))<<8)&$FF00)|((((XVSF_Breakout_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000330                  XVSF_Breakout_PSG3:
000330                  	smpsStop
000330 F2               	dc.b	$F2
                        	
000331                  XVSF_Breakout_PWM1:
000331                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000331 E0C0             		dc.b $E0,panCenter
                        	endif

000333                  XVSF_Breakout_PWM1_Loop1:
000333 8106998299       	dc.b	pEKick, $06, pOpenHH, pESnare, pOpenHH
000338                  	smpsLoop		$00, $03, XVSF_Breakout_PWM1_Loop1, Target
000338 F7               	dc.b	$F7
000339 0003             	dc.b	$00,$03
                        	if (XVSF_Breakout_PWM1_Loop1<*)
00033B                  		rom_ptr_z80(XVSF_Breakout_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00033B 3383             	dc.w  (((((XVSF_Breakout_PWM1_Loop1+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00033D 9803820681039806 	dc.b	pClosedHH, $03, pESnare, $06, pEKick, $03, pClosedHH, $06
000345 9981998299819982 	dc.b	pOpenHH, pEKick, pOpenHH, pESnare, pOpenHH, pEKick, pOpenHH, pESnare
00034D 99820C8B8B068282 	dc.b	pOpenHH, pESnare, $0C, pAKick, pAKick, $06, pESnare, pESnare
000355 0309             	dc.b	$03, $09
000357                  	smpsJump		XVSF_Breakout_PWM1, Target
000357 F6               	dc.b	$F6
                        	if (XVSF_Breakout_PWM1<*)
000358                  		rom_ptr_z80(XVSF_Breakout_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000358 3183             	dc.w  (((((XVSF_Breakout_PWM1+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
00035A                  XVSF_Breakout_PWM2:
00035A 8918980C0C0C0C81 	dc.b	pCrashCymb, $18, pClosedHH, $0C, $0C, $0C, $0C, pEKick
000362 0699828203038918 	dc.b	$06, pOpenHH, pESnare, pESnare, $03, $03, pCrashCymb, $18
00036A 980C0C8918990C0C 	dc.b	pClosedHH, $0C, $0C, pCrashCymb, $18, pOpenHH, $0C, $0C
000372                  	smpsJump		XVSF_Breakout_PWM2, Target
000372 F6               	dc.b	$F6
                        	if (XVSF_Breakout_PWM2<*)
000373                  		rom_ptr_z80(XVSF_Breakout_PWM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000373 5A83             	dc.w  (((((XVSF_Breakout_PWM2+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000375                  XVSF_Breakout_PWM3:
000375 980C540C248B0C99 	dc.b	pClosedHH, $0C, $54, $0C, $24, pAKick, $0C, pOpenHH
00037D 18890C           	dc.b	$18, pCrashCymb, $0C
000380                  	smpsJump		XVSF_Breakout_PWM3, Target
000380 F6               	dc.b	$F6
                        	if (XVSF_Breakout_PWM3<*)
000381                  		rom_ptr_z80(XVSF_Breakout_PWM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000381 7583             	dc.w  (((((XVSF_Breakout_PWM3+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000383                  XVSF_Breakout_PWM4:
                        	;!@ dc.b	nRst, $7F, $11, pOpenHH, $30
000383 807F80119930     	dc.b	nRst, $7F, nRst, $11, pOpenHH, $30
000389                  	smpsJump		XVSF_Breakout_PWM4, Target
000389 F6               	dc.b	$F6
                        	if (XVSF_Breakout_PWM4<*)
00038A                  		rom_ptr_z80(XVSF_Breakout_PWM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00038A 8383             	dc.w  (((((XVSF_Breakout_PWM4+Target))<<8)&$FF00)|((((XVSF_Breakout_PWM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00038C                  XVSF_Breakout_Patches:	
                        	;Distortion Guitar
00038C 39               	dc.b	$39
00038D 032261211F121F1F 	dc.b	$03, $22, $61, $21,	$1F, $12, $1F, $1F
000395 0505050B0E0C0C0C 	dc.b	$05, $05, $05, $0B,	$0E, $0C, $0C, $0C
00039D 161414141E151D10 	dc.b	$16, $14, $14, $14,	$1E, $15, $1D, $0A+$06
                        	
                        	;Electric Bass (finger)
0003A5 1D               	dc.b	$1D
0003A6 001021349F5F5F5F 	dc.b	$00, $10, $21, $34,	$9F, $5F, $5F, $5F
0003AE 000F0F0F0906060A 	dc.b	$00, $0F, $0F, $0F,	$09, $06, $06, $0A
0003B6 0F1C1C2C1E0C0C0C 	dc.b	$0F, $1C, $1C, $2C,	$1E, $0C, $0C, $0C
                        	
                        	;Electric Bass (pick)
0003BE 3D               	dc.b	$3D
0003BF 000001055F5E5B5B 	dc.b	$00, $00, $01, $05,	$5F, $5E, $5B, $5B
0003C7 0A0C0E0E080A0807 	dc.b	$0A, $0C, $0E, $0E,	$08, $0A, $08, $07
0003CF B41939FC210C0C0C 	dc.b	$B4, $19, $39, $FC,	$21, $0C, $0C, $0C
                        	
                        	;Synth Brass 1
0003D7 3A               	dc.b	$3A
0003D8 510111019F895B50 	dc.b	$51, $01, $11, $01,	$9F, $89, $5B, $50
0003E0 09091F030A000A07 	dc.b	$09, $09, $1F, $03,	$0A, $00, $0A, $07
0003E8 13F506081D1F170C 	dc.b	$13, $F5, $06, $08,	$1D, $1F, $17, $04+$08

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PCRA_D81           00000081 E  PCRA_D82           0000008C E  PCRA_D83           00000085 E
PCRA_D84           00000086 E  PCRA_D85           00000087 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
PNEPDADA           0000009D E  POPENHH            00000099 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSGDELTA           0000000C E  PSGVOI             00000003 E
PSGVOL1            00000004 E  PSGVOL2            00000006 E  PSILENCE           00000096 E
PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E
PTOMHI             00000085 E  PTOMLOW            00000087 E  PTOMLOWER          0000009A E
PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E  PTOMMID            00000086 E
PWMPITCH           00000000 E  PWMVOL             0000004F E  SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  TARGET             00040000 E
TEMPDIV            00000002 S  XVSF_BREAKOUT_FM1  00000040    XVSF_BREAKOUT_FM2  000000BE
XVSF_BREAKOUT_FM3  0000013C    XVSF_BREAKOUT_FM4  000001A7    XVSF_BREAKOUT_FM5  00000210
XVSF_BREAKOUT_FM6  00000259    XVSF_BREAKOUT_JUMP1                           000002EB
XVSF_BREAKOUT_LOOP1                           00000216    
XVSF_BREAKOUT_LOOP2                           0000023F    
XVSF_BREAKOUT_LOOP3                           0000025F    
XVSF_BREAKOUT_LOOP4                           00000288    
XVSF_BREAKOUT_LOOP5                           000002A6    
XVSF_BREAKOUT_LOOP6                           000002CF    
XVSF_BREAKOUT_LOOP7                           000002ED    
XVSF_BREAKOUT_LOOP8                           00000316    
XVSF_BREAKOUT_PATCHES                         0000038C    XVSF_BREAKOUT_PSG1 000002A2
XVSF_BREAKOUT_PSG2 000002E9    XVSF_BREAKOUT_PSG3 00000330    XVSF_BREAKOUT_PWM1 00000331
XVSF_BREAKOUT_PWM1_LOOP1                      00000333    XVSF_BREAKOUT_PWM2 0000035A
XVSF_BREAKOUT_PWM3 00000375    XVSF_BREAKOUT_PWM4 00000383
