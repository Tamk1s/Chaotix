                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; Channel IDs for SFX
       = 000080         cPSG1				EQU $80
       = 0000A0         cPSG2				EQU $A0
       = 0000C0         cPSG3				EQU $C0
       = 0000E0         cNoise				EQU $E0	; Not for use in S3/S&K/S3D
       = 000002         cFM3				EQU $02
       = 000004         cFM4				EQU $04
       = 000005         cFM5				EQU $05
       = 000006         cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
       = 000018         cPWM1				EQU	$18
       = 00001A         cPWM2				EQU	$1A
       = 00001C         cPWM3				EQU	$1C
       = 00001E         cPWM4				EQU	$1E

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E
       = 00009F         pOrchHitHi		EQU	$9F
       = 0000A0         pOrchHitMed		EQU	$A0
       = 0000A1         pOrchHitLo		EQU	$A1
       = 0000A2         pOrchHitLower	EQU	$A2

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	if \0==4
                        		dc.b	volL
                        	else
                        		dc.b	(volL<<4)+volR
                        	endif	
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000000         FMPitch	EQU	$00
       = 000013         FMVol1	EQU	$13
       = 00000F         FMVol2	EQU	$0F
       = 000004         PSGVol	EQU	$04
       = 000000         PSGVoi	EQU	$00
       = 000000         PSGNull	EQU	$00
       = 000000         PWMPitch	EQU	$00
       = 0000AA         PWMVol	EQU	$AA

000000                  	smpsHeaderVoice	S2Cabar_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(S2Cabar_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 CB8B             	dc.w  (((((S2Cabar_Patches+Target))<<8)&$FF00)|((((S2Cabar_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan	$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempo	$01, $55	
000004 0155             	dc.b	$01,$55
000006                  	smpsHeaderFM	S2Cabar_FM1, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(S2Cabar_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((S2Cabar_FM1+Target))<<8)&$FF00)|((((S2Cabar_FM1+Target))>>8)&$7F)|$80)
000008 0013             	dc.b	FMPitch,FMVol1
00000A                  	smpsHeaderFM	S2Cabar_FM2, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(S2Cabar_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A F880             	dc.w  (((((S2Cabar_FM2+Target))<<8)&$FF00)|((((S2Cabar_FM2+Target))>>8)&$7F)|$80)
00000C 0013             	dc.b	FMPitch,FMVol1
00000E                  	smpsHeaderFM	S2Cabar_FM3, Target, FMPitch, FMVol2
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(S2Cabar_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E D781             	dc.w  (((((S2Cabar_FM3+Target))<<8)&$FF00)|((((S2Cabar_FM3+Target))>>8)&$7F)|$80)
000010 000F             	dc.b	FMPitch,FMVol2
000012                  	smpsHeaderFM	S2Cabar_FM4, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(S2Cabar_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 AA83             	dc.w  (((((S2Cabar_FM4+Target))<<8)&$FF00)|((((S2Cabar_FM4+Target))>>8)&$7F)|$80)
000014 0013             	dc.b	FMPitch,FMVol1
000016                  	smpsHeaderFM	S2Cabar_FM5, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(S2Cabar_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 5A84             	dc.w  (((((S2Cabar_FM5+Target))<<8)&$FF00)|((((S2Cabar_FM5+Target))>>8)&$7F)|$80)
000018 0013             	dc.b	FMPitch,FMVol1
00001A                  	smpsHeaderFM	S2Cabar_NOP, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(S2Cabar_NOP+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A CA8B             	dc.w  (((((S2Cabar_NOP+Target))<<8)&$FF00)|((((S2Cabar_NOP+Target))>>8)&$7F)|$80)
00001C 0013             	dc.b	FMPitch,FMVol1
00001E                  	smpsHeaderPSG	S2Cabar_PSG1, Target, PSGDelta, PSGVol, PSGNull, PSGVoi
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(S2Cabar_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E CE87             	dc.w  (((((S2Cabar_PSG1+Target))<<8)&$FF00)|((((S2Cabar_PSG1+Target))>>8)&$7F)|$80)
000020 0C04             	dc.b	PSGDelta,PSGVol
                        	;dc.w	voice
000022 0000             	dc.b	PSGNull,PSGVoi
000024                  	smpsHeaderPSG	S2Cabar_PSG2, Target, PSGDelta, PSGVol, PSGNull, PSGVoi
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(S2Cabar_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 D988             	dc.w  (((((S2Cabar_PSG2+Target))<<8)&$FF00)|((((S2Cabar_PSG2+Target))>>8)&$7F)|$80)
000026 0C04             	dc.b	PSGDelta,PSGVol
                        	;dc.w	voice
000028 0000             	dc.b	PSGNull,PSGVoi
00002A                  	smpsHeaderPSG	S2Cabar_PSG3, Target, PSGDelta, PSGVol, PSGNull, PSGVoi
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(S2Cabar_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A E489             	dc.w  (((((S2Cabar_PSG3+Target))<<8)&$FF00)|((((S2Cabar_PSG3+Target))>>8)&$7F)|$80)
00002C 0C04             	dc.b	PSGDelta,PSGVol
                        	;dc.w	voice
00002E 0000             	dc.b	PSGNull,PSGVoi
000030                  	smpsHeaderPWM	S2Cabar_PWM1, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(S2Cabar_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 BF8A             	dc.w  (((((S2Cabar_PWM1+Target))<<8)&$FF00)|((((S2Cabar_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
                        	if 4==4
000033 AA               		dc.b	PWMVol
                        	else
                        	endif	
000034                  	smpsHeaderPWM	S2Cabar_NOP, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(S2Cabar_NOP+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 CA8B             	dc.w  (((((S2Cabar_NOP+Target))<<8)&$FF00)|((((S2Cabar_NOP+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
                        	if 4==4
000037 AA               		dc.b	PWMVol
                        	else
                        	endif	
000038                  	smpsHeaderPWM	S2Cabar_NOP, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(S2Cabar_NOP+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 CA8B             	dc.w  (((((S2Cabar_NOP+Target))<<8)&$FF00)|((((S2Cabar_NOP+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
                        	if 4==4
00003B AA               		dc.b	PWMVol
                        	else
                        	endif	
00003C                  	smpsHeaderPWM	S2Cabar_NOP, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(S2Cabar_NOP+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C CA8B             	dc.w  (((((S2Cabar_NOP+Target))<<8)&$FF00)|((((S2Cabar_NOP+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
                        	if 4==4
00003F AA               		dc.b	PWMVol
                        	else
                        	endif	

000040                  S2Cabar_FM1:
000040                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000040 E0C0             		dc.b $E0,panCenter
                        	endif
000042                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000042 EF00             		dc.b $EF,$00
                        	endif

000044                  S2Cabar_Loop1:
000044 A20CA59DA5       	dc.b nA2, $0C, nC3, nE2, nC3
000049                  	smpsLoop		$00, $04, S2Cabar_Loop1, Target
000049 F7               	dc.b	$F7
00004A 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop1<*)
00004C                  		rom_ptr_z80(S2Cabar_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00004C 4480             	dc.w  (((((S2Cabar_Loop1+Target))<<8)&$FF00)|((((S2Cabar_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00004E A7AAA2AAA7AAA2AA 	dc.b nD3, nF3, nA2, nF3, nD3, nF3, nA2, nF3
000056 A9ADA4ADA9ADA4AD 	dc.b nE3, nAb3, nB2, nAb3, nE3, nAb3, nB2, nAb3

00005E                  S2Cabar_Loop2:
00005E A2A59DA5         	dc.b nA2, nC3, nE2, nC3
000062                  	smpsLoop		$00, $06, S2Cabar_Loop2, Target
000062 F7               	dc.b	$F7
000063 0006             	dc.b	$00,$06
                        	if (S2Cabar_Loop2<*)
000065                  		rom_ptr_z80(S2Cabar_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000065 5E80             	dc.w  (((((S2Cabar_Loop2+Target))<<8)&$FF00)|((((S2Cabar_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000067 A7AAA2AAA7AAA2AA 	dc.b nD3, nF3, nA2, nF3, nD3, nF3, nA2, nF3

00006F                  S2Cabar_Loop4:
00006F A9ADA4ADA9ADA4AD 	dc.b nE3, nAb3, nB2, nAb3, nE3, nAb3, nB2, nAb3

000077                  S2Cabar_Loop3:
000077 A2A59DA5         	dc.b nA2, nC3, nE2, nC3
00007B                  	smpsLoop		$00, $04, S2Cabar_Loop3, Target
00007B F7               	dc.b	$F7
00007C 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop3<*)
00007E                  		rom_ptr_z80(S2Cabar_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00007E 7780             	dc.w  (((((S2Cabar_Loop3+Target))<<8)&$FF00)|((((S2Cabar_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000080 A5A9A0A9A5A9A106 	dc.b nC3, nE3, nG2, nE3, nC3, nE3, nAb2, $06
000088 A2A3A4AA0CADA5AD 	dc.b nA2, nBb2, nB2, nF3, $0C, nAb3, nC3, nAb3
000090 AAADA5AD         	dc.b nF3, nAb3, nC3, nAb3
000094                  	smpsLoop		$01, $02, S2Cabar_Loop4, Target
000094 F7               	dc.b	$F7
000095 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop4<*)
000097                  		rom_ptr_z80(S2Cabar_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000097 6F80             	dc.w  (((((S2Cabar_Loop4+Target))<<8)&$FF00)|((((S2Cabar_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000099                  S2Cabar_Loop6:
000099 A9ADA4ADA9ADA4AD 	dc.b nE3, nAb3, nB2, nAb3, nE3, nAb3, nB2, nAb3

0000A1                  S2Cabar_Loop5:
0000A1 A2A59DA5         	dc.b nA2, nC3, nE2, nC3
0000A5                  	smpsLoop		$00, $06, S2Cabar_Loop5, Target
0000A5 F7               	dc.b	$F7
0000A6 0006             	dc.b	$00,$06
                        	if (S2Cabar_Loop5<*)
0000A8                  		rom_ptr_z80(S2Cabar_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000A8 A180             	dc.w  (((((S2Cabar_Loop5+Target))<<8)&$FF00)|((((S2Cabar_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000AA A7AAA2AAA7AAA2AA 	dc.b nD3, nF3, nA2, nF3, nD3, nF3, nA2, nF3
0000B2                  	smpsLoop		$01, $02, S2Cabar_Loop6, Target
0000B2 F7               	dc.b	$F7
0000B3 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop6<*)
0000B5                  		rom_ptr_z80(S2Cabar_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000B5 9980             	dc.w  (((((S2Cabar_Loop6+Target))<<8)&$FF00)|((((S2Cabar_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000B7                  S2Cabar_Loo$8:
0000B7 A9ADA4ADA9ADA4AD 	dc.b nE3, nAb3, nB2, nAb3, nE3, nAb3, nB2, nAb3

0000BF                  S2Cabar_Loop7:
0000BF A2A59DA5         	dc.b nA2, nC3, nE2, nC3
0000C3                  	smpsLoop		$00, $04, S2Cabar_Loop7, Target
0000C3 F7               	dc.b	$F7
0000C4 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop7<*)
0000C6                  		rom_ptr_z80(S2Cabar_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000C6 BF80             	dc.w  (((((S2Cabar_Loop7+Target))<<8)&$FF00)|((((S2Cabar_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000C8 A5A9A0A9A5A9A106 	dc.b nC3, nE3, nG2, nE3, nC3, nE3, nAb2, $06
0000D0 A2A3A4AA0CADA5AD 	dc.b nA2, nBb2, nB2, nF3, $0C, nAb3, nC3, nAb3
0000D8 AAADA5AD         	dc.b nF3, nAb3, nC3, nAb3
0000DC                  	smpsLoop		$01, $02, S2Cabar_Loo$8, Target
0000DC F7               	dc.b	$F7
0000DD 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loo$8<*)
0000DF                  		rom_ptr_z80(S2Cabar_Loo$8+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000DF B780             	dc.w  (((((S2Cabar_Loo$8+Target))<<8)&$FF00)|((((S2Cabar_Loo$8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0000E1 A9ADA4ADA9ADA4AD 	dc.b nE3, nAb3, nB2, nAb3, nE3, nAb3, nB2, nAb3
0000E9 A2A59DA5A2A59DA5 	dc.b nA2, nC3, nE2, nC3, nA2, nC3, nE2, nC3
0000F1                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000F1 E0C0             		dc.b $E0,panCenter
                        	endif
0000F3                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
0000F3 EF00             		dc.b $EF,$00
                        	endif
                        	;!@ smpsStop
0000F5                  	smpsJump	S2Cabar_FM1, Target
0000F5 F6               	dc.b	$F6
                        	if (S2Cabar_FM1<*)
0000F6                  		rom_ptr_z80(S2Cabar_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000F6 4080             	dc.w  (((((S2Cabar_FM1+Target))<<8)&$FF00)|((((S2Cabar_FM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000F8                  S2Cabar_FM2:
0000F8                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000F8 E0C0             		dc.b $E0,panCenter
                        	endif
0000FA                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0000FA EF01             		dc.b $EF,$01
                        	endif

0000FC                  S2Cabar_Loo$9:
0000FC 800CBD0380BD800F 	dc.b nRst, $0C, nC5, $03, nRst, nC5, nRst, $0F
000104 BD0C80BD0380BD80 	dc.b nC5, $0C, nRst, nC5, $03, nRst, nC5, nRst
00010C 09BD0380BD80BDBD 	dc.b $09, nC5, $03, nRst, nC5, nRst, nC5, nC5
000114                  	smpsLoop		$00, $03, S2Cabar_Loo$9, Target
000114 F7               	dc.b	$F7
000115 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loo$9<*)
000117                  		rom_ptr_z80(S2Cabar_Loo$9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000117 FC80             	dc.w  (((((S2Cabar_Loo$9+Target))<<8)&$FF00)|((((S2Cabar_Loo$9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000119 800CBC0380BC800F 	dc.b nRst, $0C, nB4, $03, nRst, nB4, nRst, $0F
000121 BC0C80BC0380BC80 	dc.b nB4, $0C, nRst, nB4, $03, nRst, nB4, nRst
000129 09BC0380BC80BCBC 	dc.b $09, nB4, $03, nRst, nB4, nRst, nB4, nB4
000131 800CBD0380BD800F 	dc.b nRst, $0C, nC5, $03, nRst, nC5, nRst, $0F
000139 BD0C80BD0380BD80 	dc.b nC5, $0C, nRst, nC5, $03, nRst, nC5, nRst
000141 09BD0380BD80BDBD 	dc.b $09, nC5, $03, nRst, nC5, nRst, nC5, nC5
000149                  	smpsLoop		$01, $02, S2Cabar_Loo$9, Target
000149 F7               	dc.b	$F7
00014A 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loo$9<*)
00014C                  		rom_ptr_z80(S2Cabar_Loo$9+Target)
                        	;dc.w z80_ptr(ptr,addr)
00014C FC80             	dc.w  (((((S2Cabar_Loo$9+Target))<<8)&$FF00)|((((S2Cabar_Loo$9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00014E                  S2Cabar_Loop10:
00014E 800CBD0380BD800F 	dc.b nRst, $0C, nC5, $03, nRst, nC5, nRst, $0F
000156 BD0C80BD0380BD80 	dc.b nC5, $0C, nRst, nC5, $03, nRst, nC5, nRst
00015E 09BD0380BD80BDBD 	dc.b $09, nC5, $03, nRst, nC5, nRst, nC5, nC5
000166 800CC10380C1800F 	dc.b nRst, $0C, nE5, $03, nRst, nE5, nRst, $0F
00016E C10C80C10380C180 	dc.b nE5, $0C, nRst, nE5, $03, nRst, nE5, nRst
000176 09C10380C180C1C1 	dc.b $09, nE5, $03, nRst, nE5, nRst, nE5, nE5
00017E 800CB60380B6800F 	dc.b nRst, $0C, nF4, $03, nRst, nF4, nRst, $0F
000186 B60C80B60380B680 	dc.b nF4, $0C, nRst, nF4, $03, nRst, nF4, nRst
00018E 09B60380B680B6B6 	dc.b $09, nF4, $03, nRst, nF4, nRst, nF4, nF4
000196 800CBC0380BC800F 	dc.b nRst, $0C, nB4, $03, nRst, nB4, nRst, $0F
00019E BC0C80BC0380BC80 	dc.b nB4, $0C, nRst, nB4, $03, nRst, nB4, nRst
0001A6 09BC0380BC80BCBC 	dc.b $09, nB4, $03, nRst, nB4, nRst, nB4, nB4
0001AE 800CBD0380BD800F 	dc.b nRst, $0C, nC5, $03, nRst, nC5, nRst, $0F
0001B6 BD0C80BD0380BD80 	dc.b nC5, $0C, nRst, nC5, $03, nRst, nC5, nRst
0001BE 09BD0380BD80BDBD 	dc.b $09, nC5, $03, nRst, nC5, nRst, nC5, nC5
0001C6                  	smpsLoop		$00, $02, S2Cabar_Loop10, Target
0001C6 F7               	dc.b	$F7
0001C7 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop10<*)
0001C9                  		rom_ptr_z80(S2Cabar_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001C9 4E81             	dc.w  (((((S2Cabar_Loop10+Target))<<8)&$FF00)|((((S2Cabar_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001CB                  	smpsLoop		$02, $02, S2Cabar_Loo$9, Target
0001CB F7               	dc.b	$F7
0001CC 0202             	dc.b	$02,$02
                        	if (S2Cabar_Loo$9<*)
0001CE                  		rom_ptr_z80(S2Cabar_Loo$9+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001CE FC80             	dc.w  (((((S2Cabar_Loo$9+Target))<<8)&$FF00)|((((S2Cabar_Loo$9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001D0                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001D0 E0C0             		dc.b $E0,panCenter
                        	endif
0001D2                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0001D2 EF01             		dc.b $EF,$01
                        	endif
                        	;!@ smpsStop
0001D4                  	smpsJump	S2Cabar_FM2, Target
0001D4 F6               	dc.b	$F6
                        	if (S2Cabar_FM2<*)
0001D5                  		rom_ptr_z80(S2Cabar_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001D5 F880             	dc.w  (((((S2Cabar_FM2+Target))<<8)&$FF00)|((((S2Cabar_FM2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001D7                  S2Cabar_FM3:
0001D7                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
0001D7 EF02             		dc.b $EF,$02
                        	endif

0001D9                  S2Cabar_Loop11:
0001D9                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001D9 E040             		dc.b $E0,panRight
                        	endif
0001DB 800CBA0380BA800F 	dc.b nRst, $0C, nA4, $03, nRst, nA4, nRst, $0F
0001E3 BA0C             	dc.b nA4, $0C
0001E5                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001E5 E080             		dc.b $E0,panLeft
                        	endif
0001E7 80BA0380BA8009BA 	dc.b nRst, nA4, $03, nRst, nA4, nRst, $09, nA4
0001EF 0380BA80BABA     	dc.b $03, nRst, nA4, nRst, nA4, nA4
0001F5                  	smpsLoop		$00, $03, S2Cabar_Loop11, Target
0001F5 F7               	dc.b	$F7
0001F6 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop11<*)
0001F8                  		rom_ptr_z80(S2Cabar_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001F8 D981             	dc.w  (((((S2Cabar_Loop11+Target))<<8)&$FF00)|((((S2Cabar_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001FA                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0001FA E040             		dc.b $E0,panRight
                        	endif
0001FC 800CB90380B9800F 	dc.b nRst, $0C, nAb4, $03, nRst, nAb4, nRst, $0F
000204 B90C             	dc.b nAb4, $0C
000206                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000206 E080             		dc.b $E0,panLeft
                        	endif
000208 80B90380B98009B9 	dc.b nRst, nAb4, $03, nRst, nAb4, nRst, $09, nAb4
000210 0380B980B9B9     	dc.b $03, nRst, nAb4, nRst, nAb4, nAb4

000216                  S2Cabar_Loop12:
000216 800CBA0380BA800F 	dc.b nRst, $0C, nA4, $03, nRst, nA4, nRst, $0F
00021E BA0C80BA0380BA80 	dc.b nA4, $0C, nRst, nA4, $03, nRst, nA4, nRst
000226 09BA0380BA80BABA 	dc.b $09, nA4, $03, nRst, nA4, nRst, nA4, nA4
00022E                  	smpsLoop		$00, $04, S2Cabar_Loop12, Target
00022E F7               	dc.b	$F7
00022F 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop12<*)
000231                  		rom_ptr_z80(S2Cabar_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
000231 1682             	dc.w  (((((S2Cabar_Loop12+Target))<<8)&$FF00)|((((S2Cabar_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000233 800CB90380B9800F 	dc.b nRst, $0C, nAb4, $03, nRst, nAb4, nRst, $0F
00023B B90C             	dc.b nAb4, $0C

00023D                  S2Cabar_Loop15:
00023D 80B90380B98009B9 	dc.b nRst, nAb4, $03, nRst, nAb4, nRst, $09, nAb4
000245 0380B980B9B9     	dc.b $03, nRst, nAb4, nRst, nAb4, nAb4

00024B                  S2Cabar_Loop13:
00024B 800CBA0380BA800F 	dc.b nRst, $0C, nA4, $03, nRst, nA4, nRst, $0F
000253 BA0C80BA0380BA80 	dc.b nA4, $0C, nRst, nA4, $03, nRst, nA4, nRst
00025B 09BA0380BA80BABA 	dc.b $09, nA4, $03, nRst, nA4, nRst, nA4, nA4
000263                  	smpsLoop		$00, $02, S2Cabar_Loop13, Target
000263 F7               	dc.b	$F7
000264 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop13<*)
000266                  		rom_ptr_z80(S2Cabar_Loop13+Target)
                        	;dc.w z80_ptr(ptr,addr)
000266 4B82             	dc.w  (((((S2Cabar_Loop13+Target))<<8)&$FF00)|((((S2Cabar_Loop13+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000268                  S2Cabar_Loop14:
000268 800CBD0380BD800F 	dc.b nRst, $0C, nC5, $03, nRst, nC5, nRst, $0F
000270 BD0C80BD0380BD80 	dc.b nC5, $0C, nRst, nC5, $03, nRst, nC5, nRst
000278 09BD0380BD80BDBD 	dc.b $09, nC5, $03, nRst, nC5, nRst, nC5, nC5
000280                  	smpsLoop		$00, $02, S2Cabar_Loop14, Target
000280 F7               	dc.b	$F7
000281 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop14<*)
000283                  		rom_ptr_z80(S2Cabar_Loop14+Target)
                        	;dc.w z80_ptr(ptr,addr)
000283 6882             	dc.w  (((((S2Cabar_Loop14+Target))<<8)&$FF00)|((((S2Cabar_Loop14+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000285                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000285 E040             		dc.b $E0,panRight
                        	endif
000287 800CB90380B9800F 	dc.b nRst, $0C, nAb4, $03, nRst, nAb4, nRst, $0F
00028F B90C             	dc.b nAb4, $0C
000291                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000291 E080             		dc.b $E0,panLeft
                        	endif
000293                  	smpsLoop		$01, $02, S2Cabar_Loop15, Target
000293 F7               	dc.b	$F7
000294 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop15<*)
000296                  		rom_ptr_z80(S2Cabar_Loop15+Target)
                        	;dc.w z80_ptr(ptr,addr)
000296 3D82             	dc.w  (((((S2Cabar_Loop15+Target))<<8)&$FF00)|((((S2Cabar_Loop15+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000298 80B90380B98009B9 	dc.b nRst, nAb4, $03, nRst, nAb4, nRst, $09, nAb4
0002A0 0380B980B9B9800C 	dc.b $03, nRst, nAb4, nRst, nAb4, nAb4, nRst, $0C
0002A8 BA0380BA800FBA0C 	dc.b nA4, $03, nRst, nA4, nRst, $0F, nA4, $0C

0002B0                  S2Cabar_Loop16:
0002B0 80BA0380BA8009BA 	dc.b nRst, nA4, $03, nRst, nA4, nRst, $09, nA4
0002B8 0380BA80BABA     	dc.b $03, nRst, nA4, nRst, nA4, nA4
0002BE                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0002BE E040             		dc.b $E0,panRight
                        	endif
0002C0 800CBA0380BA800F 	dc.b nRst, $0C, nA4, $03, nRst, nA4, nRst, $0F
0002C8 BA0C             	dc.b nA4, $0C
0002CA                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0002CA E080             		dc.b $E0,panLeft
                        	endif
0002CC                  	smpsLoop		$00, $03, S2Cabar_Loop16, Target
0002CC F7               	dc.b	$F7
0002CD 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop16<*)
0002CF                  		rom_ptr_z80(S2Cabar_Loop16+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002CF B082             	dc.w  (((((S2Cabar_Loop16+Target))<<8)&$FF00)|((((S2Cabar_Loop16+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002D1 80BA0380BA8009BA 	dc.b nRst, nA4, $03, nRst, nA4, nRst, $09, nA4
0002D9 0380BA80BABA     	dc.b $03, nRst, nA4, nRst, nA4, nA4
0002DF                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0002DF E040             		dc.b $E0,panRight
                        	endif
0002E1 800CB90380B9800F 	dc.b nRst, $0C, nAb4, $03, nRst, nAb4, nRst, $0F
0002E9 B90C             	dc.b nAb4, $0C
0002EB                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0002EB E080             		dc.b $E0,panLeft
                        	endif
0002ED 80B90380B98009B9 	dc.b nRst, nAb4, $03, nRst, nAb4, nRst, $09, nAb4
0002F5 0380B980B9B9     	dc.b $03, nRst, nAb4, nRst, nAb4, nAb4

0002FB                  S2Cabar_Loop17:
0002FB 800CBA0380BA800F 	dc.b nRst, $0C, nA4, $03, nRst, nA4, nRst, $0F
000303 BA0C80BA0380BA80 	dc.b nA4, $0C, nRst, nA4, $03, nRst, nA4, nRst
00030B 09BA0380BA80BABA 	dc.b $09, nA4, $03, nRst, nA4, nRst, nA4, nA4
000313                  	smpsLoop		$00, $04, S2Cabar_Loop17, Target
000313 F7               	dc.b	$F7
000314 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop17<*)
000316                  		rom_ptr_z80(S2Cabar_Loop17+Target)
                        	;dc.w z80_ptr(ptr,addr)
000316 FB82             	dc.w  (((((S2Cabar_Loop17+Target))<<8)&$FF00)|((((S2Cabar_Loop17+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000318 800CB90380B9800F 	dc.b nRst, $0C, nAb4, $03, nRst, nAb4, nRst, $0F
000320 B90C             	dc.b nAb4, $0C

000322                  S2Cabar_Loop20:
000322 80B90380B98009B9 	dc.b nRst, nAb4, $03, nRst, nAb4, nRst, $09, nAb4
00032A 0380B980B9B9     	dc.b $03, nRst, nAb4, nRst, nAb4, nAb4

000330                  S2Cabar_Loop18:
000330 800CBA0380BA800F 	dc.b nRst, $0C, nA4, $03, nRst, nA4, nRst, $0F
000338 BA0C80BA0380BA80 	dc.b nA4, $0C, nRst, nA4, $03, nRst, nA4, nRst
000340 09BA0380BA80BABA 	dc.b $09, nA4, $03, nRst, nA4, nRst, nA4, nA4
000348                  	smpsLoop		$00, $02, S2Cabar_Loop18, Target
000348 F7               	dc.b	$F7
000349 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop18<*)
00034B                  		rom_ptr_z80(S2Cabar_Loop18+Target)
                        	;dc.w z80_ptr(ptr,addr)
00034B 3083             	dc.w  (((((S2Cabar_Loop18+Target))<<8)&$FF00)|((((S2Cabar_Loop18+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00034D                  S2Cabar_Loop19:
00034D 800CBD0380BD800F 	dc.b nRst, $0C, nC5, $03, nRst, nC5, nRst, $0F
000355 BD0C80BD0380BD80 	dc.b nC5, $0C, nRst, nC5, $03, nRst, nC5, nRst
00035D 09BD0380BD80BDBD 	dc.b $09, nC5, $03, nRst, nC5, nRst, nC5, nC5
000365                  	smpsLoop		$00, $02, S2Cabar_Loop19, Target
000365 F7               	dc.b	$F7
000366 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop19<*)
000368                  		rom_ptr_z80(S2Cabar_Loop19+Target)
                        	;dc.w z80_ptr(ptr,addr)
000368 4D83             	dc.w  (((((S2Cabar_Loop19+Target))<<8)&$FF00)|((((S2Cabar_Loop19+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00036A                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00036A E040             		dc.b $E0,panRight
                        	endif
00036C 800CB90380B9800F 	dc.b nRst, $0C, nAb4, $03, nRst, nAb4, nRst, $0F
000374 B90C             	dc.b nAb4, $0C
000376                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000376 E080             		dc.b $E0,panLeft
                        	endif
000378                  	smpsLoop		$01, $02, S2Cabar_Loop20, Target
000378 F7               	dc.b	$F7
000379 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop20<*)
00037B                  		rom_ptr_z80(S2Cabar_Loop20+Target)
                        	;dc.w z80_ptr(ptr,addr)
00037B 2283             	dc.w  (((((S2Cabar_Loop20+Target))<<8)&$FF00)|((((S2Cabar_Loop20+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00037D 80B90380B98009B9 	dc.b nRst, nAb4, $03, nRst, nAb4, nRst, $09, nAb4
000385 0380B980B9B9800C 	dc.b $03, nRst, nAb4, nRst, nAb4, nAb4, nRst, $0C
00038D BA0380BA800FBA0C 	dc.b nA4, $03, nRst, nA4, nRst, $0F, nA4, $0C
000395 80BA0380BA8009BA 	dc.b nRst, nA4, $03, nRst, nA4, nRst, $09, nA4
00039D 0380BA80BABA     	dc.b $03, nRst, nA4, nRst, nA4, nA4
0003A3                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0003A3 E080             		dc.b $E0,panLeft
                        	endif
0003A5                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
0003A5 EF02             		dc.b $EF,$02
                        	endif
0003A7                  	smpsJump	S2Cabar_FM3, Target
0003A7 F6               	dc.b	$F6
                        	if (S2Cabar_FM3<*)
0003A8                  		rom_ptr_z80(S2Cabar_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003A8 D781             	dc.w  (((((S2Cabar_FM3+Target))<<8)&$FF00)|((((S2Cabar_FM3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0003AA                  S2Cabar_FM4:
0003AA                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0003AA E0C0             		dc.b $E0,panCenter
                        	endif
0003AC                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
0003AC EF03             		dc.b $EF,$03
                        	endif

0003AE                  S2Cabar_Loop21:
0003AE 960C999199       	dc.b nA1, $0C, nC2, nE1, nC2
0003B3                  	smpsLoop		$00, $04, S2Cabar_Loop21, Target
0003B3 F7               	dc.b	$F7
0003B4 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop21<*)
0003B6                  		rom_ptr_z80(S2Cabar_Loop21+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003B6 AE83             	dc.w  (((((S2Cabar_Loop21+Target))<<8)&$FF00)|((((S2Cabar_Loop21+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003B8 9B9E969E9B9E969E 	dc.b nD2, nF2, nA1, nF2, nD2, nF2, nA1, nF2
0003C0 9DA198A19DA198A1 	dc.b nE2, nAb2, nB1, nAb2, nE2, nAb2, nB1, nAb2

0003C8                  S2Cabar_Loop22:
0003C8 96999199         	dc.b nA1, nC2, nE1, nC2
0003CC                  	smpsLoop		$00, $06, S2Cabar_Loop22, Target
0003CC F7               	dc.b	$F7
0003CD 0006             	dc.b	$00,$06
                        	if (S2Cabar_Loop22<*)
0003CF                  		rom_ptr_z80(S2Cabar_Loop22+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003CF C883             	dc.w  (((((S2Cabar_Loop22+Target))<<8)&$FF00)|((((S2Cabar_Loop22+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003D1 9B9E969E9B9E969E 	dc.b nD2, nF2, nA1, nF2, nD2, nF2, nA1, nF2

0003D9                  S2Cabar_Loop24:
0003D9 9DA198A19DA198A1 	dc.b nE2, nAb2, nB1, nAb2, nE2, nAb2, nB1, nAb2

0003E1                  S2Cabar_Loop23:
0003E1 96999199         	dc.b nA1, nC2, nE1, nC2
0003E5                  	smpsLoop		$00, $04, S2Cabar_Loop23, Target
0003E5 F7               	dc.b	$F7
0003E6 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop23<*)
0003E8                  		rom_ptr_z80(S2Cabar_Loop23+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003E8 E183             	dc.w  (((((S2Cabar_Loop23+Target))<<8)&$FF00)|((((S2Cabar_Loop23+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0003EA 999D949D999D949D 	dc.b nC2, nE2, nG1, nE2, nC2, nE2, nG1, nE2
0003F2 9EA199A19EA199A1 	dc.b nF2, nAb2, nC2, nAb2, nF2, nAb2, nC2, nAb2
0003FA                  	smpsLoop		$01, $02, S2Cabar_Loop24, Target
0003FA F7               	dc.b	$F7
0003FB 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop24<*)
0003FD                  		rom_ptr_z80(S2Cabar_Loop24+Target)
                        	;dc.w z80_ptr(ptr,addr)
0003FD D983             	dc.w  (((((S2Cabar_Loop24+Target))<<8)&$FF00)|((((S2Cabar_Loop24+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0003FF                  S2Cabar_Loop26:
0003FF 9DA198A19DA198A1 	dc.b nE2, nAb2, nB1, nAb2, nE2, nAb2, nB1, nAb2

000407                  S2Cabar_Loop25:
000407 96999199         	dc.b nA1, nC2, nE1, nC2
00040B                  	smpsLoop		$00, $06, S2Cabar_Loop25, Target
00040B F7               	dc.b	$F7
00040C 0006             	dc.b	$00,$06
                        	if (S2Cabar_Loop25<*)
00040E                  		rom_ptr_z80(S2Cabar_Loop25+Target)
                        	;dc.w z80_ptr(ptr,addr)
00040E 0784             	dc.w  (((((S2Cabar_Loop25+Target))<<8)&$FF00)|((((S2Cabar_Loop25+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000410 9B9E969E9B9E969E 	dc.b nD2, nF2, nA1, nF2, nD2, nF2, nA1, nF2
000418                  	smpsLoop		$01, $02, S2Cabar_Loop26, Target
000418 F7               	dc.b	$F7
000419 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop26<*)
00041B                  		rom_ptr_z80(S2Cabar_Loop26+Target)
                        	;dc.w z80_ptr(ptr,addr)
00041B FF83             	dc.w  (((((S2Cabar_Loop26+Target))<<8)&$FF00)|((((S2Cabar_Loop26+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00041D                  S2Cabar_Loop28:
00041D 9DA198A19DA198A1 	dc.b nE2, nAb2, nB1, nAb2, nE2, nAb2, nB1, nAb2

000425                  S2Cabar_Loop27:
000425 96999199         	dc.b nA1, nC2, nE1, nC2
000429                  	smpsLoop		$00, $04, S2Cabar_Loop27, Target
000429 F7               	dc.b	$F7
00042A 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop27<*)
00042C                  		rom_ptr_z80(S2Cabar_Loop27+Target)
                        	;dc.w z80_ptr(ptr,addr)
00042C 2584             	dc.w  (((((S2Cabar_Loop27+Target))<<8)&$FF00)|((((S2Cabar_Loop27+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00042E 999D949D999D949D 	dc.b nC2, nE2, nG1, nE2, nC2, nE2, nG1, nE2
000436 9EA199A19EA199A1 	dc.b nF2, nAb2, nC2, nAb2, nF2, nAb2, nC2, nAb2
00043E                  	smpsLoop		$01, $02, S2Cabar_Loop28, Target
00043E F7               	dc.b	$F7
00043F 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop28<*)
000441                  		rom_ptr_z80(S2Cabar_Loop28+Target)
                        	;dc.w z80_ptr(ptr,addr)
000441 1D84             	dc.w  (((((S2Cabar_Loop28+Target))<<8)&$FF00)|((((S2Cabar_Loop28+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000443 9DA198A19DA198A1 	dc.b nE2, nAb2, nB1, nAb2, nE2, nAb2, nB1, nAb2
00044B 9699919996999199 	dc.b nA1, nC2, nE1, nC2, nA1, nC2, nE1, nC2
000453                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000453 E0C0             		dc.b $E0,panCenter
                        	endif
000455                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
000455 EF03             		dc.b $EF,$03
                        	endif
000457                  	smpsJump	S2Cabar_FM4, Target
000457 F6               	dc.b	$F6
                        	if (S2Cabar_FM4<*)
000458                  		rom_ptr_z80(S2Cabar_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000458 AA83             	dc.w  (((((S2Cabar_FM4+Target))<<8)&$FF00)|((((S2Cabar_FM4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00045A                  S2Cabar_FM5:
00045A                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
00045A E0C0             		dc.b $E0,panCenter
                        	endif
00045C                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
00045C EF04             		dc.b $EF,$04
                        	endif
00045E BD0303           	dc.b nC5, $03, $03
000461                  	smpsAlterVol		$04
000461 E604             	dc.b	$E6,$04
000463 03               	dc.b $03
000464                  	smpsAlterVol		$02
000464 E602             	dc.b	$E6,$02
000466 03               	dc.b $03
000467                  	smpsAlterVol		$04
000467 E604             	dc.b	$E6,$04
000469 03               	dc.b $03
00046A                  	smpsAlterVol		$05
00046A E605             	dc.b	$E6,$05
00046C 03               	dc.b $03
00046D                  	smpsAlterVol		$01
00046D E601             	dc.b	$E6,$01
00046F 03               	dc.b $03
000470                  	smpsAlterVol		$03
000470 E603             	dc.b	$E6,$03
000472 03               	dc.b $03
000473                  	smpsAlterVol		$03
000473 E603             	dc.b	$E6,$03
000475 030303           	dc.b $03, $03, $03
000478                  	smpsAlterVol		$02
000478 E602             	dc.b	$E6,$02
00047A 03               	dc.b $03
00047B                  	smpsAlterVol		$03
00047B E603             	dc.b	$E6,$03
00047D 03               	dc.b $03
00047E                  	smpsAlterVol		$03
00047E E603             	dc.b	$E6,$03
000480 03               	dc.b $03
000481                  	smpsAlterVol		$F8
000481 E6F8             	dc.b	$E6,$F8
000483 03               	dc.b $03
000484                  	smpsAlterVol		$FC
000484 E6FC             	dc.b	$E6,$FC
000486 03               	dc.b $03
000487                  	smpsAlterVol		$FA
000487 E6FA             	dc.b	$E6,$FA
000489 03               	dc.b $03
00048A                  	smpsAlterVol		$FA
00048A E6FA             	dc.b	$E6,$FA
00048C 03               	dc.b $03
00048D                  	smpsAlterVol		$FD
00048D E6FD             	dc.b	$E6,$FD
00048F 0303             	dc.b $03, $03
000491                  	smpsAlterVol		$04
000491 E604             	dc.b	$E6,$04
000493 03               	dc.b $03
000494                  	smpsAlterVol		$07
000494 E607             	dc.b	$E6,$07
000496 03               	dc.b $03
000497                  	smpsAlterVol		$01
000497 E601             	dc.b	$E6,$01
000499 0303             	dc.b $03, $03
00049B                  	smpsAlterVol		$FC
00049B E6FC             	dc.b	$E6,$FC
00049D 03               	dc.b $03
00049E                  	smpsAlterVol		$FC
00049E E6FC             	dc.b	$E6,$FC
0004A0 03               	dc.b $03
0004A1                  	smpsAlterVol		$FD
0004A1 E6FD             	dc.b	$E6,$FD
0004A3 03               	dc.b $03
0004A4                  	smpsAlterVol		$FE
0004A4 E6FE             	dc.b	$E6,$FE

0004A6                  S2Cabar_Loop29:
0004A6 03               	dc.b $03
0004A7                  	smpsAlterVol		$FF
0004A7 E6FF             	dc.b	$E6,$FF
0004A9                  	smpsLoop		$00, $04, S2Cabar_Loop29, Target
0004A9 F7               	dc.b	$F7
0004AA 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop29<*)
0004AC                  		rom_ptr_z80(S2Cabar_Loop29+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004AC A684             	dc.w  (((((S2Cabar_Loop29+Target))<<8)&$FF00)|((((S2Cabar_Loop29+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004AE 03800C           	dc.b $03, nRst, $0C
0004B1                  	smpsAlterVol		$02
0004B1 E602             	dc.b	$E6,$02

0004B3                  S2Cabar_Loop30:
0004B3 BD068012         	dc.b nC5, $06, nRst, $12
0004B7                  	smpsLoop		$00, $04, S2Cabar_Loop30, Target
0004B7 F7               	dc.b	$F7
0004B8 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop30<*)
0004BA                  		rom_ptr_z80(S2Cabar_Loop30+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004BA B384             	dc.w  (((((S2Cabar_Loop30+Target))<<8)&$FF00)|((((S2Cabar_Loop30+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004BC BD0606800CBD0680 	dc.b nC5, $06, $06, nRst, $0C, nC5, $06, nRst
0004C4 12BD060680BD0380 	dc.b $12, nC5, $06, $06, nRst, nC5, $03, nRst
0004CC BD060303800C     	dc.b nC5, $06, $03, $03, nRst, $0C

0004D2                  S2Cabar_Loop31:
0004D2 BD068012         	dc.b nC5, $06, nRst, $12
0004D6                  	smpsLoop		$00, $04, S2Cabar_Loop31, Target
0004D6 F7               	dc.b	$F7
0004D7 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop31<*)
0004D9                  		rom_ptr_z80(S2Cabar_Loop31+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004D9 D284             	dc.w  (((((S2Cabar_Loop31+Target))<<8)&$FF00)|((((S2Cabar_Loop31+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004DB BD0606800CBD0680 	dc.b nC5, $06, $06, nRst, $0C, nC5, $06, nRst
0004E3 12BD060680BDBD03 	dc.b $12, nC5, $06, $06, nRst, nC5, nC5, $03
0004EB 030303800C       	dc.b $03, $03, $03, nRst, $0C

0004F0                  S2Cabar_Loop32:
0004F0 BD068012         	dc.b nC5, $06, nRst, $12
0004F4                  	smpsLoop		$00, $03, S2Cabar_Loop32, Target
0004F4 F7               	dc.b	$F7
0004F5 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop32<*)
0004F7                  		rom_ptr_z80(S2Cabar_Loop32+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004F7 F084             	dc.w  (((((S2Cabar_Loop32+Target))<<8)&$FF00)|((((S2Cabar_Loop32+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0004F9 BD06060380BD80BD 	dc.b nC5, $06, $06, $03, nRst, nC5, nRst, nC5
000501 0680BD03030380BD 	dc.b $06, nRst, nC5, $03, $03, $03, nRst, nC5
000509 068012BD0680BD03 	dc.b $06, nRst, $12, nC5, $06, nRst, nC5, $03
000511 038006BD80BD0380 	dc.b $03, nRst, $06, nC5, nRst, nC5, $03, nRst
000519 BD80BD80BD06800C 	dc.b nC5, nRst, nC5, nRst, nC5, $06, nRst, $0C
000521 BD0680BD03038006 	dc.b nC5, $06, nRst, nC5, $03, $03, nRst, $06
000529 BDBD80BD0380BD06 	dc.b nC5, nC5, nRst, nC5, $03, nRst, nC5, $06
000531 03030380BD80BD80 	dc.b $03, $03, $03, nRst, nC5, nRst, nC5, nRst
000539 BD06800CBD060380 	dc.b nC5, $06, nRst, $0C, nC5, $06, $03, nRst
000541 0F               	dc.b $0F

000542                  S2Cabar_Loop33:
000542 BD068012         	dc.b nC5, $06, nRst, $12
000546                  	smpsLoop		$00, $05, S2Cabar_Loop33, Target
000546 F7               	dc.b	$F7
000547 0005             	dc.b	$00,$05
                        	if (S2Cabar_Loop33<*)
000549                  		rom_ptr_z80(S2Cabar_Loop33+Target)
                        	;dc.w z80_ptr(ptr,addr)
000549 4285             	dc.w  (((((S2Cabar_Loop33+Target))<<8)&$FF00)|((((S2Cabar_Loop33+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00054B BD06060303       	dc.b nC5, $06, $06, $03, $03
000550                  	smpsAlterVol		$04
000550 E604             	dc.b	$E6,$04
000552 03               	dc.b $03
000553                  	smpsAlterVol		$02
000553 E602             	dc.b	$E6,$02
000555 03               	dc.b $03
000556                  	smpsAlterVol		$04
000556 E604             	dc.b	$E6,$04
000558 03               	dc.b $03
000559                  	smpsAlterVol		$05
000559 E605             	dc.b	$E6,$05
00055B 03               	dc.b $03
00055C                  	smpsAlterVol		$01
00055C E601             	dc.b	$E6,$01
00055E 03               	dc.b $03
00055F                  	smpsAlterVol		$03
00055F E603             	dc.b	$E6,$03
000561 03               	dc.b $03
000562                  	smpsAlterVol		$03
000562 E603             	dc.b	$E6,$03
000564 030303           	dc.b $03, $03, $03
000567                  	smpsAlterVol		$02
000567 E602             	dc.b	$E6,$02
000569 03               	dc.b $03
00056A                  	smpsAlterVol		$03
00056A E603             	dc.b	$E6,$03
00056C 03               	dc.b $03
00056D                  	smpsAlterVol		$03
00056D E603             	dc.b	$E6,$03
00056F 03               	dc.b $03
000570                  	smpsAlterVol		$F8
000570 E6F8             	dc.b	$E6,$F8
000572 03               	dc.b $03
000573                  	smpsAlterVol		$FC
000573 E6FC             	dc.b	$E6,$FC
000575 03               	dc.b $03
000576                  	smpsAlterVol		$FA
000576 E6FA             	dc.b	$E6,$FA
000578 03               	dc.b $03
000579                  	smpsAlterVol		$FA
000579 E6FA             	dc.b	$E6,$FA
00057B 03               	dc.b $03
00057C                  	smpsAlterVol		$FD
00057C E6FD             	dc.b	$E6,$FD
00057E 0303             	dc.b $03, $03
000580                  	smpsAlterVol		$04
000580 E604             	dc.b	$E6,$04
000582 03               	dc.b $03
000583                  	smpsAlterVol		$07
000583 E607             	dc.b	$E6,$07
000585 03               	dc.b $03
000586                  	smpsAlterVol		$01
000586 E601             	dc.b	$E6,$01
000588 0303             	dc.b $03, $03
00058A                  	smpsAlterVol		$FC
00058A E6FC             	dc.b	$E6,$FC
00058C 03               	dc.b $03
00058D                  	smpsAlterVol		$FC
00058D E6FC             	dc.b	$E6,$FC
00058F 03               	dc.b $03
000590                  	smpsAlterVol		$FD
000590 E6FD             	dc.b	$E6,$FD
000592 03               	dc.b $03
000593                  	smpsAlterVol		$FE
000593 E6FE             	dc.b	$E6,$FE

000595                  S2Cabar_Loop34:
000595 03               	dc.b $03
000596                  	smpsAlterVol		$FF
000596 E6FF             	dc.b	$E6,$FF
000598                  	smpsLoop		$00, $04, S2Cabar_Loop34, Target
000598 F7               	dc.b	$F7
000599 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop34<*)
00059B                  		rom_ptr_z80(S2Cabar_Loop34+Target)
                        	;dc.w z80_ptr(ptr,addr)
00059B 9585             	dc.w  (((((S2Cabar_Loop34+Target))<<8)&$FF00)|((((S2Cabar_Loop34+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00059D 03800C           	dc.b $03, nRst, $0C
0005A0                  	smpsAlterVol		$02
0005A0 E602             	dc.b	$E6,$02

0005A2                  S2Cabar_Loop35:
0005A2 BD068012         	dc.b nC5, $06, nRst, $12
0005A6                  	smpsLoop		$00, $03, S2Cabar_Loop35, Target
0005A6 F7               	dc.b	$F7
0005A7 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop35<*)
0005A9                  		rom_ptr_z80(S2Cabar_Loop35+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005A9 A285             	dc.w  (((((S2Cabar_Loop35+Target))<<8)&$FF00)|((((S2Cabar_Loop35+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0005AB                  S2Cabar_Loop37:
0005AB BD06             	dc.b nC5, $06

0005AD                  S2Cabar_Loop36:
0005AD 80BD03           	dc.b nRst, nC5, $03
0005B0                  	smpsLoop		$00, $04, S2Cabar_Loop36, Target
0005B0 F7               	dc.b	$F7
0005B1 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop36<*)
0005B3                  		rom_ptr_z80(S2Cabar_Loop36+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005B3 AD85             	dc.w  (((((S2Cabar_Loop36+Target))<<8)&$FF00)|((((S2Cabar_Loop36+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005B5 BDBD8009         	dc.b nC5, nC5, nRst, $09
0005B9                  	smpsLoop		$01, $02, S2Cabar_Loop37, Target
0005B9 F7               	dc.b	$F7
0005BA 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop37<*)
0005BC                  		rom_ptr_z80(S2Cabar_Loop37+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005BC AB85             	dc.w  (((((S2Cabar_Loop37+Target))<<8)&$FF00)|((((S2Cabar_Loop37+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005BE BD0606800C       	dc.b nC5, $06, $06, nRst, $0C

0005C3                  S2Cabar_Loop38:
0005C3 BD068012         	dc.b nC5, $06, nRst, $12
0005C7                  	smpsLoop		$00, $04, S2Cabar_Loop38, Target
0005C7 F7               	dc.b	$F7
0005C8 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop38<*)
0005CA                  		rom_ptr_z80(S2Cabar_Loop38+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005CA C385             	dc.w  (((((S2Cabar_Loop38+Target))<<8)&$FF00)|((((S2Cabar_Loop38+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005CC BD0606800CBD0680 	dc.b nC5, $06, $06, nRst, $0C, nC5, $06, nRst
0005D4 12BD060680BDBD03 	dc.b $12, nC5, $06, $06, nRst, nC5, nC5, $03
0005DC 03               	dc.b $03

0005DD                  S2Cabar_Loop40:
0005DD 0303800C         	dc.b $03, $03, nRst, $0C

0005E1                  S2Cabar_Loop39:
0005E1 BD068012         	dc.b nC5, $06, nRst, $12
0005E5                  	smpsLoop		$00, $03, S2Cabar_Loop39, Target
0005E5 F7               	dc.b	$F7
0005E6 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop39<*)
0005E8                  		rom_ptr_z80(S2Cabar_Loop39+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005E8 E185             	dc.w  (((((S2Cabar_Loop39+Target))<<8)&$FF00)|((((S2Cabar_Loop39+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005EA BD06             	dc.b nC5, $06
0005EC                  	smpsLoop		$01, $02, S2Cabar_Loop40, Target
0005EC F7               	dc.b	$F7
0005ED 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop40<*)
0005EF                  		rom_ptr_z80(S2Cabar_Loop40+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005EF DD85             	dc.w  (((((S2Cabar_Loop40+Target))<<8)&$FF00)|((((S2Cabar_Loop40+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0005F1                  S2Cabar_Loop41:
0005F1 80BD03           	dc.b nRst, nC5, $03
0005F4                  	smpsLoop		$00, $04, S2Cabar_Loop41, Target
0005F4 F7               	dc.b	$F7
0005F5 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop41<*)
0005F7                  		rom_ptr_z80(S2Cabar_Loop41+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005F7 F185             	dc.w  (((((S2Cabar_Loop41+Target))<<8)&$FF00)|((((S2Cabar_Loop41+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005F9 BDBD8009BD06     	dc.b nC5, nC5, nRst, $09, nC5, $06
0005FF                  	smpsLoop		$01, $02, S2Cabar_Loop41, Target
0005FF F7               	dc.b	$F7
000600 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop41<*)
000602                  		rom_ptr_z80(S2Cabar_Loop41+Target)
                        	;dc.w z80_ptr(ptr,addr)
000602 F185             	dc.w  (((((S2Cabar_Loop41+Target))<<8)&$FF00)|((((S2Cabar_Loop41+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000604 06800C           	dc.b $06, nRst, $0C

000607                  S2Cabar_Loop42:
000607 BD068012         	dc.b nC5, $06, nRst, $12
00060B                  	smpsLoop		$00, $07, S2Cabar_Loop42, Target
00060B F7               	dc.b	$F7
00060C 0007             	dc.b	$00,$07
                        	if (S2Cabar_Loop42<*)
00060E                  		rom_ptr_z80(S2Cabar_Loop42+Target)
                        	;dc.w z80_ptr(ptr,addr)
00060E 0786             	dc.w  (((((S2Cabar_Loop42+Target))<<8)&$FF00)|((((S2Cabar_Loop42+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000610 BD06060303       	dc.b nC5, $06, $06, $03, $03
000615                  	smpsAlterVol		$04
000615 E604             	dc.b	$E6,$04
000617 03               	dc.b $03
000618                  	smpsAlterVol		$02
000618 E602             	dc.b	$E6,$02
00061A 03               	dc.b $03
00061B                  	smpsAlterVol		$04
00061B E604             	dc.b	$E6,$04
00061D 03               	dc.b $03
00061E                  	smpsAlterVol		$05
00061E E605             	dc.b	$E6,$05
000620 03               	dc.b $03
000621                  	smpsAlterVol		$01
000621 E601             	dc.b	$E6,$01
000623 03               	dc.b $03
000624                  	smpsAlterVol		$03
000624 E603             	dc.b	$E6,$03
000626 03               	dc.b $03
000627                  	smpsAlterVol		$03
000627 E603             	dc.b	$E6,$03
000629 030303           	dc.b $03, $03, $03
00062C                  	smpsAlterVol		$02
00062C E602             	dc.b	$E6,$02
00062E 03               	dc.b $03
00062F                  	smpsAlterVol		$03
00062F E603             	dc.b	$E6,$03
000631 03               	dc.b $03
000632                  	smpsAlterVol		$03
000632 E603             	dc.b	$E6,$03
000634 03               	dc.b $03
000635                  	smpsAlterVol		$F8
000635 E6F8             	dc.b	$E6,$F8
000637 03               	dc.b $03
000638                  	smpsAlterVol		$FC
000638 E6FC             	dc.b	$E6,$FC
00063A 03               	dc.b $03
00063B                  	smpsAlterVol		$FA
00063B E6FA             	dc.b	$E6,$FA
00063D 03               	dc.b $03
00063E                  	smpsAlterVol		$FA
00063E E6FA             	dc.b	$E6,$FA
000640 03               	dc.b $03
000641                  	smpsAlterVol		$FD
000641 E6FD             	dc.b	$E6,$FD
000643 0303             	dc.b $03, $03
000645                  	smpsAlterVol		$04
000645 E604             	dc.b	$E6,$04
000647 03               	dc.b $03
000648                  	smpsAlterVol		$07
000648 E607             	dc.b	$E6,$07
00064A 03               	dc.b $03
00064B                  	smpsAlterVol		$01
00064B E601             	dc.b	$E6,$01
00064D 0303             	dc.b $03, $03
00064F                  	smpsAlterVol		$FC
00064F E6FC             	dc.b	$E6,$FC
000651 03               	dc.b $03
000652                  	smpsAlterVol		$FC
000652 E6FC             	dc.b	$E6,$FC
000654 03               	dc.b $03
000655                  	smpsAlterVol		$FD
000655 E6FD             	dc.b	$E6,$FD
000657 03               	dc.b $03
000658                  	smpsAlterVol		$FE
000658 E6FE             	dc.b	$E6,$FE

00065A                  S2Cabar_Loop43:
00065A 03               	dc.b $03
00065B                  	smpsAlterVol		$FF
00065B E6FF             	dc.b	$E6,$FF
00065D                  	smpsLoop		$00, $04, S2Cabar_Loop43, Target
00065D F7               	dc.b	$F7
00065E 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop43<*)
000660                  		rom_ptr_z80(S2Cabar_Loop43+Target)
                        	;dc.w z80_ptr(ptr,addr)
000660 5A86             	dc.w  (((((S2Cabar_Loop43+Target))<<8)&$FF00)|((((S2Cabar_Loop43+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000662 03800C           	dc.b $03, nRst, $0C
000665                  	smpsAlterVol		$02
000665 E602             	dc.b	$E6,$02

000667                  S2Cabar_Loop44:
000667 BD068012         	dc.b nC5, $06, nRst, $12
00066B                  	smpsLoop		$00, $04, S2Cabar_Loop44, Target
00066B F7               	dc.b	$F7
00066C 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop44<*)
00066E                  		rom_ptr_z80(S2Cabar_Loop44+Target)
                        	;dc.w z80_ptr(ptr,addr)
00066E 6786             	dc.w  (((((S2Cabar_Loop44+Target))<<8)&$FF00)|((((S2Cabar_Loop44+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000670 BD0606800CBD0680 	dc.b nC5, $06, $06, nRst, $0C, nC5, $06, nRst
000678 12BD060680BD0380 	dc.b $12, nC5, $06, $06, nRst, nC5, $03, nRst
000680 BD060303800C     	dc.b nC5, $06, $03, $03, nRst, $0C

000686                  S2Cabar_Loop45:
000686 BD068012         	dc.b nC5, $06, nRst, $12
00068A                  	smpsLoop		$00, $04, S2Cabar_Loop45, Target
00068A F7               	dc.b	$F7
00068B 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop45<*)
00068D                  		rom_ptr_z80(S2Cabar_Loop45+Target)
                        	;dc.w z80_ptr(ptr,addr)
00068D 8686             	dc.w  (((((S2Cabar_Loop45+Target))<<8)&$FF00)|((((S2Cabar_Loop45+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00068F BD0606800CBD0680 	dc.b nC5, $06, $06, nRst, $0C, nC5, $06, nRst
000697 12BD060680BDBD03 	dc.b $12, nC5, $06, $06, nRst, nC5, nC5, $03
00069F 030303800C       	dc.b $03, $03, $03, nRst, $0C

0006A4                  S2Cabar_Loop46:
0006A4 BD068012         	dc.b nC5, $06, nRst, $12
0006A8                  	smpsLoop		$00, $03, S2Cabar_Loop46, Target
0006A8 F7               	dc.b	$F7
0006A9 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop46<*)
0006AB                  		rom_ptr_z80(S2Cabar_Loop46+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006AB A486             	dc.w  (((((S2Cabar_Loop46+Target))<<8)&$FF00)|((((S2Cabar_Loop46+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006AD BD06060380BD80BD 	dc.b nC5, $06, $06, $03, nRst, nC5, nRst, nC5
0006B5 0680BD03030380BD 	dc.b $06, nRst, nC5, $03, $03, $03, nRst, nC5
0006BD 068012BD0680BD03 	dc.b $06, nRst, $12, nC5, $06, nRst, nC5, $03
0006C5 038006BD80BD0380 	dc.b $03, nRst, $06, nC5, nRst, nC5, $03, nRst
0006CD BD80BD80BD06800C 	dc.b nC5, nRst, nC5, nRst, nC5, $06, nRst, $0C
0006D5 BD0680BD03038006 	dc.b nC5, $06, nRst, nC5, $03, $03, nRst, $06
0006DD BDBD80BD0380BD06 	dc.b nC5, nC5, nRst, nC5, $03, nRst, nC5, $06
0006E5 03030380BD80BD80 	dc.b $03, $03, $03, nRst, nC5, nRst, nC5, nRst
0006ED BD06800CBD060380 	dc.b nC5, $06, nRst, $0C, nC5, $06, $03, nRst
0006F5 0F               	dc.b $0F

0006F6                  S2Cabar_Loop47:
0006F6 BD068012         	dc.b nC5, $06, nRst, $12
0006FA                  	smpsLoop		$00, $05, S2Cabar_Loop47, Target
0006FA F7               	dc.b	$F7
0006FB 0005             	dc.b	$00,$05
                        	if (S2Cabar_Loop47<*)
0006FD                  		rom_ptr_z80(S2Cabar_Loop47+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006FD F686             	dc.w  (((((S2Cabar_Loop47+Target))<<8)&$FF00)|((((S2Cabar_Loop47+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006FF BD06060303       	dc.b nC5, $06, $06, $03, $03
000704                  	smpsAlterVol		$04
000704 E604             	dc.b	$E6,$04
000706 03               	dc.b $03
000707                  	smpsAlterVol		$02
000707 E602             	dc.b	$E6,$02
000709 03               	dc.b $03
00070A                  	smpsAlterVol		$04
00070A E604             	dc.b	$E6,$04
00070C 03               	dc.b $03
00070D                  	smpsAlterVol		$05
00070D E605             	dc.b	$E6,$05
00070F 03               	dc.b $03
000710                  	smpsAlterVol		$01
000710 E601             	dc.b	$E6,$01
000712 03               	dc.b $03
000713                  	smpsAlterVol		$03
000713 E603             	dc.b	$E6,$03
000715 03               	dc.b $03
000716                  	smpsAlterVol		$03
000716 E603             	dc.b	$E6,$03
000718 030303           	dc.b $03, $03, $03
00071B                  	smpsAlterVol		$02
00071B E602             	dc.b	$E6,$02
00071D 03               	dc.b $03
00071E                  	smpsAlterVol		$03
00071E E603             	dc.b	$E6,$03
000720 03               	dc.b $03
000721                  	smpsAlterVol		$03
000721 E603             	dc.b	$E6,$03
000723 03               	dc.b $03
000724                  	smpsAlterVol		$F8
000724 E6F8             	dc.b	$E6,$F8
000726 03               	dc.b $03
000727                  	smpsAlterVol		$FC
000727 E6FC             	dc.b	$E6,$FC
000729 03               	dc.b $03
00072A                  	smpsAlterVol		$FA
00072A E6FA             	dc.b	$E6,$FA
00072C 03               	dc.b $03
00072D                  	smpsAlterVol		$FA
00072D E6FA             	dc.b	$E6,$FA
00072F 03               	dc.b $03
000730                  	smpsAlterVol		$FD
000730 E6FD             	dc.b	$E6,$FD
000732 0303             	dc.b $03, $03
000734                  	smpsAlterVol		$04
000734 E604             	dc.b	$E6,$04
000736 03               	dc.b $03
000737                  	smpsAlterVol		$07
000737 E607             	dc.b	$E6,$07
000739 03               	dc.b $03
00073A                  	smpsAlterVol		$01
00073A E601             	dc.b	$E6,$01
00073C 0303             	dc.b $03, $03
00073E                  	smpsAlterVol		$FC
00073E E6FC             	dc.b	$E6,$FC
000740 03               	dc.b $03
000741                  	smpsAlterVol		$FC
000741 E6FC             	dc.b	$E6,$FC
000743 03               	dc.b $03
000744                  	smpsAlterVol		$FD
000744 E6FD             	dc.b	$E6,$FD
000746 03               	dc.b $03
000747                  	smpsAlterVol		$FE
000747 E6FE             	dc.b	$E6,$FE

000749                  S2Cabar_Loop48:
000749 03               	dc.b $03
00074A                  	smpsAlterVol		$FF
00074A E6FF             	dc.b	$E6,$FF
00074C                  	smpsLoop		$00, $04, S2Cabar_Loop48, Target
00074C F7               	dc.b	$F7
00074D 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop48<*)
00074F                  		rom_ptr_z80(S2Cabar_Loop48+Target)
                        	;dc.w z80_ptr(ptr,addr)
00074F 4987             	dc.w  (((((S2Cabar_Loop48+Target))<<8)&$FF00)|((((S2Cabar_Loop48+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000751 03800C           	dc.b $03, nRst, $0C
000754                  	smpsAlterVol		$02
000754 E602             	dc.b	$E6,$02

000756                  S2Cabar_Loop49:
000756 BD068012         	dc.b nC5, $06, nRst, $12
00075A                  	smpsLoop		$00, $03, S2Cabar_Loop49, Target
00075A F7               	dc.b	$F7
00075B 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop49<*)
00075D                  		rom_ptr_z80(S2Cabar_Loop49+Target)
                        	;dc.w z80_ptr(ptr,addr)
00075D 5687             	dc.w  (((((S2Cabar_Loop49+Target))<<8)&$FF00)|((((S2Cabar_Loop49+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00075F                  S2Cabar_Loop51:
00075F BD06             	dc.b nC5, $06

000761                  S2Cabar_Loop50:
000761 80BD03           	dc.b nRst, nC5, $03
000764                  	smpsLoop		$00, $04, S2Cabar_Loop50, Target
000764 F7               	dc.b	$F7
000765 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop50<*)
000767                  		rom_ptr_z80(S2Cabar_Loop50+Target)
                        	;dc.w z80_ptr(ptr,addr)
000767 6187             	dc.w  (((((S2Cabar_Loop50+Target))<<8)&$FF00)|((((S2Cabar_Loop50+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000769 BDBD8009         	dc.b nC5, nC5, nRst, $09
00076D                  	smpsLoop		$01, $02, S2Cabar_Loop51, Target
00076D F7               	dc.b	$F7
00076E 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop51<*)
000770                  		rom_ptr_z80(S2Cabar_Loop51+Target)
                        	;dc.w z80_ptr(ptr,addr)
000770 5F87             	dc.w  (((((S2Cabar_Loop51+Target))<<8)&$FF00)|((((S2Cabar_Loop51+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000772 BD0606800C       	dc.b nC5, $06, $06, nRst, $0C

000777                  S2Cabar_Loop52:
000777 BD068012         	dc.b nC5, $06, nRst, $12
00077B                  	smpsLoop		$00, $04, S2Cabar_Loop52, Target
00077B F7               	dc.b	$F7
00077C 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop52<*)
00077E                  		rom_ptr_z80(S2Cabar_Loop52+Target)
                        	;dc.w z80_ptr(ptr,addr)
00077E 7787             	dc.w  (((((S2Cabar_Loop52+Target))<<8)&$FF00)|((((S2Cabar_Loop52+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000780 BD0606800CBD0680 	dc.b nC5, $06, $06, nRst, $0C, nC5, $06, nRst
000788 12BD060680BDBD03 	dc.b $12, nC5, $06, $06, nRst, nC5, nC5, $03
000790 03               	dc.b $03

000791                  S2Cabar_Loop54:
000791 0303800C         	dc.b $03, $03, nRst, $0C

000795                  S2Cabar_Loop53:
000795 BD068012         	dc.b nC5, $06, nRst, $12
000799                  	smpsLoop		$00, $03, S2Cabar_Loop53, Target
000799 F7               	dc.b	$F7
00079A 0003             	dc.b	$00,$03
                        	if (S2Cabar_Loop53<*)
00079C                  		rom_ptr_z80(S2Cabar_Loop53+Target)
                        	;dc.w z80_ptr(ptr,addr)
00079C 9587             	dc.w  (((((S2Cabar_Loop53+Target))<<8)&$FF00)|((((S2Cabar_Loop53+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00079E BD06             	dc.b nC5, $06
0007A0                  	smpsLoop		$01, $02, S2Cabar_Loop54, Target
0007A0 F7               	dc.b	$F7
0007A1 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop54<*)
0007A3                  		rom_ptr_z80(S2Cabar_Loop54+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007A3 9187             	dc.w  (((((S2Cabar_Loop54+Target))<<8)&$FF00)|((((S2Cabar_Loop54+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0007A5                  S2Cabar_Loop55:
0007A5 80BD03           	dc.b nRst, nC5, $03
0007A8                  	smpsLoop		$00, $04, S2Cabar_Loop55, Target
0007A8 F7               	dc.b	$F7
0007A9 0004             	dc.b	$00,$04
                        	if (S2Cabar_Loop55<*)
0007AB                  		rom_ptr_z80(S2Cabar_Loop55+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007AB A587             	dc.w  (((((S2Cabar_Loop55+Target))<<8)&$FF00)|((((S2Cabar_Loop55+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007AD BDBD8009BD06     	dc.b nC5, nC5, nRst, $09, nC5, $06
0007B3                  	smpsLoop		$01, $02, S2Cabar_Loop55, Target
0007B3 F7               	dc.b	$F7
0007B4 0102             	dc.b	$01,$02
                        	if (S2Cabar_Loop55<*)
0007B6                  		rom_ptr_z80(S2Cabar_Loop55+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007B6 A587             	dc.w  (((((S2Cabar_Loop55+Target))<<8)&$FF00)|((((S2Cabar_Loop55+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007B8 06800C           	dc.b $06, nRst, $0C

0007BB                  S2Cabar_Loop56:
0007BB BD068012         	dc.b nC5, $06, nRst, $12
0007BF                  	smpsLoop		$00, $07, S2Cabar_Loop56, Target
0007BF F7               	dc.b	$F7
0007C0 0007             	dc.b	$00,$07
                        	if (S2Cabar_Loop56<*)
0007C2                  		rom_ptr_z80(S2Cabar_Loop56+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007C2 BB87             	dc.w  (((((S2Cabar_Loop56+Target))<<8)&$FF00)|((((S2Cabar_Loop56+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007C4 BD0606           	dc.b nC5, $06, $06
0007C7                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0007C7 E0C0             		dc.b $E0,panCenter
                        	endif
0007C9                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
0007C9 EF04             		dc.b $EF,$04
                        	endif
0007CB                  	smpsJump	S2Cabar_FM5, Target
0007CB F6               	dc.b	$F6
                        	if (S2Cabar_FM5<*)
0007CC                  		rom_ptr_z80(S2Cabar_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007CC 5A84             	dc.w  (((((S2Cabar_FM5+Target))<<8)&$FF00)|((((S2Cabar_FM5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0007CE                  S2Cabar_PSG1:
0007CE 8054910C98968091 	dc.b nRst, $54, nE1, $0C, nB1, nA1, nRst, nE1
0007D6 9896098003960695 	dc.b nB1, nA1, $09, nRst, $03, nA1, $06, nAb1
0007DE 94939248800C9206 	dc.b nG1, nFs1, nF1, $48, nRst, $0C, nF1, $06
0007E6 80910C9018910C99 	dc.b nRst, nE1, $0C, nEb1, $18, nE1, $0C, nC2
0007EE 24950C985D805791 	dc.b $24, nAb1, $0C, nB1, $5D, nRst, $57, nE1
0007F6 0C98968091989609 	dc.b $0C, nB1, nA1, nRst, nE1, nB1, nA1, $09
0007FE 8003960695949392 	dc.b nRst, $03, nA1, $06, nAb1, nG1, nFs1, nF1
000806 48800C920680910C 	dc.b $48, nRst, $0C, nF1, $06, nRst, nE1, $0C
00080E 9018910C9924950C 	dc.b nEb1, $18, nE1, $0C, nC2, $24, nAb1, $0C
000816 965D8057960C948C 	dc.b nA1, $5D, nRst, $57, nA1, $0C, nG1, nB0
00081E 188D0C9418939248 	dc.b $18, nC1, $0C, nG1, $18, nFs1, nF1, $48
000826 800C92919018910C 	dc.b nRst, $0C, nF1, nE1, nEb1, $18, nE1, $0C
00082E 9924950C985D8057 	dc.b nC2, $24, nAb1, $0C, nB1, $5D, nRst, $57
000836 960C948C188D0C94 	dc.b nA1, $0C, nG1, nB0, $18, nC1, $0C, nG1
00083E 18939248800C9291 	dc.b $18, nFs1, nF1, $48, nRst, $0C, nF1, nE1
000846 9018910C9924950C 	dc.b nEb1, $18, nE1, $0C, nC2, $24, nAb1, $0C
00084E 965D8057910C9896 	dc.b nA1, $5D, nRst, $57, nE1, $0C, nB1, nA1
000856 8091989609800396 	dc.b nRst, nE1, nB1, nA1, $09, nRst, $03, nA1
00085E 069594939248800C 	dc.b $06, nAb1, nG1, nFs1, nF1, $48, nRst, $0C
000866 920680910C901891 	dc.b nF1, $06, nRst, nE1, $0C, nEb1, $18, nE1
00086E 0C9924950C985D80 	dc.b $0C, nC2, $24, nAb1, $0C, nB1, $5D, nRst
000876 57910C9896809198 	dc.b $57, nE1, $0C, nB1, nA1, nRst, nE1, nB1
00087E 9609800396069594 	dc.b nA1, $09, nRst, $03, nA1, $06, nAb1, nG1
000886 939248800C920680 	dc.b nFs1, nF1, $48, nRst, $0C, nF1, $06, nRst
00088E 910C9018910C9924 	dc.b nE1, $0C, nEb1, $18, nE1, $0C, nC2, $24
000896 950C965D8057960C 	dc.b nAb1, $0C, nA1, $5D, nRst, $57, nA1, $0C
00089E 948C188D0C941893 	dc.b nG1, nB0, $18, nC1, $0C, nG1, $18, nFs1
0008A6 9248800C92919018 	dc.b nF1, $48, nRst, $0C, nF1, nE1, nEb1, $18
0008AE 910C9924950C985D 	dc.b nE1, $0C, nC2, $24, nAb1, $0C, nB1, $5D
0008B6 8057960C948C188D 	dc.b nRst, $57, nA1, $0C, nG1, nB0, $18, nC1
0008BE 0C9418939248800C 	dc.b $0C, nG1, $18, nFs1, nF1, $48, nRst, $0C
0008C6 92919018910C9924 	dc.b nF1, nE1, nEb1, $18, nE1, $0C, nC2, $24
0008CE 950C965D8003     	dc.b nAb1, $0C, nA1, $5D, nRst, $03
0008D4                  	smpsPSGvoice	$00
0008D4 F500             	dc.b	$F5,$00
0008D6                  	smpsJump	S2Cabar_PSG1, Target
0008D6 F6               	dc.b	$F6
                        	if (S2Cabar_PSG1<*)
0008D7                  		rom_ptr_z80(S2Cabar_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0008D7 CE87             	dc.w  (((((S2Cabar_PSG1+Target))<<8)&$FF00)|((((S2Cabar_PSG1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0008D9                  S2Cabar_PSG2:
0008D9 80549D0CA4A2809D 	dc.b nRst, $54, nE2, $0C, nB2, nA2, nRst, nE2
0008E1 A4A2098003A206A1 	dc.b nB2, nA2, $09, nRst, $03, nA2, $06, nAb2
0008E9 A09F9E48800C9E06 	dc.b nG2, nFs2, nF2, $48, nRst, $0C, nF2, $06
0008F1 809D0C9C189D0CA5 	dc.b nRst, nE2, $0C, nEb2, $18, nE2, $0C, nC3
0008F9 24A10CA45D80579D 	dc.b $24, nAb2, $0C, nB2, $5D, nRst, $57, nE2
000901 0CA4A2809DA4A209 	dc.b $0C, nB2, nA2, nRst, nE2, nB2, nA2, $09
000909 8003A206A1A09F9E 	dc.b nRst, $03, nA2, $06, nAb2, nG2, nFs2, nF2
000911 48800C9E06809D0C 	dc.b $48, nRst, $0C, nF2, $06, nRst, nE2, $0C
000919 9C189D0CA524A10C 	dc.b nEb2, $18, nE2, $0C, nC3, $24, nAb2, $0C
000921 A25D8057A20CA098 	dc.b nA2, $5D, nRst, $57, nA2, $0C, nG2, nB1
000929 18990CA0189F9E48 	dc.b $18, nC2, $0C, nG2, $18, nFs2, nF2, $48
000931 800C9E9D9C189D0C 	dc.b nRst, $0C, nF2, nE2, nEb2, $18, nE2, $0C
000939 A524A10CA45D8057 	dc.b nC3, $24, nAb2, $0C, nB2, $5D, nRst, $57
000941 A20CA09818990CA0 	dc.b nA2, $0C, nG2, nB1, $18, nC2, $0C, nG2
000949 189F9E48800C9E9D 	dc.b $18, nFs2, nF2, $48, nRst, $0C, nF2, nE2
000951 9C189D0CA524A10C 	dc.b nEb2, $18, nE2, $0C, nC3, $24, nAb2, $0C
000959 A25D80579D0CA4A2 	dc.b nA2, $5D, nRst, $57, nE2, $0C, nB2, nA2
000961 809DA4A2098003A2 	dc.b nRst, nE2, nB2, nA2, $09, nRst, $03, nA2
000969 06A1A09F9E48800C 	dc.b $06, nAb2, nG2, nFs2, nF2, $48, nRst, $0C
000971 9E06809D0C9C189D 	dc.b nF2, $06, nRst, nE2, $0C, nEb2, $18, nE2
000979 0CA524A10CA45D80 	dc.b $0C, nC3, $24, nAb2, $0C, nB2, $5D, nRst
000981 579D0CA4A2809DA4 	dc.b $57, nE2, $0C, nB2, nA2, nRst, nE2, nB2
000989 A2098003A206A1A0 	dc.b nA2, $09, nRst, $03, nA2, $06, nAb2, nG2
000991 9F9E48800C9E0680 	dc.b nFs2, nF2, $48, nRst, $0C, nF2, $06, nRst
000999 9D0C9C189D0CA524 	dc.b nE2, $0C, nEb2, $18, nE2, $0C, nC3, $24
0009A1 A10CA25D8057A20C 	dc.b nAb2, $0C, nA2, $5D, nRst, $57, nA2, $0C
0009A9 A09818990CA0189F 	dc.b nG2, nB1, $18, nC2, $0C, nG2, $18, nFs2
0009B1 9E48800C9E9D9C18 	dc.b nF2, $48, nRst, $0C, nF2, nE2, nEb2, $18
0009B9 9D0CA524A10CA45D 	dc.b nE2, $0C, nC3, $24, nAb2, $0C, nB2, $5D
0009C1 8057A20CA0981899 	dc.b nRst, $57, nA2, $0C, nG2, nB1, $18, nC2
0009C9 0CA0189F9E48800C 	dc.b $0C, nG2, $18, nFs2, nF2, $48, nRst, $0C
0009D1 9E9D9C189D0CA524 	dc.b nF2, nE2, nEb2, $18, nE2, $0C, nC3, $24
0009D9 A10CA25D8003     	dc.b nAb2, $0C, nA2, $5D, nRst, $03
0009DF                  	smpsPSGvoice	$00
0009DF F500             	dc.b	$F5,$00
0009E1                  	smpsJump	S2Cabar_PSG2, Target
0009E1 F6               	dc.b	$F6
                        	if (S2Cabar_PSG2<*)
0009E2                  		rom_ptr_z80(S2Cabar_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0009E2 D988             	dc.w  (((((S2Cabar_PSG2+Target))<<8)&$FF00)|((((S2Cabar_PSG2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0009E4                  S2Cabar_PSG3:
                        	;!@
                        	;dc.b nRst

0009E4                  S2Cabar_Loop57:
                        	;!@ dc.b $59
0009E4 8059             	dc.b nRst, $59
0009E6                  	smpsLoop		$00, $0C, S2Cabar_Loop57, Target
0009E6 F7               	dc.b	$F7
0009E7 000C             	dc.b	$00,$0C
                        	if (S2Cabar_Loop57<*)
0009E9                  		rom_ptr_z80(S2Cabar_Loop57+Target)
                        	;dc.w z80_ptr(ptr,addr)
0009E9 E489             	dc.w  (((((S2Cabar_Loop57+Target))<<8)&$FF00)|((((S2Cabar_Loop57+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0009EB 94038094800F940C 	dc.b nG1, $03, nRst, nG1, nRst, $0F, nG1, $0C
0009F3 8094038094800994 	dc.b nRst, nG1, $03, nRst, nG1, nRst, $09, nG1
0009FB 038094809494800C 	dc.b $03, nRst, nG1, nRst, nG1, nG1, nRst, $0C
000A03 95038095800F950C 	dc.b nAb1, $03, nRst, nAb1, nRst, $0F, nAb1, $0C
000A0B 8095038095800995 	dc.b nRst, nAb1, $03, nRst, nAb1, nRst, $09, nAb1
000A13 038095809595807F 	dc.b $03, nRst, nAb1, nRst, nAb1, nAb1, nRst, $7F
000A1B 807F802E94038094 	dc.b nRst, $7F, nRst, $2E, nG1, $03, nRst, nG1
000A23 800F940C80940380 	dc.b nRst, $0F, nG1, $0C, nRst, nG1, $03, nRst
000A2B 9480099403809480 	dc.b nG1, nRst, $09, nG1, $03, nRst, nG1, nRst
000A33 9494800C95038095 	dc.b nG1, nG1, nRst, $0C, nAb1, $03, nRst, nAb1
000A3B 800F950C80950380 	dc.b nRst, $0F, nAb1, $0C, nRst, nAb1, $03, nRst
000A43 9580099503809580 	dc.b nAb1, nRst, $09, nAb1, $03, nRst, nAb1, nRst
                        	;!@ dc.b nAb1, nAb1, nRst
000A4B 9595             	dc.b nAb1, nAb1

000A4D                  S2Cabar_Loop58:
                        	;!@ dc.b $7E
000A4D 807E             	dc.b nRst, $7E
000A4F                  	smpsLoop		$00, $0A, S2Cabar_Loop58, Target
000A4F F7               	dc.b	$F7
000A50 000A             	dc.b	$00,$0A
                        	if (S2Cabar_Loop58<*)
000A52                  		rom_ptr_z80(S2Cabar_Loop58+Target)
                        	;dc.w z80_ptr(ptr,addr)
000A52 4D8A             	dc.w  (((((S2Cabar_Loop58+Target))<<8)&$FF00)|((((S2Cabar_Loop58+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000A54 94038094800F940C 	dc.b nG1, $03, nRst, nG1, nRst, $0F, nG1, $0C
000A5C 8094038094800994 	dc.b nRst, nG1, $03, nRst, nG1, nRst, $09, nG1
000A64 038094809494800C 	dc.b $03, nRst, nG1, nRst, nG1, nG1, nRst, $0C
000A6C 95038095800F950C 	dc.b nAb1, $03, nRst, nAb1, nRst, $0F, nAb1, $0C
000A74 8095038095800995 	dc.b nRst, nAb1, $03, nRst, nAb1, nRst, $09, nAb1
000A7C 038095809595807F 	dc.b $03, nRst, nAb1, nRst, nAb1, nAb1, nRst, $7F
000A84 807F802E94038094 	dc.b nRst, $7F, nRst, $2E, nG1, $03, nRst, nG1
000A8C 800F940C80940380 	dc.b nRst, $0F, nG1, $0C, nRst, nG1, $03, nRst
000A94 9480099403809480 	dc.b nG1, nRst, $09, nG1, $03, nRst, nG1, nRst
000A9C 9494800C95038095 	dc.b nG1, nG1, nRst, $0C, nAb1, $03, nRst, nAb1
000AA4 800F950C80950380 	dc.b nRst, $0F, nAb1, $0C, nRst, nAb1, $03, nRst
000AAC 9580099503809580 	dc.b nAb1, nRst, $09, nAb1, $03, nRst, nAb1, nRst
000AB4 9595807F8041     	dc.b nAb1, nAb1, nRst, $7F, nRst, $41
000ABA                  	smpsPSGvoice	$00
000ABA F500             	dc.b	$F5,$00
000ABC                  	smpsJump	S2Cabar_PSG3, Target
000ABC F6               	dc.b	$F6
                        	if (S2Cabar_PSG3<*)
000ABD                  		rom_ptr_z80(S2Cabar_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000ABD E489             	dc.w  (((((S2Cabar_PSG3+Target))<<8)&$FF00)|((((S2Cabar_PSG3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000ABF                  S2Cabar_PWM1:
                        	; dKick, dSnare, dClap
000ABF                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000ABF E0C0             		dc.b $E0,panCenter
                        	endif
000AC1 8060811882818281 	dc.b nRst, $60, pEKick, $18, pESnare, pEKick, pESnare, pEKick
000AC9 8281821289068118 	dc.b pESnare, pEKick, pESnare, $12, pCrashCymb, $06, pEKick, $18
000AD1 8281828182818212 	dc.b pESnare, pEKick, pESnare, pEKick, pESnare, pEKick, pESnare, $12
000AD9 0681188281828106 	dc.b $06, pEKick, $18, pESnare, pEKick, pESnare, pEKick, $06
000AE1 0606821281068981 	dc.b $06, $06, pESnare, $12, pEKick, $06, pCrashCymb, pEKick
000AE9 0C0C821206810C0C 	dc.b $0C, $0C, pESnare, $12, $06, pEKick, $0C, $0C
000AF1 8281068281818182 	dc.b pESnare, pEKick, $06, pESnare, pEKick, pEKick, pEKick, pESnare
000AF9 0C068189810C0C82 	dc.b $0C, $06, pEKick, pCrashCymb, pEKick, $0C, $0C, pESnare
000B01 128906810C0C8212 	dc.b $12, pCrashCymb, $06, pEKick, $0C, $0C, pESnare, $12
000B09 0681188281821266 	dc.b $06, pEKick, $18, pESnare, pEKick, pESnare, $12, $66
000B11 8118828182818281 	dc.b pEKick, $18, pESnare, pEKick, pESnare, pEKick, pESnare, pEKick
000B19 8212890681188281 	dc.b pESnare, $12, pCrashCymb, $06, pEKick, $18, pESnare, pEKick
000B21 8281             	dc.b pESnare, pEKick

000B23                  S2Cabar_Loop59:
000B23 82818212068118   	dc.b pESnare, pEKick, pESnare, $12, $06, pEKick, $18
000B2A                  	smpsLoop		$00, $02, S2Cabar_Loop59, Target
000B2A F7               	dc.b	$F7
000B2B 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop59<*)
000B2D                  		rom_ptr_z80(S2Cabar_Loop59+Target)
                        	;dc.w z80_ptr(ptr,addr)
000B2D 238B             	dc.w  (((((S2Cabar_Loop59+Target))<<8)&$FF00)|((((S2Cabar_Loop59+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000B2F 8281828182818212 	dc.b pESnare, pEKick, pESnare, pEKick, pESnare, pEKick, pESnare, $12
000B37 8906811882818281 	dc.b pCrashCymb, $06, pEKick, $18, pESnare, pEKick, pESnare, pEKick
000B3F 8281821266811882 	dc.b pESnare, pEKick, pESnare, $12, $66, pEKick, $18, pESnare
000B47 8182818281821289 	dc.b pEKick, pESnare, pEKick, pESnare, pEKick, pESnare, $12, pCrashCymb
000B4F 0681188281828182 	dc.b $06, pEKick, $18, pESnare, pEKick, pESnare, pEKick, pESnare
000B57 8182120681188281 	dc.b pEKick, pESnare, $12, $06, pEKick, $18, pESnare, pEKick
000B5F 8281060606821281 	dc.b pESnare, pEKick, $06, $06, $06, pESnare, $12, pEKick
000B67 0689810C0C821206 	dc.b $06, pCrashCymb, pEKick, $0C, $0C, pESnare, $12, $06
000B6F 810C0C8281068281 	dc.b pEKick, $0C, $0C, pESnare, pEKick, $06, pESnare, pEKick
000B77 8181820C06818981 	dc.b pEKick, pEKick, pESnare, $0C, $06, pEKick, pCrashCymb, pEKick
000B7F 0C0C82128906810C 	dc.b $0C, $0C, pESnare, $12, pCrashCymb, $06, pEKick, $0C
000B87 0C82120681188281 	dc.b $0C, pESnare, $12, $06, pEKick, $18, pESnare, pEKick
000B8F 8212668118828182 	dc.b pESnare, $12, $66, pEKick, $18, pESnare, pEKick, pESnare
000B97 8182818212890681 	dc.b pEKick, pESnare, pEKick, pESnare, $12, pCrashCymb, $06, pEKick
000B9F 1882818281       	dc.b $18, pESnare, pEKick, pESnare, pEKick

000BA4                  S2Cabar_Loop60:
000BA4 82818212068118   	dc.b pESnare, pEKick, pESnare, $12, $06, pEKick, $18
000BAB                  	smpsLoop		$00, $02, S2Cabar_Loop60, Target
000BAB F7               	dc.b	$F7
000BAC 0002             	dc.b	$00,$02
                        	if (S2Cabar_Loop60<*)
000BAE                  		rom_ptr_z80(S2Cabar_Loop60+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BAE A48B             	dc.w  (((((S2Cabar_Loop60+Target))<<8)&$FF00)|((((S2Cabar_Loop60+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000BB0 8281828182818212 	dc.b pESnare, pEKick, pESnare, pEKick, pESnare, pEKick, pESnare, $12
000BB8 8906811882818281 	dc.b pCrashCymb, $06, pEKick, $18, pESnare, pEKick, pESnare, pEKick
000BC0 8281821206       	dc.b pESnare, pEKick, pESnare, $12, $06
000BC5                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000BC5 E0C0             		dc.b $E0,panCenter
                        	endif
000BC7                  	smpsJump	S2Cabar_PWM1, Target
000BC7 F6               	dc.b	$F6
                        	if (S2Cabar_PWM1<*)
000BC8                  		rom_ptr_z80(S2Cabar_PWM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000BC8 BF8A             	dc.w  (((((S2Cabar_PWM1+Target))<<8)&$FF00)|((((S2Cabar_PWM1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000BCA                  S2Cabar_NOP:
000BCA                  	smpsStop
000BCA F2               	dc.b	$F2

000BCB                  S2Cabar_Patches:
                        	; Patch $00
000BCB 20               	dc.b 	$20
000BCC 7A3100009FD8DCDF 	dc.b	$7A, $31, $00, $00,	$9F, $D8, $DC, $DF
000BD4 100A04040F080808 	dc.b	$10, $0A, $04, $04,	$0F, $08, $08, $08
000BDC 5F5FBFBF142B1780 	dc.b	$5F, $5F, $BF, $BF,	$14, $2B, $17, $80
                        	;smpsVcAlgorithm	$00
                        	;smpsVcFeedback	$04
                        	;smpsVcDetune	$07, $00, $03, $00
                        	;smpsVcCoarseFreq	$0A, $00, $01, $00
                        	;smpsVcRateScale	$02, $03, $03, $03
                        	;smpsVcAttackRate	$1F, $1C, $18, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$10, $04, $0A, $04
                        	;smpsVcDecayRate2	$05, $0B, $05, $0B
                        	;smpsVcDecayLevel	$0F, $08, $08, $08
                        	;smpsVcReleaseRate	$0F, $0F, $0F, $0F
                        	;smpsVcTotalLevel	$14, $17, $2B, $00

                        	; Patch $01
000BE4 19               	dc.b	$19
000BE5 070102015F5F5F5F 	dc.b	$07, $01, $02, $01,	$5F, $5F, $5F, $5F
000BED 0B07070D06050505 	dc.b	$0B, $07, $07, $0D,	$06, $05, $05, $05
000BF5 205050152D282380 	dc.b	$20, $50, $50, $15,	$2D, $28, $23, $80
                        	;smpsVcAlgorithm	$01
                        	;smpsVcFeedback	$03
                        	;smpsVcDetune	$00, $00, $00, $00
                        	;smpsVcCoarseFreq	$07, $02, $01, $01
                        	;smpsVcRateScale	$01, $01, $01, $01
                        	;smpsVcAttackRate	$1F, $1F, $1F, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$0B, $07, $07, $0D
                        	;smpsVcDecayRate2	$02, $05, $05, $01
                        	;smpsVcDecayLevel	$06, $05, $05, $05
                        	;smpsVcReleaseRate	$00, $00, $00, $05
                        	;smpsVcTotalLevel	$2D, $23, $28, $00

                        	; Patch $02
000BFD 39               	dc.b	$39
000BFE 080604111F1F1F1F 	dc.b	$08, $06, $04, $11,	$1F, $1F, $1F, $1F
000C06 1409090200000000 	dc.b	$14, $09, $09, $02,	$00, $00, $00, $00
000C0E 8B5A3A3A10282980 	dc.b	$8B, $5A, $3A, $3A,	$10, $28, $29, $80
                        	;smpsVcAlgorithm	$01
                        	;smpsVcFeedback	$07
                        	;smpsVcDetune	$00, $00, $00, $01
                        	;smpsVcCoarseFreq	$08, $04, $06, $01
                        	;smpsVcRateScale	$00, $00, $00, $00
                        	;smpsVcAttackRate	$1F, $1F, $1F, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$14, $09, $09, $02
                        	;smpsVcDecayRate2	$08, $03, $05, $03
                        	;smpsVcDecayLevel	$00, $00, $00, $00
                        	;smpsVcReleaseRate	$0B, $0A, $0A, $0A
                        	;smpsVcTotalLevel	$10, $29, $28, $00

                        	; Patch $03
000C16 3C               	dc.b	$3C
000C17 01720132171F1F1F 	dc.b	$01, $72, $01, $32,	$17, $1F, $1F, $1F
000C1F 0808080904030404 	dc.b	$08, $08, $08, $09,	$04, $03, $04, $04
000C27 0F1B1B2B12820982 	dc.b	$0F, $1B, $1B, $2B,	$12, $82, $09, $82
                        	;smpsVcAlgorithm	$04
                        	;smpsVcFeedback	$07
                        	;smpsVcDetune	$00, $00, $07, $03
                        	;smpsVcCoarseFreq	$01, $01, $02, $02
                        	;smpsVcRateScale	$00, $00, $00, $00
                        	;smpsVcAttackRate	$17, $1F, $1F, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$08, $08, $08, $09
                        	;smpsVcDecayRate2	$00, $01, $01, $02
                        	;smpsVcDecayLevel	$04, $04, $03, $04
                        	;smpsVcReleaseRate	$0F, $0B, $0B, $0B
                        	;smpsVcTotalLevel	$12, $09, $02, $02

                        	; Patch $04
000C2F 3B               	dc.b	$3B
000C30 00000000101F001F 	dc.b	$00, $00, $00, $00,	$10, $1F, $00, $1F
000C38 0000180F00000000 	dc.b	$00, $00, $18, $0F,	$00, $00, $00, $00
000C40 00F650F500002180 	dc.b	$00, $F6, $50, $F5,	$00, $00, $21, $80
                        	;smpsVcAlgorithm	$03
                        	;smpsVcFeedback	$07
                        	;smpsVcDetune	$00, $00, $00, $00
                        	;smpsVcCoarseFreq	$00, $00, $00, $00
                        	;smpsVcRateScale	$00, $00, $00, $00
                        	;smpsVcAttackRate	$10, $00, $1F, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$00, $18, $00, $0F
                        	;smpsVcDecayRate2	$00, $05, $0F, $0F
                        	;smpsVcDecayLevel	$00, $00, $00, $00
                        	;smpsVcReleaseRate	$00, $00, $06, $05
                        	;smpsVcTotalLevel	$00, $21, $00, $00

00000 Total Error(s)

CFM3               00000002 E  CFM4               00000004 E  CFM5               00000005 E
CFM6               00000006 E  CNOISE             000000E0 E  CPSG1              00000080 E
CPSG2              000000A0 E  CPSG3              000000C0 E  CPWM1              00000018 E
CPWM2              0000001A E  CPWM3              0000001C E  CPWM4              0000001E E
DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  FMPITCH            00000000 E
FMVOL1             00000013 E  FMVOL2             0000000F E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PCRA_D81           00000081 E  PCRA_D82           0000008C E  PCRA_D83           00000085 E
PCRA_D84           00000086 E  PCRA_D85           00000087 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
PFINGSNAPHI        0000008E E  PFINGSNAPLO        0000009E E  PNEPDADA           0000009D E
POPENHH            00000099 E  PORCHHITHI         0000009F E  PORCHHITLO         000000A1 E
PORCHHITLOWER      000000A2 E  PORCHHITMED        000000A0 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSGDELTA           0000000C E  PSGNULL            00000000 E
PSGVOI             00000000 E  PSGVOL             00000004 E  PSILENCE           00000096 E
PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E
PTOMHI             00000085 E  PTOMLOW            00000087 E  PTOMLOWER          0000009A E
PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E  PTOMMID            00000086 E
PWMPITCH           00000000 E  PWMVOL             000000AA E  S2CABAR_FM1        00000040
S2CABAR_FM2        000000F8    S2CABAR_FM3        000001D7    S2CABAR_FM4        000003AA
S2CABAR_FM5        0000045A    S2CABAR_LOO$8      000000B7    S2CABAR_LOO$9      000000FC
S2CABAR_LOOP1      00000044    S2CABAR_LOOP10     0000014E    S2CABAR_LOOP11     000001D9
S2CABAR_LOOP12     00000216    S2CABAR_LOOP13     0000024B    S2CABAR_LOOP14     00000268
S2CABAR_LOOP15     0000023D    S2CABAR_LOOP16     000002B0    S2CABAR_LOOP17     000002FB
S2CABAR_LOOP18     00000330    S2CABAR_LOOP19     0000034D    S2CABAR_LOOP2      0000005E
S2CABAR_LOOP20     00000322    S2CABAR_LOOP21     000003AE    S2CABAR_LOOP22     000003C8
S2CABAR_LOOP23     000003E1    S2CABAR_LOOP24     000003D9    S2CABAR_LOOP25     00000407
S2CABAR_LOOP26     000003FF    S2CABAR_LOOP27     00000425    S2CABAR_LOOP28     0000041D
S2CABAR_LOOP29     000004A6    S2CABAR_LOOP3      00000077    S2CABAR_LOOP30     000004B3
S2CABAR_LOOP31     000004D2    S2CABAR_LOOP32     000004F0    S2CABAR_LOOP33     00000542
S2CABAR_LOOP34     00000595    S2CABAR_LOOP35     000005A2    S2CABAR_LOOP36     000005AD
S2CABAR_LOOP37     000005AB    S2CABAR_LOOP38     000005C3    S2CABAR_LOOP39     000005E1
S2CABAR_LOOP4      0000006F    S2CABAR_LOOP40     000005DD    S2CABAR_LOOP41     000005F1
S2CABAR_LOOP42     00000607    S2CABAR_LOOP43     0000065A    S2CABAR_LOOP44     00000667
S2CABAR_LOOP45     00000686    S2CABAR_LOOP46     000006A4    S2CABAR_LOOP47     000006F6
S2CABAR_LOOP48     00000749    S2CABAR_LOOP49     00000756    S2CABAR_LOOP5      000000A1
S2CABAR_LOOP50     00000761    S2CABAR_LOOP51     0000075F    S2CABAR_LOOP52     00000777
S2CABAR_LOOP53     00000795    S2CABAR_LOOP54     00000791    S2CABAR_LOOP55     000007A5
S2CABAR_LOOP56     000007BB    S2CABAR_LOOP57     000009E4    S2CABAR_LOOP58     00000A4D
S2CABAR_LOOP59     00000B23    S2CABAR_LOOP6      00000099    S2CABAR_LOOP60     00000BA4
S2CABAR_LOOP7      000000BF    S2CABAR_NOP        00000BCA    S2CABAR_PATCHES    00000BCB
S2CABAR_PSG1       000007CE    S2CABAR_PSG2       000008D9    S2CABAR_PSG3       000009E4
S2CABAR_PWM1       00000ABF    SMPSED             000000ED E  SMPSEE             000000EE E
SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E  SMPSMODON          000000F1 E
SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E  SMPSPITCH01HI      0000000C E
SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E  SMPSPITCH02LO      000000E8 E
SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E  SMPSPITCH04HI      00000030 E
SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E  SMPSPITCH05LO      000000C4 E
SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E  SMPSPITCH07HI      00000054 E
SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E  SMPSPITCH08LO      000000A0 E
SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E  SMPSPITCH10HI      00000078 E
SMPSPITCH10LO      00000088 E  TARGET             00040000 E
