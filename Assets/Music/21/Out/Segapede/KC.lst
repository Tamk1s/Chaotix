                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; Channel IDs for SFX
       = 000080         cPSG1				EQU $80
       = 0000A0         cPSG2				EQU $A0
       = 0000C0         cPSG3				EQU $C0
       = 0000E0         cNoise				EQU $E0	; Not for use in S3/S&K/S3D
       = 000002         cFM3				EQU $02
       = 000004         cFM4				EQU $04
       = 000005         cFM5				EQU $05
       = 000006         cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
       = 000018         cPWM1				EQU	$18
       = 00001A         cPWM2				EQU	$1A
       = 00001C         cPWM3				EQU	$1C
       = 00001E         cPWM4				EQU	$1E

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D
                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E
       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96
                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E
       = 00009F         pOrchHitHi		EQU	$9F
       = 0000A0         pOrchHitMed		EQU	$A0
       = 0000A1         pOrchHitLo		EQU	$A1
       = 0000A2         pOrchHitLower	EQU	$A2

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,volL,volR
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	if \0==4
                        		dc.b	volL
                        	else
                        		dc.b	(volL<<4)+volR
                        	endif	
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000000         FMPitch	EQU	$00
       = 00001F         FMVol1	EQU	$1F
       = 000015         FMVol2	EQU	FMVol1-$0A
       = 00001D         FMVol3	EQU	FMVol1-$02
       = 000027         FMVol4	EQU	FMVol1+$08

       = 00000C         PSGPitch	EQU	PSGDelta
                        ;!@ PSGVol		EQU	$00
       = 000003         PSGVol		EQU	$03
       = 000000         PSGNull		EQU	$00
       = 000000         PSGVoi		EQU	$00

       = 000000         PWMPitch	EQU	$00
       = 000022         PWMVol1		EQU	$22
       = 000055         PWMVol2		EQU	$55

000000                  	smpsHeaderVoice	Segapede_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(Segapede_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 6487             	dc.w  (((((Segapede_Patches+Target))<<8)&$FF00)|((((Segapede_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan	$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempo	$02, $11
000004 0211             	dc.b	$02,$11
000006                  	smpsHeaderFM	Segapede_FM1, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(Segapede_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((Segapede_FM1+Target))<<8)&$FF00)|((((Segapede_FM1+Target))>>8)&$7F)|$80)
000008 001F             	dc.b	FMPitch,FMVol1
00000A                  	smpsHeaderFM	Segapede_FM2, Target, FMPitch, FMVol2
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(Segapede_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A A881             	dc.w  (((((Segapede_FM2+Target))<<8)&$FF00)|((((Segapede_FM2+Target))>>8)&$7F)|$80)
00000C 0015             	dc.b	FMPitch,FMVol2
00000E                  	smpsHeaderFM	Segapede_FM3, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(Segapede_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E FC82             	dc.w  (((((Segapede_FM3+Target))<<8)&$FF00)|((((Segapede_FM3+Target))>>8)&$7F)|$80)
000010 001F             	dc.b	FMPitch,FMVol1
000012                  	smpsHeaderFM	Segapede_FM4, Target, FMPitch, FMVol3
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(Segapede_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 2983             	dc.w  (((((Segapede_FM4+Target))<<8)&$FF00)|((((Segapede_FM4+Target))>>8)&$7F)|$80)
000014 001D             	dc.b	FMPitch,FMVol3
000016                  	smpsHeaderFM	Segapede_FM5, Target, FMPitch, FMVol4
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(Segapede_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 9184             	dc.w  (((((Segapede_FM5+Target))<<8)&$FF00)|((((Segapede_FM5+Target))>>8)&$7F)|$80)
000018 0027             	dc.b	FMPitch,FMVol4
00001A                  	smpsHeaderFM	Segapede_FM6, Target, FMPitch, FMVol1
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(Segapede_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A 2085             	dc.w  (((((Segapede_FM6+Target))<<8)&$FF00)|((((Segapede_FM6+Target))>>8)&$7F)|$80)
00001C 001F             	dc.b	FMPitch,FMVol1
00001E                  	smpsHeaderPSG	Segapede_PSG1, Target, PSGPitch, PSGVol, PSGNull, PSGVoi
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(Segapede_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E 4D85             	dc.w  (((((Segapede_PSG1+Target))<<8)&$FF00)|((((Segapede_PSG1+Target))>>8)&$7F)|$80)
000020 0C03             	dc.b	PSGPitch,PSGVol
                        	;dc.w	voice
000022 0000             	dc.b	PSGNull,PSGVoi
000024                  	smpsHeaderPSG	Segapede_NOP, Target, PSGPitch, PSGVol, PSGNull, PSGVoi
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(Segapede_NOP+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 6387             	dc.w  (((((Segapede_NOP+Target))<<8)&$FF00)|((((Segapede_NOP+Target))>>8)&$7F)|$80)
000026 0C03             	dc.b	PSGPitch,PSGVol
                        	;dc.w	voice
000028 0000             	dc.b	PSGNull,PSGVoi
00002A                  	smpsHeaderPSG	Segapede_NOP, Target, PSGPitch, PSGVol, PSGNull, PSGVoi
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(Segapede_NOP+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 6387             	dc.w  (((((Segapede_NOP+Target))<<8)&$FF00)|((((Segapede_NOP+Target))>>8)&$7F)|$80)
00002C 0C03             	dc.b	PSGPitch,PSGVol
                        	;dc.w	voice
00002E 0000             	dc.b	PSGNull,PSGVoi
000030                  	smpsHeaderPWM	Segapede_PWM1, Target, PWMPitch, PWMVol1
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(Segapede_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 9A85             	dc.w  (((((Segapede_PWM1+Target))<<8)&$FF00)|((((Segapede_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
                        	if 4==4
000033 22               		dc.b	PWMVol1
                        	else
                        	endif	
000034                  	smpsHeaderPWM	Segapede_PWM2, Target, PWMPitch, PWMVol2
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(Segapede_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 3586             	dc.w  (((((Segapede_PWM2+Target))<<8)&$FF00)|((((Segapede_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
                        	if 4==4
000037 55               		dc.b	PWMVol2
                        	else
                        	endif	
000038                  	smpsHeaderPWM	Segapede_NOP, Target, PWMPitch, PWMVol1
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(Segapede_NOP+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 6387             	dc.w  (((((Segapede_NOP+Target))<<8)&$FF00)|((((Segapede_NOP+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
                        	if 4==4
00003B 22               		dc.b	PWMVol1
                        	else
                        	endif	
00003C                  	smpsHeaderPWM	Segapede_NOP, Target, PWMPitch, PWMVol1
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(Segapede_NOP+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 6387             	dc.w  (((((Segapede_NOP+Target))<<8)&$FF00)|((((Segapede_NOP+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
                        	if 4==4
00003F 22               		dc.b	PWMVol1
                        	else
                        	endif	

000040                  Segapede_FM1:
000040                  	smpsFMvoice		$00
                        	;if song<>""
                        	if 1==2
                        	else
000040 EF00             		dc.b $EF,$00
                        	endif
000042 8004             	dc.b nRst, $04

000044                  Segapede_Jump1:
000044 A4040480A4801CA4 	dc.b nB2, $04, $04, nRst, nB2, nRst, $1C, nB2
00004C 04B008A404B0A3A3 	dc.b $04, nB3, $08, nB2, $04, nB3, nBb2, nBb2
000054 80A38030A2040480 	dc.b nRst, nBb2, nRst, $30, nA2, $04, $04, nRst
00005C A28018A204AE0380 	dc.b nA2, nRst, $18, nA2, $04, nA3, $03, nRst
000064 05AE038001A204AE 	dc.b $05, nA3, $03, nRst, $01, nA2, $04, nA3
00006C A0038001A0038005 	dc.b nG2, $03, nRst, $01, nG2, $03, nRst, $05
000074 A00380159D04A99D 	dc.b nG2, $03, nRst, $15, nE2, $04, nE3, nE2
00007C 8010A6040480A680 	dc.b nRst, $10, nCs3, $04, $04, nRst, nCs3, nRst
000084 1CA604B208A604B2 	dc.b $1C, nCs3, $04, nCs4, $08, nCs3, $04, nCs4
00008C A5A580A58030A404 	dc.b nC3, nC3, nRst, nC3, nRst, $30, nB2, $04
000094 0480A48018A404B0 	dc.b $04, nRst, nB2, nRst, $18, nB2, $04, nB3
00009C 038005B0038001A4 	dc.b $03, nRst, $05, nB3, $03, nRst, $01, nB2
0000A4 04B0A2038001A203 	dc.b $04, nB3, nA2, $03, nRst, $01, nA2, $03
0000AC 8005A2038015A204 	dc.b nRst, $05, nA2, $03, nRst, $15, nA2, $04
0000B4 AEA28010A4040480 	dc.b nA3, nA2, nRst, $10, nB2, $04, $04, nRst
0000BC A4801CA404B008A4 	dc.b nB2, nRst, $1C, nB2, $04, nB3, $08, nB2
0000C4 04B0A3A380A38030 	dc.b $04, nB3, nBb2, nBb2, nRst, nBb2, nRst, $30
0000CC A2040480A28018A2 	dc.b nA2, $04, $04, nRst, nA2, nRst, $18, nA2
0000D4 04AE038005AE0380 	dc.b $04, nA3, $03, nRst, $05, nA3, $03, nRst
0000DC 01A204AEA0038001 	dc.b $01, nA2, $04, nA3, nG2, $03, nRst, $01
0000E4 A0038005A0038015 	dc.b nG2, $03, nRst, $05, nG2, $03, nRst, $15
0000EC 9D04A99D80089D04 	dc.b nE2, $04, nE3, nE2, nRst, $08, nE2, $04
0000F4 9FA0038001A00380 	dc.b nFs2, nG2, $03, nRst, $01, nG2, $03, nRst
0000FC 05A003801DA004AC 	dc.b $05, nG2, $03, nRst, $1D, nG2, $04, nG3
000104 08A004ACA7038001 	dc.b $08, nG2, $04, nG3, nD3, $03, nRst, $01
00010C A7038005A7038031 	dc.b nD3, $03, nRst, $05, nD3, $03, nRst, $31
000114 A2038001A2038005 	dc.b nA2, $03, nRst, $01, nA2, $03, nRst, $05
00011C A2038019A2038001 	dc.b nA2, $03, nRst, $19, nA2, $03, nRst, $01
000124 AE038005AE038001 	dc.b nA3, $03, nRst, $05, nA3, $03, nRst, $01
00012C A2038001AE038001 	dc.b nA2, $03, nRst, $01, nA3, $03, nRst, $01
000134 A40CA6A7A6A408A2 	dc.b nB2, $0C, nCs3, nD3, nCs3, nB2, $08, nA2
00013C AC04A0038005A004 	dc.b nG3, $04, nG2, $03, nRst, $05, nG2, $04
000144 8014A004ACA0AC   	dc.b nRst, $14, nG2, $04, nG3, nG2, nG3
00014B                  	smpsAlterNote	$F1
00014B E1F1             	dc.b	$E1,$F1
00014D E7AD01           	dc.b smpsNoAttack, nAb3, $01
000150                  	smpsAlterNote	$FD
000150 E1FD             	dc.b	$E1,$FD
000152 E7AE02           	dc.b smpsNoAttack, nA3, $02
000155                  	smpsAlterNote	$00
000155 E100             	dc.b	$E1,$00
000157 E7AC05A004A70380 	dc.b smpsNoAttack, nG3, $05, nG2, $04, nD3, $03, nRst
00015F 019B0380059B0380 	dc.b $01, nD2, $03, nRst, $05, nD2, $03, nRst
000167 1D9B038011A20380 	dc.b $1D, nD2, $03, nRst, $11, nA2, $03, nRst
00016F 01A2038005A20380 	dc.b $01, nA2, $03, nRst, $05, nA2, $03, nRst
000177 19A2038001AE0380 	dc.b $19, nA2, $03, nRst, $01, nA3, $03, nRst
00017F 05AE038001A20380 	dc.b $05, nA3, $03, nRst, $01, nA2, $03, nRst
000187 01AE0380019F0380 	dc.b $01, nA3, $03, nRst, $01, nFs2, $03, nRst
00018F 019F0380059F0880 	dc.b $01, nFs2, $03, nRst, $05, nFs2, $08, nRst
000197 9F04A3038001A303 	dc.b nFs2, $04, nBb2, $03, nRst, $01, nBb2, $03
00019F 8005A307800D     	dc.b nRst, $05, nBb2, $07, nRst, $0D
0001A5                  	smpsJump		Segapede_Jump1, Target
0001A5 F6               	dc.b	$F6
                        	if (Segapede_Jump1<*)
0001A6                  		rom_ptr_z80(Segapede_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001A6 4480             	dc.w  (((((Segapede_Jump1+Target))<<8)&$FF00)|((((Segapede_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0001A8                  Segapede_FM2:
0001A8                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0001A8 EF01             		dc.b $EF,$01
                        	endif
0001AA 8004             	dc.b nRst, $04

0001AC                  Segapede_Jump2:
0001AC 8004B0B3B7BCB7BC 	dc.b nRst, $04, nB3, nD4, nFs4, nB4, nFs4, nB4
0001B4 BFC3BFC3C8CBC8CB 	dc.b nD5, nFs5, nD5, nFs5, nB5, nD6, nB5, nD6
0001BC CF80AFB2B7BBB7BB 	dc.b nFs6, nRst, nBb3, nCs4, nFs4, nBb4, nFs4, nBb4
0001C4 BEC3BEC3C7CAC7CA 	dc.b nCs5, nFs5, nCs5, nFs5, nBb5, nCs6, nBb5, nCs6
0001CC CF80AEB4B7BCB7BC 	dc.b nFs6, nRst, nA3, nEb4, nFs4, nB4, nFs4, nB4
0001D4 C0C3C0C3C8CCC8CC 	dc.b nEb5, nFs5, nEb5, nFs5, nB5, nEb6, nB5, nEb6
0001DC CF80ACB5B8BCC1C8 	dc.b nFs6, nRst, nG3, nE4, nG4, nB4, nE5, nB5
0001E4 CD80A9AFB5BBBEC1 	dc.b nE6, nRst, nE3, nBb3, nE4, nBb4, nCs5, nE5
0001EC C4               	dc.b nG5
0001ED                  	smpsFMvoice		$06
                        	;if song<>""
                        	if 1==2
                        	else
0001ED EF06             		dc.b $EF,$06
                        	endif

0001EF                  Segapede_Loop1:
0001EF CAD1CD           	dc.b nCs6, nAb6, nE6
0001F2                  	smpsLoop		$00, $05, Segapede_Loop1, Target
0001F2 F7               	dc.b	$F7
0001F3 0005             	dc.b	$00,$05
                        	if (Segapede_Loop1<*)
0001F5                  		rom_ptr_z80(Segapede_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001F5 EF81             	dc.w  (((((Segapede_Loop1+Target))<<8)&$FF00)|((((Segapede_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0001F7 CA               	dc.b nCs6

0001F8                  Segapede_Loop2:
0001F8 C9D1CC           	dc.b nC6, nAb6, nEb6
0001FB                  	smpsLoop		$00, $05, Segapede_Loop2, Target
0001FB F7               	dc.b	$F7
0001FC 0005             	dc.b	$00,$05
                        	if (Segapede_Loop2<*)
0001FE                  		rom_ptr_z80(Segapede_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0001FE F881             	dc.w  (((((Segapede_Loop2+Target))<<8)&$FF00)|((((Segapede_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000200 C9               	dc.b nC6

000201                  Segapede_Loop3:
000201 CAD1CE           	dc.b nCs6, nAb6, nF6
000204                  	smpsLoop		$00, $05, Segapede_Loop3, Target
000204 F7               	dc.b	$F7
000205 0005             	dc.b	$00,$05
                        	if (Segapede_Loop3<*)
000207                  		rom_ptr_z80(Segapede_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000207 0182             	dc.w  (((((Segapede_Loop3+Target))<<8)&$FF00)|((((Segapede_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000209                  Segapede_Loop4:
000209 CAC6CF           	dc.b nCs6, nA5, nFs6
00020C                  	smpsLoop		$00, $03, Segapede_Loop4, Target
00020C F7               	dc.b	$F7
00020D 0003             	dc.b	$00,$03
                        	if (Segapede_Loop4<*)
00020F                  		rom_ptr_z80(Segapede_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00020F 0982             	dc.w  (((((Segapede_Loop4+Target))<<8)&$FF00)|((((Segapede_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000211 C6CFCCC9C6C3C0BD 	dc.b nA5, nFs6, nEb6, nC6, nA5, nFs5, nEb5, nC5
000219                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
000219 EF01             		dc.b $EF,$01
                        	endif
00021B 80A4A7ABB0ABB0B3 	dc.b nRst, nB2, nD3, nFs3, nB3, nFs3, nB3, nD4
000223 B7B3B7BCBFBCBFC3 	dc.b nFs4, nD4, nFs4, nB4, nD5, nB4, nD5, nFs5
00022B 80A3A6ABAFABAFB2 	dc.b nRst, nBb2, nCs3, nFs3, nBb3, nFs3, nBb3, nCs4
000233 B7B2B7BBBEBBBEC3 	dc.b nFs4, nCs4, nFs4, nBb4, nCs5, nBb4, nCs5, nFs5
00023B 80A2A8ABB0ABB0B4 	dc.b nRst, nA2, nEb3, nFs3, nB3, nFs3, nB3, nEb4
000243 B7B4B7BCC0BCC0C3 	dc.b nFs4, nEb4, nFs4, nB4, nEb5, nB4, nEb5, nFs5
00024B 80A0A9ACB0B5BCC1 	dc.b nRst, nG2, nE3, nG3, nB3, nE4, nB4, nE5
000253 809DA3A9AFB2B5B8 	dc.b nRst, nE2, nBb2, nE3, nBb3, nCs4, nE4, nG4
00025B 80               	dc.b nRst
00025C                  	smpsFMvoice		$07
                        	;if song<>""
                        	if 1==2
                        	else
00025C EF07             		dc.b $EF,$07
                        	endif
00025E ACB3B0B8B3BCB8BF 	dc.b nG3, nD4, nB3, nG4, nD4, nB4, nG4, nD5
000266 BCC4BFC8C4CBC880 	dc.b nB4, nG5, nD5, nB5, nG5, nD6, nB5, nRst
00026E A7B3AEB7B3BAB7BF 	dc.b nD3, nD4, nA3, nFs4, nD4, nA4, nFs4, nD5
000276 BAC3BFC6C3CBC680 	dc.b nA4, nFs5, nD5, nA5, nFs5, nD6, nA5, nRst
00027E AEB5B2BAB5BEBAC1 	dc.b nA3, nE4, nCs4, nA4, nE4, nCs5, nA4, nE5
000286 BEC6C1CAC6CDCA   	dc.b nCs5, nA5, nE5, nCs6, nA5, nE6, nCs6

00028D                  Segapede_Loop5:
00028D BF018003BF028006 	dc.b nD5, $01, nRst, $03, nD5, $02, nRst, $06
000295                  	smpsLoop		$00, $03, Segapede_Loop5, Target
000295 F7               	dc.b	$F7
000296 0003             	dc.b	$00,$03
                        	if (Segapede_Loop5<*)
000298                  		rom_ptr_z80(Segapede_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000298 8D82             	dc.w  (((((Segapede_Loop5+Target))<<8)&$FF00)|((((Segapede_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00029A BF018003BF018007 	dc.b nD5, $01, nRst, $03, nD5, $01, nRst, $07
0002A2 BF038005BE02800A 	dc.b nD5, $03, nRst, $05, nCs5, $02, nRst, $0A
0002AA AC04B3B0B8B3BCB8 	dc.b nG3, $04, nD4, nB3, nG4, nD4, nB4, nG4
0002B2 BFBCC4BFC8C4CBC8 	dc.b nD5, nB4, nG5, nD5, nB5, nG5, nD6, nB5
0002BA 80A7B3AEB7B3BAB7 	dc.b nRst, nD3, nD4, nA3, nFs4, nD4, nA4, nFs4
0002C2 BFBAC3BFC6C3CBC6 	dc.b nD5, nA4, nFs5, nD5, nA5, nFs5, nD6, nA5
0002CA 80AEB5B2BAB5BEBA 	dc.b nRst, nA3, nE4, nCs4, nA4, nE4, nCs5, nA4
0002D2 C1BEC6C1CAC6CDCA 	dc.b nE5, nCs5, nA5, nE5, nCs6, nA5, nE6, nCs6

0002DA                  Segapede_Loop6:
0002DA C3018003C3028006 	dc.b nFs5, $01, nRst, $03, nFs5, $02, nRst, $06
0002E2                  	smpsLoop		$00, $03, Segapede_Loop6, Target
0002E2 F7               	dc.b	$F7
0002E3 0003             	dc.b	$00,$03
                        	if (Segapede_Loop6<*)
0002E5                  		rom_ptr_z80(Segapede_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002E5 DA82             	dc.w  (((((Segapede_Loop6+Target))<<8)&$FF00)|((((Segapede_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0002E7 C1018003C1018007 	dc.b nE5, $01, nRst, $03, nE5, $01, nRst, $07
0002EF BF038005BE0280   	dc.b nD5, $03, nRst, $05, nCs5, $02, nRst
0002F6                  	smpsFMvoice		$01
                        	;if song<>""
                        	if 1==2
                        	else
0002F6 EF01             		dc.b $EF,$01
                        	endif
0002F8 04               	dc.b $04
0002F9                  	smpsJump		Segapede_Jump2, Target
0002F9 F6               	dc.b	$F6
                        	if (Segapede_Jump2<*)
0002FA                  		rom_ptr_z80(Segapede_Jump2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0002FA AC81             	dc.w  (((((Segapede_Jump2+Target))<<8)&$FF00)|((((Segapede_Jump2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0002FC                  Segapede_FM3:
0002FC                  	smpsFMvoice		$02
                        	;if song<>""
                        	if 1==2
                        	else
0002FC EF02             		dc.b $EF,$02
                        	endif
0002FE 8004             	dc.b nRst, $04

000300                  Segapede_Jump3:
000300 8070AF108070A910 	dc.b nRst, $70, nBb3, $10, nRst, $70, nE3, $10
000308 8070B1108070AE10 	dc.b nRst, $70, nC4, $10, nRst, $70, nA3, $10
000310 8070AF108070A908 	dc.b nRst, $70, nBb3, $10, nRst, $70, nE3, $08
000318 8078B310807F8071 	dc.b nRst, $78, nD4, $10, nRst, $7F, nRst, $71
000320 A710807F8001     	dc.b nD3, $10, nRst, $7F, nRst, $01
000326                  	smpsJump		Segapede_Jump3, Target
000326 F6               	dc.b	$F6
                        	if (Segapede_Jump3<*)
000327                  		rom_ptr_z80(Segapede_Jump3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000327 0083             	dc.w  (((((Segapede_Jump3+Target))<<8)&$FF00)|((((Segapede_Jump3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000329                  Segapede_FM4:
000329                  	smpsFMvoice		$03
                        	;if song<>""
                        	if 1==2
                        	else
000329 EF03             		dc.b $EF,$03
                        	endif
00032B 8004             	dc.b nRst, $04

00032D                  Segapede_Jump4:
00032D A4040480A4801CA4 	dc.b nB2, $04, $04, nRst, nB2, nRst, $1C, nB2
000335 04B008A404B0A3A3 	dc.b $04, nB3, $08, nB2, $04, nB3, nBb2, nBb2
00033D 80A38030A2040480 	dc.b nRst, nBb2, nRst, $30, nA2, $04, $04, nRst
000345 A28018A204AE0380 	dc.b nA2, nRst, $18, nA2, $04, nA3, $03, nRst
00034D 05AE038001A204AE 	dc.b $05, nA3, $03, nRst, $01, nA2, $04, nA3
000355 A0038001A0038005 	dc.b nG2, $03, nRst, $01, nG2, $03, nRst, $05
00035D A00380159D04A99D 	dc.b nG2, $03, nRst, $15, nE2, $04, nE3, nE2
000365 8010A6040480A680 	dc.b nRst, $10, nCs3, $04, $04, nRst, nCs3, nRst
00036D 1CA604B208A604B2 	dc.b $1C, nCs3, $04, nCs4, $08, nCs3, $04, nCs4
000375 A5A580A58030A404 	dc.b nC3, nC3, nRst, nC3, nRst, $30, nB2, $04
00037D 0480A48018A404B0 	dc.b $04, nRst, nB2, nRst, $18, nB2, $04, nB3
000385 038005B0038001A4 	dc.b $03, nRst, $05, nB3, $03, nRst, $01, nB2
00038D 04B0A2038001A203 	dc.b $04, nB3, nA2, $03, nRst, $01, nA2, $03
000395 8005A2038015A204 	dc.b nRst, $05, nA2, $03, nRst, $15, nA2, $04
00039D AEA28010A4040480 	dc.b nA3, nA2, nRst, $10, nB2, $04, $04, nRst
0003A5 A4801CA404B008A4 	dc.b nB2, nRst, $1C, nB2, $04, nB3, $08, nB2
0003AD 04B0A3A380A38030 	dc.b $04, nB3, nBb2, nBb2, nRst, nBb2, nRst, $30
0003B5 A2040480A28018A2 	dc.b nA2, $04, $04, nRst, nA2, nRst, $18, nA2
0003BD 04AE038005AE0380 	dc.b $04, nA3, $03, nRst, $05, nA3, $03, nRst
0003C5 01A204AEA0038001 	dc.b $01, nA2, $04, nA3, nG2, $03, nRst, $01
0003CD A0038005A0038015 	dc.b nG2, $03, nRst, $05, nG2, $03, nRst, $15
0003D5 9D04A99D80089D04 	dc.b nE2, $04, nE3, nE2, nRst, $08, nE2, $04
0003DD 9FA0038001A00380 	dc.b nFs2, nG2, $03, nRst, $01, nG2, $03, nRst
0003E5 05A003801DA004AC 	dc.b $05, nG2, $03, nRst, $1D, nG2, $04, nG3
0003ED 08A004ACA7038001 	dc.b $08, nG2, $04, nG3, nD3, $03, nRst, $01
0003F5 A7038005A7038031 	dc.b nD3, $03, nRst, $05, nD3, $03, nRst, $31
0003FD A2038001A2038005 	dc.b nA2, $03, nRst, $01, nA2, $03, nRst, $05
000405 A2038019A2038001 	dc.b nA2, $03, nRst, $19, nA2, $03, nRst, $01
00040D AE038005AE038001 	dc.b nA3, $03, nRst, $05, nA3, $03, nRst, $01
000415 A2038001AE038001 	dc.b nA2, $03, nRst, $01, nA3, $03, nRst, $01
00041D A40CA6A7A6A408A2 	dc.b nB2, $0C, nCs3, nD3, nCs3, nB2, $08, nA2
000425 AC04A0038005A004 	dc.b nG3, $04, nG2, $03, nRst, $05, nG2, $04
00042D 8014A004ACA0AC   	dc.b nRst, $14, nG2, $04, nG3, nG2, nG3
000434                  	smpsAlterNote	$F1
000434 E1F1             	dc.b	$E1,$F1
000436 E7AD01           	dc.b smpsNoAttack, nAb3, $01
000439                  	smpsAlterNote	$FD
000439 E1FD             	dc.b	$E1,$FD
00043B E7AE02           	dc.b smpsNoAttack, nA3, $02
00043E                  	smpsAlterNote	$00
00043E E100             	dc.b	$E1,$00
000440 E7AC05A004A70380 	dc.b smpsNoAttack, nG3, $05, nG2, $04, nD3, $03, nRst
000448 019B0380059B0380 	dc.b $01, nD2, $03, nRst, $05, nD2, $03, nRst
000450 1D9B038011A20380 	dc.b $1D, nD2, $03, nRst, $11, nA2, $03, nRst
000458 01A2038005A20380 	dc.b $01, nA2, $03, nRst, $05, nA2, $03, nRst
000460 19A2038001AE0380 	dc.b $19, nA2, $03, nRst, $01, nA3, $03, nRst
000468 05AE038001A20380 	dc.b $05, nA3, $03, nRst, $01, nA2, $03, nRst
000470 01AE0380019F0380 	dc.b $01, nA3, $03, nRst, $01, nFs2, $03, nRst
000478 019F0380059F0880 	dc.b $01, nFs2, $03, nRst, $05, nFs2, $08, nRst
000480 9F04A3038001A303 	dc.b nFs2, $04, nBb2, $03, nRst, $01, nBb2, $03
000488 8005A307800D     	dc.b nRst, $05, nBb2, $07, nRst, $0D
00048E                  	smpsJump		Segapede_Jump4, Target
00048E F6               	dc.b	$F6
                        	if (Segapede_Jump4<*)
00048F                  		rom_ptr_z80(Segapede_Jump4+Target)
                        	;dc.w z80_ptr(ptr,addr)
00048F 2D83             	dc.w  (((((Segapede_Jump4+Target))<<8)&$FF00)|((((Segapede_Jump4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000491                  Segapede_FM5:
000491                  	smpsFMvoice		$04
                        	;if song<>""
                        	if 1==2
                        	else
000491 EF04             		dc.b $EF,$04
                        	endif
000493 8004             	dc.b nRst, $04

000495                  Segapede_Jump5:
000495 807F807F8002B938 	dc.b nRst, $7F, nRst, $7F, nRst, $02, nAb4, $38
00049D B704B5B438B504B7 	dc.b nFs4, $04, nE4, nEb4, $38, nE4, $04, nFs4
0004A5 B938BA04B9B918B7 	dc.b nAb4, $38, nA4, $04, nAb4, nAb4, $18, nFs4
0004AD 20B508B32CAB04B3 	dc.b $20, nE4, $08, nD4, $2C, nFs3, $04, nD4
0004B5 ABB205           	dc.b nFs3, nCs4, $05
0004B8                  	smpsAlterNote	$02
0004B8 E102             	dc.b	$E1,$02
0004BA E701             	dc.b smpsNoAttack, $01
0004BC                  	smpsAlterNote	$EB
0004BC E1EB             	dc.b	$E1,$EB
0004BE E7B3             	dc.b smpsNoAttack, nD4
0004C0                  	smpsAlterNote	$F4
0004C0 E1F4             	dc.b	$E1,$F4
0004C2 E701             	dc.b smpsNoAttack, $01
0004C4                  	smpsAlterNote	$F5
0004C4 E1F5             	dc.b	$E1,$F5
0004C6 E701             	dc.b smpsNoAttack, $01
0004C8                  	smpsAlterNote	$04
0004C8 E104             	dc.b	$E1,$04
0004CA E7B2             	dc.b smpsNoAttack, nCs4
0004CC                  	smpsAlterNote	$00
0004CC E100             	dc.b	$E1,$00
0004CE E73EB738B804B7B7 	dc.b smpsNoAttack, $3E, nFs4, $38, nG4, $04, nFs4, nFs4
0004D6 18B5248004B83380 	dc.b $18, nE4, $24, nRst, $04, nG4, $33, nRst
0004DE 01BC04BAB8B70CB3 	dc.b $01, nB4, $04, nA4, nG4, nFs4, $0C, nD4
0004E6 AE1CBA04B8B7B50C 	dc.b nA3, $1C, nA4, $04, nG4, nFs4, nE4, $0C
0004EE B2AE1CB804B7B5B3 	dc.b nCs4, nA3, $1C, nG4, $04, nFs4, nE4, nD4
0004F6 0CB5B7B5B308B2B0 	dc.b $0C, nE4, nFs4, nE4, nD4, $08, nCs4, nB3
0004FE 0CB3B81B8001BC04 	dc.b $0C, nD4, nG4, $1B, nRst, $01, nB4, $04
000506 BAB8B70CB3AE1CBA 	dc.b nA4, nG4, nFs4, $0C, nD4, nA3, $1C, nA4
00050E 04B8B7B50CB2AE18 	dc.b $04, nG4, nFs4, nE4, $0C, nCs4, nA3, $18
000516 B504B7B808B740   	dc.b nE4, $04, nFs4, nG4, $08, nFs4, $40
00051D                  	smpsJump		Segapede_Jump5, Target
00051D F6               	dc.b	$F6
                        	if (Segapede_Jump5<*)
00051E                  		rom_ptr_z80(Segapede_Jump5+Target)
                        	;dc.w z80_ptr(ptr,addr)
00051E 9584             	dc.w  (((((Segapede_Jump5+Target))<<8)&$FF00)|((((Segapede_Jump5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000520                  Segapede_FM6:
000520                  	smpsFMvoice		$05
                        	;if song<>""
                        	if 1==2
                        	else
000520 EF05             		dc.b $EF,$05
                        	endif
000522 8004             	dc.b nRst, $04

000524                  Segapede_Jump6:
000524 8070AF108070A910 	dc.b nRst, $70, nBb3, $10, nRst, $70, nE3, $10
00052C 8070B1108070AE10 	dc.b nRst, $70, nC4, $10, nRst, $70, nA3, $10
000534 8070AF108070A908 	dc.b nRst, $70, nBb3, $10, nRst, $70, nE3, $08
00053C 8078B310807F8071 	dc.b nRst, $78, nD4, $10, nRst, $7F, nRst, $71
000544 A710807F8001     	dc.b nD3, $10, nRst, $7F, nRst, $01
00054A                  	smpsJump		Segapede_Jump6, Target
00054A F6               	dc.b	$F6
                        	if (Segapede_Jump6<*)
00054B                  		rom_ptr_z80(Segapede_Jump6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00054B 2485             	dc.w  (((((Segapede_Jump6+Target))<<8)&$FF00)|((((Segapede_Jump6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00054D                  Segapede_PSG1:
                        	;!@
                        	; dc.b nRst

00054D                  Segapede_Loop7:
                        	;!@
                        	;dc.b $6B
00054D 806B             	dc.b nRst, $6B
00054F                  	smpsLoop		$00, $09, Segapede_Loop7, Target
00054F F7               	dc.b	$F7
000550 0009             	dc.b	$00,$09
                        	if (Segapede_Loop7<*)
000552                  		rom_ptr_z80(Segapede_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
000552 4D85             	dc.w  (((((Segapede_Loop7+Target))<<8)&$FF00)|((((Segapede_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000554 8001             	dc.b nRst, $01

000556                  Segapede_Loop8:
000556 9801800398028006 	dc.b nB1, $01, nRst, $03, nB1, $02, nRst, $06
00055E                  	smpsLoop		$00, $03, Segapede_Loop8, Target
00055E F7               	dc.b	$F7
00055F 0003             	dc.b	$00,$03
                        	if (Segapede_Loop8<*)
000561                  		rom_ptr_z80(Segapede_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000561 5685             	dc.w  (((((Segapede_Loop8+Target))<<8)&$FF00)|((((Segapede_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000563 9801800398018007 	dc.b nB1, $01, nRst, $03, nB1, $01, nRst, $07
00056B 980380059702807F 	dc.b nB1, $03, nRst, $05, nBb1, $02, nRst, $7F
000573 8047             	dc.b nRst, $47

000575                  Segapede_Loop9:
000575 9C0180039C028006 	dc.b nEb2, $01, nRst, $03, nEb2, $02, nRst, $06
00057D                  	smpsLoop		$00, $03, Segapede_Loop9, Target
00057D F7               	dc.b	$F7
00057E 0003             	dc.b	$00,$03
                        	if (Segapede_Loop9<*)
000580                  		rom_ptr_z80(Segapede_Loop9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000580 7585             	dc.w  (((((Segapede_Loop9+Target))<<8)&$FF00)|((((Segapede_Loop9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000582 9A0180039A018007 	dc.b nCs2, $01, nRst, $03, nCs2, $01, nRst, $07
                        	;!@ dc.b nB1, $03, nRst, $05, nBb1, $02, nRst
00058A 980380059702     	dc.b nB1, $03, nRst, $05, nBb1, $02

000590                  Segapede_Loop10:
                        	;!@ dc.b $45
000590 8045             	dc.b nRst, $45
000592                  	smpsLoop		$00, $0E, Segapede_Loop10, Target
000592 F7               	dc.b	$F7
000593 000E             	dc.b	$00,$0E
                        	if (Segapede_Loop10<*)
000595                  		rom_ptr_z80(Segapede_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
000595 9085             	dc.w  (((((Segapede_Loop10+Target))<<8)&$FF00)|((((Segapede_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000597                  	smpsJump		Segapede_Loop8, Target
000597 F6               	dc.b	$F6
                        	if (Segapede_Loop8<*)
000598                  		rom_ptr_z80(Segapede_Loop8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000598 5685             	dc.w  (((((Segapede_Loop8+Target))<<8)&$FF00)|((((Segapede_Loop8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
00059A                  Segapede_PWM1:
00059A 8004             	dc.b nRst, $04

00059C                  Segapede_PWM1_Jump1:
00059C 99101404080C0410 	dc.b pOpenHH, $10, $14, $04, $08, $0C, $04, $10
0005A4 1808080404080814 	dc.b $18, $08, $08, $04, $04, $08, $08, $14
0005AC 0404040C04101404 	dc.b $04, $04, $04, $0C, $04, $10, $14, $04
0005B4 0804040404101404 	dc.b $08, $04, $04, $04, $04, $10, $14, $04
0005BC 080C041014040404 	dc.b $08, $0C, $04, $10, $14, $04, $04, $04
0005C4 0408040808140404 	dc.b $04, $08, $04, $08, $08, $14, $04, $04
0005CC 040C041014       	dc.b $04, $0C, $04, $10, $14

0005D1                  Segapede_PWM1_Loop1:
0005D1 04               	dc.b $04
0005D2                  	smpsLoop		$00, $07, Segapede_PWM1_Loop1, Target
0005D2 F7               	dc.b	$F7
0005D3 0007             	dc.b	$00,$07
                        	if (Segapede_PWM1_Loop1<*)
0005D5                  		rom_ptr_z80(Segapede_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005D5 D185             	dc.w  (((((Segapede_PWM1_Loop1+Target))<<8)&$FF00)|((((Segapede_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005D7 101404080C041018 	dc.b $10, $14, $04, $08, $0C, $04, $10, $18
0005DF 0808040408081404 	dc.b $08, $08, $04, $04, $08, $08, $14, $04
0005E7 04040C041014     	dc.b $04, $04, $0C, $04, $10, $14

0005ED                  Segapede_PWM1_Loop2:
0005ED 04               	dc.b $04
0005EE                  	smpsLoop		$00, $07, Segapede_PWM1_Loop2, Target
0005EE F7               	dc.b	$F7
0005EF 0007             	dc.b	$00,$07
                        	if (Segapede_PWM1_Loop2<*)
0005F1                  		rom_ptr_z80(Segapede_PWM1_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005F1 ED85             	dc.w  (((((Segapede_PWM1_Loop2+Target))<<8)&$FF00)|((((Segapede_PWM1_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005F3 1014040804080408 	dc.b $10, $14, $04, $08, $04, $08, $04, $08
0005FB 08140404040C0410 	dc.b $08, $14, $04, $04, $04, $0C, $04, $10
000603 1404040408040410 	dc.b $14, $04, $04, $04, $08, $04, $04, $10
00060B 10               	dc.b $10

00060C                  Segapede_PWM1_Loop3:
00060C 04               	dc.b $04
00060D                  	smpsLoop		$00, $08, Segapede_PWM1_Loop3, Target
00060D F7               	dc.b	$F7
00060E 0008             	dc.b	$00,$08
                        	if (Segapede_PWM1_Loop3<*)
000610                  		rom_ptr_z80(Segapede_PWM1_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
000610 0C86             	dc.w  (((((Segapede_PWM1_Loop3+Target))<<8)&$FF00)|((((Segapede_PWM1_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000612 101404080C041014 	dc.b $10, $14, $04, $08, $0C, $04, $10, $14
00061A 0404040408040808 	dc.b $04, $04, $04, $04, $08, $04, $08, $08
000622 140404040C04100C 	dc.b $14, $04, $04, $04, $0C, $04, $10, $0C
00062A 0408040404040404 	dc.b $04, $08, $04, $04, $04, $04, $04, $04
000632                  	smpsJump		Segapede_PWM1_Jump1, Target
000632 F6               	dc.b	$F6
                        	if (Segapede_PWM1_Jump1<*)
000633                  		rom_ptr_z80(Segapede_PWM1_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000633 9C85             	dc.w  (((((Segapede_PWM1_Jump1+Target))<<8)&$FF00)|((((Segapede_PWM1_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000635                  Segapede_PWM2:
000635 8004             	dc.b nRst, $04

000637                  Segapede_PWM2_Jump1:
000637 80048B8C8B08048C 	dc.b nRst, $04, pAKick, pASnare, pAKick, $08, $04, pASnare
00063F 828C088B04820804 	dc.b pESnare, pASnare, $08, pAKick, $04, pESnare, $08, $04
000647 8B0C8C048B8C0804 	dc.b pAKick, $0C, pASnare, $04, pAKick, pASnare, $08, $04
00064F 8B8282088B048C08 	dc.b pAKick, pESnare, pESnare, $08, pAKick, $04, pASnare, $08
000657 048B0C8C048B8C08 	dc.b $04, pAKick, $0C, pASnare, $04, pAKick, pASnare, $08
00065F 04828282088B048C 	dc.b $04, pESnare, pESnare, pESnare, $08, pAKick, $04, pASnare
000667 08048B0C8C048B8C 	dc.b $08, $04, pAKick, $0C, pASnare, $04, pAKick, pASnare
00066F 0804010201010205 	dc.b $08, $04, $01, $02, $01, $01, $02, $05
000677 048B8C08048B108C 	dc.b $04, pAKick, pASnare, $08, $04, pAKick, $10, pASnare
00067F 048B08048C828C08 	dc.b $04, pAKick, $08, $04, pASnare, pESnare, pASnare, $08
000687 8B048208048B0C04 	dc.b pAKick, $04, pESnare, $08, $04, pAKick, $0C, $04
00068F 8C8B08048C828C08 	dc.b pASnare, pAKick, $08, $04, pASnare, pESnare, pASnare, $08
000697 8B048208048B0C8C 	dc.b pAKick, $04, pESnare, $08, $04, pAKick, $0C, pASnare
00069F 048B8C08048B8282 	dc.b $04, pAKick, pASnare, $08, $04, pAKick, pESnare, pESnare
0006A7 088B048C08048B0C 	dc.b $08, pAKick, $04, pASnare, $08, $04, pAKick, $0C
0006AF 8C048B8C08048282 	dc.b pASnare, $04, pAKick, pASnare, $08, $04, pESnare, pESnare
0006B7 82088B1C         	dc.b pESnare, $08, pAKick, $1C

0006BB                  Segapede_PWM2_Loop1:
0006BB 048C8B08048C828C 	dc.b $04, pASnare, pAKick, $08, $04, pASnare, pESnare, pASnare
0006C3 088B048208048B0C 	dc.b $08, pAKick, $04, pESnare, $08, $04, pAKick, $0C
0006CB                  	smpsLoop		$00, $02, Segapede_PWM2_Loop1, Target
0006CB F7               	dc.b	$F7
0006CC 0002             	dc.b	$00,$02
                        	if (Segapede_PWM2_Loop1<*)
0006CE                  		rom_ptr_z80(Segapede_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006CE BB86             	dc.w  (((((Segapede_PWM2_Loop1+Target))<<8)&$FF00)|((((Segapede_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006D0 8C048B8C08048B82 	dc.b pASnare, $04, pAKick, pASnare, $08, $04, pAKick, pESnare
0006D8 82088B048C08048B 	dc.b pESnare, $08, pAKick, $04, pASnare, $08, $04, pAKick
0006E0 0C8C048B8C080482 	dc.b $0C, pASnare, $04, pAKick, pASnare, $08, $04, pESnare
0006E8 8282088B048C0804 	dc.b pESnare, pESnare, $08, pAKick, $04, pASnare, $08, $04
0006F0 8B108C048B08048C 	dc.b pAKick, $10, pASnare, $04, pAKick, $08, $04, pASnare
0006F8 828C088B04820804 	dc.b pESnare, pASnare, $08, pAKick, $04, pESnare, $08, $04
000700 8B0C048C8B08048C 	dc.b pAKick, $0C, $04, pASnare, pAKick, $08, $04, pASnare
000708 828C088B04820804 	dc.b pESnare, pASnare, $08, pAKick, $04, pESnare, $08, $04
000710 8B0C8C048B8C0804 	dc.b pAKick, $0C, pASnare, $04, pAKick, pASnare, $08, $04
000718 8B8282088B048C08 	dc.b pAKick, pESnare, pESnare, $08, pAKick, $04, pASnare, $08
000720 048B508C048B0804 	dc.b $04, pAKick, $50, pASnare, $04, pAKick, $08, $04
000728 8C828C088B048208 	dc.b pASnare, pESnare, pASnare, $08, pAKick, $04, pESnare, $08
000730 048B0C048C8B0804 	dc.b $04, pAKick, $0C, $04, pASnare, pAKick, $08, $04
000738 8C828C088B048208 	dc.b pASnare, pESnare, pASnare, $08, pAKick, $04, pESnare, $08
000740 048B0C8C048B8C08 	dc.b $04, pAKick, $0C, pASnare, $04, pAKick, pASnare, $08
000748 048B8282088B048C 	dc.b $04, pAKick, pESnare, pESnare, $08, pAKick, $04, pASnare
000750 08048B0C8C048B8C 	dc.b $08, $04, pAKick, $0C, pASnare, $04, pAKick, pASnare
000758 0804828282088B18 	dc.b $08, $04, pESnare, pESnare, pESnare, $08, pAKick, $18
000760                  	smpsJump		Segapede_PWM2_Jump1, Target
000760 F6               	dc.b	$F6
                        	if (Segapede_PWM2_Jump1<*)
000761                  		rom_ptr_z80(Segapede_PWM2_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000761 3786             	dc.w  (((((Segapede_PWM2_Jump1+Target))<<8)&$FF00)|((((Segapede_PWM2_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000763                  Segapede_NOP:
000763                  	smpsStop
000763 F2               	dc.b	$F2

000764                  Segapede_Patches:
                        	; Patch $00
000764 35               	dc.b	$35
000765 213120148F9B9594 	dc.b	$21, $31, $20, $14,	$8F, $9B, $95, $94
00076D 070500000A020202 	dc.b	$07, $05, $00, $00,	$0A, $02, $02, $02
000775 4536170810808880 	dc.b	$45, $36, $17, $08,	$10, $80, $88, $80
                        	;smpsVcAlgorithm	$05
                        	;smpsVcFeedback	$06
                        	;smpsVcDetune	$02, $02, $03, $01
                        	;smpsVcCoarseFreq	$01, $00, $01, $04
                        	;smpsVcRateScale	$02, $02, $02, $02
                        	;smpsVcAttackRate	$0F, $15, $1B, $14
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$07, $00, $05, $00
                        	;smpsVcDecayRate2	$04, $01, $03, $00
                        	;smpsVcDecayLevel	$0A, $02, $02, $02
                        	;smpsVcReleaseRate	$05, $07, $06, $08
                        	;smpsVcTotalLevel	$10, $08, $00, $00

                        	; Patch $01
00077D 37               	dc.b	$37
00077E 5304310154585B14 	dc.b	$53, $04, $31, $01,	$54, $58, $5B, $14
000786 17171B1208050616 	dc.b	$17, $17, $1B, $12,	$08, $05, $06, $16
00078E 8ABBAB6C9C858086 	dc.b	$8A, $BB, $AB, $6C,	$9C, $85, $80, $86
                        	;smpsVcAlgorithm	$07
                        	;smpsVcFeedback	$06
                        	;smpsVcDetune	$05, $03, $00, $00
                        	;smpsVcCoarseFreq	$03, $01, $04, $01
                        	;smpsVcRateScale	$01, $01, $01, $00
                        	;smpsVcAttackRate	$14, $1B, $18, $14
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$17, $1B, $17, $12
                        	;smpsVcDecayRate2	$08, $0A, $0B, $06
                        	;smpsVcDecayLevel	$08, $06, $05, $16
                        	;smpsVcReleaseRate	$0A, $0B, $0B, $0C
                        	;smpsVcTotalLevel	$1C, $00, $05, $06

                        	; Patch $02
000796 35               	dc.b	$35
000797 213120148F9B9594 	dc.b	$21, $31, $20, $14,	$8F, $9B, $95, $94
00079F 070500000A020202 	dc.b	$07, $05, $00, $00,	$0A, $02, $02, $02
0007A7 4536170810808880 	dc.b	$45, $36, $17, $08,	$10, $80, $88, $80
                        	;smpsVcAlgorithm	$05
                        	;smpsVcFeedback	$06
                        	;smpsVcDetune	$02, $02, $03, $01
                        	;smpsVcCoarseFreq	$01, $00, $01, $04
                        	;smpsVcRateScale	$02, $02, $02, $02
                        	;smpsVcAttackRate	$0F, $15, $1B, $14
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$07, $00, $05, $00
                        	;smpsVcDecayRate2	$04, $01, $03, $00
                        	;smpsVcDecayLevel	$0A, $02, $02, $02
                        	;smpsVcReleaseRate	$05, $07, $06, $08
                        	;smpsVcTotalLevel	$10, $08, $00, $00

                        	; Patch $03
0007AF 02               	dc.b	$02
0007B0 00050200D3DFDF9F 	dc.b	$00, $05, $02, $00,	$D3, $DF, $DF, $9F
0007B8 050A060700001200 	dc.b	$05, $0A, $06, $07,	$00, $00, $12, $00
0007C0 2A8F5A0A1D142780 	dc.b	$2A, $8F, $5A, $0A,	$1D, $14, $27, $80
                        	;smpsVcAlgorithm	$02
                        	;smpsVcFeedback	$00
                        	;smpsVcDetune	$00, $00, $00, $00
                        	;smpsVcCoarseFreq	$00, $02, $05, $00
                        	;smpsVcRateScale	$03, $03, $03, $02
                        	;smpsVcAttackRate	$13, $1F, $1F, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$05, $06, $0A, $07
                        	;smpsVcDecayRate2	$02, $05, $08, $00
                        	;smpsVcDecayLevel	$00, $12, $00, $00
                        	;smpsVcReleaseRate	$0A, $0A, $0F, $0A
                        	;smpsVcTotalLevel	$1D, $27, $14, $00

                        	; Patch $04
0007C8 05               	dc.b	$05
0007C9 000F04001F1D141B 	dc.b	$00, $0F, $04, $00,	$1F, $1D, $14, $1B
0007D1 080704040708061F 	dc.b	$08, $07, $04, $04,	$07, $08, $06, $1F
0007D9 0458057700858585 	dc.b	$04, $58, $05, $77,	$00, $85, $85, $85
                        	;smpsVcAlgorithm	$05
                        	;smpsVcFeedback	$00
                        	;smpsVcDetune	$00, $00, $00, $00
                        	;smpsVcCoarseFreq	$00, $04, $0F, $00
                        	;smpsVcRateScale	$00, $00, $00, $00
                        	;smpsVcAttackRate	$1F, $14, $1D, $1B
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$08, $04, $07, $04
                        	;smpsVcDecayRate2	$00, $00, $05, $07
                        	;smpsVcDecayLevel	$07, $06, $08, $1F
                        	;smpsVcReleaseRate	$04, $05, $08, $07
                        	;smpsVcTotalLevel	$00, $05, $05, $05

                        	; Patch $05
0007E1 02               	dc.b	$02
0007E2 00050200D3DFDF9F 	dc.b	$00, $05, $02, $00,	$D3, $DF, $DF, $9F
0007EA 050A060700001200 	dc.b	$05, $0A, $06, $07,	$00, $00, $12, $00
0007F2 2A8F5A0A1D142780 	dc.b	$2A, $8F, $5A, $0A,	$1D, $14, $27, $80
                        	;smpsVcAlgorithm	$02
                        	;smpsVcFeedback	$00
                        	;smpsVcDetune	$00, $00, $00, $00
                        	;smpsVcCoarseFreq	$00, $02, $05, $00
                        	;smpsVcRateScale	$03, $03, $03, $02
                        	;smpsVcAttackRate	$13, $1F, $1F, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$05, $06, $0A, $07
                        	;smpsVcDecayRate2	$02, $05, $08, $00
                        	;smpsVcDecayLevel	$00, $12, $00, $00
                        	;smpsVcReleaseRate	$0A, $0A, $0F, $0A
                        	;smpsVcTotalLevel	$1D, $27, $14, $00

                        	; Patch $06
0007FA 00               	dc.b	$00
0007FB 13713B71535B1D1F 	dc.b	$13, $71, $3B, $71,	$53, $5B, $1D, $1F
000803 01030F001B1D1F0D 	dc.b	$01, $03, $0F, $00,	$1B, $1D, $1F, $0D
00080B 3003E30F060C1F8F 	dc.b	$30, $03, $E3, $0F,	$06, $0C, $1F, $8F
                        	;smpsVcAlgorithm	$00
                        	;smpsVcFeedback	$00
                        	;smpsVcDetune	$01, $03, $07, $07
                        	;smpsVcCoarseFreq	$03, $0B, $01, $01
                        	;smpsVcRateScale	$01, $00, $01, $00
                        	;smpsVcAttackRate	$13, $1D, $1B, $1F
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$01, $0F, $03, $00
                        	;smpsVcDecayRate2	$03, $0E, $00, $00
                        	;smpsVcDecayLevel	$1B, $1F, $1D, $0D
                        	;smpsVcReleaseRate	$00, $03, $03, $0F
                        	;smpsVcTotalLevel	$06, $1F, $0C, $0F

                        	; Patch $07
000813 3D               	dc.b	$3D
000814 3B726621DC9F5E9D 	dc.b	$3B, $72, $66, $21,	$DC, $9F, $5E, $9D
00081C 120B18080D0C1711 	dc.b	$12, $0B, $18, $08,	$0D, $0C, $17, $11
000824 4F1B1B1B11908C8F 	dc.b	$4F, $1B, $1B, $1B,	$11, $90, $8C, $8F
                        	;smpsVcAlgorithm	$05
                        	;smpsVcFeedback	$07
                        	;smpsVcDetune	$03, $06, $07, $02
                        	;smpsVcCoarseFreq	$0B, $06, $02, $01
                        	;smpsVcRateScale	$03, $01, $02, $02
                        	;smpsVcAttackRate	$1C, $1E, $1F, $1D
                        	;smpsVcAmpMod	$00, $00, $00, $00
                        	;smpsVcDecayRate1	$12, $18, $0B, $08
                        	;smpsVcDecayRate2	$04, $01, $01, $01
                        	;smpsVcDecayLevel	$0D, $17, $0C, $11
                        	;smpsVcReleaseRate	$0F, $0B, $0B, $0B
                        	;smpsVcTotalLevel	$11, $0C, $10, $0F

00000 Total Error(s)

CFM3               00000002 E  CFM4               00000004 E  CFM5               00000005 E
CFM6               00000006 E  CNOISE             000000E0 E  CPSG1              00000080 E
CPSG2              000000A0 E  CPSG3              000000C0 E  CPWM1              00000018 E
CPWM2              0000001A E  CPWM3              0000001C E  CPWM4              0000001E E
DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  FMPITCH            00000000 E
FMVOL1             0000001F E  FMVOL2             00000015 E  FMVOL3             0000001D E
FMVOL4             00000027 E  NA0                0000008A E  NA1                00000096 E
NA2                000000A2 E  NA3                000000AE E  NA4                000000BA E
NA5                000000C6 E  NA6                000000D2 E  NA7                000000DE E
NAB0               00000089 E  NAB1               00000095 E  NAB2               000000A1 E
NAB3               000000AD E  NAB4               000000B9 E  NAB5               000000C5 E
NAB6               000000D1 E  NAB7               000000DD E  NB0                0000008C E
NB1                00000098 E  NB2                000000A4 E  NB3                000000B0 E
NB4                000000BC E  NB5                000000C8 E  NB6                000000D4 E
NBB0               0000008B E  NBB1               00000097 E  NBB2               000000A3 E
NBB3               000000AF E  NBB4               000000BB E  NBB5               000000C7 E
NBB6               000000D3 E  NBB7               000000DF E  NC0                00000081 E
NC1                0000008D E  NC2                00000099 E  NC3                000000A5 E
NC4                000000B1 E  NC5                000000BD E  NC6                000000C9 E
NC7                000000D5 E  NCS0               00000082 E  NCS1               0000008E E
NCS2               0000009A E  NCS3               000000A6 E  NCS4               000000B2 E
NCS5               000000BE E  NCS6               000000CA E  NCS7               000000D6 E
ND0                00000083 E  ND1                0000008F E  ND2                0000009B E
ND3                000000A7 E  ND4                000000B3 E  ND5                000000BF E
ND6                000000CB E  ND7                000000D7 E  NE0                00000085 E
NE1                00000091 E  NE2                0000009D E  NE3                000000A9 E
NE4                000000B5 E  NE5                000000C1 E  NE6                000000CD E
NE7                000000D9 E  NEB0               00000084 E  NEB1               00000090 E
NEB2               0000009C E  NEB3               000000A8 E  NEB4               000000B4 E
NEB5               000000C0 E  NEB6               000000CC E  NEB7               000000D8 E
NF0                00000086 E  NF1                00000092 E  NF2                0000009E E
NF3                000000AA E  NF4                000000B6 E  NF5                000000C2 E
NF6                000000CE E  NF7                000000DA E  NFS0               00000087 E
NFS1               00000093 E  NFS2               0000009F E  NFS3               000000AB E
NFS4               000000B7 E  NFS5               000000C3 E  NFS6               000000CF E
NFS7               000000DB E  NG0                00000088 E  NG1                00000094 E
NG2                000000A0 E  NG3                000000AC E  NG4                000000B8 E
NG5                000000C4 E  NG6                000000D0 E  NG7                000000DC E
NRST               00000080 E  PAKICK             0000008B E  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PCRA_D81           00000081 E  PCRA_D82           0000008C E  PCRA_D83           00000085 E
PCRA_D84           00000086 E  PCRA_D85           00000087 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
PFINGSNAPHI        0000008E E  PFINGSNAPLO        0000009E E  PNEPDADA           0000009D E
POPENHH            00000099 E  PORCHHITHI         0000009F E  PORCHHITLO         000000A1 E
PORCHHITLOWER      000000A2 E  PORCHHITMED        000000A0 E  PRIDEBELL          00000084 E
PSEGA              00000097 E  PSGDELTA           0000000C E  PSGNULL            00000000 E
PSGPITCH           0000000C E  PSGVOI             00000000 E  PSGVOL             00000003 E
PSILENCE           00000096 E  PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E
PTIMPANILO         00000095 E  PTOMHI             00000085 E  PTOMLOW            00000087 E
PTOMLOWER          0000009A E  PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E
PTOMMID            00000086 E  PWMPITCH           00000000 E  PWMVOL1            00000022 E
PWMVOL2            00000055 E  SEGAPEDE_FM1       00000040    SEGAPEDE_FM2       000001A8
SEGAPEDE_FM3       000002FC    SEGAPEDE_FM4       00000329    SEGAPEDE_FM5       00000491
SEGAPEDE_FM6       00000520    SEGAPEDE_JUMP1     00000044    SEGAPEDE_JUMP2     000001AC
SEGAPEDE_JUMP3     00000300    SEGAPEDE_JUMP4     0000032D    SEGAPEDE_JUMP5     00000495
SEGAPEDE_JUMP6     00000524    SEGAPEDE_LOOP1     000001EF    SEGAPEDE_LOOP10    00000590
SEGAPEDE_LOOP2     000001F8    SEGAPEDE_LOOP3     00000201    SEGAPEDE_LOOP4     00000209
SEGAPEDE_LOOP5     0000028D    SEGAPEDE_LOOP6     000002DA    SEGAPEDE_LOOP7     0000054D
SEGAPEDE_LOOP8     00000556    SEGAPEDE_LOOP9     00000575    SEGAPEDE_NOP       00000763
SEGAPEDE_PATCHES   00000764    SEGAPEDE_PSG1      0000054D    SEGAPEDE_PWM1      0000059A
SEGAPEDE_PWM1_JUMP1                           0000059C    
SEGAPEDE_PWM1_LOOP1                           000005D1    
SEGAPEDE_PWM1_LOOP2                           000005ED    
SEGAPEDE_PWM1_LOOP3                           0000060C    SEGAPEDE_PWM2      00000635
SEGAPEDE_PWM2_JUMP1                           00000637    
SEGAPEDE_PWM2_LOOP1                           000006BB    SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  TARGET             00040000 E
