                        	LIST MACRO
                        	LIST EXPAND
000000                  	include _s1smps2asm_S1KC.asm
                        ; Standard Octave Pitch Equates
       = 000088         smpsPitch10lo		EQU	$88
       = 000094         smpsPitch09lo		EQU	$94
       = 0000A0         smpsPitch08lo		EQU	$A0
       = 0000AC         smpsPitch07lo		EQU	$AC
       = 0000B8         smpsPitch06lo		EQU	$B8
       = 0000C4         smpsPitch05lo		EQU	$C4
       = 0000D0         smpsPitch04lo		EQU	$D0
       = 0000DC         smpsPitch03lo		EQU	$DC
       = 0000E8         smpsPitch02lo		EQU	$E8
       = 0000F4         smpsPitch01lo		EQU	$F4
       = 000000         smpsPitch00			EQU	$00
       = 00000C         smpsPitch01hi		EQU	$0C
       = 000018         smpsPitch02hi		EQU	$18
       = 000024         smpsPitch03hi		EQU	$24
       = 000030         smpsPitch04hi		EQU	$30
       = 00003C         smpsPitch05hi		EQU	$3C
       = 000048         smpsPitch06hi		EQU	$48
       = 000054         smpsPitch07hi		EQU	$54
       = 000060         smpsPitch08hi		EQU	$60
       = 00006C         smpsPitch09hi		EQU	$6C
       = 000078         smpsPitch10hi		EQU	$78

                        ; Note Equates
       = 000080         nRst			EQU	$80
       = 000081         nC0			EQU	$81
       = 000082         nCs0			EQU	$82
       = 000083         nD0			EQU	$83
       = 000084         nEb0			EQU	$84
       = 000085         nE0			EQU	$85
       = 000086         nF0			EQU	$86
       = 000087         nFs0			EQU	$87
       = 000088         nG0			EQU	$88
       = 000089         nAb0			EQU	$89
       = 00008A         nA0			EQU	$8A
       = 00008B         nBb0			EQU	$8B
       = 00008C         nB0			EQU	$8C
       = 00008D         nC1			EQU	$8D
       = 00008E         nCs1			EQU	$8E
       = 00008F         nD1			EQU	$8F
       = 000090         nEb1			EQU	$90
       = 000091         nE1			EQU	$91
       = 000092         nF1			EQU	$92
       = 000093         nFs1			EQU	$93
       = 000094         nG1			EQU	$94
       = 000095         nAb1			EQU	$95
       = 000096         nA1			EQU	$96
       = 000097         nBb1			EQU	$97
       = 000098         nB1			EQU	$98
       = 000099         nC2			EQU	$99
       = 00009A         nCs2			EQU	$9A
       = 00009B         nD2			EQU	$9B
       = 00009C         nEb2			EQU	$9C
       = 00009D         nE2			EQU	$9D
       = 00009E         nF2			EQU	$9E
       = 00009F         nFs2			EQU	$9F
       = 0000A0         nG2			EQU	$A0
       = 0000A1         nAb2			EQU	$A1
       = 0000A2         nA2			EQU	$A2
       = 0000A3         nBb2			EQU	$A3
       = 0000A4         nB2			EQU	$A4
       = 0000A5         nC3			EQU	$A5
       = 0000A6         nCs3			EQU	$A6
       = 0000A7         nD3			EQU	$A7
       = 0000A8         nEb3			EQU	$A8
       = 0000A9         nE3			EQU	$A9
       = 0000AA         nF3			EQU	$AA
       = 0000AB         nFs3			EQU	$AB
       = 0000AC         nG3			EQU	$AC
       = 0000AD         nAb3			EQU	$AD
       = 0000AE         nA3			EQU	$AE
       = 0000AF         nBb3			EQU	$AF
       = 0000B0         nB3			EQU	$B0
       = 0000B1         nC4			EQU	$B1
       = 0000B2         nCs4			EQU	$B2
       = 0000B3         nD4			EQU	$B3
       = 0000B4         nEb4			EQU	$B4
       = 0000B5         nE4			EQU	$B5
       = 0000B6         nF4			EQU	$B6
       = 0000B7         nFs4			EQU	$B7
       = 0000B8         nG4			EQU	$B8
       = 0000B9         nAb4			EQU	$B9
       = 0000BA         nA4			EQU	$BA
       = 0000BB         nBb4			EQU	$BB
       = 0000BC         nB4			EQU	$BC
       = 0000BD         nC5			EQU	$BD
       = 0000BE         nCs5			EQU	$BE
       = 0000BF         nD5			EQU	$BF
       = 0000C0         nEb5			EQU	$C0
       = 0000C1         nE5			EQU	$C1
       = 0000C2         nF5			EQU	$C2
       = 0000C3         nFs5			EQU	$C3
       = 0000C4         nG5			EQU	$C4
       = 0000C5         nAb5			EQU	$C5
       = 0000C6         nA5			EQU	$C6
       = 0000C7         nBb5			EQU	$C7
       = 0000C8         nB5			EQU	$C8
       = 0000C9         nC6			EQU	$C9
       = 0000CA         nCs6			EQU	$CA
       = 0000CB         nD6			EQU	$CB
       = 0000CC         nEb6			EQU	$CC
       = 0000CD         nE6			EQU	$CD
       = 0000CE         nF6			EQU	$CE
       = 0000CF         nFs6			EQU	$CF
       = 0000D0         nG6			EQU	$D0
       = 0000D1         nAb6			EQU	$D1
       = 0000D2         nA6			EQU	$D2
       = 0000D3         nBb6			EQU	$D3
       = 0000D4         nB6			EQU	$D4
       = 0000D5         nC7			EQU	$D5
       = 0000D6         nCs7			EQU	$D6
       = 0000D7         nD7			EQU	$D7
       = 0000D8         nEb7			EQU	$D8
       = 0000D9         nE7			EQU	$D9
       = 0000DA         nF7			EQU	$DA
       = 0000DB         nFs7			EQU	$DB
       = 0000DC         nG7			EQU	$DC
       = 0000DD         nAb7			EQU	$DD
       = 0000DE         nA7			EQU	$DE
       = 0000DF         nBb7			EQU	$DF

                        ; DAC Equates (S1)
       = 000081         dKick			EQU	$81
       = 000082         dSnare			EQU	$82
       = 000083         dTimpani		EQU	$83
       = 000088         dHiTimpani		EQU	$88
       = 000089         dMidTimpani		EQU	$89
       = 00008A         dLowTimpani		EQU	$8A
       = 00008B         dVLowTimpani	EQU	$8B
       = 00008B         dFloorTimpani	EQU $8B

                        ; !@ PSGDelta (S1->KC has 12 semitone increase between PSG)
       = 00000C         PSGDelta	EQU	$0C

                        ; PWM Equates (KC)
       = 000081         pEKick		EQU	$81
       = 000082         pESnare		EQU	$82
       = 000083         pSplashCymb	EQU	$83
       = 000084         pRideBell	EQU $84
       = 000085         pTomHi		EQU	$85
       = 000086         pTomMid		EQU	$86
       = 000087         pTomLow		EQU	$87
       = 000088         pEHiHat		EQU	$88
       = 000089         pCrashCymb	EQU $89
       = 00008A         pClap		EQU $8A
       = 00008B         pAKick		EQU $8B
       = 00008C         pASnare		EQU	$8C
       = 00008D         pBell		EQU $8D

                        ;!@ Enum due to late PWM driver revision
       = 00008E         pFingSnap	EQU	$8E
       = 00008E         pFingSnapHi	EQU	$8E

       = 00008F         pCowbell	EQU	$8F
       = 000090         pClickHi	EQU	$90
       = 000091         pClickLo	EQU	$91
       = 000092         pBongoHi	EQU	$92
       = 000093         pBongoLo	EQU	$93
       = 000094         pTimpaniHi	EQU	$94
       = 000095         pTimpaniLo	EQU	$95
       = 000096         pSilence	EQU $96


                        ;!@ NEW DATA
       = 000097         pSega		EQU $97
       = 000098         pClosedHH	EQU $98
       = 000099         pOpenHH		EQU $99
       = 00009A         pTomLower		EQU	$9A
       = 00009B         pTomLowerer		EQU	$9B
       = 00009C         pTomLowerest	EQU	$9C
       = 00009D         pNepDada		EQU	$9D
       = 00009E         pFingSnapLo		EQU	$9E

                        ;!@ Crackers conversion enums. Knuckles Clackers equiv
       = 000081         pCra_d81	EQU	pEKick
       = 00008C         pCra_d82	EQU	pASnare
       = 000085         pCra_d83	EQU	pTomHi
       = 000086         pCra_d84	EQU	pTomMid
       = 000087         pCra_d85	EQU	pTomLow

                        ;!@ Convert ptrs to z80Ptr
                        ; function to make a little-endian 16-bit pointer for the Z80 sound driver
                        ;z80_ptr function x,y,((((x)|(y))<<8)&$FF00)|((((x)|(y))>>8)&$7F)|$80
                        ;z80_ptr_neg function x,y,((((y)-(x))<<8)&$FF00)|((((y)-(x))>>8)&$7F)|$80

                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        rom_ptr_z80 macro addr
                        	;dc.w z80_ptr(ptr,addr)
                        	dc.w  ((((addr)<<8)&$FF00)|(((addr)>>8)&$7F)|$80)
                            endm
                        	
                        ;Funciton to convert S1 tempo to S2 and then S3+
                        ;The conversion works for all values of main tempo other than 0 â€” this value cannot be converted exactly between the two drivers. The conversion of main tempos from Sonic 1 to Sonic 2 can be done (approximately) with the following formul
                        ;S2 main tempo = floor{ [ (S1 main tempo-1) * 256 + floor(S1 main tempo/2) ] / S1 main tempo }			
                        ;It is easy to convert between Sonic 2 and Sonic 3+ main tempo values:
                        ;S2 main tempo = (256 - S3 main tempo) mod 256
                        ;S3 main tempo = (256 - S2 main tempo) mod 256
                        tempo_conv macro tempo
                        		if tempo==0
                        			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        			dc.b	((256 - ((((tempo)-1)*256 + ((tempo)/2)) / (tempo))) % 256)
                        		endif
                        	endm
                        	
                        ;!@
                        ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
                        ;rom_ptr_z80_neg macro ptr,addr
                        	;dc.w z80_ptr_neg(ptr,addr)
                        	;dc.w	(((((addr)-(ptr))<<8)&$FF00)|((((addr)-(ptr))>>8)&$7F)|$80)
                            ;endm

                        ; Header Macros

                        ;!@
                        ; Header - Set up Voice Location
                        ;smpsHeaderVoice macro loc
                        smpsHeaderVoice macro loc,songstart
                        ;songStart set *
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	endm
                        ; Header - Set up Channel Usage	
                        smpsHeaderChan macro fm,psg
                        	if \0==2
                        		dc.b	fm,psg
                        	else
                        		dc.b	fm
                        	endif	
                        	endm	
                        	

                        	
                        smpsHeaderTempo macro div,mod
                        	dc.b	div,mod
                        	endm

                        ;!@
                        ; Header - Set up Tempo. Mod is converted from S1 to S3 tempo
                        smpsHeaderTempoC macro div,mod
                        TempDiv set div
                        	dc.b	div
                        	tempo_conv(mod)
000000                  	endm
                        	
                        ; Header - Set up DAC Channel
                        smpsHeaderDAC macro loc
                        	dc.w	loc-songStart
                        	dc.w	$00
                        	endm
                        	
                        ;!@
                        ; Header - Set up FM Channel	
                        ;smpsHeaderFM macro loc,pitch,vol
                        smpsHeaderFM macro loc,songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	endm

                        ;!@	
                        ; Header - Set up PSG Channel
                        ;smpsHeaderPSG macro loc,pitch,vol,voice
                        smpsHeaderPSG macro loc,songstart,pitch,vol,null,voice
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)
                        	dc.b	pitch,vol
                        	;dc.w	voice
                        	dc.b	null,voice
                        	endm

                        ;!@
                        ; Header - Set up SFX Channel
                        ;sHeaderSFX	macro play,patch,loc,pitch,vol
                        smpsHeaderSFX	macro play,patch,loc,pitch,vol,songstart
                        	dc.b play,patch
                        	;dc.w loc-sPointZero
                        	rom_ptr_z80(loc+songstart)
                        	dc.b pitch,vol
                            endm

                        ; Co-ord Flag Macros and Equates
                        ; E0xx - Panning, AMS, FMS
                        smpsPan macro direction,amsfms
                        panNone set $00
                        panRight set $40
                        panLeft set $80
                        panCentre set $C0
                        panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if \0==2
                        		dc.b $E0,direction|amsfms
                        	else
                        		dc.b $E0,direction
                        	endif
000000                  	endm
                        	
                        ; E1xx - Alter note values by xx
                        smpsAlterNote macro val
                        	dc.b	$E1,val
                        	endm
                        	
                        ; E2xx - Unknown
                        smpsE2 macro val
                        	dc.b	$E2,val
                        	endm

                        ; E3 - Return (generally used after F8)
                        ; F9 - Return (generally used after F8)
                        smpsReturn macro val
                        	;!@
                        	;dc.b	$E3
                        	dc.b	$F9
                        	endm
                        	
                        ; E4 - Fade in previous song (ie. 1-Up)
                        smpsFade macro val
                        	dc.b	$E4
                        	endm

                        ;!@ Invalid for S3+!
                        ; E5xx - Set channel tempo divider to xx
                        smpsChanTempoDiv macro val
                        	;Error No S3 equivalent for CF!
                        	dc.b	$E5,val	
                        	endm
                        	
                        ; E6xx - Alter Volume by xx
                        smpsAlterVol macro val
                        	dc.b	$E6,val
                        	endm
                        	
                        ; E7 - Prevent attack of next note
       = 0000E7         smpsNoAttack	EQU $E7

                        ;!@ This may have problems, needs some convesion factor due to usage of mult by tempo div in S3+
                        ; E8xx - Set note fill to xx
                        smpsNoteFill macro val		
                        	dc.b	$E8,(val/TempDiv)
                        	endm
                        	
                        ;!@
                        ; E9xx - Add xx to channel pitch
                        ; FBxx - Add xx to channel pitch
                        smpsAlterPitch macro val
                        	;!@
                        	;dc.b	$E9,val
                        	dc.b	$FB,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3
                        smpsSetTempoMod macro val
                        	;dc.b	$EA,val
                        	dc.b	$FF,$00,val
                        	endm
                        	
                        ;!@
                        ; EAxx - Set music tempo modifier to xx
                        ; FF00xx - Set music tempo to xx S3 (TEMPO - TEMPO_SET)
                        smpsSetTempoModC macro val
                        	;dc.b	$EA,val
                        	dc.b $FF,$00
                        	tempo_conv(val)
                        	endm
                        	
                        ;!@
                        ; EBxx - Set music tempo divider to xx
                        ; FF04xx - Set global tick multiplier to xx (TICK_MULT - TMULT_ALL)
                        smpsSetTempoDiv macro val
                        	;dc.b	$EB,val
                        TempDiv set val
                        	dc.b $FF,$04,val
000000                  	endm

                        ;!@	
                        ; ECxx - Add xx to PSG channel volume (VOLUME - VOL_NN_PSG)
                        ;
                        ; May need interpolation/conversion factor:
                        ; Change volume attenuation of PSG track.
                        ;The single parameter byte is added to track's current volume attenuation;
                        ;anything greater than $0F (unsigned comparison) is set to $0F (silence). Also, the flutter index is reduced by 1.
                        smpsSetVol macro val
                        	dc.b	$EC,val
                        	endm
                        	
                        ; ED - Unknown
       = 0000ED         smpsED		EQU $ED
                        	
                        ;!@ S3K= send cmd to YM2612 port; unused in S1
                        ; EE - Stops special SFX ($D0-$D4, S1 only) and restarts overridden music track
       = 0000EE         smpsEE 		EQU $EE
                        	
                        ;!@
                        ; EFxx - Set Voice of FM channel to xx
                        ; EFxx[yy] - Set patch id of FM channel to xx. If xx bit7 set, read from another song instead
                        ; (INSTRUMENT - INS_C_FMP)
                        ;smpsFMvoice macro voice
                        	;dc.b	$EF,voice
                        smpsFMvoice macro pat, song		
                        	;if song<>""
                        	if \0==2
                        		dc.b $EF,pat|$80,song+$81
                        	else
                        		dc.b $EF,pat
                        	endif
                            endm

                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        smpsModSet macro wait,speed,change,step
                        	dc.b	$F0,wait,speed,change,step
                        	endm
                        	
                        smpsModSet2	macro bytes
                        	smpsModSet	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	
                        ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
                        ;!@
                        smpsModSetC macro wait,speed,change,step
                        	dc.b	$F0
                        	;if (SonicDriverVer>=3)&&(SourceDriver<3)
                        		dc.b	wait+1,speed,change,(step*speed+1)&$FF
                        	;elseif (SonicDriverVer<3)&&(SourceDriver>=3)
                        		;dc.b	wait-1,speed,change,(((step==0)<<8)|step)/(((step==0)<<8)|step)-1		
                        	;else
                        		;dc.b	wait,speed,change,step
                        	;endif
                        	;dc.b	speed,change,step
                        	endm

                        ;!@	
                        smpsModSetC2 macro bytes
                        	smpsModSetC	((bytes&$FF000000)>>24),((bytes&$00FF0000)>>16),((bytes&$0000FF00)>>8),(bytes&$000000FF)
                        	endm
                        	

                        ;!@ Used very differently in S3; don't use
                        ; F1 - Turn on Modulation
       = 0000F1         smpsModOn 	EQU $F1
                        ; F4 - Turn off Modulation
       = 0000F4         smpsModOff 	EQU $F4

                        ; F2 - End of channel
                        smpsStop macro
                        	dc.b	$F2
                        	endm
                        	
                        ;!@
                        ; F3xx - PSG waveform to xx
                        ; S3+ only: If parameter byte is zero, the channel is converted
                        ; back into a normal PSG channel and the noise channel is silenced.
                        ; Otherwise, sets the PSG track to noise and sets PSG noise to parameter byte, which should be from $E0 to $E7 (inclusive).
                        smpsPSGform macro form
                        	dc.b	$F3,form
                        	endm
                        	
                        ; F5xx - PSG voice to xx
                        smpsPSGvoice macro voice
                        	dc.b	$F5,voice
                        	endm
                        	
                        ;BAD Cmpr
                        ;if (loc<*)
                        	;rom_ptr_z80_neg(*-loc,songstart)
                        ;else
                        	;rom_ptr_z80(loc-*-1,songstart)
                        ;endif

                        ;!@
                        ; F6xxxx - Jump to xxxx
                        ;smpsJump macro loc
                        smpsJump macro loc,songstart
                        	dc.b	$F6
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
                        ;smpsLoop macro index,loops,loc
                        smpsLoop macro index,loops,loc,songstart
                        	dc.b	$F7
                        	dc.b	index,loops
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm

                        ;!@
                        ; F8xxxx - Call pattern at xxxx, saving return point
                        ;smpsCall macro loc
                        smpsCall macro loc,songstart
                        	dc.b	$F8
                        	if (loc<*)
                        		rom_ptr_z80(loc+songstart)
                        	else
                        		rom_ptr_z80(loc+songstart)
                        	endif
                        	;dc.w	loc-*-1
                        	endm
                        	
                        ; F9 - Unknown
       = 0000F9         smpsF9		EQU $F9

                        ; Voices - Feedback
                        smpsVcFeedback macro val
                        vcFeedback set val
000000                  	endm

                        ; Voices - Algorithm
                        smpsVcAlgorithm macro val
                        vcAlgorithm set val
000000                  	endm

                        ; Voices - Detune
                        smpsVcDetune macro op1,op2,op3,op4
                        vcDT1 set op1
                        vcDT2 set op2
                        vcDT3 set op3
                        vcDT4 set op4
000000                  	endm

                        ; Voices - Coarse-Frequency
                        smpsVcCoarseFreq macro op1,op2,op3,op4
                        vcCF1 set op1
                        vcCF2 set op2
                        vcCF3 set op3
                        vcCF4 set op4
000000                  	endm

                        ; Voices - Rate Scale
                        smpsVcRateScale macro op1,op2,op3,op4
                        vcRS1 set op1
                        vcRS2 set op2
                        vcRS3 set op3
                        vcRS4 set op4
000000                  	endm

                        ; Voices - Attack Rate
                        smpsVcAttackRate macro op1,op2,op3,op4
                        vcAR1 set op1
                        vcAR2 set op2
                        vcAR3 set op3
                        vcAR4 set op4
000000                  	endm

                        ; Voices - Amplitude Modulation
                        smpsVcAmpMod macro op1,op2,op3,op4
                        vcAM1 set op1
                        vcAM2 set op2
                        vcAM3 set op3
                        vcAM4 set op4
000000                  	endm

                        ; Voices - First Decay Rate
                        smpsVcDecayRate1 macro op1,op2,op3,op4
                        vcD1R1 set op1
                        vcD1R2 set op2
                        vcD1R3 set op3
                        vcD1R4 set op4
000000                  	endm

                        ; Voices - Second Decay Rate
                        smpsVcDecayRate2 macro op1,op2,op3,op4
                        vcD2R1 set op1
                        vcD2R2 set op2
                        vcD2R3 set op3
                        vcD2R4 set op4
000000                  	endm

                        ; Voices - Decay Level	
                        smpsVcDecayLevel macro op1,op2,op3,op4
                        vcDL1 set op1
                        vcDL2 set op2
                        vcDL3 set op3
                        vcDL4 set op4
000000                  	endm

                        ; Voices - Release Rate
                        smpsVcReleaseRate macro op1,op2,op3,op4
                        vcRR1 set op1
                        vcRR2 set op2
                        vcRR3 set op3
                        vcRR4 set op4
000000                  	endm

                        ; Voices - Total Level
                        smpsVcTotalLevel macro op1,op2,op3,op4
                        vcTL1 set op1
                        vcTL2 set op2
                        vcTL3 set op3
                        vcTL4 set op4
                        	dc.b	(vcFeedback<<3)+vcAlgorithm
                        	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
                        	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
                        	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
                        	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
                        	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
                        	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
000000                  	endm
                        	
                        	
                        ;==============================================
                        ;!@ The following CF flags/macros are KC-drive specific!
                        ;Rest here mostly used  to compile KC/Nat ASM files for BC purposes...

                        ;!@
                        ; Header - Set up a secondary PWM Channel
                        ;smpsHeaderPWM macro loc
                        smpsHeaderPWM macro loc, songstart,pitch,vol
                        	;dc.w	loc-songStart
                        	rom_ptr_z80(loc+songstart)	
                        	;!@
                        	dc.b	pitch
                        	dc.b	vol
                        	endm
                        	
                        ;!@ Unused and unneeded; leftover Sonic 32x header stuff
                        ; Header - Set up first PWM Channel
                        ;smpsHeaderPWM1 macro loc,num
                        	;dc.w	loc-songStart
                        	;dc.b	num,0
                        	;endm

                        ;!@
                        ; Header - Set up Tick Multiplier (for Sfx)
                        ;sHeaderSFX
                        smpsHeaderTick	macro tmul
                        	dc.b tmul
                            endm

                        ;!@ KC Exclusives!
                        ;# PAN_ANIM
                        ;# pan animation has 2 modes; if first arg is 0, it will end it. Otherwise, more args will be used
                        ;!0xE4, 0 > sPanAni:;								
                        ;!0xE4, 1-0xFF > sPanAni: .lb, .db, .db, .db, .db;	
                        KC_smpsPanAni macro val1,val2,val3,val4,val5
                        	if val1==0
                        		dc.b	$E4,$00
                        	else
                        		dc.b	$E4,val1,val2,val3,val4,val5
                        	endif
                        	endm


                        ; Alter Volume
                        ;!0xE5 > saVolFMP: .db, .db;								
                        KC_smpsFMAlterVol macro val1,val2
                        	dc.b	$E5,val1,val2
                        	endm

                        ;!@ KC Exclusive!	
                        ;!0xE9 > ssLFO: .db, .db;									
                        KC_smpsSetLFO macro enable,amsfms
                        	dc.b	$E9,enable,amsfms
                        	endm

                        ;!0xEA > sPlayDAC: .db | 0x80;								
                        KC_smpsPlayDACSample macro sample
                        	dc.b	$EA,(sample&$7F)
                        	endm

                        ;!@ Songstart param added
                        ;!0xEB > sLoopExit: .db, .dw {						
                        ;smpsConditionalJump macro index,loc
                        KC_smpsConditionalJump macro index,loc,songstart
                        	dc.b	$EB
                        	dc.b	index
                        	;dc.w	z80_ptr(loc)
                        	rom_ptr_z80(loc+songstart)
                        	endm

                        ;!@ Usage/naming is speculative. Called ssTransposeS3K in S3k/Nat driver...	
                        ;!0xED > sYMcmd: .db, .db;							
                        ; Set note values to xx-$40
                        KC_smpsSetNote macro val
                        	dc.b	$ED,val
                        	endm

                        ;!0xEE > sYM1cmd: .db, .db;							
                        KC_smpsFMICommand macro reg,val
                        	dc.b	$EE,reg,val
                        	endm

                        ;!0xF1 > sModEnv: .db, .db {							
                        ; Set Modulation
                        KC_smpsModChange2 macro fmmod,psgmod
                        	dc.b	$F1,fmmod,psgmod
                        	endm
                        	
                        ;!0xF4 > sModEnv: .db {
                        ; Set Modulation
                        KC_smpsModChange macro val
                        	dc.b	$F4,val
                        	endm

                        ;!@ KC exclusive!
                        ;!0xFC > sPitchSlide: .db;						
                        KC_smpsPitchSlide macro enable
                        	dc.b	$FC,enable
                        	endm
                        	
                        ;!0xFD > sRawFreq: .db;							
                        KC_smpsAlternateSMPS macro flag
                        	dc.b	$FD,flag
                        	endm

                        ;!0xFE > sSpecFM3: .db, .db, .db, .db {			
                        	;%; Broken?
                        ;}
                        KC_smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
                        	dc.b	$FE,ind1,ind2,ind3,ind4
                        	Error Broken?
                        	endm

                        ;!0xFF, 1 > sPlaySound: .db;						
                        KC_smpsPlaySound macro index
                        	dc.b	$FF,$01,index
                        	endm

                        ;!0xFF, 2 > sMusPause: .db;						
                        KC_smpsHaltMusic macro flag
                        	dc.b	$FF,$02,flag
                        	endm

                        ;!@ Modified with SongStart	param
                        ;!0xFF, 3 > sCopyMem: .dw, .db {					
                        	;%; No song should ever use this command. It may good idea to remove it.
                        ;}
                        ;KC_smpsCopyData macro data,len
                        KC_smpsCopyData macro data,len,songstart
                        	Error Coord. Flag to copy data should not be used. Complain to GenesisDoes if any music uses it.
                        	;Error No song should ever use this command. It may be a good idea to remove it.
                        	dc.b	$FF,$03
                        	;dc.w	little_endian(data)
                        	rom_ptr_z80(data+songstart)
                        	dc.b	len
                        	endm

                        ;!0xFF, 5 > sSSGEG: .db, .db, .db, .db {			
                        	;=op2 .a2
                        	;:=2 .a1
                        	;:=1 \op2\
                        ;}
                        KC_smpsSSGEG macro op1,op2,op3,op4
                        	dc.b	$FF,$05,op1,op3,op2,op4
                        	endm
                        	
                        	
                        ;!0xFF, 6 > sVolEnvFM: .db, .db {
                        	;:?0 {
                        		;?volenv;
                        	;}
                        ;}	
                        KC_smpsFMVolEnv macro tone,mask
                        	dc.b	$FF,$06,tone,mask
                        	endm
                        ;==============================================

000000                  	include "KC.asm"
       = 040000         Target	EQU	$40000

       = 000000         FMVoi_SteelGit1	EQU	$00
       = 000001         FMVoi_Bass		EQU	$01
       = 000002         FMVoi_SteelGit2	EQU	$02

       = 000006         PSGVol1	EQU	$06
       = 000009         PSGVol2	EQU	PSGVol1+$03
       = 000000         PSGVoi1	EQU	$00
       = 000005         PSGVoi2	EQU	$05
       = 000047         PWMVol 		EQU	$47
       = 000000         PWMPitch	EQU	$00
000000                  	smpsHeaderVoice	SSBB_WRoom_Patches, Target
                        ;songStart set *
                        	;dc.w	loc-songStart
000000                  	rom_ptr_z80(SSBB_WRoom_Patches+Target)
                        	;dc.w z80_ptr(ptr,addr)
000000 3988             	dc.w  (((((SSBB_WRoom_Patches+Target))<<8)&$FF00)|((((SSBB_WRoom_Patches+Target))>>8)&$7F)|$80)
000002                  	smpsHeaderChan		$06, $03
                        	if 2==2
000002 0603             		dc.b	$06,$03
                        	else
                        	endif	
000004                  	smpsHeaderTempoC	$02, $00
       = 000002         TempDiv set $02
000004 02               	dc.b	$02
000005                  	tempo_conv($00)
                        		if ($00)==0
000005 01               			dc.b	((256 - (((256-1)*256 + (256/2)) / 256)) % 256)
                        		else
                        		endif
000006                  	smpsHeaderFM	SSBB_WRoom_FM1, Target, $00, $0E
                        	;dc.w	loc-songStart
000006                  	rom_ptr_z80(SSBB_WRoom_FM1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000006 4080             	dc.w  (((((SSBB_WRoom_FM1+Target))<<8)&$FF00)|((((SSBB_WRoom_FM1+Target))>>8)&$7F)|$80)
000008 000E             	dc.b	$00,$0E
00000A                  	smpsHeaderFM	SSBB_WRoom_FM2, Target, $00, $13
                        	;dc.w	loc-songStart
00000A                  	rom_ptr_z80(SSBB_WRoom_FM2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000A B980             	dc.w  (((((SSBB_WRoom_FM2+Target))<<8)&$FF00)|((((SSBB_WRoom_FM2+Target))>>8)&$7F)|$80)
00000C 0013             	dc.b	$00,$13
00000E                  	smpsHeaderFM	SSBB_WRoom_FM3, Target, $00, $1A
                        	;dc.w	loc-songStart
00000E                  	rom_ptr_z80(SSBB_WRoom_FM3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00000E 0081             	dc.w  (((((SSBB_WRoom_FM3+Target))<<8)&$FF00)|((((SSBB_WRoom_FM3+Target))>>8)&$7F)|$80)
000010 001A             	dc.b	$00,$1A
000012                  	smpsHeaderFM	SSBB_WRoom_FM4, Target, $00, $1E+$08
                        	;dc.w	loc-songStart
000012                  	rom_ptr_z80(SSBB_WRoom_FM4+Target)
                        	;dc.w z80_ptr(ptr,addr)
000012 2982             	dc.w  (((((SSBB_WRoom_FM4+Target))<<8)&$FF00)|((((SSBB_WRoom_FM4+Target))>>8)&$7F)|$80)
000014 0026             	dc.b	$00,$1E+$08
000016                  	smpsHeaderFM	SSBB_WRoom_FM5, Target, $00, $1E+$08
                        	;dc.w	loc-songStart
000016                  	rom_ptr_z80(SSBB_WRoom_FM5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000016 8E83             	dc.w  (((((SSBB_WRoom_FM5+Target))<<8)&$FF00)|((((SSBB_WRoom_FM5+Target))>>8)&$7F)|$80)
000018 0026             	dc.b	$00,$1E+$08
00001A                  	smpsHeaderFM	SSBB_WRoom_FM6, Target, $00, $1A+$0C
                        	;dc.w	loc-songStart
00001A                  	rom_ptr_z80(SSBB_WRoom_FM6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001A BC84             	dc.w  (((((SSBB_WRoom_FM6+Target))<<8)&$FF00)|((((SSBB_WRoom_FM6+Target))>>8)&$7F)|$80)
00001C 0026             	dc.b	$00,$1A+$0C
00001E                  	smpsHeaderPSG	SSBB_WRoom_PSG1, Target, PSGDelta, PSGVol1, $00, PSGVoi1
                        	;dc.w	loc-songStart
00001E                  	rom_ptr_z80(SSBB_WRoom_PSG1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00001E DD85             	dc.w  (((((SSBB_WRoom_PSG1+Target))<<8)&$FF00)|((((SSBB_WRoom_PSG1+Target))>>8)&$7F)|$80)
000020 0C06             	dc.b	PSGDelta,PSGVol1
                        	;dc.w	voice
000022 0000             	dc.b	$00,PSGVoi1
000024                  	smpsHeaderPSG	SSBB_WRoom_PSG2, Target, PSGDelta, PSGVol2, $00, PSGVoi2
                        	;dc.w	loc-songStart
000024                  	rom_ptr_z80(SSBB_WRoom_PSG2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000024 5086             	dc.w  (((((SSBB_WRoom_PSG2+Target))<<8)&$FF00)|((((SSBB_WRoom_PSG2+Target))>>8)&$7F)|$80)
000026 0C09             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
000028 0005             	dc.b	$00,PSGVoi2
00002A                  	smpsHeaderPSG	SSBB_WRoom_PSG3, Target, PSGDelta, PSGVol2, $00, PSGVoi2
                        	;dc.w	loc-songStart
00002A                  	rom_ptr_z80(SSBB_WRoom_PSG3+Target)
                        	;dc.w z80_ptr(ptr,addr)
00002A 2987             	dc.w  (((((SSBB_WRoom_PSG3+Target))<<8)&$FF00)|((((SSBB_WRoom_PSG3+Target))>>8)&$7F)|$80)
00002C 0C09             	dc.b	PSGDelta,PSGVol2
                        	;dc.w	voice
00002E 0005             	dc.b	$00,PSGVoi2
000030                  	smpsHeaderPWM	SSBB_WRoom_PWM1, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000030                  	rom_ptr_z80(SSBB_WRoom_PWM1+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000030 E387             	dc.w  (((((SSBB_WRoom_PWM1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM1+Target))>>8)&$7F)|$80)
                        	;!@
000032 00               	dc.b	PWMPitch
000033 47               	dc.b	PWMVol
000034                  	smpsHeaderPWM	SSBB_WRoom_PWM2, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000034                  	rom_ptr_z80(SSBB_WRoom_PWM2+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000034 0888             	dc.w  (((((SSBB_WRoom_PWM2+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM2+Target))>>8)&$7F)|$80)
                        	;!@
000036 00               	dc.b	PWMPitch
000037 47               	dc.b	PWMVol
000038                  	smpsHeaderPWM	SSBB_WRoom_PWM3, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
000038                  	rom_ptr_z80(SSBB_WRoom_PWM3+Target)	
                        	;dc.w z80_ptr(ptr,addr)
000038 2488             	dc.w  (((((SSBB_WRoom_PWM3+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM3+Target))>>8)&$7F)|$80)
                        	;!@
00003A 00               	dc.b	PWMPitch
00003B 47               	dc.b	PWMVol
00003C                  	smpsHeaderPWM	SSBB_WRoom_PWM4, Target, PWMPitch, PWMVol
                        	;dc.w	loc-songStart
00003C                  	rom_ptr_z80(SSBB_WRoom_PWM4+Target)	
                        	;dc.w z80_ptr(ptr,addr)
00003C 3888             	dc.w  (((((SSBB_WRoom_PWM4+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM4+Target))>>8)&$7F)|$80)
                        	;!@
00003E 00               	dc.b	PWMPitch
00003F 47               	dc.b	PWMVol

000040                  SSBB_WRoom_FM1:
000040                  	smpsFMvoice		FMVoi_SteelGit1
                        	;if song<>""
                        	if 1==2
                        	else
000040 EF00             		dc.b $EF,FMVoi_SteelGit1
                        	endif
000042                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000042 E0C0             		dc.b $E0,panCenter
                        	endif
                        	;!@ ssMod68k	$00, $01, $01, $04
                        	;!@ sModOn
                        	;!@ sModOn
000044 B00180B20AB006AE 	dc.b	nB3, $01, nRst, nCs4, $0A, nB3, $06, nA3

00004C                  SSBB_WRoom_Loop1:
00004C AD308012A90180AB 	dc.b	nAb3, $30, nRst, $12, nE3, $01, nRst, nFs3
000054 0AAD06AEB0       	dc.b	$0A, nAb3, $06, nA3, nB3
000059                  	smpsLoop		$00, $02, SSBB_WRoom_Loop1, Target
000059 F7               	dc.b	$F7
00005A 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop1<*)
00005C                  		rom_ptr_z80(SSBB_WRoom_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00005C 4C80             	dc.w  (((((SSBB_WRoom_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00005E AD30800CA806A9A9 	dc.b	nAb3, $30, nRst, $0C, nEb3, $06, nE3, nE3
000066 0180AB0AA906A8A6 	dc.b	$01, nRst, nFs3, $0A, nE3, $06, nEb3, nCs3
00006E 0CAB0180AD228018 	dc.b	$0C, nFs3, $01, nRst, nAb3, $22, nRst, $18
000076 B00180B20AB006AE 	dc.b	nB3, $01, nRst, nCs4, $0A, nB3, $06, nA3

00007E                  SSBB_WRoom_Loop2:
00007E AD308012A90180AB 	dc.b	nAb3, $30, nRst, $12, nE3, $01, nRst, nFs3
                        	;!@ dc.b	$0A, nAb3, $06, nA3, nB3
000086 0AAD06AE06B006   	dc.b	$0A, nAb3, $06, nA3, $06, nB3, $06
00008D                  	smpsLoop		$00, $02, SSBB_WRoom_Loop2, Target
00008D F7               	dc.b	$F7
00008E 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop2<*)
000090                  		rom_ptr_z80(SSBB_WRoom_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
000090 7E80             	dc.w  (((((SSBB_WRoom_Loop2+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000092 AD30800CA806A9A9 	dc.b	nAb3, $30, nRst, $0C, nEb3, $06, nE3, nE3
00009A 0180AB0AA906A8A7 	dc.b	$01, nRst, nFs3, $0A, nE3, $06, nEb3, nD3
0000A2 0180A90AA630800C 	dc.b	$01, nRst, nE3, $0A, nCs3, $30, nRst, $0C
0000AA                  	smpsFMvoice		FMVoi_SteelGit1
                        	;if song<>""
                        	if 1==2
                        	else
0000AA EF00             		dc.b $EF,FMVoi_SteelGit1
                        	endif
0000AC B00180B20AB006AE 	dc.b	nB3, $01, nRst, nCs4, $0A, nB3, $06, nA3
0000B4                  	smpsAlterNote	$00
0000B4 E100             	dc.b	$E1,$00
0000B6                  	smpsJump		SSBB_WRoom_Loop1, Target
0000B6 F6               	dc.b	$F6
                        	if (SSBB_WRoom_Loop1<*)
0000B7                  		rom_ptr_z80(SSBB_WRoom_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000B7 4C80             	dc.w  (((((SSBB_WRoom_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0000B9                  SSBB_WRoom_FM2:
0000B9                  	smpsFMvoice		FMVoi_Bass
                        	;if song<>""
                        	if 1==2
                        	else
0000B9 EF01             		dc.b $EF,FMVoi_Bass
                        	endif
0000BB                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0000BB E0C0             		dc.b $E0,panCenter
                        	endif
0000BD 8018             	dc.b	nRst, $18

0000BF                  SSBB_WRoom_Loop3:
0000BF A60CA1A4A5A6A1A4 	dc.b	nCs3, $0C, nAb2, nB2, nC3, nCs3, nAb2, nB2
0000C7 9F               	dc.b	nFs2
0000C8                  	smpsLoop		$00, $02, SSBB_WRoom_Loop3, Target
0000C8 F7               	dc.b	$F7
0000C9 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop3<*)
0000CB                  		rom_ptr_z80(SSBB_WRoom_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000CB BF80             	dc.w  (((((SSBB_WRoom_Loop3+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nCs3, nAb2, nB2, nAb2, nFs2, nFs2, nAb2, nAb2
0000CD A60CA1A4A19F9FA1 	dc.b	nCs3, $0C, nAb2, nB2, nAb2, nFs2, nFs2, nAb2, nAb2
0000D5 A1

0000D6                  SSBB_WRoom_Loop4:
                        	;!@ dc.b	nCs3, nAb2, nB2, nC3, nCs3, nAb2, nB2, nFs2
0000D6 A60CA1A4A5A6A1A4 	dc.b	nCs3, $0C, nAb2, nB2, nC3, nCs3, nAb2, nB2, nFs2
0000DE 9F
0000DF                  	smpsLoop		$00, $02, SSBB_WRoom_Loop4, Target
0000DF F7               	dc.b	$F7
0000E0 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop4<*)
0000E2                  		rom_ptr_z80(SSBB_WRoom_Loop4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000E2 D680             	dc.w  (((((SSBB_WRoom_Loop4+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nCs3, nAb2, nB2, nC3, nCs3, nAb2, nB2, nAb2
0000E4 A60CA1A4A5A6A1A4 	dc.b	nCs3, $0C, nAb2, nB2, nC3, nCs3, nAb2, nB2, nAb2
0000EC A1
0000ED A6A1A4A19F9FA1A1 	dc.b	nCs3, nAb2, nB2, nAb2, nFs2, nFs2, nAb2, nAb2
0000F5 A648             	dc.b	nCs3, $48
0000F7                  	smpsFMvoice		FMVoi_Bass
                        	;if song<>""
                        	if 1==2
                        	else
0000F7 EF01             		dc.b $EF,FMVoi_Bass
                        	endif
0000F9 E718             	dc.b	smpsNoAttack, $18
0000FB                  	smpsAlterNote	$00
0000FB E100             	dc.b	$E1,$00
0000FD                  	smpsJump		SSBB_WRoom_Loop3, Target
0000FD F6               	dc.b	$F6
                        	if (SSBB_WRoom_Loop3<*)
0000FE                  		rom_ptr_z80(SSBB_WRoom_Loop3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0000FE BF80             	dc.w  (((((SSBB_WRoom_Loop3+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000100                  SSBB_WRoom_FM3:
000100                  	smpsPan		panLeft
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
000100 E080             		dc.b $E0,panLeft
                        	endif
000102                  	smpsFMvoice		FMVoi_SteelGit2
                        	;if song<>""
                        	if 1==2
                        	else
000102 EF02             		dc.b $EF,FMVoi_SteelGit2
                        	endif
000104 8018             	dc.b	nRst, $18

000106                  SSBB_WRoom_Jump1:
000106 AD068003B9068003 	dc.b	nAb3, $06, nRst, $03, nAb4, $06, nRst, $03
00010E AD80B9068003AD06 	dc.b	nAb3, nRst, nAb4, $06, nRst, $03, nAb3, $06
000116 8003B980AD068003 	dc.b	nRst, $03, nAb4, nRst, nAb3, $06, nRst, $03
00011E B9068003AD80B706 	dc.b	nAb4, $06, nRst, $03, nAb3, nRst, nFs4, $06
000126 8003AB068003B780 	dc.b	nRst, $03, nFs3, $06, nRst, $03, nFs4, nRst
00012E                  	smpsAlterVol		$FF
00012E E6FF             	dc.b	$E6,$FF
000130 AD068003B9068003 	dc.b	nAb3, $06, nRst, $03, nAb4, $06, nRst, $03
000138 AD80B9068003AD06 	dc.b	nAb3, nRst, nAb4, $06, nRst, $03, nAb3, $06
000140 8003B980AD068003 	dc.b	nRst, $03, nAb4, nRst, nAb3, $06, nRst, $03
000148 B9068003AD80B706 	dc.b	nAb4, $06, nRst, $03, nAb3, nRst, nFs4, $06
000150 8003AB068003B780 	dc.b	nRst, $03, nFs3, $06, nRst, $03, nFs4, nRst
000158 AD068003B9068003 	dc.b	nAb3, $06, nRst, $03, nAb4, $06, nRst, $03
000160 AD80B9068003AD06 	dc.b	nAb3, nRst, nAb4, $06, nRst, $03, nAb3, $06
000168 8003B980AB068003 	dc.b	nRst, $03, nAb4, nRst, nFs3, $06, nRst, $03
000170 B7068003AB       	dc.b	nFs4, $06, nRst, $03, nFs3

000175                  SSBB_WRoom_Loop5:
                        	;!@ dc.b	nRst, nAb4, $06, nRst, $03, nAb3, $06, nRst
000175 8003B9068003AD06 	dc.b	nRst, $03, nAb4, $06, nRst, $03, nAb3, $06, nRst
00017D 80
00017E 03B980AD068003B9 	dc.b	$03, nAb4, nRst, nAb3, $06, nRst, $03, nAb4
                        	;!@ dc.b	$06, nRst, $03, nAb3
000186 068003AD03       	dc.b	$06, nRst, $03, nAb3, $03
00018B                  	smpsLoop		$00, $02, SSBB_WRoom_Loop5, Target
00018B F7               	dc.b	$F7
00018C 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop5<*)
00018E                  		rom_ptr_z80(SSBB_WRoom_Loop5+Target)
                        	;dc.w z80_ptr(ptr,addr)
00018E 7581             	dc.w  (((((SSBB_WRoom_Loop5+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	;!@ dc.b	nRst, nFs4, $06, nRst, $03, nFs3, $06, nRst
000190 8003B7068003AB06 	dc.b	nRst, $03, nFs4, $06, nRst, $03, nFs3, $06, nRst
000198 80
000199 03B780AD068003B9 	dc.b	$03, nFs4, nRst, nAb3, $06, nRst, $03, nAb4
0001A1 068003AD80B90680 	dc.b	$06, nRst, $03, nAb3, nRst, nAb4, $06, nRst
0001A9 03AD068003B980AD 	dc.b	$03, nAb3, $06, nRst, $03, nAb4, nRst, nAb3
0001B1 068003B9068003   	dc.b	$06, nRst, $03, nAb4, $06, nRst, $03
0001B8                  	smpsAlterVol		$FF
0001B8 E6FF             	dc.b	$E6,$FF
0001BA AD80B7068003AB06 	dc.b	nAb3, nRst, nFs4, $06, nRst, $03, nFs3, $06
0001C2 8003B780AD068003 	dc.b	nRst, $03, nFs4, nRst, nAb3, $06, nRst, $03
0001CA B9068003AD80B906 	dc.b	nAb4, $06, nRst, $03, nAb3, nRst, nAb4, $06
0001D2 8003AD068003B980 	dc.b	nRst, $03, nAb3, $06, nRst, $03, nAb4, nRst
0001DA AD068003B9068003 	dc.b	nAb3, $06, nRst, $03, nAb4, $06, nRst, $03
0001E2 AD80B7068003AB06 	dc.b	nAb3, nRst, nFs4, $06, nRst, $03, nFs3, $06
0001EA 8003B780AD068003 	dc.b	nRst, $03, nFs4, nRst, nAb3, $06, nRst, $03
0001F2 B9068003AD80B906 	dc.b	nAb4, $06, nRst, $03, nAb3, nRst, nAb4, $06
0001FA 8003AD068003B980 	dc.b	nRst, $03, nAb3, $06, nRst, $03, nAb4, nRst
000202 AB068003B7068003 	dc.b	nFs3, $06, nRst, $03, nFs4, $06, nRst, $03
00020A AB80             	dc.b	nFs3, nRst
00020C                  	smpsAlterVol		$FE
00020C E6FE             	dc.b	$E6,$FE
00020E B9068003AD068003 	dc.b	nAb4, $06, nRst, $03, nAb3, $06, nRst, $03
000216 B980AD48         	dc.b	nAb4, nRst, nAb3, $48
00021A                  	smpsFMvoice		FMVoi_SteelGit2
                        	;if song<>""
                        	if 1==2
                        	else
00021A EF02             		dc.b $EF,FMVoi_SteelGit2
                        	endif
                        	;!@ ?
00021C E7128004         	dc.b	smpsNoAttack, $12, nRst, $04
000220                  	smpsAlterNote	$00
000220 E100             	dc.b	$E1,$00
                        	;!@ dc.b	$02
000222 8002             	dc.b	nRst, $02
000224                  	smpsAlterVol		$04
000224 E604             	dc.b	$E6,$04
000226                  	smpsJump		SSBB_WRoom_Jump1, Target
000226 F6               	dc.b	$F6
                        	if (SSBB_WRoom_Jump1<*)
000227                  		rom_ptr_z80(SSBB_WRoom_Jump1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000227 0681             	dc.w  (((((SSBB_WRoom_Jump1+Target))<<8)&$FF00)|((((SSBB_WRoom_Jump1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000229                  SSBB_WRoom_FM4:
000229                  	smpsFMvoice		FMVoi_SteelGit2
                        	;if song<>""
                        	if 1==2
                        	else
000229 EF02             		dc.b $EF,FMVoi_SteelGit2
                        	endif
00022B 8018             	dc.b	nRst, $18

00022D                  SSBB_WRoom_Jump2:
00022D 8001B2058004B505 	dc.b	nRst, $01, nCs4, $05, nRst, $04, nE4, $05
000235 8004B2028004B505 	dc.b	nRst, $04, nCs4, $02, nRst, $04, nE4, $05
00023D 8004B2058004B502 	dc.b	nRst, $04, nCs4, $05, nRst, $04, nE4, $02
000245 8004B2058004B505 	dc.b	nRst, $04, nCs4, $05, nRst, $04, nE4, $05
00024D 8004B2028004B405 	dc.b	nRst, $04, nCs4, $02, nRst, $04, nEb4, $05
000255 8004B0058004B402 	dc.b	nRst, $04, nB3, $05, nRst, $04, nEb4, $02
00025D 8004             	dc.b	nRst, $04
00025F                  	smpsAlterVol		$FF
00025F E6FF             	dc.b	$E6,$FF
000261 B2058004B5058004 	dc.b	nCs4, $05, nRst, $04, nE4, $05, nRst, $04
000269 B2028004B5058004 	dc.b	nCs4, $02, nRst, $04, nE4, $05, nRst, $04
000271 B2058004B5028004 	dc.b	nCs4, $05, nRst, $04, nE4, $02, nRst, $04
000279 B2058004B5058004 	dc.b	nCs4, $05, nRst, $04, nE4, $05, nRst, $04
000281 B2028004B4058004 	dc.b	nCs4, $02, nRst, $04, nEb4, $05, nRst, $04
000289 B0058004B4028004 	dc.b	nB3, $05, nRst, $04, nEb4, $02, nRst, $04
000291 B2058004B5058004 	dc.b	nCs4, $05, nRst, $04, nE4, $05, nRst, $04
000299 B2028004B5058004 	dc.b	nCs4, $02, nRst, $04, nE4, $05, nRst, $04
0002A1 B2058004B5028004 	dc.b	nCs4, $05, nRst, $04, nE4, $02, nRst, $04
0002A9 AE058004B2058004 	dc.b	nA3, $05, nRst, $04, nCs4, $05, nRst, $04
0002B1 AE028004B4058004 	dc.b	nA3, $02, nRst, $04, nEb4, $05, nRst, $04
0002B9 B1058004B4028004 	dc.b	nC4, $05, nRst, $04, nEb4, $02, nRst, $04
0002C1 B2058004B5058004 	dc.b	nCs4, $05, nRst, $04, nE4, $05, nRst, $04
0002C9 B2028004B5058004 	dc.b	nCs4, $02, nRst, $04, nE4, $05, nRst, $04
0002D1 B2058004B5028004 	dc.b	nCs4, $05, nRst, $04, nE4, $02, nRst, $04
0002D9 B2058004B5058004 	dc.b	nCs4, $05, nRst, $04, nE4, $05, nRst, $04
0002E1 B2028004B4058004 	dc.b	nCs4, $02, nRst, $04, nEb4, $05, nRst, $04
0002E9 B0058004B4028004 	dc.b	nB3, $05, nRst, $04, nEb4, $02, nRst, $04
0002F1 B2058004B5058004 	dc.b	nCs4, $05, nRst, $04, nE4, $05, nRst, $04
0002F9 B2028004B5058004 	dc.b	nCs4, $02, nRst, $04, nE4, $05, nRst, $04
000301 B2058004B5028004 	dc.b	nCs4, $05, nRst, $04, nE4, $02, nRst, $04
000309 B2058004         	dc.b	nCs4, $05, nRst, $04
00030D                  	smpsAlterVol		$FF
00030D E6FF             	dc.b	$E6,$FF
00030F B5058004B2028004 	dc.b	nE4, $05, nRst, $04, nCs4, $02, nRst, $04
000317 B4058004B0058004 	dc.b	nEb4, $05, nRst, $04, nB3, $05, nRst, $04
00031F B4028004B2058004 	dc.b	nEb4, $02, nRst, $04, nCs4, $05, nRst, $04
000327 B5058004B2028004 	dc.b	nE4, $05, nRst, $04, nCs4, $02, nRst, $04
00032F B5058004B2058004 	dc.b	nE4, $05, nRst, $04, nCs4, $05, nRst, $04
000337 B5028004B2058004 	dc.b	nE4, $02, nRst, $04, nCs4, $05, nRst, $04
00033F B5058004B2028004 	dc.b	nE4, $05, nRst, $04, nCs4, $02, nRst, $04
000347 B4058004B0058004 	dc.b	nEb4, $05, nRst, $04, nB3, $05, nRst, $04
00034F B4028004B2058004 	dc.b	nEb4, $02, nRst, $04, nCs4, $05, nRst, $04
000357 B5058004B2028004 	dc.b	nE4, $05, nRst, $04, nCs4, $02, nRst, $04
00035F B5058004B2058004 	dc.b	nE4, $05, nRst, $04, nCs4, $05, nRst, $04
000367 B5028004AE058004 	dc.b	nE4, $02, nRst, $04, nA3, $05, nRst, $04
00036F B2058004AE028004 	dc.b	nCs4, $05, nRst, $04, nA3, $02, nRst, $04
000377                  	smpsAlterVol		$FE
000377 E6FE             	dc.b	$E6,$FE
000379 B4058004B1058004 	dc.b	nEb4, $05, nRst, $04, nC4, $05, nRst, $04
000381 B4028005B25A8004 	dc.b	nEb4, $02, nRst, $05, nCs4, $5A, nRst, $04
000389                  	smpsAlterVol		$04
000389 E604             	dc.b	$E6,$04
00038B                  	smpsJump		SSBB_WRoom_Jump2, Target
00038B F6               	dc.b	$F6
                        	if (SSBB_WRoom_Jump2<*)
00038C                  		rom_ptr_z80(SSBB_WRoom_Jump2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00038C 2D82             	dc.w  (((((SSBB_WRoom_Jump2+Target))<<8)&$FF00)|((((SSBB_WRoom_Jump2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

00038E                  SSBB_WRoom_FM5:
00038E                  	smpsFMvoice		FMVoi_SteelGit2
                        	;if song<>""
                        	if 1==2
                        	else
00038E EF02             		dc.b $EF,FMVoi_SteelGit2
                        	endif
000390 8018             	dc.b	nRst, $18

000392                  SSBB_WRoom_Jump3:
000392 8001B5068003B206 	dc.b	nRst, $01, nE4, $06, nRst, $03, nCs4, $06
00039A 8003B580B2068003 	dc.b	nRst, $03, nE4, nRst, nCs4, $06, nRst, $03
0003A2 B5068003B280B506 	dc.b	nE4, $06, nRst, $03, nCs4, nRst, nE4, $06
0003AA 8003B2068003B580 	dc.b	nRst, $03, nCs4, $06, nRst, $03, nE4, nRst
0003B2 B0068003B4068003 	dc.b	nB3, $06, nRst, $03, nEb4, $06, nRst, $03
0003BA B080             	dc.b	nB3, nRst
0003BC                  	smpsAlterVol		$FF
0003BC E6FF             	dc.b	$E6,$FF
0003BE B5068003B2068003 	dc.b	nE4, $06, nRst, $03, nCs4, $06, nRst, $03
0003C6 B580B2068003B506 	dc.b	nE4, nRst, nCs4, $06, nRst, $03, nE4, $06
0003CE 8003B280B5068003 	dc.b	nRst, $03, nCs4, nRst, nE4, $06, nRst, $03
0003D6 B2068003B580B006 	dc.b	nCs4, $06, nRst, $03, nE4, nRst, nB3, $06
0003DE 8003B4068003B080 	dc.b	nRst, $03, nEb4, $06, nRst, $03, nB3, nRst
0003E6 B5068003B2068003 	dc.b	nE4, $06, nRst, $03, nCs4, $06, nRst, $03
0003EE B580B2068003B506 	dc.b	nE4, nRst, nCs4, $06, nRst, $03, nE4, $06
0003F6 8003B280B2068003 	dc.b	nRst, $03, nCs4, nRst, nCs4, $06, nRst, $03
0003FE AE068003B280B106 	dc.b	nA3, $06, nRst, $03, nCs4, nRst, nC4, $06
000406 8003B4068003B180 	dc.b	nRst, $03, nEb4, $06, nRst, $03, nC4, nRst
00040E B5068003B2068003 	dc.b	nE4, $06, nRst, $03, nCs4, $06, nRst, $03
000416 B580B2068003B506 	dc.b	nE4, nRst, nCs4, $06, nRst, $03, nE4, $06
00041E 8003B280B5068003 	dc.b	nRst, $03, nCs4, nRst, nE4, $06, nRst, $03
000426 B2068003B580B006 	dc.b	nCs4, $06, nRst, $03, nE4, nRst, nB3, $06
00042E 8003B4068003B080 	dc.b	nRst, $03, nEb4, $06, nRst, $03, nB3, nRst
000436 B5068003B2068003 	dc.b	nE4, $06, nRst, $03, nCs4, $06, nRst, $03
00043E B580B2068003B506 	dc.b	nE4, nRst, nCs4, $06, nRst, $03, nE4, $06
000446 8003B280B5068003 	dc.b	nRst, $03, nCs4, nRst, nE4, $06, nRst, $03
00044E                  	smpsAlterVol		$FF
00044E E6FF             	dc.b	$E6,$FF
000450 B2068003B580B006 	dc.b	nCs4, $06, nRst, $03, nE4, nRst, nB3, $06
000458 8003B4068003B080 	dc.b	nRst, $03, nEb4, $06, nRst, $03, nB3, nRst
000460 B5068003B2068003 	dc.b	nE4, $06, nRst, $03, nCs4, $06, nRst, $03
000468 B580B2068003B506 	dc.b	nE4, nRst, nCs4, $06, nRst, $03, nE4, $06
000470 8003B280B5068003 	dc.b	nRst, $03, nCs4, nRst, nE4, $06, nRst, $03
000478 B2068003B580B006 	dc.b	nCs4, $06, nRst, $03, nE4, nRst, nB3, $06
000480 8003B4068003B080 	dc.b	nRst, $03, nEb4, $06, nRst, $03, nB3, nRst
000488 B5068003B2068003 	dc.b	nE4, $06, nRst, $03, nCs4, $06, nRst, $03
000490 B580B2068003B506 	dc.b	nE4, nRst, nCs4, $06, nRst, $03, nE4, $06
000498 8003B280B2068003 	dc.b	nRst, $03, nCs4, nRst, nCs4, $06, nRst, $03
0004A0 AE068003B280     	dc.b	nA3, $06, nRst, $03, nCs4, nRst
0004A6                  	smpsAlterVol		$FE
0004A6 E6FE             	dc.b	$E6,$FE
0004A8 B1068003B4068003 	dc.b	nC4, $06, nRst, $03, nEb4, $06, nRst, $03
0004B0 B18006B55A8002   	dc.b	nC4, nRst, $06, nE4, $5A, nRst, $02
0004B7                  	smpsAlterVol		$04
0004B7 E604             	dc.b	$E6,$04
0004B9                  	smpsJump		SSBB_WRoom_Jump3, Target
0004B9 F6               	dc.b	$F6
                        	if (SSBB_WRoom_Jump3<*)
0004BA                  		rom_ptr_z80(SSBB_WRoom_Jump3+Target)
                        	;dc.w z80_ptr(ptr,addr)
0004BA 9283             	dc.w  (((((SSBB_WRoom_Jump3+Target))<<8)&$FF00)|((((SSBB_WRoom_Jump3+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0004BC                  SSBB_WRoom_FM6:
0004BC                  	smpsPan		panRight
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0004BC E040             		dc.b $E0,panRight
                        	endif
0004BE                  	smpsFMvoice		FMVoi_SteelGit2
                        	;if song<>""
                        	if 1==2
                        	else
0004BE EF02             		dc.b $EF,FMVoi_SteelGit2
                        	endif
0004C0 8018             	dc.b	nRst, $18

0004C2                  SSBB_WRoom_Jump4:
0004C2 8002B9068003AD06 	dc.b	nRst, $02, nAb4, $06, nRst, $03, nAb3, $06
0004CA 8003B980AD068003 	dc.b	nRst, $03, nAb4, nRst, nAb3, $06, nRst, $03
0004D2 B9068003AD80B906 	dc.b	nAb4, $06, nRst, $03, nAb3, nRst, nAb4, $06
0004DA 8003AD068003B980 	dc.b	nRst, $03, nAb3, $06, nRst, $03, nAb4, nRst
0004E2 AB068003B7068003 	dc.b	nFs3, $06, nRst, $03, nFs4, $06, nRst, $03
0004EA AB80             	dc.b	nFs3, nRst
0004EC                  	smpsAlterVol		$FF
0004EC E6FF             	dc.b	$E6,$FF
0004EE B9068003AD068003 	dc.b	nAb4, $06, nRst, $03, nAb3, $06, nRst, $03
0004F6 B980AD068003B906 	dc.b	nAb4, nRst, nAb3, $06, nRst, $03, nAb4, $06
0004FE 8003AD80B9068003 	dc.b	nRst, $03, nAb3, nRst, nAb4, $06, nRst, $03
000506 AD068003B980AB06 	dc.b	nAb3, $06, nRst, $03, nAb4, nRst, nFs3, $06
00050E 8003B7068003AB80 	dc.b	nRst, $03, nFs4, $06, nRst, $03, nFs3, nRst
000516 B9068003AD068003 	dc.b	nAb4, $06, nRst, $03, nAb3, $06, nRst, $03
00051E B980AD068003B906 	dc.b	nAb4, nRst, nAb3, $06, nRst, $03, nAb4, $06
000526 8003AD80B7068003 	dc.b	nRst, $03, nAb3, nRst, nFs4, $06, nRst, $03
00052E AB068003B7       	dc.b	nFs3, $06, nRst, $03, nFs4

000533                  SSBB_WRoom_Loop6:
000533 80AD068003B90680 	dc.b	nRst, nAb3, $06, nRst, $03, nAb4, $06, nRst
00053B 03AD80B9068003AD 	dc.b	$03, nAb3, nRst, nAb4, $06, nRst, $03, nAb3
000543 068003B9         	dc.b	$06, nRst, $03, nAb4
000547                  	smpsLoop		$00, $02, SSBB_WRoom_Loop6, Target
000547 F7               	dc.b	$F7
000548 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop6<*)
00054A                  		rom_ptr_z80(SSBB_WRoom_Loop6+Target)
                        	;dc.w z80_ptr(ptr,addr)
00054A 3385             	dc.w  (((((SSBB_WRoom_Loop6+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00054C 80AB068003B70680 	dc.b	nRst, nFs3, $06, nRst, $03, nFs4, $06, nRst
000554 03AB80B9068003AD 	dc.b	$03, nFs3, nRst, nAb4, $06, nRst, $03, nAb3
00055C 068003B980AD0680 	dc.b	$06, nRst, $03, nAb4, nRst, nAb3, $06, nRst
000564 03B9068003AD80B9 	dc.b	$03, nAb4, $06, nRst, $03, nAb3, nRst, nAb4
00056C 068003           	dc.b	$06, nRst, $03
00056F                  	smpsAlterVol		$FF
00056F E6FF             	dc.b	$E6,$FF
000571 AD068003B980AB06 	dc.b	nAb3, $06, nRst, $03, nAb4, nRst, nFs3, $06
000579 8003B7068003AB80 	dc.b	nRst, $03, nFs4, $06, nRst, $03, nFs3, nRst
000581 B9068003AD068003 	dc.b	nAb4, $06, nRst, $03, nAb3, $06, nRst, $03
000589 B980AD068003B906 	dc.b	nAb4, nRst, nAb3, $06, nRst, $03, nAb4, $06
000591 8003AD80B9068003 	dc.b	nRst, $03, nAb3, nRst, nAb4, $06, nRst, $03
000599 AD068003B980AB06 	dc.b	nAb3, $06, nRst, $03, nAb4, nRst, nFs3, $06
0005A1 8003B7068003AB80 	dc.b	nRst, $03, nFs4, $06, nRst, $03, nFs3, nRst
0005A9 B9068003AD068003 	dc.b	nAb4, $06, nRst, $03, nAb3, $06, nRst, $03
0005B1 B980AD068003B906 	dc.b	nAb4, nRst, nAb3, $06, nRst, $03, nAb4, $06
0005B9 8003AD80B7068003 	dc.b	nRst, $03, nAb3, nRst, nFs4, $06, nRst, $03
0005C1 AB068003B780     	dc.b	nFs3, $06, nRst, $03, nFs4, nRst
0005C7                  	smpsAlterVol		$FE
0005C7 E6FE             	dc.b	$E6,$FE
0005C9 AD068003B9068003 	dc.b	nAb3, $06, nRst, $03, nAb4, $06, nRst, $03
0005D1 AD8007B9588002   	dc.b	nAb3, nRst, $07, nAb4, $58, nRst, $02
0005D8                  	smpsAlterVol		$04
0005D8 E604             	dc.b	$E6,$04
0005DA                  	smpsJump		SSBB_WRoom_Jump4, Target
0005DA F6               	dc.b	$F6
                        	if (SSBB_WRoom_Jump4<*)
0005DB                  		rom_ptr_z80(SSBB_WRoom_Jump4+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005DB C284             	dc.w  (((((SSBB_WRoom_Jump4+Target))<<8)&$FF00)|((((SSBB_WRoom_Jump4+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

0005DD                  SSBB_WRoom_PSG1:
                        	;!@ dc.b	nB0, $01, nRst, nCs1, $0A, nB0, $06, nA0
0005DD 8C0180018E0A8C06 	dc.b	nB0, $01, nRst, $01, nCs1, $0A, nB0, $06, nA0
0005E5 8A

0005E6                  SSBB_WRoom_Loop7:
                        	;!@ dc.b	nAb0, $30, nRst, $12, nE0, $01, nRst, nFs0
0005E6 8930801285018001 	dc.b	nAb0, $30, nRst, $12, nE0, $01, nRst, $01, nFs0
0005EE 87
0005EF 0A89068A8C       	dc.b	$0A, nAb0, $06, nA0, nB0
0005F4                  	smpsLoop		$00, $02, SSBB_WRoom_Loop7, Target
0005F4 F7               	dc.b	$F7
0005F5 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop7<*)
0005F7                  		rom_ptr_z80(SSBB_WRoom_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
0005F7 E685             	dc.w  (((((SSBB_WRoom_Loop7+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0005F9 8930800C84068585 	dc.b	nAb0, $30, nRst, $0C, nEb0, $06, nE0, nE0
000601 0180870A85068482 	dc.b	$01, nRst, nFs0, $0A, nE0, $06, nEb0, nCs0
000609 0C87018089228018 	dc.b	$0C, nFs0, $01, nRst, nAb0, $22, nRst, $18
000611 8C01808E0A8C068A 	dc.b	nB0, $01, nRst, nCs1, $0A, nB0, $06, nA0

000619                  SSBB_WRoom_Loo$8:
000619 8930801285018087 	dc.b	nAb0, $30, nRst, $12, nE0, $01, nRst, nFs0
000621 0A89068A8C       	dc.b	$0A, nAb0, $06, nA0, nB0
000626                  	smpsLoop		$00, $02, SSBB_WRoom_Loo$8, Target
000626 F7               	dc.b	$F7
000627 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loo$8<*)
000629                  		rom_ptr_z80(SSBB_WRoom_Loo$8+Target)
                        	;dc.w z80_ptr(ptr,addr)
000629 1986             	dc.w  (((((SSBB_WRoom_Loo$8+Target))<<8)&$FF00)|((((SSBB_WRoom_Loo$8+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00062B 8930800C84068585 	dc.b	nAb0, $30, nRst, $0C, nEb0, $06, nE0, nE0
000633 0180870A85068483 	dc.b	$01, nRst, nFs0, $0A, nE0, $06, nEb0, nD0
00063B 0180850A8230800C 	dc.b	$01, nRst, nE0, $0A, nCs0, $30, nRst, $0C
000643 8C01808E0A8C068A 	dc.b	nB0, $01, nRst, nCs1, $0A, nB0, $06, nA0
00064B                  	smpsAlterNote	$00
00064B E100             	dc.b	$E1,$00
00064D                  	smpsJump		SSBB_WRoom_Loop7, Target
00064D F6               	dc.b	$F6
                        	if (SSBB_WRoom_Loop7<*)
00064E                  		rom_ptr_z80(SSBB_WRoom_Loop7+Target)
                        	;dc.w z80_ptr(ptr,addr)
00064E E685             	dc.w  (((((SSBB_WRoom_Loop7+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop7+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000650                  SSBB_WRoom_PSG2:
000650 8018             	dc.b	nRst, $18

000652                  SSBB_WRoom_Jump5:
000652 8001             	dc.b	nRst, $01

000654                  SSBB_WRoom_Loo$9:
000654 8E05800491058004 	dc.b	nCs1, $05, nRst, $04, nE1, $05, nRst, $04
00065C 8E02800491058004 	dc.b	nCs1, $02, nRst, $04, nE1, $05, nRst, $04
000664 8E05800491028004 	dc.b	nCs1, $05, nRst, $04, nE1, $02, nRst, $04
00066C 8E05800491058004 	dc.b	nCs1, $05, nRst, $04, nE1, $05, nRst, $04
000674 8E02800490058004 	dc.b	nCs1, $02, nRst, $04, nEb1, $05, nRst, $04
00067C 8C05800490028004 	dc.b	nB0, $05, nRst, $04, nEb1, $02, nRst, $04
000684                  	smpsLoop		$00, $02, SSBB_WRoom_Loo$9, Target
000684 F7               	dc.b	$F7
000685 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loo$9<*)
000687                  		rom_ptr_z80(SSBB_WRoom_Loo$9+Target)
                        	;dc.w z80_ptr(ptr,addr)
000687 5486             	dc.w  (((((SSBB_WRoom_Loo$9+Target))<<8)&$FF00)|((((SSBB_WRoom_Loo$9+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000689 8E05800491058004 	dc.b	nCs1, $05, nRst, $04, nE1, $05, nRst, $04
000691 8E02800491058004 	dc.b	nCs1, $02, nRst, $04, nE1, $05, nRst, $04
000699 8E05800491028004 	dc.b	nCs1, $05, nRst, $04, nE1, $02, nRst, $04
0006A1 8A0580048E058004 	dc.b	nA0, $05, nRst, $04, nCs1, $05, nRst, $04
0006A9 8A02800490058004 	dc.b	nA0, $02, nRst, $04, nEb1, $05, nRst, $04
0006B1 8D05             	dc.b	nC1, $05

0006B3                  SSBB_WRoom_Loop10:
0006B3 8004900280048E05 	dc.b	nRst, $04, nEb1, $02, nRst, $04, nCs1, $05
0006BB 8004910580048E02 	dc.b	nRst, $04, nE1, $05, nRst, $04, nCs1, $02
0006C3 8004910580048E05 	dc.b	nRst, $04, nE1, $05, nRst, $04, nCs1, $05
0006CB 8004910280048E05 	dc.b	nRst, $04, nE1, $02, nRst, $04, nCs1, $05
0006D3 8004910580048E02 	dc.b	nRst, $04, nE1, $05, nRst, $04, nCs1, $02
0006DB 8004900580048C05 	dc.b	nRst, $04, nEb1, $05, nRst, $04, nB0, $05
0006E3                  	smpsLoop		$00, $03, SSBB_WRoom_Loop10, Target
0006E3 F7               	dc.b	$F7
0006E4 0003             	dc.b	$00,$03
                        	if (SSBB_WRoom_Loop10<*)
0006E6                  		rom_ptr_z80(SSBB_WRoom_Loop10+Target)
                        	;dc.w z80_ptr(ptr,addr)
0006E6 B386             	dc.w  (((((SSBB_WRoom_Loop10+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop10+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0006E8 8004900280048E05 	dc.b	nRst, $04, nEb1, $02, nRst, $04, nCs1, $05
0006F0 8004910580048E02 	dc.b	nRst, $04, nE1, $05, nRst, $04, nCs1, $02
0006F8 8004910580048E05 	dc.b	nRst, $04, nE1, $05, nRst, $04, nCs1, $05
000700 8004910280048A05 	dc.b	nRst, $04, nE1, $02, nRst, $04, nA0, $05
000708 80048E0580048A02 	dc.b	nRst, $04, nCs1, $05, nRst, $04, nA0, $02
000710 8004             	dc.b	nRst, $04
000712                  	smpsSetVol	$FF
000712 ECFF             	dc.b	$EC,$FF
000714 900580048D058004 	dc.b	nEb1, $05, nRst, $04, nC1, $05, nRst, $04
00071C 900280058E5A8004 	dc.b	nEb1, $02, nRst, $05, nCs1, $5A, nRst, $04
000724                  	smpsSetVol	$01
000724 EC01             	dc.b	$EC,$01
000726                  	smpsJump		SSBB_WRoom_Jump5, Target
000726 F6               	dc.b	$F6
                        	if (SSBB_WRoom_Jump5<*)
000727                  		rom_ptr_z80(SSBB_WRoom_Jump5+Target)
                        	;dc.w z80_ptr(ptr,addr)
000727 5286             	dc.w  (((((SSBB_WRoom_Jump5+Target))<<8)&$FF00)|((((SSBB_WRoom_Jump5+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000729                  SSBB_WRoom_PSG3:
000729 8018             	dc.b	nRst, $18

00072B                  SSBB_WRoom_Jump6:
00072B 8001             	dc.b	nRst, $01

00072D                  SSBB_WRoom_Loop11:
00072D 910680038E068003 	dc.b	nE1, $06, nRst, $03, nCs1, $06, nRst, $03
000735 91808E0680039106 	dc.b	nE1, nRst, nCs1, $06, nRst, $03, nE1, $06
00073D 80038E8091068003 	dc.b	nRst, $03, nCs1, nRst, nE1, $06, nRst, $03
000745 8E06800391808C06 	dc.b	nCs1, $06, nRst, $03, nE1, nRst, nB0, $06
00074D 8003900680038C80 	dc.b	nRst, $03, nEb1, $06, nRst, $03, nB0, nRst
000755                  	smpsLoop		$00, $02, SSBB_WRoom_Loop11, Target
000755 F7               	dc.b	$F7
000756 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_Loop11<*)
000758                  		rom_ptr_z80(SSBB_WRoom_Loop11+Target)
                        	;dc.w z80_ptr(ptr,addr)
000758 2D87             	dc.w  (((((SSBB_WRoom_Loop11+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop11+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
00075A 910680038E068003 	dc.b	nE1, $06, nRst, $03, nCs1, $06, nRst, $03
000762 91808E0680039106 	dc.b	nE1, nRst, nCs1, $06, nRst, $03, nE1, $06
00076A 80038E808E068003 	dc.b	nRst, $03, nCs1, nRst, nCs1, $06, nRst, $03
000772 8A0680038E808D06 	dc.b	nA0, $06, nRst, $03, nCs1, nRst, nC1, $06
00077A 8003900680038D   	dc.b	nRst, $03, nEb1, $06, nRst, $03, nC1

000781                  SSBB_WRoom_Loop12:
000781 80910680038E0680 	dc.b	nRst, nE1, $06, nRst, $03, nCs1, $06, nRst
000789 0391808E06800391 	dc.b	$03, nE1, nRst, nCs1, $06, nRst, $03, nE1
000791 0680038E80910680 	dc.b	$06, nRst, $03, nCs1, nRst, nE1, $06, nRst
000799 038E06800391808C 	dc.b	$03, nCs1, $06, nRst, $03, nE1, nRst, nB0
0007A1 068003900680038C 	dc.b	$06, nRst, $03, nEb1, $06, nRst, $03, nB0
0007A9                  	smpsLoop		$00, $03, SSBB_WRoom_Loop12, Target
0007A9 F7               	dc.b	$F7
0007AA 0003             	dc.b	$00,$03
                        	if (SSBB_WRoom_Loop12<*)
0007AC                  		rom_ptr_z80(SSBB_WRoom_Loop12+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007AC 8187             	dc.w  (((((SSBB_WRoom_Loop12+Target))<<8)&$FF00)|((((SSBB_WRoom_Loop12+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007AE 80910680038E0680 	dc.b	nRst, nE1, $06, nRst, $03, nCs1, $06, nRst
0007B6 0391808E06800391 	dc.b	$03, nE1, nRst, nCs1, $06, nRst, $03, nE1
0007BE 0680038E808E0680 	dc.b	$06, nRst, $03, nCs1, nRst, nCs1, $06, nRst
0007C6 038A0680038E80   	dc.b	$03, nA0, $06, nRst, $03, nCs1, nRst
0007CD                  	smpsSetVol	$FF
0007CD ECFF             	dc.b	$EC,$FF
0007CF 8D06800390068003 	dc.b	nC1, $06, nRst, $03, nEb1, $06, nRst, $03
0007D7 8D8006915A8002   	dc.b	nC1, nRst, $06, nE1, $5A, nRst, $02
0007DE                  	smpsSetVol	$01
0007DE EC01             	dc.b	$EC,$01
0007E0                  	smpsJump		SSBB_WRoom_Jump6, Target
0007E0 F6               	dc.b	$F6
                        	if (SSBB_WRoom_Jump6<*)
0007E1                  		rom_ptr_z80(SSBB_WRoom_Jump6+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007E1 2B87             	dc.w  (((((SSBB_WRoom_Jump6+Target))<<8)&$FF00)|((((SSBB_WRoom_Jump6+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
0007E3                  SSBB_WRoom_PWM1:
0007E3                  	smpsPan		panCenter
       = 000000         panNone set $00
       = 000040         panRight set $40
       = 000080         panLeft set $80
       = 0000C0         panCentre set $C0
       = 0000C0         panCenter set $C0 ; silly Americans :U
                        	;dc.b $E0,direction+amsfms
                        	;endm		
                        	if 1==2
                        	else
0007E3 E0C0             		dc.b $E0,panCenter
                        	endif
0007E5 8018             	dc.b	nRst, $18

0007E7                  SSBB_WRoom_PWM1_Loop1:
0007E7 9E098E038C068E   	dc.b	pFingSnapLo, $09, pFingSnapHi, $03, pASnare, $06, pFingSnapHi
0007EE                  	smpsLoop		$00, $1C, SSBB_WRoom_PWM1_Loop1, Target
0007EE F7               	dc.b	$F7
0007EF 001C             	dc.b	$00,$1C
                        	if (SSBB_WRoom_PWM1_Loop1<*)
0007F1                  		rom_ptr_z80(SSBB_WRoom_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
0007F1 E787             	dc.w  (((((SSBB_WRoom_PWM1_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
0007F3 9E098E9E0C8E060C 	dc.b	pFingSnapLo, $09, pFingSnapHi, pFingSnapLo, $0C, pFingSnapHi, $06, $0C
0007FB 9E098E9E0C8E0603 	dc.b	pFingSnapLo, $09, pFingSnapHi, pFingSnapLo, $0C, pFingSnapHi, $06, $03
000803 8009             	dc.b	nRst, $09
000805                  	smpsJump		SSBB_WRoom_PWM1_Loop1, Target
000805 F6               	dc.b	$F6
                        	if (SSBB_WRoom_PWM1_Loop1<*)
000806                  		rom_ptr_z80(SSBB_WRoom_PWM1_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000806 E787             	dc.w  (((((SSBB_WRoom_PWM1_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM1_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000808                  SSBB_WRoom_PWM2:
000808 8018             	dc.b	nRst, $18

00080A                  SSBB_WRoom_PWM2_Loop1:
00080A 9309929206       	dc.b	pBongoLo, $09, pBongoHi, pBongoHi, $06
00080F                  	smpsLoop		$00, $1C, SSBB_WRoom_PWM2_Loop1, Target
00080F F7               	dc.b	$F7
000810 001C             	dc.b	$00,$1C
                        	if (SSBB_WRoom_PWM2_Loop1<*)
000812                  		rom_ptr_z80(SSBB_WRoom_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000812 0A88             	dc.w  (((((SSBB_WRoom_PWM2_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000814                  SSBB_WRoom_PWM2_Loop2:
000814 930992930C92060C 	dc.b	pBongoLo, $09, pBongoHi, pBongoLo, $0C, pBongoHi, $06, $0C
00081C                  	smpsLoop		$00, $02, SSBB_WRoom_PWM2_Loop2, Target
00081C F7               	dc.b	$F7
00081D 0002             	dc.b	$00,$02
                        	if (SSBB_WRoom_PWM2_Loop2<*)
00081F                  		rom_ptr_z80(SSBB_WRoom_PWM2_Loop2+Target)
                        	;dc.w z80_ptr(ptr,addr)
00081F 1488             	dc.w  (((((SSBB_WRoom_PWM2_Loop2+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM2_Loop2+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000821                  	smpsJump		SSBB_WRoom_PWM2_Loop1, Target
000821 F6               	dc.b	$F6
                        	if (SSBB_WRoom_PWM2_Loop1<*)
000822                  		rom_ptr_z80(SSBB_WRoom_PWM2_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000822 0A88             	dc.w  (((((SSBB_WRoom_PWM2_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM2_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
                        	
000824                  SSBB_WRoom_PWM3:
000824 8018             	dc.b	nRst, $18

000826                  SSBB_WRoom_PWM3_Loop1:
000826 8109989806       	dc.b	pEKick, $09, pClosedHH, pClosedHH, $06
00082B                  	smpsLoop		$00, $1B, SSBB_WRoom_PWM3_Loop1, Target
00082B F7               	dc.b	$F7
00082C 001B             	dc.b	$00,$1B
                        	if (SSBB_WRoom_PWM3_Loop1<*)
00082E                  		rom_ptr_z80(SSBB_WRoom_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
00082E 2688             	dc.w  (((((SSBB_WRoom_PWM3_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1
000830 8109989866       	dc.b	pEKick, $09, pClosedHH, pClosedHH, $66
000835                  	smpsJump		SSBB_WRoom_PWM3_Loop1, Target
000835 F6               	dc.b	$F6
                        	if (SSBB_WRoom_PWM3_Loop1<*)
000836                  		rom_ptr_z80(SSBB_WRoom_PWM3_Loop1+Target)
                        	;dc.w z80_ptr(ptr,addr)
000836 2688             	dc.w  (((((SSBB_WRoom_PWM3_Loop1+Target))<<8)&$FF00)|((((SSBB_WRoom_PWM3_Loop1+Target))>>8)&$7F)|$80)
                        	else
                        	endif
                        	;dc.w	loc-*-1

000838                  SSBB_WRoom_PWM4:
000838                  	smpsStop
000838 F2               	dc.b	$F2

000839                  SSBB_WRoom_Patches:	
                        	;Accoustic Guitar (Steel) 1
000839 2B               	dc.b	$2B
00083A 36030001DFDCDDDF 	dc.b	$36, $03, $00, $01,	$DF, $DC, $DD, $DF
000842 0609020006040104 	dc.b	$06, $09, $02, $00,	$06, $04, $01, $04
00084A 2333130519202008 	dc.b	$23, $33, $13, $05,	$19, $20, $20, $08
                        	
                        	;Accoustic Bass
000852 06               	dc.b	$06
000853 000001029F1F9F1F 	dc.b	$00, $00, $01, $02,	$9F, $1F, $9F, $1F
00085B 040A11140E010E0E 	dc.b	$04, $0A, $11, $14,	$0E, $01, $0E, $0E
000863 F848F8F8170A0A0A 	dc.b	$F8, $48, $F8, $F8,	$17, $0A, $0A, $0A
                        	
                        	;Accoustic Guitar (Steel) 2
00086B 2B               	dc.b	$2B
00086C 36030001DFDCDDDF 	dc.b	$36, $03, $00, $01,	$DF, $DC, $DD, $DF
000874 0609020006040104 	dc.b	$06, $09, $02, $00,	$06, $04, $01, $04
00087C 233313051920201A 	dc.b	$23, $33, $13, $05,	$19, $20, $20, $08+$12

00000 Total Error(s)

DFLOORTIMPANI      0000008B E  DHITIMPANI         00000088 E  DKICK              00000081 E
DLOWTIMPANI        0000008A E  DMIDTIMPANI        00000089 E  DSNARE             00000082 E
DTIMPANI           00000083 E  DVLOWTIMPANI       0000008B E  FMVOI_BASS         00000001 E
FMVOI_STEELGIT1    00000000 E  FMVOI_STEELGIT2    00000002 E  NA0                0000008A E
NA1                00000096 E  NA2                000000A2 E  NA3                000000AE E
NA4                000000BA E  NA5                000000C6 E  NA6                000000D2 E
NA7                000000DE E  NAB0               00000089 E  NAB1               00000095 E
NAB2               000000A1 E  NAB3               000000AD E  NAB4               000000B9 E
NAB5               000000C5 E  NAB6               000000D1 E  NAB7               000000DD E
NB0                0000008C E  NB1                00000098 E  NB2                000000A4 E
NB3                000000B0 E  NB4                000000BC E  NB5                000000C8 E
NB6                000000D4 E  NBB0               0000008B E  NBB1               00000097 E
NBB2               000000A3 E  NBB3               000000AF E  NBB4               000000BB E
NBB5               000000C7 E  NBB6               000000D3 E  NBB7               000000DF E
NC0                00000081 E  NC1                0000008D E  NC2                00000099 E
NC3                000000A5 E  NC4                000000B1 E  NC5                000000BD E
NC6                000000C9 E  NC7                000000D5 E  NCS0               00000082 E
NCS1               0000008E E  NCS2               0000009A E  NCS3               000000A6 E
NCS4               000000B2 E  NCS5               000000BE E  NCS6               000000CA E
NCS7               000000D6 E  ND0                00000083 E  ND1                0000008F E
ND2                0000009B E  ND3                000000A7 E  ND4                000000B3 E
ND5                000000BF E  ND6                000000CB E  ND7                000000D7 E
NE0                00000085 E  NE1                00000091 E  NE2                0000009D E
NE3                000000A9 E  NE4                000000B5 E  NE5                000000C1 E
NE6                000000CD E  NE7                000000D9 E  NEB0               00000084 E
NEB1               00000090 E  NEB2               0000009C E  NEB3               000000A8 E
NEB4               000000B4 E  NEB5               000000C0 E  NEB6               000000CC E
NEB7               000000D8 E  NF0                00000086 E  NF1                00000092 E
NF2                0000009E E  NF3                000000AA E  NF4                000000B6 E
NF5                000000C2 E  NF6                000000CE E  NF7                000000DA E
NFS0               00000087 E  NFS1               00000093 E  NFS2               0000009F E
NFS3               000000AB E  NFS4               000000B7 E  NFS5               000000C3 E
NFS6               000000CF E  NFS7               000000DB E  NG0                00000088 E
NG1                00000094 E  NG2                000000A0 E  NG3                000000AC E
NG4                000000B8 E  NG5                000000C4 E  NG6                000000D0 E
NG7                000000DC E  NRST               00000080 E  PAKICK             0000008B E
PANCENTER          000000C0 S  PANCENTRE          000000C0 S  PANLEFT            00000080 S
PANNONE            00000000 S  PANRIGHT           00000040 S  PASNARE            0000008C E
PBELL              0000008D E  PBONGOHI           00000092 E  PBONGOLO           00000093 E
PCLAP              0000008A E  PCLICKHI           00000090 E  PCLICKLO           00000091 E
PCLOSEDHH          00000098 E  PCOWBELL           0000008F E  PCRASHCYMB         00000089 E
PCRA_D81           00000081 E  PCRA_D82           0000008C E  PCRA_D83           00000085 E
PCRA_D84           00000086 E  PCRA_D85           00000087 E  PEHIHAT            00000088 E
PEKICK             00000081 E  PESNARE            00000082 E  PFINGSNAP          0000008E E
PFINGSNAPHI        0000008E E  PFINGSNAPLO        0000009E E  PNEPDADA           0000009D E
POPENHH            00000099 E  PRIDEBELL          00000084 E  PSEGA              00000097 E
PSGDELTA           0000000C E  PSGVOI1            00000000 E  PSGVOI2            00000005 E
PSGVOL1            00000006 E  PSGVOL2            00000009 E  PSILENCE           00000096 E
PSPLASHCYMB        00000083 E  PTIMPANIHI         00000094 E  PTIMPANILO         00000095 E
PTOMHI             00000085 E  PTOMLOW            00000087 E  PTOMLOWER          0000009A E
PTOMLOWERER        0000009B E  PTOMLOWEREST       0000009C E  PTOMMID            00000086 E
PWMPITCH           00000000 E  PWMVOL             00000047 E  SMPSED             000000ED E
SMPSEE             000000EE E  SMPSF9             000000F9 E  SMPSMODOFF         000000F4 E
SMPSMODON          000000F1 E  SMPSNOATTACK       000000E7 E  SMPSPITCH00        00000000 E
SMPSPITCH01HI      0000000C E  SMPSPITCH01LO      000000F4 E  SMPSPITCH02HI      00000018 E
SMPSPITCH02LO      000000E8 E  SMPSPITCH03HI      00000024 E  SMPSPITCH03LO      000000DC E
SMPSPITCH04HI      00000030 E  SMPSPITCH04LO      000000D0 E  SMPSPITCH05HI      0000003C E
SMPSPITCH05LO      000000C4 E  SMPSPITCH06HI      00000048 E  SMPSPITCH06LO      000000B8 E
SMPSPITCH07HI      00000054 E  SMPSPITCH07LO      000000AC E  SMPSPITCH08HI      00000060 E
SMPSPITCH08LO      000000A0 E  SMPSPITCH09HI      0000006C E  SMPSPITCH09LO      00000094 E
SMPSPITCH10HI      00000078 E  SMPSPITCH10LO      00000088 E  SSBB_WROOM_FM1     00000040
SSBB_WROOM_FM2     000000B9    SSBB_WROOM_FM3     00000100    SSBB_WROOM_FM4     00000229
SSBB_WROOM_FM5     0000038E    SSBB_WROOM_FM6     000004BC    SSBB_WROOM_JUMP1   00000106
SSBB_WROOM_JUMP2   0000022D    SSBB_WROOM_JUMP3   00000392    SSBB_WROOM_JUMP4   000004C2
SSBB_WROOM_JUMP5   00000652    SSBB_WROOM_JUMP6   0000072B    SSBB_WROOM_LOO$8   00000619
SSBB_WROOM_LOO$9   00000654    SSBB_WROOM_LOOP1   0000004C    SSBB_WROOM_LOOP10  000006B3
SSBB_WROOM_LOOP11  0000072D    SSBB_WROOM_LOOP12  00000781    SSBB_WROOM_LOOP2   0000007E
SSBB_WROOM_LOOP3   000000BF    SSBB_WROOM_LOOP4   000000D6    SSBB_WROOM_LOOP5   00000175
SSBB_WROOM_LOOP6   00000533    SSBB_WROOM_LOOP7   000005E6    SSBB_WROOM_PATCHES 00000839
SSBB_WROOM_PSG1    000005DD    SSBB_WROOM_PSG2    00000650    SSBB_WROOM_PSG3    00000729
SSBB_WROOM_PWM1    000007E3    SSBB_WROOM_PWM1_LOOP1                         000007E7
SSBB_WROOM_PWM2    00000808    SSBB_WROOM_PWM2_LOOP1                         0000080A
SSBB_WROOM_PWM2_LOOP2                         00000814    SSBB_WROOM_PWM3    00000824
SSBB_WROOM_PWM3_LOOP1                         00000826    SSBB_WROOM_PWM4    00000838
TARGET             00040000 E  TEMPDIV            00000002 S
